[
  {
    "id" : "fc7df564-d40a-47ff-9822-7bf364f78e1a",
    "prId" : 1299,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "211f9335-5f54-4aeb-a8d4-34479420bc56",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Is there any reason to pass `ourRuntimeType` here anymore?\n",
        "createdAt" : "2016-01-23T23:02:38Z",
        "updatedAt" : "2016-01-24T02:23:05Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "8753c5d1-9c23-483d-9a07-54769c0c0277",
        "parentId" : "211f9335-5f54-4aeb-a8d4-34479420bc56",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "There's exactly one custom or this entire notification system, `InkResponse`'s `State`, which does:\n\n``` dart\n  void dependenciesChanged(Type affectedWidgetType) {\n    if (affectedWidgetType == Theme && _lastHighlight != null)\n      _lastHighlight.color = Theme.of(context).highlightColor;\n  }\n```\n",
        "createdAt" : "2016-01-24T02:20:25Z",
        "updatedAt" : "2016-01-24T02:23:05Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "64734c28-2c5e-4855-8495-00a494ff317c",
        "parentId" : "211f9335-5f54-4aeb-a8d4-34479420bc56",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I've left this in. We can look at this API in a separate pass.\n",
        "createdAt" : "2016-01-24T02:31:09Z",
        "updatedAt" : "2016-01-24T02:31:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "db6a5dcd-4944-4f5f-bd17-90b9775ea9b0",
        "parentId" : "211f9335-5f54-4aeb-a8d4-34479420bc56",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "kk\n",
        "createdAt" : "2016-01-24T02:58:22Z",
        "updatedAt" : "2016-01-24T02:58:22Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "0903cb5fefab2241242e7a4eaaf74ff4fa51bc44",
    "line" : 211,
    "diffHunk" : "@@ -1,1 +1407,1411 @@    final Type ourRuntimeType = widget.runtimeType;\n    for (Element dependant in _dependants) {\n      dependant.dependenciesChanged(ourRuntimeType);\n      assert(() {\n        // check that it really is our descendant"
  },
  {
    "id" : "14b2c247-50ef-454d-9747-bf006d613f44",
    "prId" : 1400,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91457fd5-05cb-43ce-bd29-f74f1ddab10b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "the comment above is wrong (in particular, it explicitly says it does the work backwards)\n",
        "createdAt" : "2016-01-27T00:30:03Z",
        "updatedAt" : "2016-01-27T04:02:51Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e015a51f-4510-4197-accf-06b4233c7d3c",
        "parentId" : "91457fd5-05cb-43ce-bd29-f74f1ddab10b",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Fixed.\n",
        "createdAt" : "2016-01-27T04:08:34Z",
        "updatedAt" : "2016-01-27T04:08:34Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "05839e51cad9204f607ed7852beb0d3d86da1f55",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1522,1526 @@    //     * Sync keyed items with the source if it exists, else with null.\n    // 5. Walk the bottom of the list again, syncing the nodes.\n    // 6. Sync null with any items in the list of keys that are still\n    //    mounted.\n"
  },
  {
    "id" : "9c09e6b5-7983-4f4a-9e5f-d9bc46fb1bb5",
    "prId" : 2508,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff8a1921-54ab-4815-863c-90bd7192d1d0",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This function has other customers; I guess they need to handle detachChild also in due course.\n",
        "createdAt" : "2016-03-08T23:39:48Z",
        "updatedAt" : "2016-03-08T23:39:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "cb24e2bb-e9f7-4d76-abbd-1503ec72f437",
        "parentId" : "ff8a1921-54ab-4815-863c-90bd7192d1d0",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, the changes here shouldn't be harmful to them, but they don't all support detachChild yet.\n",
        "createdAt" : "2016-03-08T23:40:32Z",
        "updatedAt" : "2016-03-08T23:40:32Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8483fb366d88c3734a51aedc9639830d724a783",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +1603,1607 @@\n    // Update the top of the list.\n    while ((oldChildrenTop <= oldChildrenBottom) && (newChildrenTop <= newChildrenBottom)) {\n      Element oldChild = oldChildren[oldChildrenTop];\n      Widget newWidget = newWidgets[newChildrenTop];"
  },
  {
    "id" : "e59ddc58-da13-4cc8-aa2e-48bf6286d658",
    "prId" : 3010,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af6898c8-02b1-4840-89ca-3fdcfb7d71c7",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Do we want to assert something about the state of the _owner field if the parent is null?  For example, perhaps its supposed to always be null.  Maybe we should assert that at the entry to this function?\n",
        "createdAt" : "2016-03-30T20:23:40Z",
        "updatedAt" : "2016-03-31T18:02:09Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "2bb61874-bef6-45c2-bba1-37c59682f914",
        "parentId" : "af6898c8-02b1-4840-89ca-3fdcfb7d71c7",
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "I was trying to avoid forcing an ordering to lines 168 and 169 in widgets/binding.dart.\n\nNow that I take a second look at this, though, I'm wondering if it would be easier just to pass the owner in the constructor. In that case, the assertion would be that if the parent is null, the owner field should already be non-null.\n",
        "createdAt" : "2016-03-31T17:32:14Z",
        "updatedAt" : "2016-03-31T18:02:09Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      },
      {
        "id" : "ed6b68f6-0922-4d4c-bf1d-a48ec8750f48",
        "parentId" : "af6898c8-02b1-4840-89ca-3fdcfb7d71c7",
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "Ah, I remember now, the constructor is called in a method whose signature would be disruptive to change.\n",
        "createdAt" : "2016-03-31T17:37:10Z",
        "updatedAt" : "2016-03-31T18:02:09Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dfd5d402119d113fb9e306402b5f28aa5a9abb1",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +907,911 @@    _active = true;\n    if (parent != null) // Only assign ownership if the parent is non-null\n      _owner = parent.owner;\n    if (widget.key is GlobalKey) {\n      final GlobalKey key = widget.key;"
  },
  {
    "id" : "f9b78f31-e230-4f67-bb45-92302b85252e",
    "prId" : 3010,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c352a0a7-6227-4942-94af-8db754d82237",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "trivial nit: we normally put the property below the getter to avoid the dartdoc being sandwiched between the two.\n",
        "createdAt" : "2016-03-31T19:45:10Z",
        "updatedAt" : "2016-03-31T19:45:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dfd5d402119d113fb9e306402b5f28aa5a9abb1",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +808,812 @@  Widget _widget;\n\n  BuildOwner _owner;\n  /// The owner for this node (null if unattached).\n  BuildOwner get owner => _owner;"
  },
  {
    "id" : "e210fc57-2b14-4af8-9767-16dc53070662",
    "prId" : 3397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "572f03cb-0e35-45ac-9569-1b1353de356d",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "If you make it a `///` dartdoc you can make `[ComponentElement._builder]` linkable.\n",
        "createdAt" : "2016-04-19T01:40:34Z",
        "updatedAt" : "2016-04-19T17:38:20Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "f566ea48-e0e1-43ef-83c6-53b47f6961dd",
        "parentId" : "572f03cb-0e35-45ac-9569-1b1353de356d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "_builder and _buildNothing are both privates so neither appears in the dartdocs.\n",
        "createdAt" : "2016-04-19T02:42:00Z",
        "updatedAt" : "2016-04-19T17:38:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2fd28289-8f89-4e8e-bd83-8fe8436d910b",
        "parentId" : "572f03cb-0e35-45ac-9569-1b1353de356d",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "True, but IDEs still decorate them even if they don't make it into the public docs, e.g. in Atom you should still be able to Ctrl + Click on the link.\n",
        "createdAt" : "2016-04-19T03:58:37Z",
        "updatedAt" : "2016-04-19T17:38:20Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "f93b1fd8-ae82-4f83-b7b9-dbdc33d8d6d3",
        "parentId" : "572f03cb-0e35-45ac-9569-1b1353de356d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "IDEs can do whatever they want with any comment, with or without markup. I'm reluctant to use `///` style for privates because it gives a confusing mixed message in the code about whether something is considered part of the public interface or not.\n",
        "createdAt" : "2016-04-19T17:21:43Z",
        "updatedAt" : "2016-04-19T17:38:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f93945575fcc09ac8f2666ce5179bc323ae47cbc",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +1400,1404 @@typedef Widget IndexedBuilder(BuildContext context, int index);\n\n// See ComponentElement._builder.\nWidget _buildNothing(BuildContext context) => null;\n"
  },
  {
    "id" : "72f0705e-4a18-4913-ba74-86d8ebe30239",
    "prId" : 3546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62e59e81-9e87-4998-ba7f-cbe37fc24972",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we should probably check at some point whether the compiler is clever enough to elide the exception handling for finally blocks that end up empty\n",
        "createdAt" : "2016-04-25T23:50:17Z",
        "updatedAt" : "2016-04-25T23:50:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "845c6aa0754d9932e63ee0203e22b0f535a7f4d5",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +726,730 @@    } finally {\n      assert(() {\n        _debugStateLockLevel -= 1;\n        if (building) {\n          assert(_debugBuilding);"
  },
  {
    "id" : "2a2b430d-da45-4b43-87a7-e08b589cd0ba",
    "prId" : 4758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07077e95-7949-41ea-bea5-f7988d43a9a8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "that won't work, what if the subclass isn't in this file? (see travis, for instance...)\n",
        "createdAt" : "2016-06-25T17:43:49Z",
        "updatedAt" : "2016-06-25T19:06:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "056f979b-f072-4bdb-9390-5828cfd7d0e5",
        "parentId" : "07077e95-7949-41ea-bea5-f7988d43a9a8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "oh, i see, this forces people to LocalKey or GlobalKey. I guess I can live with that.\n",
        "createdAt" : "2016-06-25T17:44:34Z",
        "updatedAt" : "2016-06-25T19:06:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c224c03a-5791-4230-907e-b66a1697eafd",
        "parentId" : "07077e95-7949-41ea-bea5-f7988d43a9a8",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, I think it's better for StockRowPartKey to extend LocalKey.\n",
        "createdAt" : "2016-06-25T17:49:09Z",
        "updatedAt" : "2016-06-25T19:06:30Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfda4286486e2b3bea8bd393e74e1154babf3271",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +37,41 @@  /// Useful so that subclasses can call us, because the Key() factory\n  /// constructor shadows the implicit constructor.\n  const Key._();\n}\n"
  },
  {
    "id" : "06605aac-2d87-4000-97cb-b147d65d8331",
    "prId" : 4758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c32d653-ae2f-44ee-a8fb-425e58510844",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this would be a good place to define state. i forget what i had but my definition is in my talk if you have the slides for that\n",
        "createdAt" : "2016-06-25T17:57:53Z",
        "updatedAt" : "2016-06-25T19:06:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfda4286486e2b3bea8bd393e74e1154babf3271",
    "line" : 397,
    "diffHunk" : "@@ -1,1 +472,476 @@\n/// A widget that has mutable state.\n///\n/// State is information (1) that can be read synchronously when the widget is\n/// built and (2) for which we will be notified when it changes."
  },
  {
    "id" : "8558f0d5-6a85-4d58-8022-ae05afc2be96",
    "prId" : 4762,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3aeb3e9-5751-451a-a8fd-5fa0e7b4f0b6",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Is that true? Does any widget do network traffic on dependenciesChanged?\n",
        "createdAt" : "2016-06-26T21:54:16Z",
        "updatedAt" : "2016-06-26T22:18:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "72737ce9-1a4b-405b-9668-0ba5aeaf58b8",
        "parentId" : "e3aeb3e9-5751-451a-a8fd-5fa0e7b4f0b6",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "The only client I found outside of framework.dart was _ImageState, which uses this callback to call _resolveImage, which I think can trigger network traffic.  At least, that's the example I was trying to base this on.\n",
        "createdAt" : "2016-06-26T22:18:22Z",
        "updatedAt" : "2016-06-26T22:18:33Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "1e87e3f5-4749-467c-9804-fe6d0c4a9658",
        "parentId" : "e3aeb3e9-5751-451a-a8fd-5fa0e7b4f0b6",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ah, yeah. i wonder if that one works right if you move it in the tree... do we call dependenciesChanged in that case?\n",
        "createdAt" : "2016-06-26T22:22:41Z",
        "updatedAt" : "2016-06-26T22:22:41Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebfdc709b05985c385bb46116b5493661575e75d",
    "line" : 396,
    "diffHunk" : "@@ -1,1 +884,888 @@  /// this method because they need to do some expensive work (e.g., network\n  /// fetches) when their dependencies change, and that work would be too\n  /// expensive to do for every build.\n  @mustCallSuper\n  void dependenciesChanged() { }"
  },
  {
    "id" : "15dd08fb-b2a0-4705-b501-188aef355291",
    "prId" : 5558,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19b79423-8a1f-4f77-8556-71a748d0526b",
        "parentId" : null,
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "Is it better to await the writeAsString as well, so that I/O errors can be caught?\n",
        "createdAt" : "2016-08-23T20:41:35Z",
        "updatedAt" : "2016-08-23T20:41:35Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      },
      {
        "id" : "a41b8ab4-57db-4d9b-b863-7672c00e7670",
        "parentId" : "19b79423-8a1f-4f77-8556-71a748d0526b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "That's what that code does.\n",
        "createdAt" : "2016-08-23T23:03:34Z",
        "updatedAt" : "2016-08-23T23:03:34Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e500a7d147e6cdf11e7f9ffe2bad84e96f32a1c3",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +788,792 @@  ///   });\n  ///   final String dir = await PathProvider.getApplicationDocumentsDirectory();\n  ///   await new File('$dir/counter.txt').writeAsString('$_counter');\n  ///   return null;\n  /// }"
  },
  {
    "id" : "ab531522-de13-43e6-baa6-d9e4794072b1",
    "prId" : 5614,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "787d3663-fdc1-4452-9c0f-25ab0ce06e33",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This looks exactly right to me.\n",
        "createdAt" : "2016-08-26T18:22:00Z",
        "updatedAt" : "2016-08-26T19:29:15Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "5deae6b2e1ddb08e1db77603ce7f0f51240c6b04",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1291,1295 @@          }\n        }\n        assert(!_dirtyElements.any((BuildableElement element) => element._active && element.dirty));\n      }, building: true);\n    } finally {"
  },
  {
    "id" : "7bc8beb9-0b8a-4f4b-ab69-309ef14917bd",
    "prId" : 5624,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75dd287b-51e0-4ddf-ae46-4bfe3e027d37",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I'm really pleased to see this get documented!\n",
        "createdAt" : "2016-08-26T23:02:12Z",
        "updatedAt" : "2016-08-29T17:32:02Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "0de4096c-e5a6-4dfb-9da5-ecc68f8a09bc",
        "parentId" : "75dd287b-51e0-4ddf-ae46-4bfe3e027d37",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you're welcome!\n",
        "createdAt" : "2016-08-27T00:50:23Z",
        "updatedAt" : "2016-08-29T17:32:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "79e11e2a8e9790e2ef2da640a10b742e39c0d2fe",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1186,1190 @@typedef void ElementVisitor(Element element);\n\n/// A handle to the location of a widget in the widget tree.\n///\n/// This class presents a set of methods that can be used from"
  },
  {
    "id" : "64c5cd0e-7403-44f1-95b5-cadfff23d60f",
    "prId" : 5624,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af8ee4ef-5fac-4dd5-9351-1aa5edd9eb9e",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "first ancestor?\n",
        "createdAt" : "2016-08-26T23:09:12Z",
        "updatedAt" : "2016-08-29T17:32:02Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "bc71f7c5-d1bd-45a2-9983-857e49316737",
        "parentId" : "af8ee4ef-5fac-4dd5-9351-1aa5edd9eb9e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "pretty sure it's the first descendant.\n",
        "createdAt" : "2016-08-29T16:30:21Z",
        "updatedAt" : "2016-08-29T17:32:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "79e11e2a8e9790e2ef2da640a10b742e39c0d2fe",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +1255,1259 @@  /// The current [RenderObject] for the widget. If the widget is a\n  /// [RenderObjectWidget], this is the render object that the widget created\n  /// for itself. Otherwise, it is the render object of the first descendant\n  /// [RenderObjectWidget].\n  ///"
  },
  {
    "id" : "d90acd3f-9ae1-41c4-ace4-c3b2c51b023d",
    "prId" : 5624,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f10ff87b-8bb6-4357-996f-f578aa157ebe",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The references to phases that follow are a little confusing since we haven't explained what all the phases are, how they're orchestrated, how a widget figures out what phase it's in, etc.\n",
        "createdAt" : "2016-08-26T23:13:18Z",
        "updatedAt" : "2016-08-29T17:32:02Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "b2cec7f7-d8d6-4fc9-9fea-b1d6ace54486",
        "parentId" : "f10ff87b-8bb6-4357-996f-f578aa157ebe",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I've added a bunch of docs about this in the binding and pointed this to them.\n",
        "createdAt" : "2016-08-29T17:15:39Z",
        "updatedAt" : "2016-08-29T17:32:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "79e11e2a8e9790e2ef2da640a10b742e39c0d2fe",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +1258,1262 @@  /// [RenderObjectWidget].\n  ///\n  /// This method will only return a valid result after the build phase is\n  /// complete. It is therefore not valid to call this from the [build] function\n  /// itself. It should only be called from interaction event handlers (e.g."
  },
  {
    "id" : "828e610b-1d8c-46ae-8218-b728609c0d6c",
    "prId" : 5752,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87bc2209-a816-4315-b1e4-d42405842e8f",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I probably would have written this iteratively rather than recursively but whatever.\n",
        "createdAt" : "2016-09-07T04:01:04Z",
        "updatedAt" : "2016-09-07T21:27:29Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "5cdee8a2-6e7f-4c2c-8161-bf531d540575",
        "parentId" : "87bc2209-a816-4315-b1e4-d42405842e8f",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This is actually a hook for a patch @HansMuller is working on where on some classes he's going to override this method.\n",
        "createdAt" : "2016-09-07T20:34:36Z",
        "updatedAt" : "2016-09-07T21:27:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "431e764e8b9179bf4e542b1c59ca4b07090e6e9b",
    "line" : 190,
    "diffHunk" : "@@ -1,1 +1648,1652 @@      return _parent._debugIsInScope(target);\n    return false;\n  }\n\n  RenderObject get renderObject {"
  },
  {
    "id" : "035862c1-2339-4166-9bdb-670aa6f09159",
    "prId" : 5944,
    "prUrl" : "https://github.com/flutter/flutter/pull/5944#pullrequestreview-666991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "086575e2-f6c2-45dd-990c-d6155307b5af",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The, rather than A?\n",
        "createdAt" : "2016-09-20T00:59:00Z",
        "updatedAt" : "2016-09-20T04:16:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "eaa711bc-0e9b-4306-b187-014bd6bcea4d",
        "parentId" : "086575e2-f6c2-45dd-990c-d6155307b5af",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "The widget can have many render objects associated with it because it can be inserted into the tree in many locations.\n",
        "createdAt" : "2016-09-20T01:12:52Z",
        "updatedAt" : "2016-09-20T04:16:33Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "893a854a411321311c44f93677ba01ae0ed3d0c3",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1122,1126 @@  void updateRenderObject(BuildContext context, RenderObject renderObject) { }\n\n  /// A render object previously associated with this widget has been removed\n  /// from the tree. The given [RenderObject] will be of the same type as\n  /// returned by this object's [createRenderObject]."
  },
  {
    "id" : "373dc0ed-62d6-4301-8b61-8f9e0d6c6d4e",
    "prId" : 6339,
    "prUrl" : "https://github.com/flutter/flutter/pull/6339#pullrequestreview-4745308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee85bb4e-fd56-460d-a75d-e44800de09f7",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "shouldn't `StatefulWidget` here be `${widget.runtimeType}`?\n\nAlso the first line here should end with a period.\n",
        "createdAt" : "2016-10-18T19:42:54Z",
        "updatedAt" : "2016-10-18T19:42:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "78096204048564333bfa7a2d5431e75c5b457c2d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2732,2736 @@      if (!_state._debugTypesAreRight(widget)) {\n        throw new FlutterError(\n          'StatefulWidget.createState must return a subtype of State<${widget.runtimeType}>\\n'\n          'The createState function for ${widget.runtimeType} returned a state '\n          'of type ${_state.runtimeType}, which is not a subtype of '"
  },
  {
    "id" : "b6b83d2b-fdf6-49c5-885a-0b159b771879",
    "prId" : 6355,
    "prUrl" : "https://github.com/flutter/flutter/pull/6355#pullrequestreview-4746238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92a19523-45de-4799-85a7-aeefae746712",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "missing `)` \n",
        "createdAt" : "2016-10-18T19:48:13Z",
        "updatedAt" : "2016-10-18T19:48:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "68cbd43ed0281a5c61bf26f2c467159bcb4e75a4",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1367,1371 @@  /// This getter will only return a valid result if [findRenderObject] actually\n  /// returns a [RenderBox]. If [findRenderObject] returns a render object that\n  /// is not a subtype of [RenderBox] (e.g., [RenderView], this getter will\n  /// throw an exception in checked mode and will return null in release mode.\n  ///"
  },
  {
    "id" : "f25deda0-64c1-4d5e-88ac-addf8cd6a21c",
    "prId" : 6355,
    "prUrl" : "https://github.com/flutter/flutter/pull/6355#pullrequestreview-4746405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecc80cde-8b98-4c79-a91d-4c09decd4b95",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "youet->yet\n",
        "createdAt" : "2016-10-18T19:49:11Z",
        "updatedAt" : "2016-10-18T19:49:11Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "68cbd43ed0281a5c61bf26f2c467159bcb4e75a4",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +2324,2328 @@          'The size of this render object has not yet been determined because '\n          'the framework is still in the process of building widgets, which '\n          'means the render tree for this frame has not youet been determined. '\n          'The size getter should only be called from paint callbacks or '\n          'interaction event handlers (e.g. gesture callbacks).\\n'"
  },
  {
    "id" : "5c8b3ae7-2176-481f-bf76-235fc77a7137",
    "prId" : 6355,
    "prUrl" : "https://github.com/flutter/flutter/pull/6355#pullrequestreview-4746518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54776eed-d94e-4c74-a5bf-0607b73273b7",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "associated\n",
        "createdAt" : "2016-10-18T19:49:45Z",
        "updatedAt" : "2016-10-18T19:49:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a27cf8ba-6572-4c32-816f-571638137faa",
        "parentId" : "54776eed-d94e-4c74-a5bf-0607b73273b7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "twice\n",
        "createdAt" : "2016-10-18T19:49:49Z",
        "updatedAt" : "2016-10-18T19:49:49Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "68cbd43ed0281a5c61bf26f2c467159bcb4e75a4",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +2346,2350 @@          'Cannot get size without a render object.\\n'\n          'In order for an element to have a valid size, the element must have '\n          'an assoicated render object. This element does not have an assoicated '\n          'render object, which typically means that the size getter was called '\n          'too early in the pipeline (e.g., during the build phase) before the '"
  },
  {
    "id" : "a892a93d-4f79-44b9-b656-347ebde6fa3d",
    "prId" : 6355,
    "prUrl" : "https://github.com/flutter/flutter/pull/6355#pullrequestreview-4746650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dd25908-d489-4982-9f03-2d29cdb4f952",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "pahse -> phase\n",
        "createdAt" : "2016-10-18T19:50:34Z",
        "updatedAt" : "2016-10-18T19:50:34Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "68cbd43ed0281a5c61bf26f2c467159bcb4e75a4",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +2372,2376 @@          'this render object has not yet been through layout, which typically '\n          'means that the size getter was called too early in the pipeline '\n          '(e.g., during the build pahse) before the framework has determined '\n          'the size and position of the render objects during layout.\\n'\n          'The size getter was called for the following element:\\n'"
  },
  {
    "id" : "7514373b-f612-4641-af70-a4de08c6f8c6",
    "prId" : 7719,
    "prUrl" : "https://github.com/flutter/flutter/pull/7719#pullrequestreview-18983360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e364d8f1-20f3-4ad0-a51b-fdea1142e250",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "const ?",
        "createdAt" : "2017-01-28T23:39:41Z",
        "updatedAt" : "2017-01-28T23:39:41Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "fa254d71-e228-4f41-994f-a52229a119bd",
        "parentId" : "e364d8f1-20f3-4ad0-a51b-fdea1142e250",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "You can't use const, because the T isn't const.",
        "createdAt" : "2017-01-28T23:40:55Z",
        "updatedAt" : "2017-01-28T23:40:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1cf25865-b9f7-4629-8633-1a6dde3033e6",
        "parentId" : "e364d8f1-20f3-4ad0-a51b-fdea1142e250",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Makes sense.",
        "createdAt" : "2017-01-28T23:44:11Z",
        "updatedAt" : "2017-01-28T23:44:11Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "99567e14ac101c980b574e2d78ecf989639ac5ca",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +82,86 @@    // The crazy on the next line is a workaround for\n    // https://github.com/dart-lang/sdk/issues/28548\n    if (runtimeType == new _TypeLiteral<ValueKey<T>>().type)\n      return '[$valueString]';\n    return '[$T $valueString]';"
  },
  {
    "id" : "c1c01a34-c1cb-483a-b2ad-4dfeb1d418e4",
    "prId" : 8593,
    "prUrl" : "https://github.com/flutter/flutter/pull/8593#pullrequestreview-25387135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e1efef3-a005-49bd-bcf6-2effd8dcc55a",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Illfated is one word.  If there was something smaller than a nit, this would be it.",
        "createdAt" : "2017-03-06T22:45:08Z",
        "updatedAt" : "2017-03-07T23:37:37Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "da611dbe-3ae2-451a-bf9a-e13d6b70fe58",
        "parentId" : "6e1efef3-a005-49bd-bcf6-2effd8dcc55a",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I take it back [I looked it up]. It's ill-fated. My mistake.",
        "createdAt" : "2017-03-06T22:49:18Z",
        "updatedAt" : "2017-03-07T23:37:37Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "858dae2beaee15d2b46250980ae52da62193f54b",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +180,184 @@        assert(_registry[this].widget != null);\n        assert(element.widget.runtimeType != _registry[this].widget.runtimeType);\n        _debugIllFatedElements.add(_registry[this]);\n      }\n      return true;"
  },
  {
    "id" : "8d199aeb-9078-41f0-9d88-bf163b515ce5",
    "prId" : 8593,
    "prUrl" : "https://github.com/flutter/flutter/pull/8593#pullrequestreview-25388068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b871328-54e3-4d0e-8704-73f8f709f261",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I haven't sorted out all of the logic here.",
        "createdAt" : "2017-03-06T22:53:52Z",
        "updatedAt" : "2017-03-07T23:37:37Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "858dae2beaee15d2b46250980ae52da62193f54b",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +1940,1944 @@        _inactiveElements._unmountAll(); // this unregisters the GlobalKeys\n      });\n      assert(() {\n        try {\n          GlobalKey._debugVerifyIllFatedPopulation();"
  },
  {
    "id" : "9eda749d-9b04-4f71-8e18-81b1ba58a098",
    "prId" : 10282,
    "prUrl" : "https://github.com/flutter/flutter/pull/10282#pullrequestreview-39918562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b79a4e0-0473-45e2-bbce-f09e3f3f1259",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Does `[@required]` linkify correctly?",
        "createdAt" : "2017-05-24T02:30:57Z",
        "updatedAt" : "2017-05-24T02:30:57Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "496afb14-b007-4c0e-9d27-1d57b37b3bff",
        "parentId" : "2b79a4e0-0473-45e2-bbce-f09e3f3f1259",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "No idea, I plan to check and fix it if not.",
        "createdAt" : "2017-05-24T03:09:08Z",
        "updatedAt" : "2017-05-24T03:09:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7084a105b8b6ee2ae226ba0f4ba17cd9e97304ae",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +538,542 @@///\n/// By convention, widget constructors only use named arguments. Named arguments\n/// can be marked as required using [@required]. Also by convention, the first\n/// argument is [key], and the last argument is `child`, `children`, or the\n/// equivalent."
  },
  {
    "id" : "e48fe37f-827e-47c5-b801-389b1d3ad47a",
    "prId" : 10619,
    "prUrl" : "https://github.com/flutter/flutter/pull/10619#pullrequestreview-43312357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c801d7d-0bce-4f8c-a0a3-5f9ae53ceaec",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Why two blocks?",
        "createdAt" : "2017-06-11T06:01:01Z",
        "updatedAt" : "2017-06-11T06:28:56Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "2d857ce8-0159-4266-a8f9-0647c45db289",
        "parentId" : "2c801d7d-0bce-4f8c-a0a3-5f9ae53ceaec",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The second block is classes that I'm hoping to eventually turn into actual sample code somewhere.",
        "createdAt" : "2017-06-11T06:25:53Z",
        "updatedAt" : "2017-06-11T06:28:56Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "71ff3cfd3c85601996638a2721a4a394d443d882",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +22,26 @@// void setState(VoidCallback fn) { }\n\n// Examples can assume:\n// abstract class RenderFrogJar extends RenderObject { }\n// abstract class FrogJar extends RenderObjectWidget { }"
  },
  {
    "id" : "fa3ff951-407f-4b80-88fb-cab9818bb180",
    "prId" : 11473,
    "prUrl" : "https://github.com/flutter/flutter/pull/11473#pullrequestreview-53685339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9471d304-372a-450f-8276-21e585e560ad",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "[no action needed]: are the changes in this file related?",
        "createdAt" : "2017-08-02T00:38:54Z",
        "updatedAt" : "2017-08-07T20:53:53Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "ef955972-dd75-47dd-af79-5dd0d6fd188d",
        "parentId" : "9471d304-372a-450f-8276-21e585e560ad",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Only insofar as I made these changes in order to debug problems while doing the rest of it. :-)",
        "createdAt" : "2017-08-02T02:28:10Z",
        "updatedAt" : "2017-08-07T20:53:53Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a530b511376ce857a58cf38d19ab6c8389f9129",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3114,3118 @@          'The size getter was called for the following element:\\n'\n          '  $this\\n'\n          'The associated render sliver was:\\n'\n          '  ${renderObject.toStringShallow(\"\\n  \")}'\n        );"
  },
  {
    "id" : "c1331f18-9783-48e0-81c5-0bb005a5e77f",
    "prId" : 12213,
    "prUrl" : "https://github.com/flutter/flutter/pull/12213#pullrequestreview-64703659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db422893-60f9-47ba-b033-3cb406a9c62d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "these calls should be wrapped in asserts so that they don't cost anything in release builds",
        "createdAt" : "2017-09-22T21:27:19Z",
        "updatedAt" : "2017-09-22T21:27:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "70aa6fd9e4ab0c1a492eb8c0b9d50cc921dc57f8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3288,3292 @@  void didChangeDependencies() {\n    assert(_active); // otherwise markNeedsBuild is a no-op\n    _debugCheckOwnerBuildTargetExists('didChangeDependencies');\n    markNeedsBuild();\n  }"
  },
  {
    "id" : "0a2883bd-b569-4b41-9761-f03636a5fbd1",
    "prId" : 12213,
    "prUrl" : "https://github.com/flutter/flutter/pull/12213#pullrequestreview-64703736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88e8b18b-9f0c-4496-9e73-af5d1f4a5539",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "generally we don't include blank lines in the error messages; we rely on newlines alone being paragraph breaks.",
        "createdAt" : "2017-09-22T21:27:44Z",
        "updatedAt" : "2017-09-22T21:27:44Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "70aa6fd9e4ab0c1a492eb8c0b9d50cc921dc57f8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3298,3302 @@          '$methodName for ${widget.runtimeType} was called at an '\n          'inappropriate time.\\n'\n          '\\n'\n          'It may only be called while the widgets are being built. A possible '\n          'cause of this error is when $methodName is called during '"
  },
  {
    "id" : "2241e04d-484d-4d2a-90e0-dcbb25c64b0b",
    "prId" : 12213,
    "prUrl" : "https://github.com/flutter/flutter/pull/12213#pullrequestreview-64703863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6c4831f-89fc-4e39-8b78-a97870a9dbd8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you may want to specifically verify that it's actually `this`?",
        "createdAt" : "2017-09-22T21:28:23Z",
        "updatedAt" : "2017-09-22T21:28:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "70aa6fd9e4ab0c1a492eb8c0b9d50cc921dc57f8",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +3294,3298 @@  void _debugCheckOwnerBuildTargetExists(String methodName) {\n    assert(() {\n      if (owner._debugCurrentBuildTarget == null) {\n        throw new FlutterError(\n          '$methodName for ${widget.runtimeType} was called at an '"
  },
  {
    "id" : "cb718a16-3aee-493e-a818-b6b7e75687a6",
    "prId" : 13019,
    "prUrl" : "https://github.com/flutter/flutter/pull/13019#pullrequestreview-76923829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cafcce5-f2ee-4351-b216-24e32f5f52e2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "is that not what the inherited operator == does?",
        "createdAt" : "2017-11-15T18:55:25Z",
        "updatedAt" : "2017-11-15T20:45:26Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a5a253e7-eeea-4449-9cad-77b91d45cc52",
        "parentId" : "0cafcce5-f2ee-4351-b216-24e32f5f52e2",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I believe so, but the linter says if you overload `hashCode` you must also overload `operator==`.",
        "createdAt" : "2017-11-15T20:26:32Z",
        "updatedAt" : "2017-11-15T20:45:26Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "76c6b0a0-7cd8-4db3-8ae0-c89b41c248f7",
        "parentId" : "0cafcce5-f2ee-4351-b216-24e32f5f52e2",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "fair enough. i guess this is no worse than an `// ignore` would be.",
        "createdAt" : "2017-11-15T20:44:33Z",
        "updatedAt" : "2017-11-15T20:45:26Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "35df08a4a04a3bee6dc4e70e067761b43634d9d5",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2511,2515 @@  // used with `InheritedWidgets`.\n  @override\n  bool operator ==(Object other) => identical(this, other);\n\n  // Custom implementation of hash code optimized for the \".of\" pattern used"
  },
  {
    "id" : "7522ae17-f2cd-4279-80fd-8225bd3817c8",
    "prId" : 19739,
    "prUrl" : "https://github.com/flutter/flutter/pull/19739#pullrequestreview-151195192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cc87312-529d-457e-b827-f014ed85aa62",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "can you `assert(_debugLifecycleState == _ElementLifecycle.inactive)` in this case?",
        "createdAt" : "2018-08-27T19:53:18Z",
        "updatedAt" : "2018-08-30T23:14:31Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f884cfc2-f8d2-4152-a7b8-9bb2a0b7fcc1",
        "parentId" : "7cc87312-529d-457e-b827-f014ed85aa62",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It's not necessarily inactive (yet) at this point.\r\n\r\nThe element's _parent is null if InheritFromWidgetOfExactType is called from a State.deactivate() override. FormFieldState does this:\r\n\r\n```\r\n  @override\r\n  void deactivate() {\r\n    Form.of(context)?._unregister(this);\r\n    super.deactivate();\r\n  }\r\n```\r\n\r\nThe `_unregister()` method is trying to remove the field from its form's list of fields.\r\n\r\nThe deactivate() method is called by deactivateChild() after the child's parent is set to null but before _debugLifecycleState is changed to  _ElementLifecycle.inactive at the end of Element.deactivate():\r\n\r\n```\r\n  void deactivate() {\r\n    assert(_debugLifecycleState == _ElementLifecycle.active);\r\n    ...\r\n    assert(() { _debugLifecycleState = _ElementLifecycle.inactive; return true; }());\r\n  }\r\n```\r\n",
        "createdAt" : "2018-08-29T18:32:51Z",
        "updatedAt" : "2018-08-30T23:14:31Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "b1399669-ec0a-4fd1-8b2c-7ddb2d5b5189",
        "parentId" : "7cc87312-529d-457e-b827-f014ed85aa62",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I wonder if we could add another lifecycle state for this intermediate mode...",
        "createdAt" : "2018-08-30T21:47:37Z",
        "updatedAt" : "2018-08-30T23:14:31Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5cf5decc5f9cf53f554cf29b8738910e61e6c1",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +3249,3253 @@    assert(() {\n      if (_parent == null) {\n        // We're being deactivated, see deactivateChild()\n        return true;\n      }"
  },
  {
    "id" : "7c8e3c53-9487-42bc-a66d-9b7b0ff2c6f5",
    "prId" : 23393,
    "prUrl" : "https://github.com/flutter/flutter/pull/23393#pullrequestreview-168663332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a94d5a61-35a2-4154-8753-65025158e97e",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Now it calls `updated` which calls `notifyClients` by default.\r\n",
        "createdAt" : "2018-10-24T17:45:31Z",
        "updatedAt" : "2018-10-27T22:38:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "547b898f-caaa-4cc6-b37f-8c421a84573c",
        "parentId" : "a94d5a61-35a2-4154-8753-65025158e97e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This _is_ updated.",
        "createdAt" : "2018-10-26T03:49:09Z",
        "updatedAt" : "2018-10-27T22:38:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5b6d65bba34208c6a67c00a6bbea8ac0ecb1986",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +4210,4214 @@  /// Called by [update], immediately prior to [build].\n  ///\n  /// Calls [notifyClients] to actually trigger the notifications.\n  @override\n  void updated(InheritedWidget oldWidget) {"
  },
  {
    "id" : "2dad5863-448b-41f3-8bcc-044f9a37a22d",
    "prId" : 23393,
    "prUrl" : "https://github.com/flutter/flutter/pull/23393#pullrequestreview-168672299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64579731-b196-42e9-856a-bcd6ffc5740e",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : " I suppose `updateShouldNotify` is now a bit of a misnomer, since notifyClients is only called by default.  I'm not suggesting that the method should be called `updateShouldCallUpdated` though.",
        "createdAt" : "2018-10-24T17:46:21Z",
        "updatedAt" : "2018-10-27T22:38:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "02e8990d-305b-4655-b2ea-1ccf99d52b50",
        "parentId" : "64579731-b196-42e9-856a-bcd6ffc5740e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think from the perspective of people using the API, it's still conceptually more useful to think of it as a method that says whether to send the notifications.",
        "createdAt" : "2018-10-26T05:04:55Z",
        "updatedAt" : "2018-10-27T22:38:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5b6d65bba34208c6a67c00a6bbea8ac0ecb1986",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +4213,4217 @@  @override\n  void updated(InheritedWidget oldWidget) {\n    if (widget.updateShouldNotify(oldWidget))\n      super.updated(oldWidget);\n  }"
  },
  {
    "id" : "36ad574e-8e98-4f58-a9b7-396bd2d8989e",
    "prId" : 26900,
    "prUrl" : "https://github.com/flutter/flutter/pull/26900#pullrequestreview-196646377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b576e1c-1d50-4fae-bff0-9af479333747",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I believe Image only uses State.reassemble. Mentioning that here may be misleading.",
        "createdAt" : "2019-01-25T18:34:54Z",
        "updatedAt" : "2019-01-29T01:27:28Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4d397426011ce6390965440d4b2a925f53c8419",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +2604,2608 @@  ///  * [State.reassemble]\n  ///  * [BindingBase.reassembleApplication]\n  ///  * [Image], which uses this to reload images.\n  @mustCallSuper\n  @protected"
  },
  {
    "id" : "e1e1b13e-3a6f-46a7-99ec-f9bef55ff29f",
    "prId" : 26900,
    "prUrl" : "https://github.com/flutter/flutter/pull/26900#pullrequestreview-196646377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3800347-499f-4a78-908b-3bcb9d2bd4e5",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This should probably include a link to State.reassemble in the see also section.",
        "createdAt" : "2019-01-25T18:35:19Z",
        "updatedAt" : "2019-01-29T01:27:28Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4d397426011ce6390965440d4b2a925f53c8419",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +2607,2611 @@  @mustCallSuper\n  @protected\n  void reassemble() {\n    markNeedsBuild();\n    visitChildren((Element child) {"
  },
  {
    "id" : "6f369f0c-47cd-457e-bc24-c106f3f16c67",
    "prId" : 26900,
    "prUrl" : "https://github.com/flutter/flutter/pull/26900#pullrequestreview-196646377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2be95b37-7385-4174-9126-beb8f4be50fc",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This should probably include a link to Element.reassemble in the see also section.",
        "createdAt" : "2019-01-25T18:35:32Z",
        "updatedAt" : "2019-01-29T01:27:28Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4d397426011ce6390965440d4b2a925f53c8419",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1030,1034 @@  void didUpdateWidget(covariant T oldWidget) { }\n\n  /// {@macro flutter.widgets.reassemble}\n  ///\n  /// In addition to this method being invoked, it is guaranteed that the"
  },
  {
    "id" : "cd2b3f0d-b6b3-4eab-943f-161ffb360bc2",
    "prId" : 30814,
    "prUrl" : "https://github.com/flutter/flutter/pull/30814#pullrequestreview-224689939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14be05e4-7f68-400f-b102-524eb98099fd",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "[Sorry to be pedantic.] Constructors can have named parameters. When a constructor is called the values of those parameters are called the constructor's arguments. So all that to say: arguments => parameters here. Note also: it's very unlikely that we're consistent about this terminology in the rest of the API doc.",
        "createdAt" : "2019-04-09T22:43:19Z",
        "updatedAt" : "2019-04-09T23:14:01Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d65cfc8e2b7219eaf6410323a1ef9885f6837a9",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +493,497 @@/// The following is a skeleton of a stateless widget subclass called `GreenFrog`.\n///\n/// Normally, widgets have more constructor arguments, each of which corresponds\n/// to a `final` property.\n///"
  },
  {
    "id" : "f203f92c-1ede-43e8-a299-328492ce8bac",
    "prId" : 32511,
    "prUrl" : "https://github.com/flutter/flutter/pull/32511#pullrequestreview-257183469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20c9e976-04d9-4519-967e-42fae7a2dd8c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i like how this ends up working, very nice",
        "createdAt" : "2019-07-02T22:36:07Z",
        "updatedAt" : "2019-07-09T00:37:26Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac71ca57fa2bddd6681a7a5de386c129fb4abca0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2345,2349 @@            stack,\n            informationCollector: () sync* {\n              yield DiagnosticsDebugCreator(DebugCreator(_dirtyElements[index]));\n              yield _dirtyElements[index].describeElement('The element being rebuilt at the time was index $index of $dirtyCount');\n            },"
  },
  {
    "id" : "dc6c5389-fb47-4ef2-b871-d23c86ad445c",
    "prId" : 34012,
    "prUrl" : "https://github.com/flutter/flutter/pull/34012#pullrequestreview-247983006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d1656f8-828c-4963-a776-fd14aefb5bb0",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "thanks for cleaning this up!",
        "createdAt" : "2019-06-11T07:01:24Z",
        "updatedAt" : "2019-06-13T16:04:50Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0062b20a79a0ee4078d6bbaab2e686cb33b3e317",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +3696,3700 @@  @override\n  Map<String, Object> toJsonMap(DiagnosticsSerializationDelegate delegate) {\n    final Map<String, Object> json = super.toJsonMap(delegate);\n    final Element element = value;\n    json['widgetRuntimeType'] = element.widget?.runtimeType?.toString();"
  },
  {
    "id" : "97f45ea1-5c0e-413c-b690-42743281b250",
    "prId" : 34684,
    "prUrl" : "https://github.com/flutter/flutter/pull/34684#pullrequestreview-251832789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1d275fb-3ea7-4065-8ae6-fafd7081bff6",
        "parentId" : null,
        "authorId" : "3fc29887-e563-4ced-9960-26034ba59f7b",
        "body" : "I guess we don't need to qualify `describeElement` with `parent` here?",
        "createdAt" : "2019-06-19T15:05:36Z",
        "updatedAt" : "2019-06-20T16:28:26Z",
        "lastEditedBy" : "3fc29887-e563-4ced-9960-26034ba59f7b",
        "tags" : [
        ]
      },
      {
        "id" : "abba978b-befa-402b-946b-8c0ed05b3489",
        "parentId" : "d1d275fb-3ea7-4065-8ae6-fafd7081bff6",
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "This code looks consistent with the previous error message which was describing the parent. If the `parent` was removed the error would be describing a describing the widget with the key not its parent.\r\n```dart\r\n'The parent of the widgets with that key was:\\n  $parent\\n'\r\n```\r\nbecame \r\n```dart\r\nparent.describeElement('The parent of the widgets with that key was'),\r\n```",
        "createdAt" : "2019-06-19T16:48:33Z",
        "updatedAt" : "2019-06-20T16:28:26Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "c613e28887ca46114480ea4f7170cc692c0b89c2",
    "line" : 316,
    "diffHunk" : "@@ -1,1 +3031,3035 @@            ErrorSummary('A GlobalKey was used multiple times inside one widget\\'s child list.'),\n            DiagnosticsProperty<GlobalKey>('The offending GlobalKey was', key),\n            parent.describeElement('The parent of the widgets with that key was'),\n            element.describeElement('The first child to get instantiated with that key became'),\n            DiagnosticsProperty<Widget>('The second child that was to be instantiated with that key was', widget, style: DiagnosticsTreeStyle.errorProperty),"
  },
  {
    "id" : "a3b03c1e-70d9-43e3-b648-c34f17374f3a",
    "prId" : 37187,
    "prUrl" : "https://github.com/flutter/flutter/pull/37187#pullrequestreview-268075943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3acc120e-f507-48ec-9e20-f89b5715f27c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2019-07-29T22:36:10Z",
        "updatedAt" : "2019-07-29T23:07:48Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2a76461b922d2967a567f00af71eee8a12e6068",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1691,1695 @@          throw FlutterError(\n            \"$runtimeType's children must not contain any null values, \"\n            'but a null value was found at index $index'\n          );\n        }"
  },
  {
    "id" : "ba54d4c8-afd4-4a1d-9b40-1ff8a5d20092",
    "prId" : 44189,
    "prUrl" : "https://github.com/flutter/flutter/pull/44189#pullrequestreview-316025998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1c1c348-2456-4ec2-821f-0d70e5c84175",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "We should probably mark TypeMatcher as deprecated as well since that will go away as soon as we delete the old deprecated API?",
        "createdAt" : "2019-11-12T23:50:24Z",
        "updatedAt" : "2019-11-18T07:10:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8a0258f7-44db-46fe-87cc-4e26fac08bf0",
        "parentId" : "b1c1c348-2456-4ec2-821f-0d70e5c84175",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Done.",
        "createdAt" : "2019-11-13T06:43:19Z",
        "updatedAt" : "2019-11-18T07:10:26Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2731fc73527bf5f490599e01fca590c63b9d89d",
    "line" : 224,
    "diffHunk" : "@@ -1,1 +2074,2078 @@    'This feature was deprecated after v1.12.1.'\n  )\n  State ancestorStateOfType(TypeMatcher matcher);\n\n  /// Returns the [State] object of the nearest ancestor [StatefulWidget] widget"
  },
  {
    "id" : "b45012ae-aa25-44a5-b110-6279da29e88f",
    "prId" : 44189,
    "prUrl" : "https://github.com/flutter/flutter/pull/44189#pullrequestreview-316025998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f69f7fd-1aff-4ab2-bf6a-b3d4329a5022",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can we implement the old API by calling the new API to avoid duplication?",
        "createdAt" : "2019-11-12T23:51:25Z",
        "updatedAt" : "2019-11-18T07:10:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "56010ebc-f3d7-4c20-aef1-a131a525aed6",
        "parentId" : "4f69f7fd-1aff-4ab2-bf6a-b3d4329a5022",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Unfortunately not in this direction (the new can be implemented with the old) because we cannot extract `T` from `Type`.",
        "createdAt" : "2019-11-13T06:46:39Z",
        "updatedAt" : "2019-11-18T07:10:26Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2731fc73527bf5f490599e01fca590c63b9d89d",
    "line" : 383,
    "diffHunk" : "@@ -1,1 +3578,3582 @@  )\n  @override\n  InheritedElement ancestorInheritedElementForWidgetOfExactType(Type targetType) {\n    assert(_debugCheckStateIsActiveForAncestorLookup());\n    final InheritedElement ancestor = _inheritedWidgets == null ? null : _inheritedWidgets[targetType];"
  },
  {
    "id" : "6023a212-9466-4bed-981b-1f8aee0a72fc",
    "prId" : 44189,
    "prUrl" : "https://github.com/flutter/flutter/pull/44189#pullrequestreview-319647482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f985528-6dae-46c1-9c8c-5a68c2b14f6f",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "What's the status of extension methods these days? Can we move it into a `DeprecatedBuildContext` extension or some such, so the old methods do not pollute the interface?",
        "createdAt" : "2019-11-15T02:01:51Z",
        "updatedAt" : "2019-11-18T07:10:26Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "a1cdb85c-ae9b-412d-aeda-32cc20f246b0",
        "parentId" : "7f985528-6dae-46c1-9c8c-5a68c2b14f6f",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "According to https://github.com/dart-lang/sdk/blob/master/CHANGELOG.md extension methods are in preview.\r\n\r\nMoreover as some deprecated methods can not be implemented just by calling the new methods there could be some problems to have a method body that works with all implementations of `BuildContext`.\r\n",
        "createdAt" : "2019-11-15T08:02:44Z",
        "updatedAt" : "2019-11-18T07:10:26Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "33b8a040-2562-48e7-8fe2-d2448e3ac725",
        "parentId" : "7f985528-6dae-46c1-9c8c-5a68c2b14f6f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Also, for the time being we do not want to use extension methods in the framework.",
        "createdAt" : "2019-11-15T17:53:34Z",
        "updatedAt" : "2019-11-18T07:10:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "19a50f70-a0ec-474d-90fc-170c1230148d",
        "parentId" : "7f985528-6dae-46c1-9c8c-5a68c2b14f6f",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "@a14n \r\n\r\n> deprecated methods can not be implemented just by calling the new methods\r\n\r\nCan they be implemented without calling the new methods?\r\n\r\n@goderbauer\r\n\r\n> we do not want to use extension methods\r\n\r\nWhy would you not want to use them in this particular case?",
        "createdAt" : "2019-11-19T23:13:36Z",
        "updatedAt" : "2019-11-19T23:13:36Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "60d0b28c-0680-4d5a-95a3-486302173e63",
        "parentId" : "7f985528-6dae-46c1-9c8c-5a68c2b14f6f",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : ">Can they be implemented without calling the new methods?\r\n\r\nThe current implementation of those deprecated methods (in `Element`) uses private fields. An implementation of those methods in an extension will have to access to those private fields (to be able to also use new methods). But this would lead to issues for instance in the context of unit test if you mock Element.\r\n\r\nEven if we can come up with a workaround I don't thing it's worth to add complexity only to handle a temporary period of deprecation.",
        "createdAt" : "2019-11-20T07:52:49Z",
        "updatedAt" : "2019-11-20T07:52:49Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2731fc73527bf5f490599e01fca590c63b9d89d",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +1961,1965 @@    'This feature was deprecated after v1.12.1.'\n  )\n  InheritedWidget inheritFromWidgetOfExactType(Type targetType, { Object aspect });\n\n  /// Obtains the nearest widget of the given type [T], which must be the type of a"
  },
  {
    "id" : "2875cc2d-df67-433d-8716-501f5335b2d3",
    "prId" : 44967,
    "prUrl" : "https://github.com/flutter/flutter/pull/44967#pullrequestreview-318602675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4048527-6315-4ebc-bc6c-f8abec04ab9b",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Just use `if (!kReleaseMode)`?\r\n\r\nhttps://master-api.flutter.dev/flutter/foundation/kReleaseMode-constant.html",
        "createdAt" : "2019-11-15T18:10:09Z",
        "updatedAt" : "2019-11-18T20:57:28Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "69255386-8217-49e7-b82a-2daded309988",
        "parentId" : "c4048527-6315-4ebc-bc6c-f8abec04ab9b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "That would make profile and release mode different, no?",
        "createdAt" : "2019-11-16T03:34:49Z",
        "updatedAt" : "2019-11-18T20:57:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7825c313-eb0e-4525-894c-4f010275e099",
        "parentId" : "c4048527-6315-4ebc-bc6c-f8abec04ab9b",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "`if (!kReleaseMode && !kProfileMode)` :) ",
        "createdAt" : "2019-11-18T17:43:40Z",
        "updatedAt" : "2019-11-18T20:57:28Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "a61c25ff-b34b-4c16-8afd-3cbec4f27c6d",
        "parentId" : "c4048527-6315-4ebc-bc6c-f8abec04ab9b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "What if we add a third non-debug mode?",
        "createdAt" : "2019-11-18T19:24:52Z",
        "updatedAt" : "2019-11-18T20:57:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "bc9905ed-3e6d-44e6-ae92-6023ee95d4e5",
        "parentId" : "c4048527-6315-4ebc-bc6c-f8abec04ab9b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(bear in mind this is developer code, so we can't go and change it)",
        "createdAt" : "2019-11-18T20:17:41Z",
        "updatedAt" : "2019-11-18T20:57:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a24fdb2a69e796dc7f78de0313bf8a1435091f29",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +3824,3828 @@///     // In debug mode, use the normal error widget which shows\n///     // the error message:\n///     if (inDebug)\n///       return ErrorWidget(details.exception);\n///     // In release builds, show a yellow-on-blue message instead:"
  },
  {
    "id" : "34a33fdd-09ef-46f3-b8e8-629c3a2053fa",
    "prId" : 44967,
    "prUrl" : "https://github.com/flutter/flutter/pull/44967#pullrequestreview-319501061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e5dd751-1314-4128-8449-dfcb4dc25466",
        "parentId" : null,
        "authorId" : "cb307bee-bad3-4ec2-8529-7fc45a67a8ee",
        "body" : "Can there be a way to configure the styling of this widget?",
        "createdAt" : "2019-11-20T04:16:47Z",
        "updatedAt" : "2019-11-20T04:16:47Z",
        "lastEditedBy" : "cb307bee-bad3-4ec2-8529-7fc45a67a8ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "a24fdb2a69e796dc7f78de0313bf8a1435091f29",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +3826,3830 @@///     if (inDebug)\n///       return ErrorWidget(details.exception);\n///     // In release builds, show a yellow-on-blue message instead:\n///     return Container(\n///       alignment: Alignment.center,"
  },
  {
    "id" : "8af404d1-2b31-4a86-aaeb-6a0942ec8edc",
    "prId" : 45728,
    "prUrl" : "https://github.com/flutter/flutter/pull/45728#pullrequestreview-325744658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52cd6033-12e7-4558-8043-d6b196840343",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same as in the other PRs.",
        "createdAt" : "2019-12-02T21:11:28Z",
        "updatedAt" : "2019-12-04T07:52:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b009aec83e54bb8b2abdfad5105ea28936c98a4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +66,70 @@    if (other.runtimeType != runtimeType)\n      return false;\n    return other is ObjectKey\n        && identical(other.value, value);\n  }"
  },
  {
    "id" : "9587f7ba-8eac-429d-bc53-733fd07d047f",
    "prId" : 45728,
    "prUrl" : "https://github.com/flutter/flutter/pull/45728#pullrequestreview-325744658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0842d0c6-3822-4307-8bea-42fe1e292c8e",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same as in the other PRs.",
        "createdAt" : "2019-12-02T21:11:56Z",
        "updatedAt" : "2019-12-04T07:52:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b009aec83e54bb8b2abdfad5105ea28936c98a4",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +315,319 @@    if (other.runtimeType != runtimeType)\n      return false;\n    return other is GlobalObjectKey<T>\n        && identical(other.value, value);\n  }"
  },
  {
    "id" : "cf167666-d2e0-4370-9f9a-9dc97f45d22e",
    "prId" : 46183,
    "prUrl" : "https://github.com/flutter/flutter/pull/46183#pullrequestreview-334952989",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c7cce4d-283f-463b-b82f-f18956a0a936",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "In stead of mapping\r\nglobalKey -> parent\r\n\r\nI instead mapping\r\nparent,child -> globalkey\r\n\r\nIn the case of early rebuild, I can correctly remove the reservation when i rebuild the node in layout stage(in line 154)",
        "createdAt" : "2019-12-05T21:27:21Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "aa0f6f59-5169-43dd-8840-80d005b711ce",
        "parentId" : "7c7cce4d-283f-463b-b82f-f18956a0a936",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The explanation of what this map maps should be added to the code. It will make it easier for people in the future to understand this.",
        "createdAt" : "2019-12-19T21:49:35Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "504b623069c8868bf1fcabca0a54a284b889dfca",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +137,141 @@  // This provides us a way to remove old reservation while parent rebuilds the\n  // child in the same slot.\n  static final Map<Element, Map<Element, GlobalKey>> _debugReservations = <Element, Map<Element, GlobalKey>>{};\n\n  static void _debugRemoveReservationFor(Element parent, Element child) {"
  },
  {
    "id" : "19dce552-4b10-4eef-a729-311a35e32644",
    "prId" : 46183,
    "prUrl" : "https://github.com/flutter/flutter/pull/46183#pullrequestreview-337998071",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9acea6c-519a-4296-a70e-f5fb27f642d8",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "This is to deal with the case where the early rebuilt element gets into shenanigan.\r\nfor example child1(key1)  and child2(key2).\r\nchild2 gets early rebuilt and reserved key2 for the slot of child2\r\nthen the swap and layoutbuilder rebuild\r\nit will first build the slot of original child1 with child2(key2). This will cause child2 gets retake from the original slot of child2. Which will call the forgetChild of that slot and clear any trace of child2 from that slot. while it build the original slot of child2, there is no way to remove the reservation from child2 because there is no any evidence left in that slot.\r\n\r\nI feel this is a rather dirty breaking change. Now sure if there is any way around it",
        "createdAt" : "2020-01-03T08:26:24Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "06a0cb16-0381-4f89-b000-ae007c490e83",
        "parentId" : "a9acea6c-519a-4296-a70e-f5fb27f642d8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i don't think it's that dirty. it seems reasonable that the base class have an implementation here and that we'd required subclasses to call it.",
        "createdAt" : "2020-01-03T09:22:37Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "504b623069c8868bf1fcabca0a54a284b889dfca",
    "line" : 295,
    "diffHunk" : "@@ -1,1 +3488,3492 @@  /// will replace this [child].\n  @protected\n  @mustCallSuper\n  void forgetChild(Element child) {\n    // This method is called on the old parent when the given child (with a"
  },
  {
    "id" : "d4d5dc84-b24f-40ee-8137-8001aee61f22",
    "prId" : 46183,
    "prUrl" : "https://github.com/flutter/flutter/pull/46183#pullrequestreview-339377476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6393c1e-3857-4013-80e0-67d897a35a58",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why do we need to wait with removing the reservation until \"update\"? Why can we not just call `GlobalKey._debugRemoveFor(this, child);` from \"forgetChild\" directly?",
        "createdAt" : "2020-01-07T01:19:15Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "72e5548d-c056-4cdc-aef1-0f4c46c23ab4",
        "parentId" : "c6393c1e-3857-4013-80e0-67d897a35a58",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "if we forget child without rebuilding, it is consider globalkey duplication.\r\nThe forgetChild is called when globalkey reparent, we want to make sure the slot gets rebuild. This also depends on update method will always clean up child that has been forgotten; otherwise, clearing the _debugForgottenChildrenwithGlobalKey in update method does not make sense. I will update the document.",
        "createdAt" : "2020-01-07T03:27:37Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "7f349c5c-8d5b-4ce2-b054-337a7b33a7f1",
        "parentId" : "c6393c1e-3857-4013-80e0-67d897a35a58",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Please add a comment to this effect in the code. People two years from now are going to try to understand what this all does and they won't remember any of this.\r\n\r\nAnd by people I mean me.",
        "createdAt" : "2020-01-07T04:39:01Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "65e63636-c470-4a78-910b-6c18a312368f",
        "parentId" : "c6393c1e-3857-4013-80e0-67d897a35a58",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : ".. and me :)\r\n\r\nThanks for adding the comment!",
        "createdAt" : "2020-01-07T17:15:22Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "504b623069c8868bf1fcabca0a54a284b889dfca",
    "line" : 268,
    "diffHunk" : "@@ -1,1 +3271,3275 @@    // never updates (the forgotten children are not removed from the tree\n    // until the call to update happens)\n    assert(() {\n      _debugForgottenChildrenWithGlobalKey.forEach(_debugRemoveGlobalKeyReservation);\n      _debugForgottenChildrenWithGlobalKey.clear();"
  },
  {
    "id" : "7c6b5120-da29-409e-801e-03422c65ea33",
    "prId" : 46725,
    "prUrl" : "https://github.com/flutter/flutter/pull/46725#pullrequestreview-330859113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae736038-3990-408c-bf9f-94d846b1bdb6",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Instead if showing a \"bad\" example can we show a good example that shows people how to do it right? I believe that will be more useful.",
        "createdAt" : "2019-12-11T20:02:54Z",
        "updatedAt" : "2019-12-11T21:35:43Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "421db10f-5463-41c4-8ee7-0814455059cb",
        "parentId" : "ae736038-3990-408c-bf9f-94d846b1bdb6",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Sure, added a positive example. How does it look?",
        "createdAt" : "2019-12-11T21:36:09Z",
        "updatedAt" : "2019-12-11T21:36:10Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a33e0ac314523d0802412d91b70a045b12e44ea",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1741,1745 @@  ///\n  /// ```dart\n  /// class SomeWidgetState extends State<SomeWidget> {\n  ///   List<Widget> _children;\n  ///"
  },
  {
    "id" : "3d5c32b2-dc93-4fcb-a27e-c64f721cdec7",
    "prId" : 48541,
    "prUrl" : "https://github.com/flutter/flutter/pull/48541#pullrequestreview-340896261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ce1c4b3-8b8d-488d-bcb8-48920b01283c",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Is this not a breaking change?",
        "createdAt" : "2020-01-10T00:17:19Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "57af340f-be96-443a-a9bd-51a8ac797bf7",
        "parentId" : "9ce1c4b3-8b8d-488d-bcb8-48920b01283c",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Yes and No. :)\r\n\r\nAs far as I can tell this will not break any tests. However, I will be writing a migration guide for people that have custom ParentDataWidgets (see PR description :P )",
        "createdAt" : "2020-01-10T00:27:16Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "068233bee049683e537757e84989d70a1134b199",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1466,1470 @@///  * [StatefulWidget] and [State], for widgets that can build differently\n///    several times over their lifetime.\nabstract class ParentDataWidget<T extends ParentData> extends ProxyWidget {\n  /// Abstract const constructor. This constructor enables subclasses to provide\n  /// const constructors so that they can be used in const expressions."
  },
  {
    "id" : "330fd107-b14a-4b35-9559-b03995fe4688",
    "prId" : 48541,
    "prUrl" : "https://github.com/flutter/flutter/pull/48541#pullrequestreview-341372792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48d98951-a3f9-4b0f-82f9-064432fd3557",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I believe that either the `as` isn't necessary here anymore, or that if it is you should just be doing:\r\n\r\n```dart\r\n      result = ancestor as ParentDataElement<ParentData>;\r\n      if (result != null) {\r\n       break;\r\n",
        "createdAt" : "2020-01-10T00:19:29Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "cfab0288-fdff-4a55-bcbf-2d380da44d0d",
        "parentId" : "48d98951-a3f9-4b0f-82f9-064432fd3557",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Without the \"as\" I am getting:\r\n\r\nerror: A value of type 'Element' can't be assigned to a variable of type 'ParentDataElement<ParentData>'. (invalid_assignment at [flutter] lib/src/widgets/framework.dart:5096)\r\n\r\nAnd in your code, the \"as\" would throw if ancestor is not a ParentDataElement<ParentData>, which I don't want.",
        "createdAt" : "2020-01-10T00:32:38Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ae27509d-9cf5-4a59-8fd8-d11b83cdf8ce",
        "parentId" : "48d98951-a3f9-4b0f-82f9-064432fd3557",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Ahh I was thinking of C#.  Nevermind",
        "createdAt" : "2020-01-10T00:59:17Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "e8b57fbc-7864-4117-afc7-bbe8ff04e5e7",
        "parentId" : "48d98951-a3f9-4b0f-82f9-064432fd3557",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i'm surprised you need the as, i expected this case to be handled. cc @leafpetersen ",
        "createdAt" : "2020-01-10T19:24:05Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "068233bee049683e537757e84989d70a1134b199",
    "line" : 214,
    "diffHunk" : "@@ -1,1 +5110,5114 @@    while (ancestor != null && ancestor is! RenderObjectElement) {\n      if (ancestor is ParentDataElement<ParentData>) {\n        result = ancestor as ParentDataElement<ParentData>;\n        break;\n      }"
  },
  {
    "id" : "0dd21870-b90a-4502-843f-c5fbb3aead9e",
    "prId" : 48541,
    "prUrl" : "https://github.com/flutter/flutter/pull/48541#pullrequestreview-340914007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fd63726-ad03-44a7-802a-82fdb65f363e",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Is it ever possible for the result to have been the root?  Or is that condition acceptable?\r\n\r\ne.g. if you somehow get to the top most ancestor, and it is the wrong type, we'd have `result != null && ancestor == null` here.",
        "createdAt" : "2020-01-10T00:22:20Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "95d4baa4-881f-469d-9e44-2b62181dd1dc",
        "parentId" : "4fd63726-ad03-44a7-802a-82fdb65f363e",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I don't fully understand what you mean, if we never find the correct type, result would be null as well?\r\n\r\nAlso, it is fine to not find any ancestor ParentDataElement.",
        "createdAt" : "2020-01-10T00:35:08Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "52996e28-9edd-47cd-858d-fa20c0be5440",
        "parentId" : "4fd63726-ad03-44a7-802a-82fdb65f363e",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I mean if you find it and it's the root render object",
        "createdAt" : "2020-01-10T01:00:33Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "cb2c7c3a-e7da-4e4d-adad-646edf96509c",
        "parentId" : "4fd63726-ad03-44a7-802a-82fdb65f363e",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Maybe just q comment then about why we are throwing and catching this way would help",
        "createdAt" : "2020-01-10T01:01:59Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "779152eb-842e-4d1c-843b-ab0cc9121e27",
        "parentId" : "4fd63726-ad03-44a7-802a-82fdb65f363e",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "> I mean if you find it and it's the root render object\r\n\r\nYou mean, the root of the element tree? That's fine for the purpose of this check. This check only wants to check how many ParentDataElements there are between this RenderObjectElement and the next RenderObjectElement (or the root).",
        "createdAt" : "2020-01-10T01:07:44Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "4c20c444-7509-4535-9f84-db8adb28684c",
        "parentId" : "4fd63726-ad03-44a7-802a-82fdb65f363e",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Ahh ok",
        "createdAt" : "2020-01-10T01:34:25Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "068233bee049683e537757e84989d70a1134b199",
    "line" : 221,
    "diffHunk" : "@@ -1,1 +5116,5120 @@    }\n    assert(() {\n      if (result == null || ancestor == null) {\n        return true;\n      }"
  },
  {
    "id" : "6ae0a531-8491-400e-b877-b0500b330c4f",
    "prId" : 48541,
    "prUrl" : "https://github.com/flutter/flutter/pull/48541#pullrequestreview-340907386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d4b50c4-9d5b-4ca1-96e4-dec2568b0ced",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Ditto here.  We should avoid using exceptions for flow control - it causes debuggers to fire here when users are debugging their own code.\r\n\r\nOr is that whta we want?  If so, we should add a comment to that effect.",
        "createdAt" : "2020-01-10T00:23:12Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "55616a08-3eae-4362-8152-32bf8b9111d0",
        "parentId" : "4d4b50c4-9d5b-4ca1-96e4-dec2568b0ced",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This is not an exception for control flow. This throws when there's actually something wrong with your app, so if you are debugging your app and you have it set up to fire on exception, you want it to fire here.\r\n\r\nI am only catching the exception here directly, because I don't want the exception to bubble up and cause the error widget to swoop in because the tree is in a state where the error widget would cause more exceptions...",
        "createdAt" : "2020-01-10T00:29:32Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "7d1fe3f1-acfc-4926-847d-c96b6106fa4b",
        "parentId" : "4d4b50c4-9d5b-4ca1-96e4-dec2568b0ced",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "> Maybe just q comment then about why we are throwing and catching this way would help\r\n\r\nWill do.",
        "createdAt" : "2020-01-10T01:07:55Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "068233bee049683e537757e84989d70a1134b199",
    "line" : 264,
    "diffHunk" : "@@ -1,1 +5381,5385 @@    bool applyParentData = true;\n    assert(() {\n      try {\n        if (!parentDataWidget.debugIsValidRenderObject(renderObject)) {\n          applyParentData = false;"
  },
  {
    "id" : "07f6da88-31e9-434d-998d-fd69c9d5d943",
    "prId" : 48541,
    "prUrl" : "https://github.com/flutter/flutter/pull/48541#pullrequestreview-341425270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4348647b-7ae5-43e3-a3e9-0be48aed943b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "docs should probably mention debugTypicalAncestorWidget and also mention when this is called in the widget lifecycle",
        "createdAt" : "2020-01-10T19:20:32Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e62bce88-178b-408d-a15c-2269cc2bf101",
        "parentId" : "4348647b-7ae5-43e3-a3e9-0be48aed943b",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Done.",
        "createdAt" : "2020-01-10T21:13:51Z",
        "updatedAt" : "2020-01-10T21:16:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "068233bee049683e537757e84989d70a1134b199",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +1484,1488 @@  /// This is called just before [applyParentData] is invoked with the same\n  /// [RenderObject] provided to that method.\n  bool debugIsValidRenderObject(RenderObject renderObject) {\n    assert(T != dynamic);\n    assert(T != ParentData);"
  },
  {
    "id" : "65b3b30f-abd4-401c-853c-f9d2e1215f4c",
    "prId" : 48932,
    "prUrl" : "https://github.com/flutter/flutter/pull/48932#pullrequestreview-349706542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8153ecf-721a-41cc-b8be-3c513bc3f5ac",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Does that mean when a class change its superclass, the runtimeType is still the same? That feels like a compiler bug?",
        "createdAt" : "2020-01-28T00:14:29Z",
        "updatedAt" : "2020-01-29T18:14:50Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "af5098c9-19d2-4c42-861e-3f65c42ccd8c",
        "parentId" : "a8153ecf-721a-41cc-b8be-3c513bc3f5ac",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "A class can only change its type like this via hot reload. It isn't that the runtimeType is still the same, its that they're both different",
        "createdAt" : "2020-01-28T00:17:08Z",
        "updatedAt" : "2020-01-29T18:14:50Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "1ce02b39-c086-467c-8583-4ac9e538a7cf",
        "parentId" : "a8153ecf-721a-41cc-b8be-3c513bc3f5ac",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "... differently the same",
        "createdAt" : "2020-01-28T00:17:16Z",
        "updatedAt" : "2020-01-29T18:14:50Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "9fa94bf8-4e70-4040-961e-27fe0abe1f4d",
        "parentId" : "a8153ecf-721a-41cc-b8be-3c513bc3f5ac",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I see, thanks for explaining.",
        "createdAt" : "2020-01-28T21:12:56Z",
        "updatedAt" : "2020-01-29T18:14:50Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d5bd5db240c9b518c082ac9a5d0705b167f7e1e",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +3110,3114 @@      // When the type of a widget is changed between Stateful and Stateless via\n      // hot reload, the element tree will end up in a partially invalid state.\n      // That is, if the widget was a StatefulWidget and is now a StatelessWidget,\n      // then the element tree currently contains a StatefulElement that is incorrectly\n      // referencing a StatelessWidget (and likewise with StatelessElement)."
  },
  {
    "id" : "0be170e9-a4d5-4003-a7b1-24c33faddfd0",
    "prId" : 48932,
    "prUrl" : "https://github.com/flutter/flutter/pull/48932#pullrequestreview-349749648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "623f1672-c266-4190-83fb-8b6861c64b4b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we should just add all the common subclasses, sorry that wasn't clear in my earlier comment. These:\r\nStatefulElement, StatelessElement, InheritedModelElement, InheritedElement, ParentDataElement, ProxyElement, LeafRenderObjectElement, RootRenderObjectElement, SingleChildRenderObjectElement, MultiChildRenderObjectElement, RenderObjectElement. (In that order, since some are superclasses of each other.)",
        "createdAt" : "2020-01-28T21:40:04Z",
        "updatedAt" : "2020-01-29T18:14:50Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "eceba4da-9022-4a3b-a20a-b1f0d31b4b55",
        "parentId" : "623f1672-c266-4190-83fb-8b6861c64b4b",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I've updated with the types here, save for RootRenderObjectElement which uses a regular RenderObjectWidget as its configuration",
        "createdAt" : "2020-01-28T22:27:17Z",
        "updatedAt" : "2020-01-29T18:14:50Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d5bd5db240c9b518c082ac9a5d0705b167f7e1e",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +491,495 @@           widget is MultiChildRenderObjectWidget ? 9 :\n           widget is RenderObjectWidget ? 10 :\n           0;\n    }\n}"
  },
  {
    "id" : "217d2788-9703-4669-91b2-efb413e35838",
    "prId" : 49527,
    "prUrl" : "https://github.com/flutter/flutter/pull/49527#pullrequestreview-350383922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69ab43e2-909c-45a8-b12b-c13fe8bf269f",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "How would this possible? if an element dropped out the tree, wouldn't it call deactivate to remove the subscription?",
        "createdAt" : "2020-01-29T19:48:38Z",
        "updatedAt" : "2020-01-29T20:25:23Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "457eb08e-1738-431c-8d27-af7b68272f02",
        "parentId" : "69ab43e2-909c-45a8-b12b-c13fe8bf269f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "oh i see, it happens before the subtree is built",
        "createdAt" : "2020-01-29T19:56:18Z",
        "updatedAt" : "2020-01-29T20:25:23Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "1298499e0d324f625e52c6f40f3a7a628f7cf9ea",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +4627,4631 @@  /// the start of [build], to avoid calls when the [State] will not get built.\n  /// This can happen when the widget has dropped out of the tree, but depends\n  /// on an [InheritedWidget] that is still in the tree.\n  ///\n  /// It is set initially to false, since [_firstBuild] makes the initial call"
  },
  {
    "id" : "e0247719-d15d-42ed-9065-beea526f1176",
    "prId" : 51674,
    "prUrl" : "https://github.com/flutter/flutter/pull/51674#pullrequestreview-368982973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c1a666b-3e82-4713-ae38-c5998d91aa4f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this should compare runtimeType; see style guide for precise template",
        "createdAt" : "2020-03-02T19:01:48Z",
        "updatedAt" : "2020-03-04T17:41:41Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "80e47933-6382-4da6-8a95-dec42a6ba659",
        "parentId" : "8c1a666b-3e82-4713-ae38-c5998d91aa4f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "is ```other is IndexedSlot``` still necessary?",
        "createdAt" : "2020-03-04T17:23:44Z",
        "updatedAt" : "2020-03-04T17:41:41Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "83b55df5-993b-4497-a19a-e4325a8af63c",
        "parentId" : "8c1a666b-3e82-4713-ae38-c5998d91aa4f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Yes, it's necessary for dart to elevate the type of `other` to `IndexedSlot` so I can call `.value` and `.index` below.",
        "createdAt" : "2020-03-04T17:37:12Z",
        "updatedAt" : "2020-03-04T17:41:41Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ae51ad9fc1a25a34213ad1ab110fc259fbeedc5",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +5964,5968 @@    if (other.runtimeType != runtimeType)\n      return false;\n    return other is IndexedSlot\n        && index == other.index\n        && value == other.value;"
  },
  {
    "id" : "921a7ec6-e667-440c-b91c-2821addf6048",
    "prId" : 64101,
    "prUrl" : "https://github.com/flutter/flutter/pull/64101#pullrequestreview-477917600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "821c46cc-0dbb-4195-b66a-c3219523b58f",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Indentation and maybe use Container.alignment",
        "createdAt" : "2020-08-28T19:37:29Z",
        "updatedAt" : "2020-09-03T20:51:22Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "72469cd8d0f3552fc3cde54332fdc3d52296dc43",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2047,2051 @@///             Scaffold.of(context).showBottomSheet<void>(\n///               (BuildContext context) {\n///                 return Container(\n///                   alignment: Alignment.center,\n///                   height: 200,"
  },
  {
    "id" : "6dbb57c2-7afa-4c9e-bc99-ac31c1337eb7",
    "prId" : 64672,
    "prUrl" : "https://github.com/flutter/flutter/pull/64672#pullrequestreview-478341602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca5cc4d0-f556-41bf-9945-38485f51c64b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ObjectKey.value should probably be nullable",
        "createdAt" : "2020-08-27T19:55:35Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e4af6f2f-c199-4e24-a66c-78f0a0fdb64e",
        "parentId" : "ca5cc4d0-f556-41bf-9945-38485f51c64b",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Done",
        "createdAt" : "2020-08-31T06:17:36Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "414a28205060a97cc9557b48ed0b677a142009aa",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4,8 @@\nimport 'dart:async';\nimport 'dart:collection';\nimport 'dart:developer';\n"
  },
  {
    "id" : "5368a043-eb2f-4b05-873f-9c7a19bf0aa0",
    "prId" : 64672,
    "prUrl" : "https://github.com/flutter/flutter/pull/64672#pullrequestreview-477041324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6b4b658-e0fd-4f3b-890b-ce83a34d2bf2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why do we need a `!` here?",
        "createdAt" : "2020-08-27T20:03:06Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d04bf070-1414-4908-bc5d-805360be5e4c",
        "parentId" : "d6b4b658-e0fd-4f3b-890b-ce83a34d2bf2",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "oh because [] can return null, i see.",
        "createdAt" : "2020-08-27T20:04:30Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "414a28205060a97cc9557b48ed0b677a142009aa",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +211,215 @@          if (keyToParent.containsKey(key) && keyToParent[key] != parent) {\n            // We have duplication reservations for the same global key.\n            final Element older = keyToParent[key]!;\n            final Element newer = parent;\n            FlutterError error;"
  },
  {
    "id" : "44ba38e7-51f3-40e3-91fd-a456dd7eeadc",
    "prId" : 64672,
    "prUrl" : "https://github.com/flutter/flutter/pull/64672#pullrequestreview-478005353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d230c033-d858-444e-8f8c-b76d84e21563",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we might get better diagnostics if we make _widget `late` rather than nullable",
        "createdAt" : "2020-08-27T20:44:42Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "31f3da39-970c-4222-9e6f-bd5d1a02bbed",
        "parentId" : "d230c033-d858-444e-8f8c-b76d84e21563",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "this field is compared to null at some place, so it can't be late.",
        "createdAt" : "2020-08-28T14:50:15Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "762d6b67-11a9-4562-8475-9bc7582bcd1f",
        "parentId" : "d230c033-d858-444e-8f8c-b76d84e21563",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ah, i see, yeah. We should probably refactor that a bit but let's do that in a separate PR.",
        "createdAt" : "2020-08-28T20:24:27Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "414a28205060a97cc9557b48ed0b677a142009aa",
    "line" : 190,
    "diffHunk" : "@@ -1,1 +1049,1053 @@  /// an argument.\n  T get widget => _widget!;\n  T? _widget;\n\n  /// The current stage in the lifecycle for this state object."
  },
  {
    "id" : "ec01c75d-c25c-4d30-98e0-9b2209c7f2d5",
    "prId" : 64791,
    "prUrl" : "https://github.com/flutter/flutter/pull/64791#pullrequestreview-480591479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12556b30-a196-4225-9182-5cf3ca6bc060",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "for clarity let's put a header like \"## The \\`.of\\` method convention\" or \"Implementing \\`.of\\` methods\" above the paragraph that starts \"The convention...\", and then a similar header above your new text e.g. \"## Calling `\\.of\\` methods\" or some such.",
        "createdAt" : "2020-08-31T16:35:24Z",
        "updatedAt" : "2020-09-04T08:13:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "3420c5c0-04d1-4755-9c4e-0f972dfa2bd7",
        "parentId" : "12556b30-a196-4225-9182-5cf3ca6bc060",
        "authorId" : "276976ed-2494-457b-9be8-04e72f4afc77",
        "body" : "done",
        "createdAt" : "2020-09-02T08:21:48Z",
        "updatedAt" : "2020-09-04T08:13:30Z",
        "lastEditedBy" : "276976ed-2494-457b-9be8-04e72f4afc77",
        "tags" : [
        ]
      }
    ],
    "commit" : "54ceb01d629f354a965afe38ce0e759fb9db2df4",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1696,1700 @@/// put on the public class instead. For example, [Theme] is implemented as a\n/// [StatelessWidget] that builds a private inherited widget; [Theme.of] looks\n/// for that inherited widget using [BuildContext.dependOnInheritedWidgetOfExactType]\n/// and then returns the [ThemeData].\n///"
  },
  {
    "id" : "1f0dfed8-6735-4bd1-b948-856bd9baffef",
    "prId" : 71138,
    "prUrl" : "https://github.com/flutter/flutter/pull/71138#pullrequestreview-616975376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38581d73-fc98-4bc2-bb3d-bea93311fdca",
        "parentId" : null,
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "```suggestion\r\n  /// they are called alternatively.\r\n  ///\r\n  /// This field is not set in release mode.\r\n```",
        "createdAt" : "2021-03-21T01:35:18Z",
        "updatedAt" : "2021-03-24T11:14:42Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "e117fbe5-e183-4829-b7a0-8d7cd248dfa3",
        "parentId" : "38581d73-fc98-4bc2-bb3d-bea93311fdca",
        "authorId" : "c8957575-df86-4ab0-95f3-366ad3a4f537",
        "body" : "done",
        "createdAt" : "2021-03-21T01:42:33Z",
        "updatedAt" : "2021-03-24T11:14:42Z",
        "lastEditedBy" : "c8957575-df86-4ab0-95f3-366ad3a4f537",
        "tags" : [
        ]
      }
    ],
    "commit" : "1876547d9d90a4957b12c7c707ef922fd549b975",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +932,936 @@\n  /// This field is used tracks [reactivate] and [deactivate], to assert that\n  /// they are called alternatively.\n  ///\n  /// This field is not set in release mode."
  },
  {
    "id" : "9d367067-1f3b-4621-bbae-68f008997b26",
    "prId" : 71872,
    "prUrl" : "https://github.com/flutter/flutter/pull/71872#pullrequestreview-547484194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f488cda5-1106-4ea9-8fec-49703b600e5e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should/could this be final?",
        "createdAt" : "2020-12-08T17:25:48Z",
        "updatedAt" : "2020-12-08T17:42:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "aa0147b0-9216-4a36-ae9a-aa18c6b5ff03",
        "parentId" : "f488cda5-1106-4ea9-8fec-49703b600e5e",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "It's non-final now because it's mutated in the test widgets flutter binding.  It looks like it's done to reset the global pointer routes and such...",
        "createdAt" : "2020-12-08T17:33:35Z",
        "updatedAt" : "2020-12-08T17:42:08Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "19149651-8bf9-4f58-88e7-cbe959632ed1",
        "parentId" : "f488cda5-1106-4ea9-8fec-49703b600e5e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "dubious, but that's an issue for another PR... :-)",
        "createdAt" : "2020-12-08T17:47:38Z",
        "updatedAt" : "2020-12-08T17:47:38Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "b281edab-9703-43c5-b2f7-4d410595d181",
        "parentId" : "f488cda5-1106-4ea9-8fec-49703b600e5e",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Agreed.  There are a few follow-on PRs that I want to put together now that I've been there poking around.",
        "createdAt" : "2020-12-08T17:53:53Z",
        "updatedAt" : "2020-12-08T17:53:54Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4dd7d2a9af48e9193369f549cbcceb109584f1cd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2587,2591 @@  ///\n  /// See [FocusManager] for more details.\n  FocusManager focusManager;\n\n  /// Adds an element to the dirty elements list so that it will be rebuilt"
  },
  {
    "id" : "78391ec4-c69c-4e22-a6dc-3d107fcb879e",
    "prId" : 71940,
    "prUrl" : "https://github.com/flutter/flutter/pull/71940#pullrequestreview-547647693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7696dc2f-1ac3-43af-ae54-76ee6d145b52",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Could be `@visibleForTesting` as well? ",
        "createdAt" : "2020-12-08T21:29:42Z",
        "updatedAt" : "2020-12-08T23:02:50Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "56c0f5326487fc181f080fe8375aaab7b5edcdd3",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2659,2663 @@  /// [UnsupportedError].\n  @visibleForTesting\n  Element? get debugCurrentBuildTarget {\n    Element? result;\n    bool isSupportedOperation = false;"
  },
  {
    "id" : "a4e14d4e-d51d-472a-8a53-7e04442d6dec",
    "prId" : 74701,
    "prUrl" : "https://github.com/flutter/flutter/pull/74701#pullrequestreview-682034844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2a85998-9176-41ea-a322-a264bd3c23a7",
        "parentId" : null,
        "authorId" : "cae82b26-3453-4bbd-a445-466b76a092b0",
        "body" : "This change can cause `Null check operator used on a null value` when switching from Flutter 2.0 to 2.2.\r\nIn Flutter 2.0 this simply returned `null` when there is no `WidgetsBinding.instance` (for example in an isolate).\r\nSince the method returns `Element?`, maybe it should be something like `WidgetsBinding.instance?.buildOwner?._globalKeyRegistry[this]`.",
        "createdAt" : "2021-06-11T08:32:52Z",
        "updatedAt" : "2021-06-11T08:32:53Z",
        "lastEditedBy" : "cae82b26-3453-4bbd-a445-466b76a092b0",
        "tags" : [
        ]
      },
      {
        "id" : "f8672bff-249d-4792-bf75-4ec1f7cd1cd9",
        "parentId" : "d2a85998-9176-41ea-a322-a264bd3c23a7",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "See https://github.com/flutter/flutter/issues/83728#issuecomment-854387714 (you should be calling `WidgetsFlutterBinding.ensureInitialized()` before calling code that tries to access the global key registry).",
        "createdAt" : "2021-06-11T16:41:49Z",
        "updatedAt" : "2021-06-11T16:41:49Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6219e7d9c07a4eafa48ab2493735fea3ce06014",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +150,154 @@  const GlobalKey.constructor() : super.empty();\n\n  Element? get _currentElement => WidgetsBinding.instance!.buildOwner!._globalKeyRegistry[this];\n\n  /// The build context in which the widget with this key builds."
  },
  {
    "id" : "49398dbd-49dd-4390-be48-3a2b712fbce5",
    "prId" : 75576,
    "prUrl" : "https://github.com/flutter/flutter/pull/75576#pullrequestreview-586920116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33aa15ec-7e70-4a85-869a-65e7a21e3aac",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Wondering what the FailingFocusManager is doing in this example. Maybe a commend explaining what the \"FailingFocusManager\" is and why it's here (as a doc comment on the class?) would be helpful.",
        "createdAt" : "2021-02-09T19:21:50Z",
        "updatedAt" : "2021-02-09T20:49:55Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bdff7615a588ac8c1116d69987ca4cb7d6ff807",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2328,2332 @@///   final PipelineOwner pipelineOwner = PipelineOwner();\n///   final MeasurementView rootView = pipelineOwner.rootNode = MeasurementView();\n///   final BuildOwner buildOwner = BuildOwner(focusManager: FailingFocusManager());\n///   final RenderObjectToWidgetElement<RenderBox> element = RenderObjectToWidgetAdapter<RenderBox>(\n///     container: rootView,"
  },
  {
    "id" : "a6b66d30-1a2f-44ca-838a-d6b5cf28e3dd",
    "prId" : 75576,
    "prUrl" : "https://github.com/flutter/flutter/pull/75576#pullrequestreview-586920116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90602b78-42a4-4f23-b589-d5549cbaf040",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "For some use cases, the Offstage widget may offer a simpler alternative to this. Should we mention that here?",
        "createdAt" : "2021-02-09T19:31:23Z",
        "updatedAt" : "2021-02-09T20:49:55Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bdff7615a588ac8c1116d69987ca4cb7d6ff807",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2310,2314 @@///\n/// {@tool dartpad --template=freeform}\n/// This example shows how to build an off-screen widget tree used to measure\n/// the size of the rendered tree. For some use cases, the simpler [Offstage]\n/// widget may be a better alternative to this approach."
  },
  {
    "id" : "a65c0569-b002-410b-ae6f-e69467b31e5c",
    "prId" : 78854,
    "prUrl" : "https://github.com/flutter/flutter/pull/78854#pullrequestreview-620348122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f94c578c-59a3-4658-9af2-fcd15170a499",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "It is cleaner if we check it in the updatechildren, can you explain more what issue you were facing when do it in updatechildren?",
        "createdAt" : "2021-03-24T16:57:38Z",
        "updatedAt" : "2021-03-26T01:27:45Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "07d0dabd-b348-49f0-863b-95146dabaeeb",
        "parentId" : "f94c578c-59a3-4658-9af2-fcd15170a499",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "https://github.com/flutter/flutter/pull/78854#discussion_r600960629",
        "createdAt" : "2021-03-25T01:10:48Z",
        "updatedAt" : "2021-03-26T01:27:45Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb89f4e0f2ac3082168f13d31e8596891d5ec205",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +6200,6204 @@\n  @override\n  Element inflateWidget(Widget newWidget, Object? newSlot) {\n    final Element newChild = super.inflateWidget(newWidget, newSlot);\n    assert(_debugCheckHasAssociatedRenderObject(newChild));"
  },
  {
    "id" : "0703c0b9-05de-479f-baa3-67b43f07f388",
    "prId" : 79239,
    "prUrl" : "https://github.com/flutter/flutter/pull/79239#pullrequestreview-626744189",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef8cb87f-388a-4fcb-8d44-66676dc62df4",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "do we not want to mention `required`?",
        "createdAt" : "2021-03-28T22:45:44Z",
        "updatedAt" : "2021-03-28T22:45:44Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d3bb583f-359c-4ccd-99ee-159bcda19e0a",
        "parentId" : "ef8cb87f-388a-4fcb-8d44-66676dc62df4",
        "authorId" : "6d78a5c9-ab50-4abe-bc81-a36fc0b6e9ae",
        "body" : "I feel that as `required` is now a Dart keyword and the linter will complain if a non-nullable parameter is not `required`, the sentence is unnecessary.\r\n\r\nIf, however, you feel that the sentence is to be kept, I can revert this file but only removing the `@` sign.",
        "createdAt" : "2021-03-28T22:47:44Z",
        "updatedAt" : "2021-03-28T22:53:22Z",
        "lastEditedBy" : "6d78a5c9-ab50-4abe-bc81-a36fc0b6e9ae",
        "tags" : [
        ]
      },
      {
        "id" : "17109362-c13a-4283-96c8-5af394ca8bd4",
        "parentId" : "ef8cb87f-388a-4fcb-8d44-66676dc62df4",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't have a strong opinion one way or the other.",
        "createdAt" : "2021-03-29T00:24:59Z",
        "updatedAt" : "2021-03-29T00:24:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6966e1e6-4665-4acc-b820-19a3fd472bd1",
        "parentId" : "ef8cb87f-388a-4fcb-8d44-66676dc62df4",
        "authorId" : "6d78a5c9-ab50-4abe-bc81-a36fc0b6e9ae",
        "body" : "Maybe we could get other opinions.",
        "createdAt" : "2021-03-29T08:03:38Z",
        "updatedAt" : "2021-03-29T08:03:38Z",
        "lastEditedBy" : "6d78a5c9-ab50-4abe-bc81-a36fc0b6e9ae",
        "tags" : [
        ]
      },
      {
        "id" : "e7d78e51-f141-444c-8edf-9f0d2dc0095b",
        "parentId" : "ef8cb87f-388a-4fcb-8d44-66676dc62df4",
        "authorId" : "6d78a5c9-ab50-4abe-bc81-a36fc0b6e9ae",
        "body" : "@xster @jonahwilliams @abarth What do you think?",
        "createdAt" : "2021-03-29T19:04:56Z",
        "updatedAt" : "2021-03-29T19:04:56Z",
        "lastEditedBy" : "6d78a5c9-ab50-4abe-bc81-a36fc0b6e9ae",
        "tags" : [
        ]
      },
      {
        "id" : "3d56c4a1-09f0-4bd2-bb72-28e9de94ee3b",
        "parentId" : "ef8cb87f-388a-4fcb-8d44-66676dc62df4",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "seems reasonable to leave that to a more generic language tour",
        "createdAt" : "2021-03-29T19:10:36Z",
        "updatedAt" : "2021-03-29T19:10:36Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "22407a50-4a53-4a57-9c33-fbb306d589e5",
        "parentId" : "ef8cb87f-388a-4fcb-8d44-66676dc62df4",
        "authorId" : "6d78a5c9-ab50-4abe-bc81-a36fc0b6e9ae",
        "body" : "May I resolve this conversation, then?",
        "createdAt" : "2021-04-02T01:20:26Z",
        "updatedAt" : "2021-04-02T01:21:35Z",
        "lastEditedBy" : "6d78a5c9-ab50-4abe-bc81-a36fc0b6e9ae",
        "tags" : [
        ]
      },
      {
        "id" : "dc2019db-f616-445c-8b9a-ef2be2a7bd37",
        "parentId" : "ef8cb87f-388a-4fcb-8d44-66676dc62df4",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "you don't need to click the resolve button, but otherwise I think yes we've resolved this :) ",
        "createdAt" : "2021-04-02T01:40:22Z",
        "updatedAt" : "2021-04-02T01:40:23Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "abc91aa7169930a20bbee83cc81b62af7b0b8b19",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +482,486 @@/// By convention, widget constructors only use named arguments. Also by\n/// convention, the first argument is [key], and the last argument is `child`,\n/// `children`, or the equivalent.\n///\n/// See also:"
  }
]