[
  {
    "id" : "45a44f1a-664c-43cc-9bae-9fe356640640",
    "prId" : 741,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35d41543-70bd-4e88-8156-d8fc070b77f7",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "please move the hero controller to this file in a separate patch so that this is easier to review\n",
        "createdAt" : "2015-12-04T20:53:30Z",
        "updatedAt" : "2015-12-04T22:26:38Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "30d755a0-348c-4564-9997-9b254ba52f4a",
        "parentId" : "35d41543-70bd-4e88-8156-d8fc070b77f7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you can move pageroute in that patch too\n",
        "createdAt" : "2015-12-04T20:54:14Z",
        "updatedAt" : "2015-12-04T22:26:38Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c253ca627b96392083542f989ca0b9b078720cf1",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +415,419 @@  String toString() => '$_heroes';\n}\n\nclass HeroController extends NavigatorObserver {\n  HeroController() {"
  },
  {
    "id" : "10816b42-100f-40b5-820c-0a4b40067f35",
    "prId" : 5394,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d45d151-e14e-461a-a9c9-69c9f9ba869b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i assume from.sourceStates itself cannot be null at this point?\n",
        "createdAt" : "2016-08-15T18:23:13Z",
        "updatedAt" : "2016-08-15T18:23:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "db642634-e100-45f0-9a10-c1d74a767676",
        "parentId" : "5d45d151-e14e-461a-a9c9-69c9f9ba869b",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I assumed that was true, since the next line is `sourceStates.remove()`\n",
        "createdAt" : "2016-08-15T18:35:22Z",
        "updatedAt" : "2016-08-15T18:35:22Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "586db083-4d58-4c37-8b75-89c1f2e5cda1",
        "parentId" : "5d45d151-e14e-461a-a9c9-69c9f9ba869b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "k\n",
        "createdAt" : "2016-08-15T19:02:02Z",
        "updatedAt" : "2016-08-15T19:02:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad5e59365195a1984f1297940644b4b252edf5a0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +388,392 @@      assert(to == null || to.currentTurns.floor() == to.currentTurns);\n      HeroState targetState = to != null ? to.sourceStates.elementAt(0) : null;\n      Set<HeroState> sourceStates = from?.sourceStates ?? new HashSet<HeroState>();\n      sourceStates.remove(targetState);\n      Rect sourceRect = from?.currentRect ?? to.currentRect.center & Size.zero;"
  },
  {
    "id" : "12c6ed37-9443-40f1-a659-5bfee9c49f4c",
    "prId" : 5512,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16ae4f29-c478-430f-8d38-b951b48659f0",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "fwiw, i think we'll find that what we actually want is to categorise heroes into those that want to participate during one of these gestures and ones that don't. but that can wait. \n",
        "createdAt" : "2016-08-23T22:53:45Z",
        "updatedAt" : "2016-08-25T18:05:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "75706ab3-036e-4e96-8a43-1b7347214c12",
        "parentId" : "16ae4f29-c478-430f-8d38-b951b48659f0",
        "authorId" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "body" : "Agreed.\n",
        "createdAt" : "2016-08-24T17:55:25Z",
        "updatedAt" : "2016-08-25T18:05:01Z",
        "lastEditedBy" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfaf7c9bf268d8b0ad6110f4374325a9ac3a31d1",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +482,486 @@\n  void _checkForHeroQuest() {\n    if (_from != null && _to != null && _from != _to && _questsEnabled) {\n      _to.offstage = _to.animation.status != AnimationStatus.completed;\n      WidgetsBinding.instance.addPostFrameCallback(_updateQuest);"
  },
  {
    "id" : "81a6b582-25bc-4e60-9aa1-c2a3df02b5e6",
    "prId" : 5923,
    "prUrl" : "https://github.com/flutter/flutter/pull/5923#pullrequestreview-491615",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34185a96-67ff-4e51-b345-75aaa3d312f8",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "linkify\n",
        "createdAt" : "2016-09-19T03:44:37Z",
        "updatedAt" : "2016-09-19T03:46:10Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d56915027a8f7a31b4bcb7a5a6681cb59546878",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +69,73 @@/// a widget from one screen shifts to a position on the other. For example,\n/// album art from a list of albums growing to become the centerpiece of the\n/// album's details view. In this context, a screen is a navigator ModalRoute.\n///\n/// To get this effect, all you have to do is wrap each hero on each route with a"
  },
  {
    "id" : "7fc57d6c-4add-415c-a98c-1b3e7ccbdd11",
    "prId" : 7568,
    "prUrl" : "https://github.com/flutter/flutter/pull/7568#pullrequestreview-18034368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1acea5e5-e1f5-4bc8-96be-540668ea0bce",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "does this branch mean that if go down this branch, you'll never re-enable heroes even if you re-use the object?",
        "createdAt" : "2017-01-23T20:12:23Z",
        "updatedAt" : "2017-01-23T22:06:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d2933e8e-7810-420c-a71e-6eea0d92f079",
        "parentId" : "1acea5e5-e1f5-4bc8-96be-540668ea0bce",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If the Navigator is disposed before the Hero quest is set up, and then the existing HeroController is reused with a new Navigator, then yes.  I'll reset the _questsEnabled flag in _clearPendingRequests, it makes a bit more sense there.",
        "createdAt" : "2017-01-23T21:51:58Z",
        "updatedAt" : "2017-01-23T22:06:10Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "191501613f71d49ee1fc472497a740b1db660d74",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +577,581 @@    if (navigator == null) {\n      // The navigator was removed before this end-of-frame callback was called.\n      _clearPendingHeroQuest();\n      return;\n    }"
  },
  {
    "id" : "48fea38a-db67-4cd1-91d4-072e9833377c",
    "prId" : 8112,
    "prUrl" : "https://github.com/flutter/flutter/pull/8112#pullrequestreview-21641724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22397117-8778-4a7b-9286-f54f718ddd9f",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We should add a constructor to SizedBox that takes a size.  `new SizedBox.fromSize(_placeholderSize)`",
        "createdAt" : "2017-02-13T23:20:48Z",
        "updatedAt" : "2017-02-14T01:05:24Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbc14413b3b993235532ac4d992a3331653ab1a2",
    "line" : 268,
    "diffHunk" : "@@ -1,1 +159,163 @@  Widget build(BuildContext context) {\n    if (_placeholderSize != null) {\n      return new SizedBox(\n        width: _placeholderSize.width,\n        height: _placeholderSize.height"
  },
  {
    "id" : "6c5e9108-13b1-4d5d-a60a-709382b4e7d2",
    "prId" : 8112,
    "prUrl" : "https://github.com/flutter/flutter/pull/8112#pullrequestreview-21642351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8890aa26-00ae-43f6-ba15-ecae46f16835",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We should make a `Positioned.fromRelativeRect` that does this",
        "createdAt" : "2017-02-13T23:24:51Z",
        "updatedAt" : "2017-02-14T01:05:24Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbc14413b3b993235532ac4d992a3331653ab1a2",
    "line" : 463,
    "diffHunk" : "@@ -1,1 +260,264 @@        final RelativeRect offsets = new RelativeRect.fromSize(rect, size);\n\n        return new Positioned(\n          top: offsets.top,\n          right: offsets.right,"
  },
  {
    "id" : "a7db1682-4ffe-4967-87dc-9c62382ea066",
    "prId" : 8112,
    "prUrl" : "https://github.com/flutter/flutter/pull/8112#pullrequestreview-145518716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9c8fce9-bc55-485d-8344-0fc9a36ed510",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Hey, I'm doing the refactor we were talking about. I didn't really get what this is for though. We're taking the Key from the Hero widget instance and putting it as a key for this Opacity widget. What is it meant to do?",
        "createdAt" : "2018-08-09T01:00:40Z",
        "updatedAt" : "2018-08-09T01:00:40Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "577ab8c7-5b3e-4288-ad05-7ba4173455fa",
        "parentId" : "c9c8fce9-bc55-485d-8344-0fc9a36ed510",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Making sure that the same actual widget subtree is used, rather than recreating widgets each time. That way anything stateful going on is maintained across the transition.",
        "createdAt" : "2018-08-13T05:35:00Z",
        "updatedAt" : "2018-08-13T05:35:00Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbc14413b3b993235532ac4d992a3331653ab1a2",
    "line" : 471,
    "diffHunk" : "@@ -1,1 +268,272 @@            child: new RepaintBoundary(\n              child: new Opacity(\n                key: manifest.toHero._key,\n                opacity: _heroOpacity.value,\n                child: child,"
  },
  {
    "id" : "b0ad9498-5a2f-4576-ad1a-18326212f015",
    "prId" : 12203,
    "prUrl" : "https://github.com/flutter/flutter/pull/12203#pullrequestreview-64697505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d9a9218-340d-4b5a-9c68-06397f08dd01",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "add a TODO on this side to mention that we need to fix this too",
        "createdAt" : "2017-09-22T20:57:49Z",
        "updatedAt" : "2017-09-22T21:23:58Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8483eb79f06c36e7c03f41a000822ec9d626d5d",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +369,373 @@    } else if (manifest.type == _HeroFlightType.pop && newManifest.type == _HeroFlightType.push) {\n      // A pop flight was interrupted by a push.\n      assert(newManifest.animation.status == AnimationStatus.forward);\n      assert(manifest.toHero == newManifest.fromHero);\n      assert(manifest.toRoute == newManifest.fromRoute);"
  },
  {
    "id" : "19cb792b-4b45-4977-be90-e4f34dd60dce",
    "prId" : 20322,
    "prUrl" : "https://github.com/flutter/flutter/pull/20322#pullrequestreview-148703802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c88855-aca6-4a41-868f-92c95a5b3a64",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "before we showed the top route's hero, is this an intentional change?",
        "createdAt" : "2018-08-22T22:48:21Z",
        "updatedAt" : "2018-08-28T21:04:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "0f79cc82-0c73-4229-89f1-680a6fb86de7",
        "parentId" : "b8c88855-aca6-4a41-868f-92c95a5b3a64",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Chatted offline, there's no behavioral change. Just the doc wording changed from a direction-dependent \"to\" to a direction-independent \"bottom\".",
        "createdAt" : "2018-08-22T23:20:46Z",
        "updatedAt" : "2018-08-28T21:04:59Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d27589445099227f52b153b7e80b50bf461adc3f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +49,53 @@  ///\n  /// If no custom [HeroFlightShuttleBuilder] is supplied, the bottom route's\n  /// [Hero] child is shown in flight.\n  pop,\n}"
  },
  {
    "id" : "1ee7ddaf-40a8-4607-a4d3-445cc5056adc",
    "prId" : 20322,
    "prUrl" : "https://github.com/flutter/flutter/pull/20322#pullrequestreview-148703802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d12f95c6-d9a9-42e4-85f3-6167a346ab6d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we should make sure this is exactly what we used to do before (i can't tell from the code if this is a change from what we did before, but the documentation you added earlier says that it is).",
        "createdAt" : "2018-08-22T22:54:45Z",
        "updatedAt" : "2018-08-28T21:04:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1a8978bd-3c41-43b5-8609-b7bb603cb4a9",
        "parentId" : "d12f95c6-d9a9-42e4-85f3-6167a346ab6d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(i find it concerning that no tests broke as a result of this change)",
        "createdAt" : "2018-08-22T23:01:36Z",
        "updatedAt" : "2018-08-28T21:04:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8cd6bb7a-9148-41d0-b691-1a1944aedb05",
        "parentId" : "d12f95c6-d9a9-42e4-85f3-6167a346ab6d",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ditto",
        "createdAt" : "2018-08-22T23:21:14Z",
        "updatedAt" : "2018-08-28T21:04:59Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d27589445099227f52b153b7e80b50bf461adc3f",
    "line" : 436,
    "diffHunk" : "@@ -1,1 +654,658 @@    final Hero toHero = toHeroContext.widget;\n    return toHero.child;\n  };\n}"
  },
  {
    "id" : "18e59ccc-b91f-4577-86d2-6f94efaf336a",
    "prId" : 20322,
    "prUrl" : "https://github.com/flutter/flutter/pull/20322#pullrequestreview-149533458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2788aa0d-0aa7-4a42-94d4-949211c53158",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "regardless of whether you rename the new fields or create a diagram, please make sure to add significant documentation to this class to explain everything that's going on. Given the changes here, the class docs shouldn't have remained the same. :-)",
        "createdAt" : "2018-08-22T22:55:35Z",
        "updatedAt" : "2018-08-28T21:04:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "dd298194-08c1-41b8-8cea-362bb8262736",
        "parentId" : "2788aa0d-0aa7-4a42-94d4-949211c53158",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Changed the class dartdoc",
        "createdAt" : "2018-08-26T10:27:59Z",
        "updatedAt" : "2018-08-28T21:04:59Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d27589445099227f52b153b7e80b50bf461adc3f",
    "line" : 437,
    "diffHunk" : "@@ -1,1 +655,659 @@    return toHero.child;\n  };\n}"
  },
  {
    "id" : "c58bff3e-e4eb-468c-9617-da42f2eaa95c",
    "prId" : 23320,
    "prUrl" : "https://github.com/flutter/flutter/pull/23320#pullrequestreview-167670029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b94037e-81e3-4410-92be-06ad21419548",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It's not really just a transition, it's a pop transition, right?",
        "createdAt" : "2018-10-23T19:50:57Z",
        "updatedAt" : "2018-10-24T21:09:58Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "eaa6b20f-1fae-43b2-aeca-0061d9edfb0b",
        "parentId" : "1b94037e-81e3-4410-92be-06ad21419548",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Yes. Though from this perspective (docs of Hero), the reader shouldn't really be concerned about the direction of the transition. ",
        "createdAt" : "2018-10-23T22:50:21Z",
        "updatedAt" : "2018-10-24T21:09:58Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c8a11dbd6cacc9e7e97ce65bcb6c56c86dc40e4",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +179,183 @@  final TransitionBuilder placeholderBuilder;\n\n  /// Whether to perform the hero transition if the [PageRoute] transition was\n  /// triggered by a user gesture, such as a back swipe on iOS.\n  ///"
  },
  {
    "id" : "5c70d1e9-fccc-4732-bf46-d2ebeb2b6cde",
    "prId" : 23320,
    "prUrl" : "https://github.com/flutter/flutter/pull/23320#pullrequestreview-167601346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e16f0f4e-209e-4cd8-b15b-2a32b0d4fb72",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2018-10-23T20:03:06Z",
        "updatedAt" : "2018-10-24T21:09:58Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c8a11dbd6cacc9e7e97ce65bcb6c56c86dc40e4",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +560,564 @@  HeroController({ this.createRectTween });\n\n  /// Used to create [RectTween]s that interpolate the position of heroes in flight.\n  ///\n  /// If null, the controller uses a linear [RectTween]."
  },
  {
    "id" : "e5f3410d-3889-481c-aff9-133b9fd5b07a",
    "prId" : 23320,
    "prUrl" : "https://github.com/flutter/flutter/pull/23320#pullrequestreview-167672081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edd99c37-02e0-44a8-998a-f1195137bb4d",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It's OK if previousRoute is null?",
        "createdAt" : "2018-10-23T20:04:12Z",
        "updatedAt" : "2018-10-24T21:09:58Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "81c2a094-29e0-4111-8e97-9adc2c5ff8fc",
        "parentId" : "edd99c37-02e0-44a8-998a-f1195137bb4d",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "It is. And it should be ok for _maybeStartHeroTransition to drop it in that case too.",
        "createdAt" : "2018-10-23T22:58:19Z",
        "updatedAt" : "2018-10-24T21:09:58Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c8a11dbd6cacc9e7e97ce65bcb6c56c86dc40e4",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +586,590 @@  void didStartUserGesture(Route<dynamic> route, Route<dynamic> previousRoute) {\n    assert(navigator != null);\n    assert(route != null);\n    _maybeStartHeroTransition(route, previousRoute, HeroFlightDirection.pop, true);\n  }"
  },
  {
    "id" : "cbfc1f98-2667-4f94-ba3f-a1db6b8a8ec4",
    "prId" : 23320,
    "prUrl" : "https://github.com/flutter/flutter/pull/23320#pullrequestreview-167601346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aacc4375-9739-4364-af49-bbfc8ead2d07",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2018-10-23T20:22:25Z",
        "updatedAt" : "2018-10-24T21:09:58Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c8a11dbd6cacc9e7e97ce65bcb6c56c86dc40e4",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +629,633 @@  }\n\n  // Find the matching pairs of heroes in from and to and either start or a new\n  // hero flight, or divert an existing one.\n  void _startHeroTransition("
  },
  {
    "id" : "f7b5a764-1f97-4d95-938a-5ed698cdde51",
    "prId" : 24039,
    "prUrl" : "https://github.com/flutter/flutter/pull/24039#pullrequestreview-172354063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "772d3e33-32c4-4401-93bf-b062b57794e5",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I'd check the value of the animation. The animation status is driven by the animation's forward/reverse but it can also be manually manipulated by calling the animation's value setter and won't be in any particular status. Checking the value is more direct.",
        "createdAt" : "2018-11-07T06:25:57Z",
        "updatedAt" : "2018-11-07T06:35:54Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "75ad8d1e-4418-456f-80d0-b32757d25b44",
        "parentId" : "772d3e33-32c4-4401-93bf-b062b57794e5",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Done",
        "createdAt" : "2018-11-07T06:36:04Z",
        "updatedAt" : "2018-11-07T06:36:05Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0b58f6f69f9d4cd0dde20e7b5b17a015c603e44",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +601,605 @@      // A user gesture may have already completed the pop, or we might be the initial route\n      switch (flightType) {\n        case HeroFlightDirection.pop:\n          if (animation.value == 0.0) {\n            return;"
  },
  {
    "id" : "eb366a08-36fd-4de7-b5ee-4f1928e56d2e",
    "prId" : 29069,
    "prUrl" : "https://github.com/flutter/flutter/pull/29069#pullrequestreview-213126256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80807ee3-3e35-47de-9e46-77c79c10c6f9",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If there aren't any nested navigators we still only consider heroes from the topmost route? ",
        "createdAt" : "2019-03-11T22:06:09Z",
        "updatedAt" : "2019-03-11T22:59:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "0c33a6f0-e377-4662-b704-c67ad5728a50",
        "parentId" : "80807ee3-3e35-47de-9e46-77c79c10c6f9",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The important bit is that in the nested navigator case, its the topmost route **of the nested navigator** (and not the topmost route of the navigator controlling the hero transition)",
        "createdAt" : "2019-03-11T22:56:37Z",
        "updatedAt" : "2019-03-11T22:59:12Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ae89c5e4-2d75-4ccf-86c3-f0b05dc63627",
        "parentId" : "80807ee3-3e35-47de-9e46-77c79c10c6f9",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I rephrased this a bit and emphasized *nested navigators*.",
        "createdAt" : "2019-03-11T22:59:44Z",
        "updatedAt" : "2019-03-11T22:59:44Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "417ffbfbe1da6538655d3f05d2098e987d7cb03f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +114,118 @@/// ### Nested Navigators\n///\n/// If either or both routes contain nested [Navigator]s, only [Hero]s\n/// contained in the top-most routes (as defined by [Route.isCurrent]) *of those\n/// nested [Navigator]s* are considered for animation. Just like in the"
  },
  {
    "id" : "e44c7c4c-fb8a-4dc6-ae0e-2f9158c20ffc",
    "prId" : 29069,
    "prUrl" : "https://github.com/flutter/flutter/pull/29069#pullrequestreview-213109667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f94e5e7-95e1-45c0-a6ac-c044ab934cb9",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "We should probably assert navigator != null, just for good measure",
        "createdAt" : "2019-03-11T22:07:13Z",
        "updatedAt" : "2019-03-11T22:59:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "417ffbfbe1da6538655d3f05d2098e987d7cb03f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +209,213 @@      BuildContext context,\n      bool isUserGestureTransition,\n      NavigatorState navigator,\n  ) {\n    assert(context != null);"
  },
  {
    "id" : "976e6cef-86e5-4344-ae1c-dce72c569707",
    "prId" : 29069,
    "prUrl" : "https://github.com/flutter/flutter/pull/29069#pullrequestreview-213109667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c866522b-01e6-486f-a829-cb69a3b1f033",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Thanks for this explanation!",
        "createdAt" : "2019-03-11T22:13:12Z",
        "updatedAt" : "2019-03-11T22:59:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "417ffbfbe1da6538655d3f05d2098e987d7cb03f",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +244,248 @@            addHero(hero, tag);\n          } else {\n            // The nearest navigator to the Hero is not the Navigator that is\n            // currently transitioning from one route to another. This means\n            // the Hero is inside a nested Navigator and should only be"
  },
  {
    "id" : "3e1ca762-0b6f-4210-ae1d-1bd9d4aa0ab7",
    "prId" : 32842,
    "prUrl" : "https://github.com/flutter/flutter/pull/32842#pullrequestreview-239103661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d98b3197-287d-466e-8238-2e5b94725c81",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Add a comment for what this is for",
        "createdAt" : "2019-05-17T19:43:48Z",
        "updatedAt" : "2019-06-06T19:50:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5e15b1bdda57b4412ed249bb22f4b7bb6f18d5b",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +323,327 @@  // own child, when `_placeholderSize` is non-null (i.e. the hero is currently\n  // in its flight animation). See `startFlight`.\n  bool _shouldIncludeChild = true;\n\n  // The `shouldIncludeChildInPlaceholder` flag dictates if the child widget of"
  },
  {
    "id" : "2841fc8f-0902-4daa-bf37-afc46436335b",
    "prId" : 32842,
    "prUrl" : "https://github.com/flutter/flutter/pull/32842#pullrequestreview-240223756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "737526e0-06b5-4749-a046-28f457b2c559",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "We need to be slightly careful here. If the user uses a shuttleBuilder, it could be reasonable for the user to expect that he/she can just use some globalkey that used to be in the from Hero inside the custom shuttleBuilder. That might break if we kept the original tree still under the Hero",
        "createdAt" : "2019-05-17T19:57:42Z",
        "updatedAt" : "2019-06-06T19:50:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "06c2262e-0f8e-4695-8ab1-09f90f4c94ea",
        "parentId" : "737526e0-06b5-4749-a046-28f457b2c559",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "going to add a `Limitations` section in `flightShuttleBuilder`'s documentation. Is this considered a breaking change?",
        "createdAt" : "2019-05-18T00:02:41Z",
        "updatedAt" : "2019-06-06T19:50:45Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "7f9fd593-9e21-46ca-891e-d8f62d6222b8",
        "parentId" : "737526e0-06b5-4749-a046-28f457b2c559",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Then you'd have to explain that that's only true for the Hero of the from route in the event of a push navigation. Perhaps add another argument to Hero for `preservePlaceholderStateDuringFlight` that defaults to true and gets overridden when a custom placeholderBuilder is given?",
        "createdAt" : "2019-05-20T20:34:00Z",
        "updatedAt" : "2019-06-06T19:50:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "957a0b3e-6b56-41ce-a40b-c518e06b5c3c",
        "parentId" : "737526e0-06b5-4749-a046-28f457b2c559",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I think I did:\r\n>   /// ## Limitations\r\n  ///\r\n  /// Currently if a widget built by [flightShuttleBuilder] takes part in a\r\n  /// [Navigator] push transition, that widget or its descendants must not have\r\n  /// any [GlobalKey] that is used in the source Hero's descendant widgets.\r\n\r\n~Isn't `flightShuttleBuilder == null` always equal to `preservePlaceholderStateDuringFlight`?~\r\nIn that case maybe we should add a `Size` parameter to `placeholderBuilder`?",
        "createdAt" : "2019-05-21T18:27:26Z",
        "updatedAt" : "2019-06-06T19:50:45Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5e15b1bdda57b4412ed249bb22f4b7bb6f18d5b",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +557,561 @@      _proxyAnimation.parent = manifest.animation;\n\n    manifest.fromHero.startFlight(shouldIncludedChildInPlaceholder: manifest.type == HeroFlightDirection.push);\n    manifest.toHero.startFlight();\n"
  },
  {
    "id" : "a53b1b3d-6bd8-4ff9-aa33-9f20c6821f55",
    "prId" : 32842,
    "prUrl" : "https://github.com/flutter/flutter/pull/32842#pullrequestreview-246338966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39474be2-bff1-4474-97f5-af402805b4a3",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i don't understand this. Are you saying the `child` will be included twice in the tree? Because that won't work if the widget is stateful... the whole point of the Hero logic is that it only be included once.",
        "createdAt" : "2019-06-06T02:25:43Z",
        "updatedAt" : "2019-06-06T19:50:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5e15b1bdda57b4412ed249bb22f4b7bb6f18d5b",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +215,219 @@  /// because both subtrees will be included in the widget tree during the Hero\n  /// flight animation, and [GlobalKey]s must be unique across the entire widget\n  /// tree.\n  ///\n  /// If the said [GlobalKey] is essential to your application, consider providing"
  },
  {
    "id" : "79ecda9a-daca-4880-be1d-e8f93e55bc1d",
    "prId" : 32842,
    "prUrl" : "https://github.com/flutter/flutter/pull/32842#pullrequestreview-250093469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be74ceb9-cd71-4f9f-9334-ba08a19b2dcd",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This breaks getting sematnics for a FloatingActionButton, e.g.\r\n\r\n```\r\n  await tester.pumpWidget(MaterialApp(\r\n        home: FloatingActionButton(\r\n      onPressed: () {},\r\n    )));\r\n\r\n    expect(\r\n        tester.getSemantics(find.byType(FloatingActionButton)),\r\n        matchesSemantics(\r\n          hasTapAction: true,\r\n          hasEnabledState: true,\r\n          isButton: true,\r\n          isEnabled: true,\r\n        ));\r\n \r\n```\r\n\r\nNow returns the semantics node for the parent of the widget rather than the semantics node for the widget.",
        "createdAt" : "2019-06-14T19:39:37Z",
        "updatedAt" : "2019-06-14T19:39:37Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "e73735bc-b707-4d44-a6fd-a63b093660e6",
        "parentId" : "be74ceb9-cd71-4f9f-9334-ba08a19b2dcd",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Fix for this is in https://github.com/flutter/flutter/pull/34512",
        "createdAt" : "2019-06-14T19:53:57Z",
        "updatedAt" : "2019-06-14T19:53:57Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5e15b1bdda57b4412ed249bb22f4b7bb6f18d5b",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +375,379 @@\n    return SizedBox(\n      width: _placeholderSize?.width,\n      height: _placeholderSize?.height,\n      child: Offstage("
  },
  {
    "id" : "153b8af8-1f85-4065-b499-b8ba9c013728",
    "prId" : 39844,
    "prUrl" : "https://github.com/flutter/flutter/pull/39844#pullrequestreview-286480931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "501a2090-d678-4398-98b2-a10348faa76c",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Is this documented somewhere else?  It's not immediately obvious what it means.",
        "createdAt" : "2019-09-10T22:15:12Z",
        "updatedAt" : "2019-09-10T22:15:12Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "4b2c8a04-0d99-4020-a05e-027d16d85034",
        "parentId" : "501a2090-d678-4398-98b2-a10348faa76c",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "It's documented more prominently here: https://github.com/flutter/flutter/blob/556e3d9e7486dae8f158bc432e82c1267e873846/packages/flutter/lib/src/widgets/heroes.dart#L588-L590",
        "createdAt" : "2019-09-10T23:05:11Z",
        "updatedAt" : "2019-09-10T23:05:12Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "cba671b62540a5c5e72bd4289a38e66be4abbdf9",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +427,431 @@  final HeroFlightShuttleBuilder shuttleBuilder;\n  final bool isUserGestureTransition;\n  final bool isDiverted;\n\n  Object get tag => fromHero.widget.tag;"
  },
  {
    "id" : "5e5e9658-8615-4d5f-87df-ad93058e8290",
    "prId" : 39844,
    "prUrl" : "https://github.com/flutter/flutter/pull/39844#pullrequestreview-286483686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ecfc224-ea69-4fb3-bf51-0dd030bb5f89",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Line 832 has `_flights[tag] != null` as a condition as well, but since it's in a different if/else block, it means something completely different (`isAborted`). \r\n\r\nI'm not sure if this is a real issue or not, but the first time I looked at it, I was a little confused",
        "createdAt" : "2019-09-10T22:18:51Z",
        "updatedAt" : "2019-09-10T22:21:16Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "e3e6aabf-57c8-435f-879a-9c9157aa9ef0",
        "parentId" : "4ecfc224-ea69-4fb3-bf51-0dd030bb5f89",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "`_flights[tag] != null` means there's currently a hero in-flight with the given tag. If `toHeroes[tag] != null` we have a new `to` destination for that hero, so we divert it. If `toHeroes[tag] == null` the in-flight hero is no longer contained in the destination route. Therefore, we don't have a `to` destination for the flying hero anymore and we abort its flight. Hope this makes sense.",
        "createdAt" : "2019-09-10T23:15:11Z",
        "updatedAt" : "2019-09-10T23:15:11Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "cba671b62540a5c5e72bd4289a38e66be4abbdf9",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +809,813 @@        final HeroFlightShuttleBuilder fromShuttleBuilder = fromHeroes[tag].widget.flightShuttleBuilder;\n        final HeroFlightShuttleBuilder toShuttleBuilder = toHeroes[tag].widget.flightShuttleBuilder;\n        final bool isDiverted = _flights[tag] != null;\n\n        final _HeroFlightManifest manifest = _HeroFlightManifest("
  },
  {
    "id" : "7dd1f0c5-5196-47ae-904b-38713d3f5f1d",
    "prId" : 39844,
    "prUrl" : "https://github.com/flutter/flutter/pull/39844#pullrequestreview-286482034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e26456a6-4238-4696-86eb-786e9f18c6c4",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Does this mean diverted heroes use `Curves.fastOutSlowIn` as a reverseCurve? When does this actually happen?",
        "createdAt" : "2019-09-10T22:19:57Z",
        "updatedAt" : "2019-09-10T22:21:16Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "24661d88-ec30-4f51-b81e-ddae34993e51",
        "parentId" : "e26456a6-4238-4696-86eb-786e9f18c6c4",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Yes. A diverted hero is a hero that was in-flight and as it was flying got a new destination assigned to it. This can happen when you push a route and as the route is transitioning in you pop it again. The hero would start flying to the newly pushed route, but then as that one is popped fly back to where it came from. Usually, the pop should use the reverse curve, but in this particular case we do not want to switch curves as that would make the hero jump from the position it had on `curve` to the one it had on `reverseCurve`.",
        "createdAt" : "2019-09-10T23:09:15Z",
        "updatedAt" : "2019-09-10T23:09:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "cba671b62540a5c5e72bd4289a38e66be4abbdf9",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +435,439 @@      parent: (type == HeroFlightDirection.push) ? toRoute.animation : fromRoute.animation,\n      curve: Curves.fastOutSlowIn,\n      reverseCurve: isDiverted ? null : Curves.fastOutSlowIn.flipped,\n    );\n  }"
  },
  {
    "id" : "399884e8-6482-4aa9-aa7c-30491ebebdf2",
    "prId" : 48223,
    "prUrl" : "https://github.com/flutter/flutter/pull/48223#pullrequestreview-401149312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0487eec9-60d4-438d-9db5-b62e1530fb1c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This could inherit from ProxyWidget instead?",
        "createdAt" : "2020-03-26T16:44:40Z",
        "updatedAt" : "2020-10-31T02:52:52Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "a2cb7a0c-0b5f-4623-8996-59dfbe861d05",
        "parentId" : "0487eec9-60d4-438d-9db5-b62e1530fb1c",
        "authorId" : "0443019d-684b-4254-9817-42fe6da047c3",
        "body" : "ProxyWidget is abstract, the code addition will increase. SingleChildRenderObjectWidget is good for this, right?",
        "createdAt" : "2020-03-31T05:23:56Z",
        "updatedAt" : "2020-10-31T02:52:52Z",
        "lastEditedBy" : "0443019d-684b-4254-9817-42fe6da047c3",
        "tags" : [
        ]
      },
      {
        "id" : "1cd38b04-0f07-4e63-bc8d-31189ff0ef81",
        "parentId" : "0487eec9-60d4-438d-9db5-b62e1530fb1c",
        "authorId" : "0443019d-684b-4254-9817-42fe6da047c3",
        "body" : "Is it better to inherit ProxyWidget and return SingleChildRenderObjectElement?",
        "createdAt" : "2020-03-31T06:13:48Z",
        "updatedAt" : "2020-10-31T02:52:52Z",
        "lastEditedBy" : "0443019d-684b-4254-9817-42fe6da047c3",
        "tags" : [
        ]
      },
      {
        "id" : "4266fdef-5ca3-4af7-ad8f-6b1a22752a4a",
        "parentId" : "0487eec9-60d4-438d-9db5-b62e1530fb1c",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "No, SingleChildRenderObjectWidget is expected to have a renderObject, The HeroMode itself does not layout or paint in the render layer. It is only adding information to the widget tree. The ProxyWidget returns ComponentElement might make most sense in this case.\r\n\r\nNote: there is a ProxyElement, but it has specific logic built in to notify child when its configuration changes. We do not need this functionality, so i think ProxyElement is not suitable in this use case",
        "createdAt" : "2020-03-31T18:26:11Z",
        "updatedAt" : "2020-10-31T02:52:52Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "3a44d6c7-41ed-42ef-bd8a-865d4ec2ebd0",
        "parentId" : "0487eec9-60d4-438d-9db5-b62e1530fb1c",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "This seems not be addressed yet?",
        "createdAt" : "2020-04-27T17:01:29Z",
        "updatedAt" : "2020-10-31T02:52:52Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "885272fa93dd757f1a9fe748057f19c360036c03",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +928,932 @@/// When [enabled] is true (the default), [Hero] widgets may be involved in\n/// hero animations, as usual.\nclass HeroMode extends StatelessWidget {\n  /// Creates a widget that enables or disables [Hero]es.\n  ///"
  },
  {
    "id" : "626d9346-e712-444a-8c4a-00d78c3a3b57",
    "prId" : 48223,
    "prUrl" : "https://github.com/flutter/flutter/pull/48223#pullrequestreview-383974634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fa6f447-35ad-4b6a-b1e3-457670ba602d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This should document what it means that Heros are enabled/disabled. e.g. if it is disabled all Hero widgets in this subtree will not be considered for Hero animations or something like that.",
        "createdAt" : "2020-03-26T16:46:06Z",
        "updatedAt" : "2020-10-31T02:52:52Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f2b4fda4-627f-4cc4-a758-dc74fbfef7cd",
        "parentId" : "7fa6f447-35ad-4b6a-b1e3-457670ba602d",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "@najeira Try this.  Make sure to break any lines that exceed the 80 character width limit.\r\n\r\n\r\nEnables or disables [Hero]es in the widget subtree.\r\n\r\nWhen [enabled] is false, all Hero widgets in this subtree will not be considered for Hero animations.\r\n\r\nWhen [enabled] is true (the default), Hero widgets may be involved in a Hero animation, like normal.",
        "createdAt" : "2020-03-30T15:30:50Z",
        "updatedAt" : "2020-10-31T02:52:52Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "885272fa93dd757f1a9fe748057f19c360036c03",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +921,925 @@}\n\n/// Enables or disables [Hero]es in the widget subtree.\n///\n/// When [enabled] is false, all [Hero] widgets in this subtree will not be"
  },
  {
    "id" : "c5f7d0d9-47a9-44fe-9f42-d704717ff713",
    "prId" : 58024,
    "prUrl" : "https://github.com/flutter/flutter/pull/58024#pullrequestreview-421105553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0708746b-a3a6-4a52-aa8d-5df49c8728b0",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "One thing that troubles me in this approach is that we push the responsibility, that gesture should trigger animation update when it ends, to the route transition class. I am worrying the third party library developer might trip on this",
        "createdAt" : "2020-05-28T21:37:41Z",
        "updatedAt" : "2020-06-05T22:03:51Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "3097a440-55b0-42df-999c-c3278844db92",
        "parentId" : "0708746b-a3a6-4a52-aa8d-5df49c8728b0",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I think we already crossed that bridge. Since Navigator and Hero are both from the widgets package and heroes.dart is already making use of the user gesture state. ",
        "createdAt" : "2020-05-29T00:51:22Z",
        "updatedAt" : "2020-06-05T22:03:51Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "3c5b9823-1c50-406f-a074-af72d797d6e6",
        "parentId" : "0708746b-a3a6-4a52-aa8d-5df49c8728b0",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Does this still work if the user dragged it to the end and dropped it exactly there?",
        "createdAt" : "2020-05-29T01:13:00Z",
        "updatedAt" : "2020-06-05T22:03:51Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "78e8aedf-b0ff-44c5-b078-088107a05abe",
        "parentId" : "0708746b-a3a6-4a52-aa8d-5df49c8728b0",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "yes we have tests to ensure that https://github.com/flutter/flutter/blob/fed18fc4331e6b109ff96be87cd209730b514246/packages/flutter/test/material/page_test.dart#L541\r\nhttps://github.com/flutter/flutter/blob/fed18fc4331e6b109ff96be87cd209730b514246/packages/flutter/test/material/page_test.dart#L506",
        "createdAt" : "2020-05-29T16:27:28Z",
        "updatedAt" : "2020-06-05T22:03:51Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "946f0882043aa837e61c1910e10642dd159782ae",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +540,544 @@    // gesture. See the _CupertinoBackGestureController.dragEnd for how\n    // cupertino page route achieves that.\n    if (manifest.fromRoute?.navigator?.userGestureInProgress == true)\n      return;\n    if (status == AnimationStatus.completed || status == AnimationStatus.dismissed) {"
  },
  {
    "id" : "2069bbda-ecda-4b14-9816-9cf57803d2a1",
    "prId" : 72946,
    "prUrl" : "https://github.com/flutter/flutter/pull/72946#pullrequestreview-559249222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a425885c-3c05-4922-99d8-0d1fb0014240",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "should we use the tween builder from the new manifest?",
        "createdAt" : "2020-12-25T07:18:13Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "08b14164-e423-4796-9929-b3aab08ed224",
        "parentId" : "a425885c-3c05-4922-99d8-0d1fb0014240",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Does this matter? This will only affect when the divert happens when toHero is right at the hero rect tween end. If that is the case, changing the new manifest may result in a sudden jump.",
        "createdAt" : "2020-12-28T18:15:56Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea1a6ea8645d86ed7b2a268e38c0c473df7bfb59",
    "line" : 372,
    "diffHunk" : "@@ -1,1 +698,702 @@      } else {\n        // TODO(hansmuller): Use ReverseTween here per github.com/flutter/flutter/pull/12203.\n        heroRectTween = manifest.createHeroRectTween(begin: heroRectTween.end, end: heroRectTween.begin);\n      }\n    } else {"
  },
  {
    "id" : "086ca371-64ae-499d-8c7f-21d6b1532ad6",
    "prId" : 72946,
    "prUrl" : "https://github.com/flutter/flutter/pull/72946#pullrequestreview-559249222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3cc2eb3-665f-4bf5-9554-6027c966c577",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Is it possible for `fromSubtreeContext` or `toSubtreeContext` to be null? I'll add tests to cover that if they can be null.",
        "createdAt" : "2020-12-25T08:22:02Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "bacea91b-3d03-46e6-a39b-346d8e40616f",
        "parentId" : "f3cc2eb3-665f-4bf5-9554-6027c966c577",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I can't think of a case this can happen, but i may be wrong",
        "createdAt" : "2020-12-28T18:23:26Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea1a6ea8645d86ed7b2a268e38c0c473df7bfb59",
    "line" : 509,
    "diffHunk" : "@@ -1,1 +906,910 @@    // At this point, the toHeroes may have been built and laid out for the first time.\n    //\n    // If `fromSubtreeContext` is null, call endFlight on all toHeroes, for good measure.\n    // If `toSubtreeContext` is null abort existingFlights.\n    final BuildContext? fromSubtreeContext = from.subtreeContext;"
  },
  {
    "id" : "1d120a73-e3f6-4e31-80a9-d53ba2dd9e79",
    "prId" : 72946,
    "prUrl" : "https://github.com/flutter/flutter/pull/72946#pullrequestreview-559732307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30545995-0c26-43f4-be38-5109704fa54f",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "if the fromHeroLocation.size is not finite, this assertion will throw before isValid returns false?",
        "createdAt" : "2020-12-28T18:28:14Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "3e30bac9-a0f2-43f5-9a2a-9ac0cd33943a",
        "parentId" : "30545995-0c26-43f4-be38-5109704fa54f",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The PR for the most part is trying to address infinity/NaN introduced by applying a zero matrix. If RenderBox.size contains either infinity/NaN then it's probably an error.",
        "createdAt" : "2020-12-28T22:34:55Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "64490032-5927-4da7-8c85-3e496ba62d7f",
        "parentId" : "30545995-0c26-43f4-be38-5109704fa54f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "this maybe an extreme case, I have encountered a use case where there are renderobject with zero size. One customer introduce a widget that has various size depends on data load. not that I think we should definitely handle this case, but would like to bring that up for your attention.",
        "createdAt" : "2020-12-29T21:05:45Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "ab8e5cba-a4e1-43d0-a490-480b7a2d6bbc",
        "parentId" : "30545995-0c26-43f4-be38-5109704fa54f",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Sorry I fail to understand the concern here, are you saying if the bounding box is zero-sized it's going to cause problems?",
        "createdAt" : "2020-12-29T22:16:18Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "4aa740b4-a167-4433-b5f9-73f9ebed9bb5",
        "parentId" : "30545995-0c26-43f4-be38-5109704fa54f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "If the renderobject is zero size I think this will throw before the hero flight manifest isvalid returns false",
        "createdAt" : "2020-12-29T22:17:55Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "e8fa8e4b-a30d-49bc-87df-3cba7905d7ca",
        "parentId" : "30545995-0c26-43f4-be38-5109704fa54f",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "How so? `Size.zero` seems valid to me, isn't `Size.zero.isFinite` true?",
        "createdAt" : "2020-12-29T22:54:05Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "973050b1-b5b1-4893-8144-371fc8800b0b",
        "parentId" : "30545995-0c26-43f4-be38-5109704fa54f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "for some reason i keep thinking isfinite = size >0 <infinite, yeah i think this is good",
        "createdAt" : "2020-12-29T22:57:55Z",
        "updatedAt" : "2020-12-30T22:03:19Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea1a6ea8645d86ed7b2a268e38c0c473df7bfb59",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +453,457 @@    assert(ancestorContext != null);\n    final RenderBox box = context.findRenderObject()! as RenderBox;\n    assert(box != null && box.hasSize && box.size.isFinite);\n    return MatrixUtils.transformRect(\n      box.getTransformTo(ancestorContext?.findRenderObject()),"
  },
  {
    "id" : "5d80f006-3a5a-44a2-80f8-7e35b9a85430",
    "prId" : 72946,
    "prUrl" : "https://github.com/flutter/flutter/pull/72946#pullrequestreview-607657583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99c2059b-8b18-4095-8e1e-f4d36125cceb",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It looks like this should have been \r\n```\r\nshuttleBuilder: toHero.widget.flightShuttleBuilder \r\n  ?? fromHero.widget.flightShuttleBuilder\r\n  ?? _defaultHeroFlightShuttleBuilder,\r\n```\r\nThat's the way it was, and the way it was documented. We must be missing a regression test for this case as well.",
        "createdAt" : "2021-03-09T17:12:10Z",
        "updatedAt" : "2021-03-09T17:12:10Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea1a6ea8645d86ed7b2a268e38c0c473df7bfb59",
    "line" : 536,
    "diffHunk" : "@@ -1,1 +933,937 @@            toHero: toHero,\n            createRectTween: createRectTween,\n            shuttleBuilder: fromHero.widget.flightShuttleBuilder\n                          ?? toHero.widget.flightShuttleBuilder\n                          ?? _defaultHeroFlightShuttleBuilder,"
  }
]