[
  {
    "id" : "412690b0-6175-49a4-8d59-05e20653a64b",
    "prId" : 20322,
    "prUrl" : "https://github.com/flutter/flutter/pull/20322#pullrequestreview-149533696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2bc5931-98ae-40c2-97b3-d1ec64f66aac",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "@HansMuller can you check if this is right? I'm surprised it didn't need to call super since the element's dirty bit is never removed during rebuild.",
        "createdAt" : "2018-08-26T10:37:12Z",
        "updatedAt" : "2018-08-28T21:04:59Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d27589445099227f52b153b7e80b50bf461adc3f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +189,193 @@  @override\n  void performRebuild() {\n    super.performRebuild();\n    renderObject.triggerRebuild();\n  }"
  },
  {
    "id" : "fc1d7c09-7df1-443f-955f-20ab9ca28f33",
    "prId" : 76145,
    "prUrl" : "https://github.com/flutter/flutter/pull/76145#pullrequestreview-641590033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed0f4eff-cc56-469b-a5d4-a4a025aaac1a",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "can this merge into the _SliverFloatingPersistentHeader and _SliverFloatingPinnedPersistentHeader, probably as mixin? you may need to change the two widgets to statefulwidget or somehow inject the logic into _SliverPersistentHeaderElement.\r\n\r\nIt feels a bit convoluted that how it is inserted into the widget tree and can only work with floating persistent header. ",
        "createdAt" : "2021-02-18T18:37:39Z",
        "updatedAt" : "2021-04-29T19:52:58Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "9fafbe3e-c436-40d4-a82a-5e7772ce3bd1",
        "parentId" : "ed0f4eff-cc56-469b-a5d4-a4a025aaac1a",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "I agree, I tried that first, but then I could not find the `RenderSliverFloatingPersistentHeader` as an ancestor from that point. I'll look again and see if there is another way.",
        "createdAt" : "2021-02-18T19:50:35Z",
        "updatedAt" : "2021-04-29T19:52:58Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "6af1580f-20a4-4e93-913a-7f237eaa4b7a",
        "parentId" : "ed0f4eff-cc56-469b-a5d4-a4a025aaac1a",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "you can do something like context.findRenderObject to get the renderobject (which should be RenderSliverFloatingPersistentHeader if there is no additional renderobject in between _SliverFloatingPersistentHeader and RenderSliverFloatingPersistentHeader)",
        "createdAt" : "2021-02-18T20:09:33Z",
        "updatedAt" : "2021-04-29T19:52:58Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "7fe9760e-3801-4671-969e-c8a8c888a31c",
        "parentId" : "ed0f4eff-cc56-469b-a5d4-a4a025aaac1a",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "so the structure i am imagine is the _SliverFloatingPersistentHeader listens to the scrollable and updates its renderobject(assuming it is RenderSliverFloatingPersistentHeader) based on it.\r\n\r\nIn terms of how _SliverFloatingPersistentHeader can listen to scrollable, you can either change it to a stateful widget (probably overkill), or makes _SliverFloatingPersistentHeader inject some callback into _SliverPersistentHeaderElement, and figure out how _SliverPersistentHeaderElement can listen to inherited widget",
        "createdAt" : "2021-02-18T20:12:10Z",
        "updatedAt" : "2021-04-29T19:52:58Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "af5caf0f-910a-4c2d-a8fc-a42bd84fbe90",
        "parentId" : "ed0f4eff-cc56-469b-a5d4-a4a025aaac1a",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "I have not figures out how to do this yet, not sure if I am understanding completely. `_SliverFloatingPersistentHeader` is a `RenderObjectWidget`, and `_SliverPersistentHeaderElement` is a `RenderObjectElement`. \r\nMy original plan here in introducing `_FloatingHeader` was to follow to same pattern we use for `SliverAppBar`, which applies a `_FloatingAppBar` in order to listen to the scroll events. Should this be rewritten? It would probably be better for maintainability if we used the same logic one way or the other.",
        "createdAt" : "2021-03-02T21:41:55Z",
        "updatedAt" : "2021-04-29T19:52:58Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "4ed3daf3-29c9-43fd-9297-462c54a61663",
        "parentId" : "ed0f4eff-cc56-469b-a5d4-a4a025aaac1a",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Ah we have similar situation in the appbar as well. If we have it here, do we still need the logic in _FloatingAppBar? it looks the scrolling maybe listen twice for SliverAppBar?",
        "createdAt" : "2021-04-21T22:10:55Z",
        "updatedAt" : "2021-04-29T19:52:58Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "bff9a36b81400af25aef61e7764dae0fb881bb36",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +188,192 @@}\n\nclass _FloatingHeader extends StatefulWidget {\n  const _FloatingHeader({ Key? key, required this.child }) : super(key: key);\n"
  }
]