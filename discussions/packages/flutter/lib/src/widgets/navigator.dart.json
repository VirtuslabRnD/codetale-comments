[
  {
    "id" : "26a18a1d-4530-4025-ac39-d0a6d3a1ef84",
    "prId" : 568,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "338bae54-98e7-4594-8c14-155fde9dc5b4",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "push the default up to the constructor argument\n",
        "createdAt" : "2015-11-24T20:23:40Z",
        "updatedAt" : "2015-11-25T00:13:25Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "860547c1d40bf24553d2669d98441ee48ae9413d",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +81,85 @@    config.observer?._navigator = this;\n    push(config.onGenerateRoute(new NamedRouteSettings(\n      name: config.initialRoute ?? Navigator.defaultRouteName\n    )));\n  }"
  },
  {
    "id" : "632ec74c-def2-4f89-8403-59ecbdf9a402",
    "prId" : 1631,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cf6f059-4baa-471a-a79a-7d90bf407735",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Also say \"A route that doesn't exist might be requested by an Android intent.\" or something, in case people wonder how to test this particular feature...\n",
        "createdAt" : "2016-02-05T18:23:43Z",
        "updatedAt" : "2016-02-05T18:55:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a663d2550ff196c43493390ed4632b4e7ff9676f",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +157,161 @@  /// This callback is typically used for error handling. For example, this\n  /// callback might always generate a \"not found\" page that describes the route\n  /// that wasn't found.\n  ///\n  /// Unknown routes can arise either from errors in the app or from external"
  },
  {
    "id" : "4ead790b-e0d9-4965-9669-18690e12b565",
    "prId" : 1631,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26810bab-0c6c-454e-b0a2-3e7f07f6029d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Can you add the following or something like it to each static in this class other than the openTransaction one?:\n\n```\n///\n/// Uses [openTransaction()]. Only one transaction will be executed per frame.\n```\n",
        "createdAt" : "2016-02-05T18:25:48Z",
        "updatedAt" : "2016-02-05T18:55:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a663d2550ff196c43493390ed4632b4e7ff9676f",
    "line" : 190,
    "diffHunk" : "@@ -1,1 +252,256 @@  }\n\n  /// Calls callback immediately to create a navigator transaction.\n  ///\n  /// To avoid race conditions, a navigator will execute at most one operation"
  },
  {
    "id" : "2f779cb1-bb09-4e82-9bde-077892debaa0",
    "prId" : 4769,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edef7dcb-814f-4e61-b842-0d711f3b81cc",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This will also cancel gesture recognisers dealing with those pointers outside the navigator.\n",
        "createdAt" : "2016-06-27T19:36:29Z",
        "updatedAt" : "2016-06-27T19:57:12Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "fd18705e-15e1-40d2-8ca4-a7104fcf1af5",
        "parentId" : "edef7dcb-814f-4e61-b842-0d711f3b81cc",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(add this to our \"we still need to fix this for real\" bug)\n",
        "createdAt" : "2016-06-27T19:39:15Z",
        "updatedAt" : "2016-06-27T19:57:12Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f912298e96e027e1923428e4a6cdafc8e864cc9f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +495,499 @@    absorber?.absorbing = true;\n    for (int pointer in _activePointers.toList())\n      WidgetsBinding.instance.cancelPointer(pointer);\n  }\n"
  },
  {
    "id" : "d8f531e7-07c8-4012-9a9b-fbb98286bd0e",
    "prId" : 5779,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b746c1ca-1fc4-49aa-9735-76f0ad86f53c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The sentence concludes with 'then [push] that route', so maybe: Look up the route with ..\n",
        "createdAt" : "2016-09-09T15:48:45Z",
        "updatedAt" : "2016-09-09T17:06:47Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "dd66b436-d1f5-45c3-bbdf-c5bb3d3f1562",
        "parentId" : "b746c1ca-1fc4-49aa-9735-76f0ad86f53c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "changed it to `[push]es`\n",
        "createdAt" : "2016-09-09T17:02:30Z",
        "updatedAt" : "2016-09-09T17:06:47Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3756dc21d9e05a5a1b7cea52619f37a637da28c",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +374,378 @@  bool _debugLocked = false; // used to prevent re-entrant calls to push, pop, and friends\n\n  /// Looks up the route with the given name using [Navigator.onGenerateRoute],\n  /// and then [push]es that route.\n  void pushNamed(String name) {"
  },
  {
    "id" : "54470f20-c0fc-4b9c-8f6e-a5e7a13ce585",
    "prId" : 7526,
    "prUrl" : "https://github.com/flutter/flutter/pull/7526#pullrequestreview-17351614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8662b82a-328b-4556-897b-8d7fbe475deb",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe say that it should only be called by the navigator? or maybe it's self-evident that dispose is only called by the owner.",
        "createdAt" : "2017-01-18T23:17:22Z",
        "updatedAt" : "2017-01-19T00:09:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "49d914e3-41fd-4e17-8912-06e9e2fbced1",
        "parentId" : "8662b82a-328b-4556-897b-8d7fbe475deb",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It's already `@protected`, so it's really only callable by navigator or a subclass.  None of the other lifecycle callbacks have that comment...",
        "createdAt" : "2017-01-18T23:20:41Z",
        "updatedAt" : "2017-01-19T00:09:08Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "a9a5a9b1-222b-416f-84b4-2efff691eceb",
        "parentId" : "8662b82a-328b-4556-897b-8d7fbe475deb",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "sgtm",
        "createdAt" : "2017-01-18T23:23:51Z",
        "updatedAt" : "2017-01-19T00:09:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7c1b51f75a2692e8933b27522b9fa64a9c8609",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +113,117 @@  /// The route should remove its overlays and free any other resources.\n  ///\n  /// This route is no longer referenced by the navigator.\n  @mustCallSuper\n  @protected"
  },
  {
    "id" : "c33839c4-5a0c-405b-ade4-d96177ad68fd",
    "prId" : 7526,
    "prUrl" : "https://github.com/flutter/flutter/pull/7526#pullrequestreview-17351177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bc95102-02cc-47ba-9eb8-7fac0cf5be3e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i guess this has the same dispose-live-on-stack issues from above. maybe i don't care.",
        "createdAt" : "2017-01-18T23:20:51Z",
        "updatedAt" : "2017-01-19T00:09:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7c1b51f75a2692e8933b27522b9fa64a9c8609",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +857,861 @@  void finalizeRoute(Route<dynamic> route) {\n    _poppedRoutes.remove(route);\n    route.dispose();\n  }\n"
  },
  {
    "id" : "5e950b4c-3276-4131-8499-d2d2e87561f5",
    "prId" : 7569,
    "prUrl" : "https://github.com/flutter/flutter/pull/7569#pullrequestreview-17783990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08ef752a-ec02-4ba3-8cae-4885a20cc1d2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "hah, more cargo-culted hamilton references!",
        "createdAt" : "2017-01-20T23:12:54Z",
        "updatedAt" : "2017-01-20T23:12:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b4e4349a473c63667195a9b92bbef3cde16c67c",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +672,676 @@  ///\n  /// ```dart\n  /// Navigator.of(context).pushNamed('/nyc/1776');\n  /// ```\n  Future<dynamic> pushNamed(String name) {"
  },
  {
    "id" : "0737f9ff-c480-4d44-a40a-658a7cd8930e",
    "prId" : 7611,
    "prUrl" : "https://github.com/flutter/flutter/pull/7611#pullrequestreview-18227080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ae4adc2-4927-4268-85ba-e4d2059deedf",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "These need docs",
        "createdAt" : "2017-01-24T18:08:59Z",
        "updatedAt" : "2017-01-24T19:24:57Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f51f09b60588c4dc39da0ee9ea230d61c665a12",
    "line" : null,
    "diffHunk" : "@@ -1,1 +594,598 @@  /// Navigator.of(context).pushReplacementNamed('/jouett/1781');\n  /// ```\n  static Future<dynamic> pushReplacementNamed(BuildContext context, String routeName, { dynamic result }) {\n    return Navigator.of(context).pushReplacementNamed(routeName, result: result);\n  }"
  },
  {
    "id" : "a49dacbe-2b44-418b-b8a9-4cb71e23f500",
    "prId" : 7611,
    "prUrl" : "https://github.com/flutter/flutter/pull/7611#pullrequestreview-18228483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7183574-011c-4e85-aa03-cee74950611b",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "On line 779, you handle the empty history case but here you assert that we have an old route.  We should be consistent about whether we handle that case.",
        "createdAt" : "2017-01-24T18:11:20Z",
        "updatedAt" : "2017-01-24T19:24:57Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "adbe0473-499b-4f3d-ac39-a39081d5ea9b",
        "parentId" : "d7183574-011c-4e85-aa03-cee74950611b",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "That's my mistake on line 779, thanks for catching that.",
        "createdAt" : "2017-01-24T18:15:14Z",
        "updatedAt" : "2017-01-24T19:24:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f51f09b60588c4dc39da0ee9ea230d61c665a12",
    "line" : null,
    "diffHunk" : "@@ -1,1 +817,821 @@    setState(() {\n      int index = _history.length - 1;\n      assert(index >= 0);\n      assert(_history.indexOf(oldRoute) == index);\n      newRoute._navigator = this;"
  },
  {
    "id" : "8379b878-04a1-4fa3-8c52-171c1ff4a595",
    "prId" : 7611,
    "prUrl" : "https://github.com/flutter/flutter/pull/7611#pullrequestreview-18228146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "008c6a2e-511b-4b24-b81d-72707f6194c8",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We need to re-check `mounted` when this future resolves.  Otherwise, we can end up disposing `oldRoute` twice (once when we unmount and once when the future resolves).",
        "createdAt" : "2017-01-24T18:12:15Z",
        "updatedAt" : "2017-01-24T19:24:57Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "b5883f18-4062-4a8f-b408-173d1ce43cee",
        "parentId" : "008c6a2e-511b-4b24-b81d-72707f6194c8",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Good point. ",
        "createdAt" : "2017-01-24T18:13:43Z",
        "updatedAt" : "2017-01-24T19:24:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f51f09b60588c4dc39da0ee9ea230d61c665a12",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +823,827 @@      _history[index] = newRoute;\n      newRoute.didPush().then<dynamic>((Null _) {\n        // The old route's exit is not animated. We're assuming that the\n        // new route completely obscures the old one.\n        if (mounted) {"
  },
  {
    "id" : "d5534f8f-5845-4925-a248-27c624886b1c",
    "prId" : 7632,
    "prUrl" : "https://github.com/flutter/flutter/pull/7632#pullrequestreview-18675648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01e7a9fa-7db4-4aa6-a2e7-bcbf31024f9e",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Did you try this code?  I think it might explode because FlatButton wants a Material ancestor.",
        "createdAt" : "2017-01-25T01:48:01Z",
        "updatedAt" : "2017-01-25T16:28:11Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "06f95862-0256-47b9-a427-a476dbf39c7e",
        "parentId" : "01e7a9fa-7db4-4aa6-a2e7-bcbf31024f9e",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I did try it within a MaterialApp/Scaffold. I thought it was OK to assume as much here, since the previous example creates a MaterialApp and I'm creating a MaterialPageRoute.\r\n\r\nI wish I could link to complete flutter projects that contain the snippets being shared here. I wish I could click on an example link and find myself in an IDE window that contained the project, ready to run. I wish.",
        "createdAt" : "2017-01-25T16:20:28Z",
        "updatedAt" : "2017-01-25T16:28:11Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "3c6a55d3-4f10-45dd-8785-5281ba9bc9df",
        "parentId" : "01e7a9fa-7db4-4aa6-a2e7-bcbf31024f9e",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Scaffold builds a Material around `body`.  In this example, there is no scaffold, which means the code will assert.",
        "createdAt" : "2017-01-25T18:10:37Z",
        "updatedAt" : "2017-01-25T18:10:37Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "2a08a445-5fa9-4fdb-a509-b9e17756d856",
        "parentId" : "01e7a9fa-7db4-4aa6-a2e7-bcbf31024f9e",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "You are correct, sorry about that.  I've fixed the doc: https://github.com/flutter/flutter/pull/7638",
        "createdAt" : "2017-01-25T19:17:19Z",
        "updatedAt" : "2017-01-25T19:17:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "24a7cbea-1c81-4ed6-b52a-4818eee81a9e",
        "parentId" : "01e7a9fa-7db4-4aa6-a2e7-bcbf31024f9e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "@HansMuller File a bug about your wish? It might be doable.",
        "createdAt" : "2017-01-26T00:31:37Z",
        "updatedAt" : "2017-01-26T00:31:37Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "3b21b0ab-71a9-4fa9-9bb6-bb71e90b2b0a",
        "parentId" : "01e7a9fa-7db4-4aa6-a2e7-bcbf31024f9e",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "@Hixie Your wish is now my wish: https://github.com/flutter/flutter/issues/7660",
        "createdAt" : "2017-01-26T17:25:52Z",
        "updatedAt" : "2017-01-26T17:25:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "e85c9db3cb0dde8dcd42d1aa7437e2489f3e98cc",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +369,373 @@///   builder: (BuildContext context) {\n///     return new Center(\n///       child: new FlatButton(\n///         child: new Text('OK'),\n///         onPressed: () { Navigator.of(context).pop(true); }"
  },
  {
    "id" : "0a734f1b-6725-455b-b978-2805466c1d57",
    "prId" : 8307,
    "prUrl" : "https://github.com/flutter/flutter/pull/8307#pullrequestreview-23064877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4027c497-2a72-43d6-bc00-620ed93c4429",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Although the docs didn't explain this before, it might be a good idea to explain the method's default behavior.",
        "createdAt" : "2017-02-21T20:39:32Z",
        "updatedAt" : "2017-02-21T20:43:18Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "eca0cebe114627f41f3d9dc28d4d6dc688eb6ab2",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +78,82 @@  ///\n  /// * [Form], which provides an `onWillPop` callback that uses this mechanism.\n  Future<bool> willPop() async => !isFirst;\n\n  /// A request was made to pop this route. If the route can handle it"
  },
  {
    "id" : "1aa0c2e1-6a7d-4d98-a95f-e7f7333bc154",
    "prId" : 10894,
    "prUrl" : "https://github.com/flutter/flutter/pull/10894#pullrequestreview-46094484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "158bb78d-d302-4aca-a0ec-7d2a3cad9022",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Should the value be routeSeparator instead?",
        "createdAt" : "2017-06-22T18:01:31Z",
        "updatedAt" : "2017-06-23T21:25:48Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "57ad2ba8-85f0-4d48-be81-539b95e37197",
        "parentId" : "158bb78d-d302-4aca-a0ec-7d2a3cad9022",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "removed routeSeparator instead",
        "createdAt" : "2017-06-23T21:23:45Z",
        "updatedAt" : "2017-06-23T21:25:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c7560840d39d6548c0156ae1074c1556587cd88",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +544,548 @@  ///  * [dart:ui.Window.defaultRouteName], which reflects the route that the\n  ///    application was started with.\n  static const String defaultRouteName = '/';\n\n  /// Push a named route onto the navigator that most tightly encloses the given context."
  },
  {
    "id" : "dc1678f4-327e-40b9-9cd6-7afa0a5eae24",
    "prId" : 11429,
    "prUrl" : "https://github.com/flutter/flutter/pull/11429#pullrequestreview-52990882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "963f73eb-e3dd-4971-83d6-f4f4d50c9383",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Per our conversation, this isn't new code, it's just been relocated. We need to decide/document what it means to pop the  last route. ",
        "createdAt" : "2017-07-28T17:28:09Z",
        "updatedAt" : "2017-07-28T17:28:09Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "430a06c5868cdc7282f35d41d6bb02f244d9622d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +30,34 @@  /// If [Route.willPop] returns [pop] then the back button will actually pop\n  /// the current route.\n  pop,\n\n  /// Do not pop the route."
  },
  {
    "id" : "4e4c7c7f-2cfd-4896-a798-6d0e5eee55a0",
    "prId" : 11429,
    "prUrl" : "https://github.com/flutter/flutter/pull/11429#pullrequestreview-52991125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "957e6852-440a-46a3-9055-074eefcc5b6c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "We need to clarify what this means if there are nested navigators. I would think that we'd want bubble to mean: defer to the parent navigator or the SystemNavigator if there's no parent.",
        "createdAt" : "2017-07-28T17:29:15Z",
        "updatedAt" : "2017-07-28T17:29:15Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "430a06c5868cdc7282f35d41d6bb02f244d9622d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +41,45 @@  /// If [Route.willPop] return [bubble] then the back button will be handled\n  /// by the [SystemNavigator], which will usually close the application.\n  bubble,\n}\n"
  },
  {
    "id" : "cd8fdb53-4abf-400d-92e6-e907e414ea4b",
    "prId" : 13741,
    "prUrl" : "https://github.com/flutter/flutter/pull/13741#pullrequestreview-85209030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "960010ae-76b9-415c-a602-3bec38e9a2f4",
        "parentId" : null,
        "authorId" : "6fe75f2e-2c3d-4d6a-800e-03a595a5d5aa",
        "body" : "I had originally made this generic as well, but \"--no-implicit-dynamic\" doesn't know about @optionalTypeArgs, and so some explicit `push<dynamic>` calls were required.  Using `Object` here avoids introducing `dynamic` at all.",
        "createdAt" : "2017-12-21T23:23:14Z",
        "updatedAt" : "2018-01-02T22:10:42Z",
        "lastEditedBy" : "6fe75f2e-2c3d-4d6a-800e-03a595a5d5aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "537e84ade535728de079fb5ad9f904396ff185d5",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +915,919 @@  /// Returns a [Future] that completes to the `result` value passed to [pop]\n  /// when the pushed route is popped off the navigator.\n  Future<Object> push(Route<Object> route) {\n    assert(!_debugLocked);\n    assert(() { _debugLocked = true; return true; }());"
  },
  {
    "id" : "c01376f6-b6de-4a48-aacf-856421b29feb",
    "prId" : 15718,
    "prUrl" : "https://github.com/flutter/flutter/pull/15718#pullrequestreview-105956527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebd6f6f9-f340-4ba1-87c9-eccda1416219",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "would describe what would happen if anchorRoute is the root or is not in the stack etc",
        "createdAt" : "2018-03-21T23:44:51Z",
        "updatedAt" : "2018-03-22T01:16:49Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "f89482b6-1c4d-4717-91f5-6c0812daa877",
        "parentId" : "ebd6f6f9-f340-4ba1-87c9-eccda1416219",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Done.",
        "createdAt" : "2018-03-22T00:40:15Z",
        "updatedAt" : "2018-03-22T01:16:49Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb2c0baedaffb158783e15d96a7f2d68aed48db5",
    "line" : 890,
    "diffHunk" : "@@ -1,1 +978,982 @@  ///  * [replace], which is the same but identifies the route to be removed\n  ///    directly.\n  @optionalTypeArgs\n  static void replaceRouteBelow<T extends Object>(BuildContext context, { @required Route<dynamic> anchorRoute, Route<T> newRoute }) {\n    return Navigator.of(context).replaceRouteBelow<T>(anchorRoute: anchorRoute, newRoute: newRoute);"
  },
  {
    "id" : "b03c4f89-8a0c-4e5e-b8d5-d4c0e854b7b7",
    "prId" : 19637,
    "prUrl" : "https://github.com/flutter/flutter/pull/19637#pullrequestreview-142610515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29aa6ad5-57fe-480a-823e-bcf202dcc6f9",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Is something like this ok for now until your new API or do you prefer changing didPush's signature (breaking API) or add something new?",
        "createdAt" : "2018-07-21T03:18:12Z",
        "updatedAt" : "2018-08-16T04:04:02Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "fba3f5d1-b695-4800-8a71-68403fb92452",
        "parentId" : "29aa6ad5-57fe-480a-823e-bcf202dcc6f9",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "yeah it's fine",
        "createdAt" : "2018-08-02T00:33:51Z",
        "updatedAt" : "2018-08-16T04:04:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "703c33696ed35fc44b07b03c50c09b2363af23f3",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1541,1545 @@    if (oldRoute != null) {\n      oldRoute.didChangeNext(route);\n      route.didChangePrevious(oldRoute);\n    }\n    for (NavigatorObserver observer in widget.observers)"
  },
  {
    "id" : "a51f306e-26bb-4543-81a3-69306532f256",
    "prId" : 23126,
    "prUrl" : "https://github.com/flutter/flutter/pull/23126#pullrequestreview-165092689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ae32541-254d-4d35-bb56-e5dfac9bc018",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "+1 for the guard :)",
        "createdAt" : "2018-10-16T10:36:52Z",
        "updatedAt" : "2018-10-16T15:32:43Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2933b0e57cfe9994c906479cc67df18197fba71",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1553,1557 @@  void _afterNavigation() {\n    const bool isReleaseMode = bool.fromEnvironment('dart.vm.product');\n    if (!isReleaseMode) {\n      // This event is used by performance tools that show stats for the\n      // time interval since the last navigation event occurred ensuring that"
  },
  {
    "id" : "f20b92aa-f5b4-4efe-b5b2-b63010cf100a",
    "prId" : 23126,
    "prUrl" : "https://github.com/flutter/flutter/pull/23126#pullrequestreview-165227095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42b59a77-7c95-4d93-9fa9-87a074f97b39",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe add a quick comment for context what these events are used for?",
        "createdAt" : "2018-10-16T10:37:13Z",
        "updatedAt" : "2018-10-16T15:32:43Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "7c30430f-53b4-4f0f-bb6a-3cb91c016824",
        "parentId" : "42b59a77-7c95-4d93-9fa9-87a074f97b39",
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "added a comment.\r\n      // This event is used by performance tools that show stats for the\r\n      // time interval since the last navigation event occurred ensuring that\r\n      // stats only reflect the current page.\r\n      // These tools do not need to know exactly what the new route is so no\r\n      // attempt is made to describe the current route as part of the event.",
        "createdAt" : "2018-10-16T15:32:53Z",
        "updatedAt" : "2018-10-16T15:32:53Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2933b0e57cfe9994c906479cc67df18197fba71",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1559,1563 @@      // These tools do not need to know exactly what the new route is so no\n      // attempt is made to describe the current route as part of the event.\n      developer.postEvent('Flutter.Navigation', <String, dynamic>{});\n    }\n    _cancelActivePointers();"
  },
  {
    "id" : "e8b3f386-654f-4907-991d-178d4404a280",
    "prId" : 23320,
    "prUrl" : "https://github.com/flutter/flutter/pull/23320#pullrequestreview-167674314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "877941c5-2495-4869-b00f-a47378627733",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "We should explain who needs to call this and when.  From the sound of it, it's just a notification.\r\n\r\nThe doc should link to and summarize the role of didStopUserGesture as well as Hero.transitionFromUserGestures.",
        "createdAt" : "2018-10-23T20:29:24Z",
        "updatedAt" : "2018-10-24T21:09:58Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "b3747b30-f45b-4465-83b4-05c5a4b51cb9",
        "parentId" : "877941c5-2495-4869-b00f-a47378627733",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Cross referenced didStopUserGesture. \r\n\r\nThough this is a more generic callback API than heroes. We should probably not reference users of the API from the API.",
        "createdAt" : "2018-10-23T23:08:13Z",
        "updatedAt" : "2018-10-24T21:09:58Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c8a11dbd6cacc9e7e97ce65bcb6c56c86dc40e4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +349,353 @@  void didReplace({ Route<dynamic> newRoute, Route<dynamic> oldRoute }) { }\n\n  /// The [Navigator]'s route `route` is being moved by a user gesture.\n  ///\n  /// For example, this is called when an iOS back gesture starts."
  },
  {
    "id" : "36c793c3-e21b-43be-8c70-46e99949d2a4",
    "prId" : 27058,
    "prUrl" : "https://github.com/flutter/flutter/pull/27058#pullrequestreview-197828729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c6ed6c1-1d57-4d16-a72c-e3c010cbc240",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "We should probably update the sample here - 1776 looks like a parameter/route argument",
        "createdAt" : "2019-01-29T22:47:59Z",
        "updatedAt" : "2019-01-30T01:31:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "b8bf659d-a088-4679-a333-4c940c50f0a6",
        "parentId" : "4c6ed6c1-1d57-4d16-a72c-e3c010cbc240",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "(The actual sample is a few lines below this line, but GitHub won't let me comment on that one)",
        "createdAt" : "2019-01-29T22:57:39Z",
        "updatedAt" : "2019-01-30T01:31:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "09198fac7dcc5091d7da762ca89806826be3f274",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +746,750 @@  /// {@tool sample}\n  ///\n  /// Typical usage is as follows:\n  ///\n  /// ```dart"
  },
  {
    "id" : "287e6e3c-5eb5-43d7-be79-88ce614c1243",
    "prId" : 27058,
    "prUrl" : "https://github.com/flutter/flutter/pull/27058#pullrequestreview-197827023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "246d7714-09cf-45de-9c64-006c98c5272b",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I think it would be worth having a sample that passes an object with methods on it, pointing out that there's no serialization going on and that the methods will be preserved.  Maybe something like\r\n\r\n\r\n````\r\n```dart\r\nclass WeatherRouteArguments {\r\n  WeatherRouteArguments(this.city, this.country);\r\n  final String city;\r\n  final String country;\r\n\r\n  bool isCapitolCity() {\r\n    if (country == 'Germany') {\r\n      return city == 'Berlin';\r\n    }\r\n  }\r\n}\r\n\r\nvoid _didPushButton() {\r\n  Navigator.pushNamed(\r\n    context,\r\n    '/weather',\r\n    arguments: WeatherRouteArguments(city: 'Berlin', country: 'Germany'),\r\n  );\r\n}\r\n```\r\n````\r\n\r\nOr, if nothing else, to give a hint.  I have a feeling that people would normally be better off using classes than maps.",
        "createdAt" : "2019-01-29T22:52:50Z",
        "updatedAt" : "2019-01-30T01:31:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "09198fac7dcc5091d7da762ca89806826be3f274",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +772,776 @@  /// }\n  /// ```\n  /// {@end-tool}\n  ///\n  /// {@tool sample}"
  },
  {
    "id" : "c7443397-925d-409d-b40d-d5740ae69b8a",
    "prId" : 27058,
    "prUrl" : "https://github.com/flutter/flutter/pull/27058#pullrequestreview-197863906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92768e62-d60a-4312-9c0f-aebb19c63bb8",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Here and elsewhere:  instead of `TO` maybe `TResult`",
        "createdAt" : "2019-01-29T22:53:43Z",
        "updatedAt" : "2019-01-30T01:31:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "fd4aeb16-fe61-48ff-aa6b-a5a5997fc268",
        "parentId" : "92768e62-d60a-4312-9c0f-aebb19c63bb8",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I'll leave this on as-is for now since it's not at the core of this PR.",
        "createdAt" : "2019-01-30T01:10:29Z",
        "updatedAt" : "2019-01-30T01:31:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "09198fac7dcc5091d7da762ca89806826be3f274",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +853,857 @@  /// {@end-tool}\n  @optionalTypeArgs\n  static Future<T> pushReplacementNamed<T extends Object, TO extends Object>(\n    BuildContext context,\n    String routeName, {"
  },
  {
    "id" : "eaecaec4-e2c5-457f-97df-05d85b35474e",
    "prId" : 27058,
    "prUrl" : "https://github.com/flutter/flutter/pull/27058#pullrequestreview-197866796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "887cdb99-3918-4b99-963f-1cb0e6dbe8b5",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Maybe a bit too spartan? `The arguments passed to this route. Can be used when building the route.`?",
        "createdAt" : "2019-01-30T01:23:11Z",
        "updatedAt" : "2019-01-30T01:31:31Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "09198fac7dcc5091d7da762ca89806826be3f274",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +317,321 @@  final bool isInitialRoute;\n\n  /// The arguments passed to this route.\n  ///\n  /// May be used when building the route, e.g. in [Navigator.onGenerateRoute]."
  },
  {
    "id" : "6bcb0f30-392e-453e-835c-0e72f356c652",
    "prId" : 27058,
    "prUrl" : "https://github.com/flutter/flutter/pull/27058#pullrequestreview-197866796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2ebf4e1-35a2-49fc-88ab-886f149ba928",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Maybe add a see also to the onGenerateRoute/onUnknownRoute RouteFactorys?",
        "createdAt" : "2019-01-30T01:24:38Z",
        "updatedAt" : "2019-01-30T01:31:31Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "09198fac7dcc5091d7da762ca89806826be3f274",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +794,798 @@  ///     '/weather',\n  ///     arguments: WeatherRouteArguments(city: 'Berlin', country: 'Germany'),\n  ///   );\n  /// }\n  /// ```"
  },
  {
    "id" : "f4c66040-e06a-40af-93d8-8ad071aabd93",
    "prId" : 35223,
    "prUrl" : "https://github.com/flutter/flutter/pull/35223#pullrequestreview-255996538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4fdc351-54e0-4de5-b13c-b825f0c69ee9",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "The wording here is a bit strange, may re-work.",
        "createdAt" : "2019-06-28T22:28:17Z",
        "updatedAt" : "2019-07-08T23:53:01Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "f521636a6de94274eb5a21675d3ff4a3b7cac896",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1163,1167 @@  /// notified, once the new route has finished animating. The futures that had\n  /// been returned from pushing those routes will not complete.\n  ///\n  /// Ongoing gestures within the current route are canceled when a new route is\n  /// pushed."
  },
  {
    "id" : "519c6ee1-7ce7-47c0-adb9-05344fd8e38a",
    "prId" : 35223,
    "prUrl" : "https://github.com/flutter/flutter/pull/35223#pullrequestreview-256979875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25fb93aa-3751-4fb4-8a71-e6702e728e12",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I might be missing something, but It seems like we just need to make sure observer.didPush is called with  precedingRoute. Is the refactoring below necessary?",
        "createdAt" : "2019-07-01T20:06:23Z",
        "updatedAt" : "2019-07-08T23:53:01Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "c4c6d1b9-79f7-46e6-84e8-f2de617568bc",
        "parentId" : "25fb93aa-3751-4fb4-8a71-e6702e728e12",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "observer.didRemove was also not notifying properly.",
        "createdAt" : "2019-07-02T16:03:47Z",
        "updatedAt" : "2019-07-08T23:53:01Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "f521636a6de94274eb5a21675d3ff4a3b7cac896",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +1903,1907 @@    newRoute.install(precedingRouteOverlay);\n    _history.add(newRoute);\n\n    newRoute.didPush().whenCompleteOrCancel(() {\n      if (mounted) {"
  },
  {
    "id" : "d1201d9d-628e-4701-8bbc-11ff1d4a4829",
    "prId" : 39440,
    "prUrl" : "https://github.com/flutter/flutter/pull/39440#pullrequestreview-283184364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b27f85b-b218-42f8-af72-7849c74f293c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This exception message probably needs updating to reflect the new behavior?",
        "createdAt" : "2019-09-03T18:34:54Z",
        "updatedAt" : "2019-09-03T22:34:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f831b0a73a6edd5b7875041afcaf8e11a302ac47",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1533,1537 @@        assert(() {\n          FlutterError.reportError(\n            FlutterErrorDetails(\n              exception:\n                'Could not navigate to initial route.\\n'"
  },
  {
    "id" : "3927bd8b-7a45-4b08-9d1d-532191a5bb79",
    "prId" : 39440,
    "prUrl" : "https://github.com/flutter/flutter/pull/39440#pullrequestreview-283184364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "743b8038-845a-46c1-86d5-0cbec1acc59e",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The documentation on various `initialRoute` arguments in Flutter (e.g. on Navigator, MaterialApp, etc) needs to be updated to reflect the new behavior.",
        "createdAt" : "2019-09-03T18:42:35Z",
        "updatedAt" : "2019-09-03T22:34:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f831b0a73a6edd5b7875041afcaf8e11a302ac47",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1533,1537 @@        assert(() {\n          FlutterError.reportError(\n            FlutterErrorDetails(\n              exception:\n                'Could not navigate to initial route.\\n'"
  },
  {
    "id" : "919de6f7-58fe-44f3-b3de-dc3dfedb9313",
    "prId" : 40166,
    "prUrl" : "https://github.com/flutter/flutter/pull/40166#pullrequestreview-292097242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "599c0b57-ddca-4089-a8ff-13ea208bb0a3",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This is safe even if more than one route is pushed before the futures complete?",
        "createdAt" : "2019-09-23T18:46:11Z",
        "updatedAt" : "2019-09-26T17:57:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "bb238c49-12ee-412e-95af-a20f7b262a9b",
        "parentId" : "599c0b57-ddca-4089-a8ff-13ea208bb0a3",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, I think so, because `requestFocus` does just that: it requests focus, it doesn't set it.  It doesn't actually assign focus until its microtask runs, so it can change a bunch of times, and only the last one to ask actually receives the focus.",
        "createdAt" : "2019-09-23T22:56:36Z",
        "updatedAt" : "2019-09-26T17:57:52Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f8368f15ce7743f223a577d8f8219033ad9e854",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +137,141 @@  TickerFuture didPush() {\n    return TickerFuture.complete()..then<void>((void _) {\n      navigator.focusScopeNode.requestFocus();\n    });\n  }"
  },
  {
    "id" : "8c2cbc6d-3b3f-481f-8088-e32fa6ea110c",
    "prId" : 42100,
    "prUrl" : "https://github.com/flutter/flutter/pull/42100#pullrequestreview-334949448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7710999-ceed-4c62-97b4-ac469ea70d7d",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "This is actually undoing the changes from #35223. IIRC, the new route needs to finish pushing before we can notify the preceding route, which is why it is inside of `whenCompleteOrCancel`.",
        "createdAt" : "2019-12-19T21:42:20Z",
        "updatedAt" : "2020-01-24T10:15:28Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9eb00dfbe4ad5544a3c08472ee64ebd8d1db6a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1968,1972 @@    // Notify for newRoute\n    newRoute.didChangeNext(null);\n    if (precedingRoute != null) {\n      precedingRoute.didChangeNext(newRoute);\n    }"
  },
  {
    "id" : "990aaa3e-ca4a-467e-86e3-b5aa9661dfca",
    "prId" : 44930,
    "prUrl" : "https://github.com/flutter/flutter/pull/44930#pullrequestreview-327103939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47521d8f-98d1-4c59-b111-a0c592d64a41",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "note: When we support pages, we probably also need a seperate \"complete\" state, see https://docs.google.com/document/d/1Q0jx0l4-xymph9O6zLaOY4d_f7YFpNWX_eGbzYxr9wY/edit#heading=h.5im0pq8myoqk",
        "createdAt" : "2019-12-04T20:09:22Z",
        "updatedAt" : "2020-01-29T19:30:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "722c1329b9b8b194638bc5ab31e7ce9bf93d9fab",
    "line" : 739,
    "diffHunk" : "@@ -1,1 +1720,1724 @@//                           idle--+-----+\n//                           /  \\\n//                          /    \\\n//                        pop*  remove*\n//                        /        \\"
  },
  {
    "id" : "943e3ffc-76d6-4b69-baf0-27f72fcba829",
    "prId" : 44930,
    "prUrl" : "https://github.com/flutter/flutter/pull/44930#pullrequestreview-327103939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "159d5f49-f952-4ec9-9cfc-f1ff7c9182d7",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The assert and followed by the if with the same condition doesn't make much sense. Are we sure that the state is always replace here? Then remove the if.",
        "createdAt" : "2019-12-04T20:13:25Z",
        "updatedAt" : "2020-01-29T19:30:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "722c1329b9b8b194638bc5ab31e7ce9bf93d9fab",
    "line" : 845,
    "diffHunk" : "@@ -1,1 +1821,1825 @@      });\n    } else {\n      assert(currentState == _RouteLifecycle.replace);\n      route.didReplace(previous);\n      currentState = _RouteLifecycle.idle;"
  },
  {
    "id" : "efa9a849-d455-45d9-9c4c-409a537f9a37",
    "prId" : 44930,
    "prUrl" : "https://github.com/flutter/flutter/pull/44930#pullrequestreview-327143111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "031714c9-4631-45bd-adc9-abbe12828128",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "for later: If pages are provided, we probably do not want to use the defaultRouteName here. Maybe add a TODO to remind us?",
        "createdAt" : "2019-12-04T20:48:53Z",
        "updatedAt" : "2020-01-29T19:30:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "722c1329b9b8b194638bc5ab31e7ce9bf93d9fab",
    "line" : 983,
    "diffHunk" : "@@ -1,1 +1957,1961 @@    // https://github.com/flutter/flutter/issues/45938\n    _history.addAll(\n      widget.onGenerateInitialRoutes(this, widget.initialRoute ?? Navigator.defaultRouteName)\n        .map((Route<dynamic> route) => _RouteEntry(\n          route,"
  },
  {
    "id" : "080010f4-221a-4dac-a49f-de5e0c2e4829",
    "prId" : 44930,
    "prUrl" : "https://github.com/flutter/flutter/pull/44930#pullrequestreview-327143111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ebdb2a3-de69-48fa-8bc9-54b27fa74582",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: indentation.",
        "createdAt" : "2019-12-04T21:10:56Z",
        "updatedAt" : "2020-01-29T19:30:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "722c1329b9b8b194638bc5ab31e7ce9bf93d9fab",
    "line" : 1210,
    "diffHunk" : "@@ -1,1 +2177,2181 @@      if (widget.onGenerateRoute == null) {\n        throw FlutterError(\n          'Navigator.onGenerateRoute was null, but the route named \"$name\" was referenced.\\n'\n          'To use the Navigator API with named routes (pushNamed, pushReplacementNamed, or '\n          'pushNamedAndRemoveUntil), the Navigator must be provided with an '"
  },
  {
    "id" : "2acfaf43-b31a-400e-bb49-d7586161085e",
    "prId" : 44930,
    "prUrl" : "https://github.com/flutter/flutter/pull/44930#pullrequestreview-331987615",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7230ec61-1f30-495a-9088-6c3628f3ecb1",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The doc comment for didPush should mention that didAdd is called instead of didPush when the route appears immediately without push transition.",
        "createdAt" : "2019-12-13T16:54:31Z",
        "updatedAt" : "2020-01-29T19:30:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "722c1329b9b8b194638bc5ab31e7ce9bf93d9fab",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +158,162 @@    return TickerFuture.complete()..then<void>((void _) {\n      navigator?.focusScopeNode?.requestFocus();\n    });\n  }\n"
  },
  {
    "id" : "757db854-058e-45bd-b0a7-28c56aed3c14",
    "prId" : 44930,
    "prUrl" : "https://github.com/flutter/flutter/pull/44930#pullrequestreview-346826823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99160d7a-4bd9-43c1-a4fe-4603bab5b6c8",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "@goderbauer I feel tedious when trying to write the migrating doc for break change email. I would like to discuss some change to the current api. From the majority internal test failures, people are trying to customize route generating based on the isInitialRoute. For example\r\n```dart\r\nMaterialApp(\r\n  ...\r\n  onGenerateRoute: (RouteSettings settings) {\r\n     if(settings.isInitialRoutes)\r\n      return Route1()\r\n    else\r\n      return Route2()\r\n  }\r\n)\r\n```\r\nThe thing they try to achieve is, given the same route name, they want to render different routes when this route is generating on initial route or generating by a push.\r\n\r\nI found this is difficult to migrate becuse two reason\r\n1, defaultGenerateInitialRoutes is a bit complicate, it require both parsing the string and feed them into onGenerateRoute. User will likely need to duplicate a lot of code in defaultGenerateInitialRoutes to get what they want.\r\n2, This api is not surface to WidgetApp, where majority of the users do not directly initiate navigator. It make them hard to provide onGenerateInitialRoutes.\r\n\r\nWhat I am thinking is we should separate defaultGenerateInitialRoutes into a static function called defaultInitialRouteParser. and defaultGenerateInitialRoutes will use the parser to parse the initialroutename and feed that into ongenerateroute. User who override onGenerateInitialRoutes can then use the defaultInitialRouteParser instead of duplicating code.\r\n\r\nWe will probably also need to surface onGenerateInitialRoutes to material app or cupertino app so that user can really use it for migration.",
        "createdAt" : "2020-01-18T00:58:29Z",
        "updatedAt" : "2020-01-29T19:30:16Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "f5d6a4bf-68dc-4938-a6aa-1a39f3b9aadc",
        "parentId" : "99160d7a-4bd9-43c1-a4fe-4603bab5b6c8",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Talked in person to resolve this.",
        "createdAt" : "2020-01-22T19:00:32Z",
        "updatedAt" : "2020-01-29T19:30:16Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "722c1329b9b8b194638bc5ab31e7ce9bf93d9fab",
    "line" : 488,
    "diffHunk" : "@@ -1,1 +937,941 @@  /// The callback must return a list of [Route] objects with which the history\n  /// will be primed.\n  final RouteListFactory onGenerateInitialRoutes;\n\n  /// Push a named route onto the navigator that most tightly encloses the given"
  },
  {
    "id" : "82bf45a8-32c0-4c33-a54d-45aa19cb9f9f",
    "prId" : 44930,
    "prUrl" : "https://github.com/flutter/flutter/pull/44930#pullrequestreview-346809554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c1f633c-1b40-4ef8-bff4-f44b67c0563e",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I can't comment on that line, but you'll also have to update line 139-140 below. Also, the doc about `isInitialRoute` just below that line should be removed, I think?",
        "createdAt" : "2020-01-22T18:34:34Z",
        "updatedAt" : "2020-01-29T19:30:16Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "722c1329b9b8b194638bc5ab31e7ce9bf93d9fab",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +128,132 @@  ///\n  /// There must be at least one entry in this list after [install] has been\n  /// invoked.\n  ///\n  /// The [Navigator] will take care of keeping the entries together if the"
  },
  {
    "id" : "fb15a8fb-9b33-4903-a424-5f11a5830c06",
    "prId" : 44930,
    "prUrl" : "https://github.com/flutter/flutter/pull/44930#pullrequestreview-346809554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93066816-9968-4e1a-a6ec-1e9fe91f7e5f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Add an assert to the \"_RouteLifecycle.add\" and \"_RouteLifecycle.push/_RouteLifecycle.pushReplace/_RouteLifecycle.replace\" case that rearrangeOverlay is true? (If it is false in those cases the new route would not show up).",
        "createdAt" : "2020-01-22T18:39:18Z",
        "updatedAt" : "2020-01-29T19:30:16Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "722c1329b9b8b194638bc5ab31e7ce9bf93d9fab",
    "line" : 1041,
    "diffHunk" : "@@ -1,1 +2010,2014 @@  }\n\n  void _flushHistoryUpdates({bool rearrangeOverlay = true}) {\n    assert(_debugLocked);\n    // Clean up the list, sending updates to the routes that changed. Notably,"
  },
  {
    "id" : "f36433fe-d35f-4555-b79c-3f26f0179da9",
    "prId" : 44930,
    "prUrl" : "https://github.com/flutter/flutter/pull/44930#pullrequestreview-346809554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea05fb0a-43da-4ead-a789-aeb88875d819",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The doc comment here should mention that this is deprecated and point to the alternative as well.",
        "createdAt" : "2020-01-22T18:42:06Z",
        "updatedAt" : "2020-01-29T19:30:16Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "722c1329b9b8b194638bc5ab31e7ce9bf93d9fab",
    "line" : 341,
    "diffHunk" : "@@ -1,1 +454,458 @@  /// Whether this route is the very first route being pushed onto this [Navigator].\n  ///\n  /// The initial route typically skips any entrance transition to speed startup.\n  ///\n  /// This property has been deprecated. Uses [Navigator.onGenerateInitialRoutes]"
  },
  {
    "id" : "6ecc0b9d-e55b-4854-a88e-ef7b95ab89d0",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-365110542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a003cbf-9799-4ad2-a895-c4a109ac9614",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "+1 for this assert.",
        "createdAt" : "2020-02-26T18:10:23Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 321,
    "diffHunk" : "@@ -1,1 +754,758 @@    //     results = [B, A, C ,D ,E] is invalid because B must be after A.\n    //     results = [A, B, C ,E] is invalid because results must include D.\n    assert(() {\n      final List<RouteTransitionRecord> resultsToVerify = results.toList(growable: false);\n      final Set<RouteTransitionRecord> exitingPageRoutes = locationToExitingPageRoute.values.toSet();"
  },
  {
    "id" : "be0e4d67-4488-4b55-add0-2cb929dbf229",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-365110542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45cd2510-41b8-4c2f-a7b1-bb84ddd9fd59",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Update the documentation above stating which parameters cannot be null.",
        "createdAt" : "2020-02-26T18:28:32Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 572,
    "diffHunk" : "@@ -1,1 +1337,1341 @@  }) : assert(pages != null),\n       assert(onGenerateInitialRoutes != null),\n       assert(transitionDelegate != null),\n       assert(observers != null),\n       super(key: key);"
  },
  {
    "id" : "abb18011-1656-4752-bf63-f14ccdcea40b",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-365110542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f70b09f1-7f8c-43de-a688-f87dada6e03c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The docs on the class Navigator should say something about pages.",
        "createdAt" : "2020-02-26T18:29:22Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 559,
    "diffHunk" : "@@ -1,1 +1325,1329 @@  ///\n  /// If the [pages] is not empty, the [onPopPage] must not be null.\n  const Navigator({\n    Key key,\n    this.pages = const <Page<dynamic>>[],"
  },
  {
    "id" : "7440e90d-9df8-4b8a-9098-22b0950cbd74",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-370579815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5682e60-5cb3-4aaf-97df-9cbe1272a0f2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The assert should be on the constructor of Navigator.",
        "createdAt" : "2020-02-26T18:43:22Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "b9f1605e-b2c4-43b7-b3fd-32efa99a5386",
        "parentId" : "b5682e60-5cb3-4aaf-97df-9cbe1272a0f2",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Asserting a property of a list property will make it a non const constructor. Am I missing something?",
        "createdAt" : "2020-03-02T18:24:34Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "39f10daf-b015-4877-a439-e94ed3ed1ccd",
        "parentId" : "b5682e60-5cb3-4aaf-97df-9cbe1272a0f2",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "You should be able to work around that with something like:\r\n\r\n```\r\nclass Foo {\r\n  const Foo(List<int> list, Function onPop) \r\n    : assert(list == null || onPop != null), \r\n      _list = list ?? const [];\r\n  \r\n  final _list;\r\n}\r\n```",
        "createdAt" : "2020-03-04T19:52:58Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "c27d4841-1586-49cf-a297-8f3b93831df9",
        "parentId" : "b5682e60-5cb3-4aaf-97df-9cbe1272a0f2",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "That sounds fine, but i would still have to assert if the list empty in initstate and didUpdateWidget",
        "createdAt" : "2020-03-06T19:37:34Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "c886d20f-7865-448e-91ac-686548715f6c",
        "parentId" : "b5682e60-5cb3-4aaf-97df-9cbe1272a0f2",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "actually that will be the same thing as what i am doing now, which is the following except i didn't check onPop.\r\n```\r\nclass Foo {\r\n  const Foo(this.list, Function onPop) \r\n    : assert(list == null || onPop != null), \r\n      _list = list ?? const [];\r\n  \r\n  final list;\r\n}\r\n```",
        "createdAt" : "2020-03-06T19:40:56Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 897,
    "diffHunk" : "@@ -1,1 +2557,2561 @@  void initState() {\n    super.initState();\n    assert(\n      widget.pages.isEmpty || widget.onPopPage != null,\n      'The Navigator.onPopPage must be provided to use the Navigator.pages API',"
  },
  {
    "id" : "db3c0359-76ce-4770-b2ba-0ef683ee0a71",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-365110542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb1dc99c-e9d3-455e-933c-ec61da48b70f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "If you provide a list of pages AND an initialRoute we need to honor both (I think you even mentioned that in some of the documentation above).",
        "createdAt" : "2020-02-26T21:14:48Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 919,
    "diffHunk" : "@@ -1,1 +2573,2577 @@        ))\n      );\n    } else {\n      // If there is no page provided, we will need to provide default route\n      // to initialize the navigator."
  },
  {
    "id" : "c0f1e430-59a6-4ab5-bda9-685cfaaaec7d",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-374619878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab739642-a7ea-44e2-8977-e30ac35fda8a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This should be an assert on the widget constructor.",
        "createdAt" : "2020-02-26T21:15:10Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "42833e73-e7cc-4115-ad15-66fd3bc7f938",
        "parentId" : "ab739642-a7ea-44e2-8977-e30ac35fda8a",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I can't avoid the assert here, please see https://github.com/flutter/flutter/pull/50362/files#r389104877",
        "createdAt" : "2020-03-13T21:06:26Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 946,
    "diffHunk" : "@@ -1,1 +2600,2604 @@  void didUpdateWidget(Navigator oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    assert(\n      widget.pages.isEmpty || widget.onPopPage != null,\n      'The Navigator.onPopPage must be provided to use the Navigator.pages API',"
  },
  {
    "id" : "d67b91b7-f942-48a4-8c3e-b95ad0c0f2a2",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-365110542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f69f257-a028-426c-9c8b-b78cec7f8e3a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This method is loooong. I think it would be good to have an overview comment here describing high-level how this algorithm works. It should maybe also point to the algorithm for updating Widgets, which does something similar.",
        "createdAt" : "2020-02-26T21:19:30Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 990,
    "diffHunk" : "@@ -1,1 +2665,2669 @@\n  bool _debugUpdatingPage = false;\n  void _updatePages() {\n    assert(() {\n      assert(!_debugUpdatingPage);"
  },
  {
    "id" : "685cc2f6-b0d7-413a-b540-b4fb453aeda1",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-369033839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05b0b1a1-6962-4d9e-822e-272322b67e70",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Oh, nice. This means we don't even have to invert the list.",
        "createdAt" : "2020-03-04T19:13:31Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 489,
    "diffHunk" : "@@ -1,1 +922,926 @@\n    for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {\n      final bool isLastIteration = newPageRouteHistory.last == pageRoute;\n      if (pageRoute.isEntering) {\n        if (!locationToExitingPageRoute.containsKey(pageRoute) && isLastIteration) {"
  },
  {
    "id" : "77f89643-aace-4e91-9d2f-0657d36d2a52",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-369108236",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a91868cb-dac4-49d8-a029-35569ea718c2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "A route that is currently waiting to be added cannot be updated why not? When does the update happen for that route?",
        "createdAt" : "2020-03-04T19:46:36Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f637f8d1-707b-4d6e-a81b-edcfdfa4ad0e",
        "parentId" : "a91868cb-dac4-49d8-a029-35569ea718c2",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "nice catch, it should be able to..",
        "createdAt" : "2020-03-04T20:44:16Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 719,
    "diffHunk" : "@@ -1,1 +2298,2302 @@\n  bool canUpdateFrom(Page<dynamic> page) {\n    if (currentState.index > _RouteLifecycle.idle.index)\n      return false;\n    if (!hasPage)"
  },
  {
    "id" : "aae001cd-abde-4ddb-b150-a4db886eaaad",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-369126039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53c3cd2b-e0e7-4a56-92ac-17df6b09b91f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "What about the pageless routes above matchingEntry?",
        "createdAt" : "2020-03-04T20:15:00Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "26ff4e47-740b-4ad8-b4e7-ee0d11739cd9",
        "parentId" : "53c3cd2b-e0e7-4a56-92ac-17df6b09b91f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "the new history only contains page-based route all the pageless route will be inserted back after transition delegate resolves them",
        "createdAt" : "2020-03-04T21:12:11Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 1150,
    "diffHunk" : "@@ -1,1 +2825,2829 @@        assert(matchingEntry.canUpdateFrom(nextPage));\n        matchingEntry.route._updateSettings(nextPage);\n        newHistory.add(matchingEntry);\n      }\n    }"
  },
  {
    "id" : "501cab4c-3b50-4569-a6c5-9aa3f49cd6a5",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-370600695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68e2bc9d-7133-4d9c-85d8-fb10ca861a5d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why does this require another loop? Aren't those just the ones from pageKeyToOldEntry?",
        "createdAt" : "2020-03-04T20:16:22Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "9f5c3bb5-786e-408f-bd08-a0a8e1ff3487",
        "parentId" : "68e2bc9d-7133-4d9c-85d8-fb10ca861a5d",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "pageRouteToPagelessRoutes could be updated in one of the previous loops through the middle, no?",
        "createdAt" : "2020-03-04T20:17:52Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "390bf341-7a03-4e56-9c40-458b32b0e0fb",
        "parentId" : "68e2bc9d-7133-4d9c-85d8-fb10ca861a5d",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Similarly, the locationToExitingPageRoute could just be build while we can the middle and when we reuse a route we remove it from there.",
        "createdAt" : "2020-03-04T20:19:14Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "6e61251c-c553-4a7d-b58c-1cb2ba3a335d",
        "parentId" : "68e2bc9d-7133-4d9c-85d8-fb10ca861a5d",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "How do we efficiently remove the route been reused from locationToExitingPageRoute? we would either need to do a linear search or have another map to reverse lookup the location, or record the map in reversed way and re-reverse the map at the end. Space O(2n) X Time O(n)   or Space(n) X TimeO(2n)",
        "createdAt" : "2020-03-06T20:17:52Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 1154,
    "diffHunk" : "@@ -1,1 +2829,2833 @@    }\n\n    // Any remaining old routes that do not have a match will need to be removed.\n    final Map<RouteTransitionRecord, RouteTransitionRecord> locationToExitingPageRoute = <RouteTransitionRecord, RouteTransitionRecord>{};\n    while (oldEntriesBottom <= oldEntriesTop) {"
  },
  {
    "id" : "30654457-f91d-411e-9e70-c70f9b15fc4d",
    "prId" : 50362,
    "prUrl" : "https://github.com/flutter/flutter/pull/50362#pullrequestreview-369125675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adc01e07-c2f7-4362-838b-c1be6bd9d148",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why can we not do this directly in the second while loop of this function?",
        "createdAt" : "2020-03-04T20:21:31Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "c0dad2c0-8920-4eea-98ce-5c85b6422f51",
        "parentId" : "adc01e07-c2f7-4362-838b-c1be6bd9d148",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "if we do that we will have to store it into a list in reverse order and them combine at the end. It need to iterate through them twice anyway. This method will save more space, and this is actually following the same algorithm as updateChildren",
        "createdAt" : "2020-03-04T21:11:36Z",
        "updatedAt" : "2020-03-27T21:46:31Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4248f8d76d812e96528288fc0cc22d1274f765c",
    "line" : 1208,
    "diffHunk" : "@@ -1,1 +2883,2887 @@\n    // Updates the top of the list.\n    while ((oldEntriesBottom <= oldEntriesTop) && (newPagesBottom <= newPagesTop)) {\n      final _RouteEntry oldEntry = _history[oldEntriesBottom];\n      assert(oldEntry != null && oldEntry.currentState != _RouteLifecycle.disposed);"
  },
  {
    "id" : "7b7676ce-258d-427d-840f-203f4b711e29",
    "prId" : 55998,
    "prUrl" : "https://github.com/flutter/flutter/pull/55998#pullrequestreview-405257449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e2de5c2-ce9b-45a0-998e-a78bdc82e02c",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I renamed this to be more descriptive.",
        "createdAt" : "2020-05-04T18:53:25Z",
        "updatedAt" : "2020-05-06T16:43:36Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "6dfda27e9c63304fc8231bdc2c018ffcde6e9f64",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +618,622 @@  /// to transition into the screen. Such a decision should be made in the\n  /// [TransitionDelegate.resolve].\n  bool get isWaitingForEnteringDecision;\n\n  /// Whether this route is waiting for the decision on how to exit the screen."
  },
  {
    "id" : "df0e16fd-93a5-4467-a3a6-929fe4a02ff6",
    "prId" : 57136,
    "prUrl" : "https://github.com/flutter/flutter/pull/57136#pullrequestreview-411155000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05c0ed3d-b2d6-4ca5-a3fc-b67031853b1a",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "This long sentence was a little confusing. Does this mean each substring split by `/` is treated as an individual route?",
        "createdAt" : "2020-05-13T17:34:21Z",
        "updatedAt" : "2020-05-13T17:35:11Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "d3fbbb30-0acc-4ce4-99f3-37427f791415",
        "parentId" : "05c0ed3d-b2d6-4ca5-a3fc-b67031853b1a",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "The substrings from the start of the string up to each `/`is treated as individual routes. The next paragraph describes an example. I am not sure to better describe it.",
        "createdAt" : "2020-05-13T17:40:25Z",
        "updatedAt" : "2020-05-13T17:40:25Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "44fd49b5-7b92-4530-a9fe-edac4bedbce0",
        "parentId" : "05c0ed3d-b2d6-4ca5-a3fc-b67031853b1a",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Ok! SGTM",
        "createdAt" : "2020-05-13T17:41:20Z",
        "updatedAt" : "2020-05-13T17:41:21Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "2675ff4af89a9f09059d234aca808295a417888c",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2155,2159 @@  /// in it, then the string is split on those characters and substrings from\n  /// the start of the string up to each such character are, in turn, used as\n  /// routes to push.\n  ///\n  /// For example, if the route `/stocks/HOOLI` was used as the [initialRoute],"
  },
  {
    "id" : "7988dc95-0fe5-4a12-99b4-e492e64b0b88",
    "prId" : 58259,
    "prUrl" : "https://github.com/flutter/flutter/pull/58259#pullrequestreview-423968338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31fbfc27-3a8b-4cc3-babc-e1fcfe1718a7",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "/cc @gspencergoog I seem to remember that you recently also ran into the problem that \"self\" is not included when you look up ancestors. How did we solve the problem there again?",
        "createdAt" : "2020-06-03T21:46:36Z",
        "updatedAt" : "2020-06-03T22:20:54Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8c93eefa-d8a5-497f-ae2f-ed5eef81848f",
        "parentId" : "31fbfc27-3a8b-4cc3-babc-e1fcfe1718a7",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I created [`_getAncestor`](https://cs.opensource.google/flutter/flutter/+/master:packages/flutter/lib/src/widgets/focus_traversal.dart;l=26?q=_getAncestor&ss=flutter%2Fflutter) to fetch the parent so that I can start searching using `getElementForInheritedWidgetOfExactType` from the parent element, which avoids returning itself just by starting the search with the parent element.",
        "createdAt" : "2020-06-03T22:00:32Z",
        "updatedAt" : "2020-06-03T22:20:54Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "b1c2db1e-e877-454a-9e40-253390cbb101",
        "parentId" : "31fbfc27-3a8b-4cc3-babc-e1fcfe1718a7",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "And my problem was the opposite: `getElementForInheritedWidgetOfExactType` can return self, and I didn't want it to.",
        "createdAt" : "2020-06-03T22:00:59Z",
        "updatedAt" : "2020-06-03T22:20:54Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "570b82fdaed7a9dfadb36af231d7c4f196a0f895",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2132,2136 @@    bool nullOk = false,\n  }) {\n    // Handles the case where the input context is a navigator element.\n    NavigatorState navigator;\n    if (context is StatefulElement && context.state is NavigatorState) {"
  },
  {
    "id" : "868d6e1b-75ee-427b-a62a-0da8595a4d31",
    "prId" : 58808,
    "prUrl" : "https://github.com/flutter/flutter/pull/58808#pullrequestreview-429354790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0eeaaf9c-199c-4adf-a417-05cf5ae001af",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why? it seems perfectly reasonable to use this class to provide a HeroController if you're making a widget that gets a Navigator from somewhere else.",
        "createdAt" : "2020-06-11T22:30:04Z",
        "updatedAt" : "2020-06-11T22:30:04Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f787628f-1bae-4e0a-bb96-936845a99781",
        "parentId" : "0eeaaf9c-199c-4adf-a417-05cf5ae001af",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I think we should encourage user to use observer instead if they can?",
        "createdAt" : "2020-06-11T23:12:56Z",
        "updatedAt" : "2020-06-11T23:12:56Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "819db295-85ca-45dd-8223-69be4ee0ce15",
        "parentId" : "0eeaaf9c-199c-4adf-a417-05cf5ae001af",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I mean until we finally refactor the hero controller to not depend on navigator observer",
        "createdAt" : "2020-06-11T23:13:27Z",
        "updatedAt" : "2020-06-11T23:13:27Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "14a1fbec7f1735414cd8af50f0eea2f448d4d932",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +615,619 @@/// use this class to host the [HeroController], and they should be the only\n/// exception to use this class. If you want to subscribe your own\n/// [HeroController], use the [Navigator.observers] instead.\n///\n/// The hosted hero controller will be picked up by the navigator in the"
  },
  {
    "id" : "54d096a8-49b5-4fbb-bf27-2cb5f52e705e",
    "prId" : 58808,
    "prUrl" : "https://github.com/flutter/flutter/pull/58808#pullrequestreview-429336737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "769e86a6-c2de-4b89-bc11-c40f0f8507f0",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "it's not more \"Standard\" than this way :-)",
        "createdAt" : "2020-06-11T22:30:26Z",
        "updatedAt" : "2020-06-11T22:30:27Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "14a1fbec7f1735414cd8af50f0eea2f448d4d932",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +623,627 @@/// See also:\n///\n///  * [Navigator.observers], which is the standard way of providing a\n///    [HeroController].\nclass HeroControllerScope extends InheritedWidget {"
  },
  {
    "id" : "fd3e007e-e417-446d-9758-24ce037420fe",
    "prId" : 58808,
    "prUrl" : "https://github.com/flutter/flutter/pull/58808#pullrequestreview-429355779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7aa2540e-c005-4d8c-9ac8-33bbb031efb3",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "would be clearer to have two constructors, one that requires that controller be non-null, and one that doesn't have a controller argument, with a name like `HeroControllerScope.none` or something.",
        "createdAt" : "2020-06-11T22:31:43Z",
        "updatedAt" : "2020-06-11T22:31:44Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "fb09d849-30c8-4959-a11b-16a9fdf3b88b",
        "parentId" : "7aa2540e-c005-4d8c-9ac8-33bbb031efb3",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "This is a temporary workaround for router api, eventually we want to build a more flexible system. I think we should not further improve this api?",
        "createdAt" : "2020-06-11T23:15:57Z",
        "updatedAt" : "2020-06-11T23:15:57Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "14a1fbec7f1735414cd8af50f0eea2f448d4d932",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +627,631 @@class HeroControllerScope extends InheritedWidget {\n  /// Creates a widget to host the input [controller].\n  const HeroControllerScope({\n    Key key,\n    this.controller,"
  },
  {
    "id" : "082b12cb-a290-4673-b9d1-fc466b9c21c7",
    "prId" : 60621,
    "prUrl" : "https://github.com/flutter/flutter/pull/60621#pullrequestreview-441062750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68be2968-914e-4b25-ab0e-4ac995211b54",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can you document the problems that this can cause if this is turned on for nested navigators (or whenever you have more than one navigator doing this)?",
        "createdAt" : "2020-07-01T17:24:01Z",
        "updatedAt" : "2020-07-07T23:58:10Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecde06083a0af743450854efdc2271f987007c82",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1504,1508 @@  ///\n  /// If the property is set to true, this navigator automatically sends the\n  /// route update message to the engine when it detects top-most route changes.\n  /// The messages are used by the web engine to update the browser URL bar.\n  ///"
  },
  {
    "id" : "7076a863-a4f9-4336-b1d8-b14d43fff4bb",
    "prId" : 61375,
    "prUrl" : "https://github.com/flutter/flutter/pull/61375#pullrequestreview-447658142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78b41263-d4cb-4070-b571-52ad214c615f",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "does a warping => \"warps\" from one tab to another, non-adjacent tab, with an animation. \r\n\r\nOn the face of it, it's not clear why this route might have been disposed as a consequence of the warp. The test appears to set up a situation where the old Navigator will have been disposed - not its route. Can you explain this scenario in a little more detail?",
        "createdAt" : "2020-07-13T22:41:16Z",
        "updatedAt" : "2020-07-13T22:44:36Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "12e214df067a6375f801ceee9dc4ec74717e3f7a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +215,219 @@    TickerFuture.complete().then<void>((void _) {\n      // The route can be disposed before the ticker future completes. This can\n      // happen when the navigator is under a TabView that does a warping. The\n      // navigator will be null in this case, and we have to do a null-safe\n      // operation."
  },
  {
    "id" : "c4d3e0a3-ad7e-4c06-9e66-a86c0c21cd52",
    "prId" : 62499,
    "prUrl" : "https://github.com/flutter/flutter/pull/62499#pullrequestreview-457725427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06105885-8642-4d61-962e-553b711c9a82",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "It's probably worth adding docs to the class docs of `NavigatorState` that says you can get a reference to the class by calling `Navigator.of`",
        "createdAt" : "2020-07-29T17:12:33Z",
        "updatedAt" : "2020-07-29T17:56:25Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "68156f421eca1e53be94c5af643427ee6b308b18",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +313,317 @@  /// This is called by [didPop] and in response to\n  /// [NavigatorState.pushReplacement]. If [didPop] was not called, then the\n  /// [NavigatorState.finalizeRoute] method must be called immediately, and no exit\n  /// animation will run.\n  ///"
  },
  {
    "id" : "e6ab8da9-134e-4fd5-a1db-8b9f4f944515",
    "prId" : 65658,
    "prUrl" : "https://github.com/flutter/flutter/pull/65658#pullrequestreview-487178667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ced64ace-5c53-4ae6-bca1-f4db2524d2ac",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "the restorable* methods should be mentioned in their corresponding non-restorable version",
        "createdAt" : "2020-09-11T23:53:54Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "857efb9aef5c9dea56cc23d35e3da6c3eaabc302",
    "line" : 888,
    "diffHunk" : "@@ -1,1 +3987,3991 @@    return push<T>(_routeNamed<T>(routeName, arguments: arguments)!);\n  }\n\n  /// Push a named route onto the navigator.\n  ///"
  },
  {
    "id" : "5bd79073-72f6-4ffe-ba62-b435fdbf587b",
    "prId" : 65658,
    "prUrl" : "https://github.com/flutter/flutter/pull/65658#pullrequestreview-497961327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9e020ea-c4d1-4fd7-acc3-50cd3050d710",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Couldn't the restorablePush just return the restorable future? if we asked user to provide their own restorationid to the route, I think we can probably restore this future with the logic similar to the _hookOntoRouteFuture?",
        "createdAt" : "2020-09-25T21:51:31Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "97f61fdc-caee-4ea0-85fb-856f9217700a",
        "parentId" : "f9e020ea-c4d1-4fd7-acc3-50cd3050d710",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "After state restoration, how would the entity that pushed the route get access to the restorableRouteFuture again that was returned when the route was initially pushed? ",
        "createdAt" : "2020-09-28T22:28:01Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f8ba2e59-2391-4919-a41f-4a6f2d5a0a99",
        "parentId" : "f9e020ea-c4d1-4fd7-acc3-50cd3050d710",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Is this because there is no way to restore the future chain unless all the call back are static functions? Restore the route future is possible I think? but then caller will have to reattach their future chain again.",
        "createdAt" : "2020-09-28T23:18:02Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "857efb9aef5c9dea56cc23d35e3da6c3eaabc302",
    "line" : 2132,
    "diffHunk" : "@@ -1,1 +5599,5603 @@/// ```\n/// {@end-tool}\nclass RestorableRouteFuture<T> extends RestorableProperty<String?> {\n  /// Creates a [RestorableRouteFuture].\n  ///"
  },
  {
    "id" : "0f648238-495b-4497-8e66-1d868bac9e7f",
    "prId" : 65658,
    "prUrl" : "https://github.com/flutter/flutter/pull/65658#pullrequestreview-500685660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b9e228d-7b53-4ae9-93f9-e081ec30ad06",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "If it's the same API as pushReplacementNamed, does it need to be different?",
        "createdAt" : "2020-09-30T23:50:53Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "38df9790-570d-499a-bb6c-c56ff5e2dfe6",
        "parentId" : "7b9e228d-7b53-4ae9-93f9-e081ec30ad06",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "for example, don't we need to be doing something with the return value?",
        "createdAt" : "2020-09-30T23:55:05Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "b85f0091-c277-45dc-ae83-bd77c318f7df",
        "parentId" : "7b9e228d-7b53-4ae9-93f9-e081ec30ad06",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "You only have to do something with the return value if you want to get access to the return value of the route or the route object itself. If you don't care about any of this, the usage is exactly the same. See also the `flutter.widgets.navigator.restorablePushNamed.returnValue` docs.",
        "createdAt" : "2020-10-01T18:45:20Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "deb776ee-552f-4b66-9f75-3606b1523829",
        "parentId" : "7b9e228d-7b53-4ae9-93f9-e081ec30ad06",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I also added some clearer language around this to the doc.",
        "createdAt" : "2020-10-01T20:16:01Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "857efb9aef5c9dea56cc23d35e3da6c3eaabc302",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +1822,1826 @@  /// ```dart\n  /// void _switchToAudioVolume() {\n  ///   Navigator.restorablePushReplacementNamed(context, '/settings/volume');\n  /// }\n  /// ```"
  },
  {
    "id" : "4a71daaf-3f79-4163-be7e-6de7829ea1a0",
    "prId" : 65658,
    "prUrl" : "https://github.com/flutter/flutter/pull/65658#pullrequestreview-500624479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20fe4fa9-41c3-4d92-898c-8ba8ee10ecab",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "is this supposed to return String?",
        "createdAt" : "2020-09-30T23:51:49Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "43005d22-efc4-4f37-8f4e-ee7bcce5fb52",
        "parentId" : "20fe4fa9-41c3-4d92-898c-8ba8ee10ecab",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "never mind i didn't see the `@macro flutter.widgets.navigator.restorablePushNamed.returnValue`.",
        "createdAt" : "2020-09-30T23:55:34Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1f03b09c-bca1-4302-9642-4655739ccded",
        "parentId" : "20fe4fa9-41c3-4d92-898c-8ba8ee10ecab",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Instead of a `String` I could make this one return an opaque RouteId object, if that sounds better...",
        "createdAt" : "2020-10-01T18:45:56Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "857efb9aef5c9dea56cc23d35e3da6c3eaabc302",
    "line" : 463,
    "diffHunk" : "@@ -1,1 +2122,2126 @@  /// {@end-tool}\n  @optionalTypeArgs\n  static String restorablePush<T extends Object?>(BuildContext context, RestorableRouteBuilder<T> routeBuilder, {Object? arguments}) {\n    return Navigator.of(context)!.restorablePush(routeBuilder, arguments: arguments);\n  }"
  },
  {
    "id" : "de2e0d6c-de9a-4d11-b767-9d37980a4648",
    "prId" : 65658,
    "prUrl" : "https://github.com/flutter/flutter/pull/65658#pullrequestreview-500686030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5cf1cc3-e8a6-4e19-9aaf-875df0f9f6af",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this seems to discard the return value",
        "createdAt" : "2020-09-30T23:55:48Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2e56b86d-3e06-47ca-9956-0d62a1a41f23",
        "parentId" : "a5cf1cc3-e8a6-4e19-9aaf-875df0f9f6af",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "which is fine, see new and improved doc on return value.",
        "createdAt" : "2020-10-01T20:16:33Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "857efb9aef5c9dea56cc23d35e3da6c3eaabc302",
    "line" : 454,
    "diffHunk" : "@@ -1,1 +2113,2117 @@  ///     ),\n  ///     floatingActionButton: FloatingActionButton(\n  ///       onPressed: () => Navigator.restorablePush(context, _myRouteBuilder),\n  ///       tooltip: 'Increment Counter',\n  ///       child: const Icon(Icons.add),"
  },
  {
    "id" : "8a9b7b26-4a6d-4991-b054-7a2696c1500b",
    "prId" : 65658,
    "prUrl" : "https://github.com/flutter/flutter/pull/65658#pullrequestreview-500686071",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f2c97d1-0d46-4320-86c1-1e1bc4dd563a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this also ignores the return value",
        "createdAt" : "2020-09-30T23:57:21Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "fe15be4a-8db3-4e51-b09a-46bed87286d7",
        "parentId" : "7f2c97d1-0d46-4320-86c1-1e1bc4dd563a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "which is fine, see new and improved doc on return value.",
        "createdAt" : "2020-10-01T20:16:37Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "857efb9aef5c9dea56cc23d35e3da6c3eaabc302",
    "line" : 1069,
    "diffHunk" : "@@ -1,1 +4206,4210 @@  /// ```dart\n  /// void _openCalendar() {\n  ///   navigator.restorablePushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));\n  /// }\n  /// ```"
  },
  {
    "id" : "36f05dfe-3677-41a4-83fc-2331204e2b57",
    "prId" : 65658,
    "prUrl" : "https://github.com/flutter/flutter/pull/65658#pullrequestreview-500686289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdc9d4d9-aa56-4523-a4d6-e8d2e6240239",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Does the restoration framework sends update if the platform is web?",
        "createdAt" : "2020-10-01T18:38:33Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "0ee2bda4-fa4e-46a3-850f-30834397f250",
        "parentId" : "bdc9d4d9-aa56-4523-a4d6-e8d2e6240239",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The web embedder currently does not turn on restoration.",
        "createdAt" : "2020-10-01T20:16:57Z",
        "updatedAt" : "2020-10-01T23:50:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "857efb9aef5c9dea56cc23d35e3da6c3eaabc302",
    "line" : 1733,
    "diffHunk" : "@@ -1,1 +5200,5204 @@  @override\n  // TODO(goderbauer): remove the kIsWeb check when https://github.com/flutter/flutter/issues/33615 is resolved.\n  bool get isRestorable => !kIsWeb;\n\n  @override"
  },
  {
    "id" : "99aaa831-0441-4e9f-b5f1-d31f3daaf78c",
    "prId" : 71689,
    "prUrl" : "https://github.com/flutter/flutter/pull/71689#pullrequestreview-563114512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5175731-dd91-4788-96a5-e1d7e851f320",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "not an expert on wording, should we avoid using word such as `whenever`?",
        "createdAt" : "2020-12-22T22:29:57Z",
        "updatedAt" : "2020-12-22T22:35:11Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "1c180125-d06a-42de-bbda-6b6b45b8840c",
        "parentId" : "e5175731-dd91-4788-96a5-e1d7e851f320",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm not aware of any reason to avoid \"whenever\" in this context.",
        "createdAt" : "2021-01-06T23:57:36Z",
        "updatedAt" : "2021-01-06T23:57:37Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f3b98c857f98acf53b2f73c636c7cbc43ef4d82",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +406,410 @@  void changedInternalState() { }\n\n  /// Called whenever the [Navigator] has updated in some manner that might\n  /// affect routes, to indicate that the route may wish to rebuild as well.\n  ///"
  }
]