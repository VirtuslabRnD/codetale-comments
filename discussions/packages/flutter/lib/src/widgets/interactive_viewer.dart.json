[
  {
    "id" : "24689c4b-2c36-43c7-8e38-28cbdf9d71aa",
    "prId" : 56409,
    "prUrl" : "https://github.com/flutter/flutter/pull/56409#pullrequestreview-418621264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00991285-49fa-418f-81f2-ff7d13243648",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: group the imports, i.e. dart imports, package imports, and non-package imports should all be in separate groups separated by newlines. ",
        "createdAt" : "2020-05-26T19:43:02Z",
        "updatedAt" : "2020-06-02T19:45:35Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcb4aa720680a40889be3f4bd7d2e1cce9f6ae8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@// found in the LICENSE file.\n\nimport 'dart:math' as math;\n\nimport 'package:flutter/gestures.dart';"
  },
  {
    "id" : "5b3fb69d-637d-42b9-b277-b333b2d3badf",
    "prId" : 56409,
    "prUrl" : "https://github.com/flutter/flutter/pull/56409#pullrequestreview-419357130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe26d466-21aa-44ca-ae9f-f1be801854a0",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can we assert this?",
        "createdAt" : "2020-05-26T19:50:26Z",
        "updatedAt" : "2020-06-02T19:45:35Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "22615f64-b25f-432d-a5b4-1e9de68ffcfb",
        "parentId" : "fe26d466-21aa-44ca-ae9f-f1be801854a0",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Maybe what we want to assert here is boundaryMargin.isNonNegative?",
        "createdAt" : "2020-05-27T16:25:07Z",
        "updatedAt" : "2020-06-02T19:45:36Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcb4aa720680a40889be3f4bd7d2e1cce9f6ae8",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@  /// `EdgeInsets.all(double.infinity)`.\n  ///\n  /// No edge can be NaN.\n  ///\n  /// Defaults to [EdgeInsets.zero], which results in boundaries that are the"
  },
  {
    "id" : "7a03eadd-980a-473d-9e5f-df02148ad6e1",
    "prId" : 56409,
    "prUrl" : "https://github.com/flutter/flutter/pull/56409#pullrequestreview-419570026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9436785-ea23-453c-b477-6b3c6fd78ea2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Unlike the others, this method seems to just modify the matrix in-place? If that's ok, why are the other methods cloning? ",
        "createdAt" : "2020-05-26T20:47:42Z",
        "updatedAt" : "2020-06-02T19:45:35Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8f003940-5408-4427-89d5-2aca901143ca",
        "parentId" : "f9436785-ea23-453c-b477-6b3c6fd78ea2",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I intended to always operate on a new matrix, but looks like I missed a clone here.  Good catch.",
        "createdAt" : "2020-05-27T20:07:51Z",
        "updatedAt" : "2020-06-02T19:45:36Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcb4aa720680a40889be3f4bd7d2e1cce9f6ae8",
    "line" : 642,
    "diffHunk" : "@@ -1,1 +640,644 @@  }\n\n  // Return a new matrix representing the given matrix after applying the given\n  // rotation.\n  Matrix4 _matrixRotate(Matrix4 matrix, double rotation, Offset focalPoint) {"
  },
  {
    "id" : "d9089db3-86e3-42d4-9f5a-3b14ec05fa9d",
    "prId" : 56409,
    "prUrl" : "https://github.com/flutter/flutter/pull/56409#pullrequestreview-419591954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a5a990e-940a-4135-aabe-504a01a7f1db",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe I missed this, but I would have expected that you'd listen to the `TransformationController` somewhere to rebuild when the transformation changes? ",
        "createdAt" : "2020-05-26T21:23:01Z",
        "updatedAt" : "2020-06-02T19:45:35Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "e90972f9-81e4-4325-b2fa-a22020cb89a1",
        "parentId" : "9a5a990e-940a-4135-aabe-504a01a7f1db",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Done as part of https://github.com/flutter/flutter/pull/56409#discussion_r431324470",
        "createdAt" : "2020-05-27T20:41:59Z",
        "updatedAt" : "2020-06-02T19:45:36Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcb4aa720680a40889be3f4bd7d2e1cce9f6ae8",
    "line" : 902,
    "diffHunk" : "@@ -1,1 +900,904 @@  void initState() {\n    super.initState();\n\n    _transformationController = widget.transformationController\n        ?? TransformationController();"
  },
  {
    "id" : "302116f2-fa03-484f-8b5e-5cb78184030a",
    "prId" : 56409,
    "prUrl" : "https://github.com/flutter/flutter/pull/56409#pullrequestreview-419357130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb0bfa23-d35c-429f-a869-f14b449f1f85",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If this assert fails, should have a custom error message",
        "createdAt" : "2020-05-27T16:34:35Z",
        "updatedAt" : "2020-06-02T19:45:36Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcb4aa720680a40889be3f4bd7d2e1cce9f6ae8",
    "line" : 511,
    "diffHunk" : "@@ -1,1 +509,513 @@    // Boundaries that are partially infinite are not allowed because Matrix4's\n    // rotation and translation methods don't handle infinites well.\n    assert(_boundaryRectCached.isFinite ||\n        (_boundaryRectCached.left.isInfinite\n        && _boundaryRectCached.top.isInfinite"
  },
  {
    "id" : "4dffffad-7f38-4eaa-ae82-276ba183d20f",
    "prId" : 56409,
    "prUrl" : "https://github.com/flutter/flutter/pull/56409#pullrequestreview-419357130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f197711-78ce-4ce7-a5bd-d0b2d7d15bda",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2020-05-27T16:44:25Z",
        "updatedAt" : "2020-06-02T19:45:36Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcb4aa720680a40889be3f4bd7d2e1cce9f6ae8",
    "line" : 1009,
    "diffHunk" : "@@ -1,1 +1007,1011 @@  ///\n  /// A viewport point is relative to the parent while a scene point is relative\n  /// to the child, regardless of transformation. Calling toScene with a\n  /// viewport point essentially returns the scene coordinate that lies\n  /// underneath the viewport point given the transform."
  },
  {
    "id" : "54be8971-b66a-4bbb-8aa6-3816762abbe6",
    "prId" : 56409,
    "prUrl" : "https://github.com/flutter/flutter/pull/56409#pullrequestreview-419670097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2503f5fd-d63c-42a6-b441-dd805ae6eb46",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Not sure if there's a situation where value can't be inverted or if we should fail gracefully in that case. Probably OK for now.",
        "createdAt" : "2020-05-27T16:47:09Z",
        "updatedAt" : "2020-06-02T19:45:36Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "5734cc66-faba-47e8-8858-8c5429b178da",
        "parentId" : "2503f5fd-d63c-42a6-b441-dd805ae6eb46",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "That's an interesting thought.  I've seen these matrix operations start spitting out NaNs when there are infinite values in the matrix for example, which was the reason I prevented partially infinite boundaryMargins.  I'll keep an eye out for other problems coming from stuff like this.",
        "createdAt" : "2020-05-27T23:07:33Z",
        "updatedAt" : "2020-06-02T19:45:36Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcb4aa720680a40889be3f4bd7d2e1cce9f6ae8",
    "line" : 1039,
    "diffHunk" : "@@ -1,1 +1037,1041 @@    // On viewportPoint, perform the inverse transformation of the scene to get\n    // where the point would be in the scene before the transformation.\n    final Matrix4 inverseMatrix = Matrix4.inverted(value);\n    final Vector3 untransformed = inverseMatrix.transform3(Vector3(\n      viewportPoint.dx,"
  },
  {
    "id" : "3efc5230-2129-415b-b314-4d1832916f52",
    "prId" : 56409,
    "prUrl" : "https://github.com/flutter/flutter/pull/56409#pullrequestreview-422239720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb9955ee-7a85-40ca-b333-f8b88851f9cc",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I don't find it super-clear to understand from the description what the property does, but unfortunately, I also don't have a better suggestion. ",
        "createdAt" : "2020-06-01T17:43:09Z",
        "updatedAt" : "2020-06-02T19:45:36Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "fcd4123c-0de5-4c6e-9ddd-72af177c6994",
        "parentId" : "eb9955ee-7a85-40ca-b333-f8b88851f9cc",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "True. I'll clarify in the example description a bit at least.",
        "createdAt" : "2020-06-01T23:09:14Z",
        "updatedAt" : "2020-06-02T19:45:36Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcb4aa720680a40889be3f4bd7d2e1cce9f6ae8",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +109,113 @@  ///\n  /// If set to false, then the child will be given infinite constraints. This\n  /// is often useful when a child should be bigger than the InteractiveViewer.\n  ///\n  /// Defaults to true."
  },
  {
    "id" : "947bfe00-2cc6-4c9a-9d06-0e95529f1d99",
    "prId" : 63543,
    "prUrl" : "https://github.com/flutter/flutter/pull/63543#pullrequestreview-465542148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49cfa156-3574-40b3-805b-bf3c4b51d820",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "The change from an if to an assert here and below was just something I noticed while I was working on this. It's not related to the fix.",
        "createdAt" : "2020-08-12T02:03:03Z",
        "updatedAt" : "2020-08-12T17:35:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "3976a6f073169d7fc54fbf834654fea438be9cd8",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +756,760 @@    switch (_gestureType) {\n      case _GestureType.scale:\n        assert(_scaleStart != null);\n        // details.scale gives us the amount to change the scale as of the\n        // start of this gesture, so calculate the amount to scale as of the"
  },
  {
    "id" : "66876e4e-7384-41c7-9677-d47a709d0dec",
    "prId" : 63543,
    "prUrl" : "https://github.com/flutter/flutter/pull/63543#pullrequestreview-466120780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd5d85d8-c59b-45ab-ae92-003e9dd4c2e3",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "nit: if `details.scale` is not 1.0 this gesture would have been reinterpreted to scale or rotate I think?",
        "createdAt" : "2020-08-12T08:30:20Z",
        "updatedAt" : "2020-08-12T17:35:58Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "6e44599a-fd7d-4f8d-a951-5b4f1449dbe8",
        "parentId" : "dd5d85d8-c59b-45ab-ae92-003e9dd4c2e3",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I thought the same thing at first, but I remembered that this is for the case where scale is disabled.  I'll add a comment about that actually.",
        "createdAt" : "2020-08-12T17:21:37Z",
        "updatedAt" : "2020-08-12T17:35:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "3976a6f073169d7fc54fbf834654fea438be9cd8",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +810,814 @@        // In an effort to keep the behavior similar whether or not scaleEnabled\n        // is true, these gestures are thrown away.\n        if (details.scale != 1.0) {\n          return;\n        }"
  },
  {
    "id" : "7b6e5769-ee17-4aee-ab72-97ab12c3e68d",
    "prId" : 63543,
    "prUrl" : "https://github.com/flutter/flutter/pull/63543#pullrequestreview-466131294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd7e17a2-a837-4c25-ad94-a6ad3f9321d4",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Off-topic: I haven't tried it, but the heuristic here feels like a bit of a hit or miss? These values can have subtle changes even if the user tries to keep their fingers still. And once it's recognized as scale or rotate it can't be reinterpreted to something else.",
        "createdAt" : "2020-08-12T09:06:59Z",
        "updatedAt" : "2020-08-12T17:35:58Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "d6b21295-5213-417a-9ba3-633a4abe9700",
        "parentId" : "cd7e17a2-a837-4c25-ad94-a6ad3f9321d4",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Yeah there is probably a better way to do this.  Currently rotate is hardcoded to disabled, so it won't affect anyone, but it did work alright when I was using it.  The fact that it can't be reinterpreted is on purpose (at least at perceptible time scales) to avoid small amounts of scale rotation when actually just trying to do the opposite gesture.  Google Maps does the same thing.",
        "createdAt" : "2020-08-12T17:35:37Z",
        "updatedAt" : "2020-08-12T17:35:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "3976a6f073169d7fc54fbf834654fea438be9cd8",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +692,696 @@    final double scale = !widget.scaleEnabled ? 1.0 : details.scale;\n    final double rotation = !_rotateEnabled ? 0.0 : details.rotation;\n    if ((scale - 1).abs() > rotation.abs()) {\n      return _GestureType.scale;\n    } else if (rotation != 0.0) {"
  },
  {
    "id" : "aa4fefdf-51c7-43c8-bcf3-0c6091e66314",
    "prId" : 65313,
    "prUrl" : "https://github.com/flutter/flutter/pull/65313#pullrequestreview-484442241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eac3372f-f939-421d-88f3-01ac4033879b",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "So for every mouse wheel event, we call all 3 callbacks: Start, Update, and End.  I guess that makes sense.  I don't think it's possible to group calls to _receivedPointerSignal.",
        "createdAt" : "2020-09-08T20:12:40Z",
        "updatedAt" : "2020-09-11T17:27:06Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "07467dbac20375fde859ccae689d2e708f046213",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +940,944 @@      if (widget.onInteractionEnd != null) {\n        widget.onInteractionEnd(ScaleEndDetails());\n      }\n    }\n  }"
  },
  {
    "id" : "86663b0c-46b1-44d2-bb40-0882e3b1a2a7",
    "prId" : 71266,
    "prUrl" : "https://github.com/flutter/flutter/pull/71266#pullrequestreview-551591168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "668b70a5-d087-4648-9d69-72380acded1e",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Good idea using e.  I tried this again on my Macbook's trackpad and also using a Magic Mouse, and both felt natural to me.",
        "createdAt" : "2020-12-14T17:08:02Z",
        "updatedAt" : "2020-12-16T15:36:50Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "5021a4d50d7b7d1798a53f1669d4d294fa317a88",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +939,943 @@      // In the Flutter engine, the mousewheel scrollDelta is hardcoded to 20 per scroll, while a trackpad scroll can be any amount.\n      // The calculation for scaleChange here was arbitrarily chosen to feel natural for both trackpads and mousewheels on all platforms.\n      final double scaleChange = math.exp(-event.scrollDelta.dy / 200);\n      final Offset focalPointScene = _transformationController!.toScene(\n        event.localPosition,"
  },
  {
    "id" : "e6a37540-5f08-450d-aa6e-2d71d5b53bb4",
    "prId" : 73281,
    "prUrl" : "https://github.com/flutter/flutter/pull/73281#pullrequestreview-563672491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f624566-844f-443f-a806-1a625421bbdd",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I think we should reiterate the warning from the docs above, so I say add another paragraph here:\r\n\r\n\"\r\nIf set to [Clip.none], the child may extend beyond the size of the InteractiveViewer, but it will not receive gestures in these areas.  Be sure that the InteractiveViewer is the desired size when using [Clip.none].\r\n\"",
        "createdAt" : "2021-01-07T17:34:50Z",
        "updatedAt" : "2021-01-12T09:18:51Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "e98650e84aaad0e54f5888bc5e49ab252d0087ea",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +109,113 @@  /// but it will not receive gestures in these areas.\n  /// Be sure that the InteractiveViewer is the desired size when using [Clip.none].\n  ///\n  /// Defaults to [Clip.hardEdge].\n  final Clip clipBehavior;"
  },
  {
    "id" : "27f35946-c09c-4628-97fb-bb2e4170cb28",
    "prId" : 73281,
    "prUrl" : "https://github.com/flutter/flutter/pull/73281#pullrequestreview-563786329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd6e2392-d572-4993-93a3-3746aa7b070b",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "There is definitely a use case for needing a ClipRect with `constrained` set to false.  If you want the InteractiveViewer to be small (like a small window) but the child to be big and pannable:\r\n\r\n<img width=\"229\" alt=\"Screen Shot 2021-01-07 at 9 46 50 AM\" src=\"https://user-images.githubusercontent.com/389558/103926270-8a13c000-50cd-11eb-9581-8ddc613675b4.png\">\r\n\r\nThen you want  a ClipRect and `constrained` false.  Can we use a ClipRect with the clipBehavior parameter in both cases?",
        "createdAt" : "2021-01-07T17:49:49Z",
        "updatedAt" : "2021-01-12T09:18:51Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "ee3eb922-5242-4d20-85b9-42a2a7401f8c",
        "parentId" : "fd6e2392-d572-4993-93a3-3746aa7b070b",
        "authorId" : "4d244368-2e08-4628-808c-f8eb865ddeb9",
        "body" : "Absolutely ! Actually I did this PR to have both and control where my ClipRect is",
        "createdAt" : "2021-01-07T20:00:25Z",
        "updatedAt" : "2021-01-12T09:18:51Z",
        "lastEditedBy" : "4d244368-2e08-4628-808c-f8eb865ddeb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e98650e84aaad0e54f5888bc5e49ab252d0087ea",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1072,1076 @@\n    if (!widget.constrained) {\n      child = OverflowBox(\n        alignment: Alignment.topLeft,\n        minWidth: 0.0,"
  }
]