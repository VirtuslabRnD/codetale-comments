[
  {
    "id" : "26c6ab79-1bc8-4d81-b10d-9069611a5fdc",
    "prId" : 13290,
    "prUrl" : "https://github.com/flutter/flutter/pull/13290#pullrequestreview-82313335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d503eb0-98e8-41f0-be7c-28dc247220bd",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "IMHO we really shouldn't make the original _ScrollbarPainter class public. It's a crazy class with crazy semantics (e.g. it's a custom painter but you have to dispose it).",
        "createdAt" : "2017-12-08T23:46:01Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "4c5bb9f1-8dbb-4574-b392-d9f68cf00eea",
        "parentId" : "3d503eb0-98e8-41f0-be7c-28dc247220bd",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "If I left 2 implementations in 2 separate files, it seems to alleviate your concern here and on the next comment. Do you prefer that approach? A bit copy paste-y I initially thought.",
        "createdAt" : "2017-12-09T02:15:56Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc043a946f2c6edd5a5e21c1de6ae0ea74ec0b6a",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@///  * [CupertinoScrollbar] for a widget showing a scrollbar around a\n///    [Scrollable] in the iOS style.\nclass ScrollbarPainter extends ChangeNotifier implements CustomPainter {\n  /// Creates a scrollbar with customizations given by construction arguments.\n  ScrollbarPainter({"
  },
  {
    "id" : "00faf3bb-014f-4508-8a3e-22c0d833b82e",
    "prId" : 13290,
    "prUrl" : "https://github.com/flutter/flutter/pull/13290#pullrequestreview-85186535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cd24e72-d1cf-452d-927e-0e9e85bf182d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "These docs should talk about update() and how to use it",
        "createdAt" : "2017-12-21T20:50:41Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "932cb649-1cbb-4808-9756-e505f0952595",
        "parentId" : "3cd24e72-d1cf-452d-927e-0e9e85bf182d",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Done",
        "createdAt" : "2017-12-21T21:24:40Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc043a946f2c6edd5a5e21c1de6ae0ea74ec0b6a",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@///  * the scroll position changes; and\n///  * when the scrollbar fades away.\n///\n/// Calling [update] with the new [ScrollMetrics] will repaint the new scrollbar\n/// position."
  },
  {
    "id" : "5bcabf94-b987-46c4-b418-7538f5e2d283",
    "prId" : 13290,
    "prUrl" : "https://github.com/flutter/flutter/pull/13290#pullrequestreview-85191972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e58b1a8-a6a5-46bf-88b4-0d5797b90ed8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "when do you removeListener?",
        "createdAt" : "2017-12-21T20:51:14Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "10919300-f99a-4742-8988-f3d031f5669b",
        "parentId" : "0e58b1a8-a6a5-46bf-88b4-0d5797b90ed8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think you need to override dispose() and call removeListener there.\r\n\r\nAlso, the docs need to talk about how it's important to call dispose() on this object when you're done with it.",
        "createdAt" : "2017-12-21T20:51:47Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "350c47cb-48fe-4b04-bd3e-4299b41e6eaa",
        "parentId" : "0e58b1a8-a6a5-46bf-88b4-0d5797b90ed8",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Added doc about needing to dispose.\r\nChangeNotifier.dispose already more or less does removeListener. ",
        "createdAt" : "2017-12-21T21:24:37Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "b441c94b-3720-4968-9539-a553b11c7fa4",
        "parentId" : "0e58b1a8-a6a5-46bf-88b4-0d5797b90ed8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "How does ChangeNotifier know about fadeoutOpacityAnimation?",
        "createdAt" : "2017-12-21T21:42:46Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "cc646896-1e53-4689-bbf9-3b5eb1f3fa5b",
        "parentId" : "0e58b1a8-a6a5-46bf-88b4-0d5797b90ed8",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "ah you're right. Sorry, I mixed the 2 layers of listeners up. ",
        "createdAt" : "2017-12-21T21:49:29Z",
        "updatedAt" : "2017-12-21T21:49:29Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc043a946f2c6edd5a5e21c1de6ae0ea74ec0b6a",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@       assert(crossAxisMargin != null),\n       assert(minLength != null) {\n    fadeoutOpacityAnimation.addListener(notifyListeners);\n  }\n"
  },
  {
    "id" : "5c875041-ff1b-4d33-a6b2-9ebd851c5064",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-231964718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d279f959-0478-4940-b89d-1ea41f7db6a9",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Not sure if we want to honor `crossAxisMargin` in a horizontal scrollbar. ",
        "createdAt" : "2019-04-29T01:01:25Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "9bc7bb95-40d3-492a-abc4-4c0d18ff6422",
        "parentId" : "d279f959-0478-4940-b89d-1ea41f7db6a9",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "sure, why not",
        "createdAt" : "2019-04-30T01:20:47Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +180,184 @@        thumbSize = Size(thumbExtent, thickness);\n        x = thumbOffset;\n        y = size.height - thickness - crossAxisMargin - padding.bottom;\n        break;\n      case AxisDirection.right:"
  },
  {
    "id" : "59df1378-d966-4b83-9f77-e5f5c5d9df82",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-231964718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0966a443-f591-49e8-8dee-14c1435327df",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "In case we say 'preferred' describe when do things fall out of the preferred behavior.",
        "createdAt" : "2019-04-30T01:20:29Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +125,129 @@  final double minLength;\n\n  /// The preferred smallest size the scrollbar can shrink to when viewport is\n  /// overscrolled.\n  ///"
  },
  {
    "id" : "ddaad167-e37e-47ab-9fdf-62747f40befb",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-233362083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50a93d17-7684-4dd4-bd14-50d5e2f6d6ee",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Seems a bit more indirect and harder to communicate than just letting both have defaults and letting both not be nullable.",
        "createdAt" : "2019-05-06T21:35:09Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +66,70 @@       assert(padding != null),\n       assert(padding.isNonNegative),\n       minOverscrollLength = minOverscrollLength ?? minLength {\n    fadeoutOpacityAnimation.addListener(notifyListeners);\n  }"
  },
  {
    "id" : "d42ca2cb-0742-4391-8dc4-eb6cf854fc0e",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-233362083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba1b2ab1-7e6b-49e8-972a-719901b8ec5c",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "`when the total scrollable extent is large, the current visible viewport is small, and the viewport is not overscrolled.`",
        "createdAt" : "2019-05-06T21:58:27Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +114,118 @@  /// The preferred smallest size the scrollbar can shrink to when the total\n  /// scrollable extent is large, the current visible viewport is small, and the\n  /// viewport is not overscrolled.\n  ///\n  /// The size of the scrollbar may shrink to a smaller size than [minLength]"
  },
  {
    "id" : "b44612ac-da72-445f-a473-e471295556da",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-233362083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b3d3854-f4a0-4c2e-ab00-7826ab5e8fe6",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ah ok, disregard the comment above about defaulting the minOverscrollLength.",
        "createdAt" : "2019-05-06T22:00:38Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +133,137 @@  /// the [viewportDimension] and [mainAxisMargin] are finite.\n  ///\n  /// The value is less than or equal to [minLength] and greater than or equal to 0.\n  /// If unspecified or set to null, it will defaults to the value of [minLength].\n  final double minOverscrollLength;"
  },
  {
    "id" : "a44f648f-c002-4e6e-9e1f-b20288b667aa",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-242928546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46c09ff2-fd40-450b-940c-0fdf6ae7c75b",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2019-05-28T21:42:07Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +206,210 @@    // Thumb extent reflects fraction of content visible, as long as this\n    // isn't less than the absolute minimum size.\n    // contentExtent >= viewportDimension, so (contentExtent - mainAxisPadding) > 0\n    final double fractionVisible = ((extentInside - mainAxisPadding) / (contentExtent - mainAxisPadding))\n      .clamp(0.0, 1.0);"
  },
  {
    "id" : "ec278ae1-7743-4437-b0c3-25eb2494c0ff",
    "prId" : 35829,
    "prUrl" : "https://github.com/flutter/flutter/pull/35829#pullrequestreview-265087530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b68c3677-6579-4d2f-bea0-8f5579d73536",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "There's this for material widgets https://api.flutter.dev/flutter/material/MaterialTapTargetSize-class.html. It's used to identify widgets that should be atleast 48x48.\r\n\r\nThere's this for tests: https://api.flutter.dev/flutter/flutter_test/MinimumTapTargetGuideline-class.html. The value of androidTapTargetGuideline is 48x48, for iOSTapTargetGuideline it's 44x44.\r\n\r\nThis set of mostly private constants are probably more of the same:\r\n\r\n```\r\nflutter/lib/src/material/paginated_data_table.dart:    this.dataRowHeight = 48.0,\r\nflutter/lib/src/material/expansion_panel.dart:const double _kPanelHeaderCollapsedHeight = 48.0;\r\nflutter/lib/src/material/range_slider.dart:  static const double _minTouchTargetWidth = 48;\r\nflutter/lib/src/material/icon_button.dart:const double _kMinButtonSize = 48.0;\r\nflutter/lib/src/material/data_table.dart:    this.dataRowHeight = 48.0,\r\nflutter/lib/src/material/dropdown.dart:const double _kMenuItemHeight = 48.0;\r\nflutter/lib/src/material/popup_menu.dart:const double _kMenuItemHeight = 48.0;\r\nflutter/lib/src/material/constants.dart:const double kTextTabBarHeight = 48.0;\r\nflutter/lib/src/widgets/text_selection.dart:const double kMinInteractiveSize = 48.0;\r\n```\r\n\r\n```\r\nflutter/lib/src/cupertino/button.dart:    this.minSize = 44.0,\r\nflutter/lib/src/cupertino/nav_bar.dart:const double _kNavBarPersistentHeight = 44.0;\r\nflutter/lib/src/material/text_selection.dart:const double _kToolbarHeight = 44.0;\r\n```\r\n\r\nIn a separate PR we should probably create a pair of constants and update this stuff. Including the _kMinInteractiveSize constant added here.\r\n",
        "createdAt" : "2019-07-22T18:55:17Z",
        "updatedAt" : "2019-07-31T15:34:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "d99c5948-e3dd-4c76-9fc0-c776eddd2774",
        "parentId" : "b68c3677-6579-4d2f-bea0-8f5579d73536",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I created the issue: https://github.com/flutter/flutter/issues/36713\r\n\r\nI'll go ahead and do that after this PR.",
        "createdAt" : "2019-07-22T22:22:24Z",
        "updatedAt" : "2019-07-31T15:34:20Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "97fb0f1b8d44bde62f67710e04c0c99452366fcd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +12,16 @@\nconst double _kMinThumbExtent = 18.0;\nconst double _kMinInteractiveSize = 48.0;\n\n/// A [CustomPainter] for painting scrollbars."
  },
  {
    "id" : "934e15b4-902f-43c8-bccf-a7570e678fdf",
    "prId" : 71664,
    "prUrl" : "https://github.com/flutter/flutter/pull/71664#pullrequestreview-547513788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab96a7b5-b6e7-4a5f-9f9f-ff92aab01c77",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "This can easily cause the thumb to remain on the touch device after release the flinger when `ScrollBar` nested.\r\nbecause the `Tap` event will also trigger a `Hover` event that cancels the dismiss timer and no chance to restart the fadeout timer until the next touch event dispatch.\r\n![20201208_192438](https://user-images.githubusercontent.com/61075224/101479363-0ad78300-398d-11eb-91a0-ca215f7c51ac.gif)\r\n\r\n",
        "createdAt" : "2020-12-08T11:43:50Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "c2a35e66-265a-4117-a118-de2a02b71c70",
        "parentId" : "ab96a7b5-b6e7-4a5f-9f9f-ff92aab01c77",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "### Sample Code\r\n```dart\r\nimport 'package:flutter/cupertino.dart';\r\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(SampleWidget());\r\n}\r\n\r\nclass SampleWidget extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      home: Scaffold(\r\n        body: Scrollbar(\r\n//          thickness: 30,\r\n          child: SingleChildScrollView(\r\n            child: SizedBox(\r\n              height: 1000.0,\r\n              width: double.infinity,\r\n              child: Column(\r\n                children: [\r\n                  Scrollbar(\r\n//                    thickness: 15,\r\n                    child: SizedBox(\r\n                      height: 500.0,\r\n                      width: double.infinity,\r\n                      child: SingleChildScrollView(\r\n                        child: SizedBox(\r\n                          key: Key('Inner scrollable'),\r\n                          height: 1000.0,\r\n                          child: ColoredBox(\r\n                            color: Colors.pink,\r\n                            child: FlutterLogo(),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n```",
        "createdAt" : "2020-12-08T11:45:06Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "1d8d0810-17bb-4997-9dc0-211c7496735f",
        "parentId" : "ab96a7b5-b6e7-4a5f-9f9f-ff92aab01c77",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "There is no problem in non-nested scenarios because the `handleThumbPressEnd` will restart the timer, but when nested the `pressEnd` event was caught by the outer scrollbar.",
        "createdAt" : "2020-12-08T12:10:40Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "a7ee6ae0-551b-4fe8-8975-0e1f4f863872",
        "parentId" : "ab96a7b5-b6e7-4a5f-9f9f-ff92aab01c77",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "See below comments. I am not sure I fully understand the expected behaviors when stacks Scrollbars on top of one another.",
        "createdAt" : "2020-12-08T18:31:14Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b632c3b27e570de73d03451b82011e7a142b7a9",
    "line" : 954,
    "diffHunk" : "@@ -1,1 +1111,1115 @@    if (isPointerOverScrollbar(event.position)) {\n      _hoverIsActive = true;\n      _fadeoutTimer?.cancel();\n    } else if (_hoverIsActive) {\n      // Pointer is not over painted scrollbar."
  },
  {
    "id" : "8c4cae3b-4b7e-4c88-a095-1831f5fa6e57",
    "prId" : 71664,
    "prUrl" : "https://github.com/flutter/flutter/pull/71664#pullrequestreview-547768151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da2de053-8f5e-4061-8851-0a92df358ecd",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "When `ScrollBar` nested, I can not drag the inner thumb, because the gesture event always dispatches to the outer `ScrollBar`, I think we should dispatch the event to the hovered thumb instead:\r\n![20201208_194759](https://user-images.githubusercontent.com/61075224/101480567-d1077c00-398e-11eb-85c4-03e807f14781.gif)\r\n",
        "createdAt" : "2020-12-08T11:56:24Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "6205d727-fc85-4e02-921e-66fd3dbbb997",
        "parentId" : "da2de053-8f5e-4061-8851-0a92df358ecd",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "@xu-baolin Thank you for the review!! 🙏 \r\nI am curious about this use case. It looks like the Scrollbars are stacked on top of each other. In this case I don't know that the user can distinguish which scrollbar is associated with which scroll view. Since the track area (visible or not) is factored into the hover, both scrollbars are affected. \r\nIn this case I think maybe offsetting the scrollbars, so they align side by side, instead of stacked would probably be a better experience for the user. And would remove the hover issue when they are on top of one another.\r\nMaybe we should document that Scrollbars are not meant to be stacked on top of one another. What do you think?",
        "createdAt" : "2020-12-08T17:43:04Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "533bae39-bfe4-45c3-b1c5-4f99af718c96",
        "parentId" : "da2de053-8f5e-4061-8851-0a92df358ecd",
        "authorId" : "45f46fff-3ac1-4900-9af9-b8b57d39085e",
        "body" : "in chrome it's actually just taking priority based on layer hierarchy\r\n![image](https://user-images.githubusercontent.com/38903221/101561729-1eeba680-39c6-11eb-948c-eb3211cc95a0.png)\r\n\r\nhowever if the position is not absolute it displays them side by side \r\n![image](https://user-images.githubusercontent.com/38903221/101561757-2ca12c00-39c6-11eb-95a1-1ed51fb91f8e.png)\r\n",
        "createdAt" : "2020-12-09T01:29:45Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "45f46fff-3ac1-4900-9af9-b8b57d39085e",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b632c3b27e570de73d03451b82011e7a142b7a9",
    "line" : 988,
    "diffHunk" : "@@ -1,1 +1145,1149 @@      child: RepaintBoundary(\n        child: RawGestureDetector(\n          gestures: _gestures,\n          child: MouseRegion(\n            onExit: handleHoverExit,"
  },
  {
    "id" : "da08996b-6f87-45b7-a33d-9a18c8fd78da",
    "prId" : 71664,
    "prUrl" : "https://github.com/flutter/flutter/pull/71664#pullrequestreview-548707795",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e39b3ab7-2b5c-4db5-b9ab-6557c7820ccd",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I assume that eventually this will obviate the `_thumbRect!` expressions.",
        "createdAt" : "2020-12-09T20:47:27Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "51b6c778-f663-48e2-97f7-1ac2ac9897b7",
        "parentId" : "e39b3ab7-2b5c-4db5-b9ab-6557c7820ccd",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "I have updated to remove all of the `!` by making the _thumbRect late. :) Good call!",
        "createdAt" : "2020-12-09T23:01:10Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "6f1f9bc9-efcc-4261-88e6-15734f36ec33",
        "parentId" : "e39b3ab7-2b5c-4db5-b9ab-6557c7820ccd",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "That actually broke, switching back to nullable. 😅 ",
        "createdAt" : "2020-12-09T23:42:33Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b632c3b27e570de73d03451b82011e7a142b7a9",
    "line" : 339,
    "diffHunk" : "@@ -1,1 +482,486 @@  /// isn't too small to be interacted with by the user.\n  bool hitTestInteractive(Offset position) {\n    if (_thumbRect == null) {\n      return false;\n    }"
  },
  {
    "id" : "cb68155f-392c-49cd-9691-95c36b792eec",
    "prId" : 71664,
    "prUrl" : "https://github.com/flutter/flutter/pull/71664#pullrequestreview-549767476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96eae612-b050-46a3-99c5-5e3cc5cb93b3",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I'm assuming that we're showing an example with two scrollables because the default PrimaryScrollController.of approach will not work. Best to explain as much.",
        "createdAt" : "2020-12-09T21:14:23Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "2e384ca6-6452-448f-8cd1-5fb5070cd1d3",
        "parentId" : "96eae612-b050-46a3-99c5-5e3cc5cb93b3",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "This is a pre-existing snippet I moved over in the refactor. PrimaryScrollController could work, I think it's just showing  a use case of two separate scroll views. Should I add?",
        "createdAt" : "2020-12-09T23:00:11Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "4ded47fc-e4e8-42d8-8e88-c03bef3070af",
        "parentId" : "96eae612-b050-46a3-99c5-5e3cc5cb93b3",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If it's just an example that we've moved, it's OK to leave it as is. This example and the one for the controller property seem unnecessarily complicated. And they should be written in terms of RawScrollbar. We can improve them in a separate PR.",
        "createdAt" : "2020-12-11T02:57:34Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b632c3b27e570de73d03451b82011e7a142b7a9",
    "line" : 481,
    "diffHunk" : "@@ -1,1 +638,642 @@  /// {@tool snippet}\n  /// Here is an example of using the `controller` parameter to enable\n  /// scrollbar dragging for multiple independent ListViews:\n  ///\n  /// ```dart"
  },
  {
    "id" : "867c2a0f-15b7-4faa-a96d-35dd98040a6c",
    "prId" : 71664,
    "prUrl" : "https://github.com/flutter/flutter/pull/71664#pullrequestreview-549767476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "948c0163-6bae-4fe3-92a4-dc51238ceb8e",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "insert a blank line\r\n",
        "createdAt" : "2020-12-09T21:49:53Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "cfd74fe5-e1ca-4bb8-b768-46be195acf84",
        "parentId" : "948c0163-6bae-4fe3-92a4-dc51238ceb8e",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I meant insert a blank line above this function definition (above this line).",
        "createdAt" : "2020-12-11T03:06:40Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b632c3b27e570de73d03451b82011e7a142b7a9",
    "line" : 851,
    "diffHunk" : "@@ -1,1 +1008,1012 @@  }\n\n  bool _handleScrollNotification(ScrollNotification notification) {\n\n    final ScrollMetrics metrics = notification.metrics;"
  },
  {
    "id" : "573986b8-cb07-42dc-87c3-c9dd1b162c3a",
    "prId" : 71664,
    "prUrl" : "https://github.com/flutter/flutter/pull/71664#pullrequestreview-548580373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b72ef535-2035-40bf-a30a-68a83737dea6",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Eventually we'll want subclasses to be able to handle track gestures via more protected methods.",
        "createdAt" : "2020-12-09T21:51:56Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b632c3b27e570de73d03451b82011e7a142b7a9",
    "line" : 803,
    "diffHunk" : "@@ -1,1 +960,964 @@  }\n\n  void _handleTrackTapDown(TapDownDetails details) {\n    // The Scrollbar should page towards the position of the tap on the track.\n    _currentController = widget.controller ?? PrimaryScrollController.of(context);"
  },
  {
    "id" : "82aa52f0-7b30-4f21-9269-0713d37854a5",
    "prId" : 71664,
    "prUrl" : "https://github.com/flutter/flutter/pull/71664#pullrequestreview-548727852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17016165-9693-4a18-b3c2-978c5e2768bb",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This is an interesting dependency; should be documented somewhere ",
        "createdAt" : "2020-12-09T21:55:21Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "adbe9ca3-88a3-464c-ae3e-df26f2dd0814",
        "parentId" : "17016165-9693-4a18-b3c2-978c5e2768bb",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "I'm not sure what to say about it. I looked, and I don't think we currently expose anyway for developers to create their own ScrollIncrementCalculator yet. I used it here to follow the same pattern used in ScrollAction.",
        "createdAt" : "2020-12-09T23:31:22Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "cfe40a9c-e9b2-4c53-bd7e-d60e187a707c",
        "parentId" : "17016165-9693-4a18-b3c2-978c5e2768bb",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "OK",
        "createdAt" : "2020-12-10T00:31:29Z",
        "updatedAt" : "2020-12-11T20:29:54Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b632c3b27e570de73d03451b82011e7a142b7a9",
    "line" : 809,
    "diffHunk" : "@@ -1,1 +966,970 @@    double scrollIncrement;\n    // Is an increment calculator available?\n    final ScrollIncrementCalculator? calculator = Scrollable.of(\n      _currentController!.position.context.notificationContext!\n    )?.widget.incrementCalculator;"
  },
  {
    "id" : "6e7a350c-dab7-45f6-8d18-5ac746129d2c",
    "prId" : 72531,
    "prUrl" : "https://github.com/flutter/flutter/pull/72531#pullrequestreview-556214831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dffecc55-33d8-43ab-bd36-fafe9c186760",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "We can use `PointerEvent.kind` to distinguish the type of input device to deal with this issue. Moreover, the mobile phone can also be used with an external mouse. At this time, we can better respond to the hover event.",
        "createdAt" : "2020-12-21T08:45:38Z",
        "updatedAt" : "2020-12-21T08:45:38Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b329ed9cef3cdd3db46175fb38b37de1544410a",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1170,1174 @@      child = MouseRegion(\n        onExit: handleHoverExit,\n        onHover: handleHover,\n        child: child\n      );"
  }
]