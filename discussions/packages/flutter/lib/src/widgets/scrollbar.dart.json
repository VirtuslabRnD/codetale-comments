[
  {
    "id" : "26c6ab79-1bc8-4d81-b10d-9069611a5fdc",
    "prId" : 13290,
    "prUrl" : "https://github.com/flutter/flutter/pull/13290#pullrequestreview-82313335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d503eb0-98e8-41f0-be7c-28dc247220bd",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "IMHO we really shouldn't make the original _ScrollbarPainter class public. It's a crazy class with crazy semantics (e.g. it's a custom painter but you have to dispose it).",
        "createdAt" : "2017-12-08T23:46:01Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "4c5bb9f1-8dbb-4574-b392-d9f68cf00eea",
        "parentId" : "3d503eb0-98e8-41f0-be7c-28dc247220bd",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "If I left 2 implementations in 2 separate files, it seems to alleviate your concern here and on the next comment. Do you prefer that approach? A bit copy paste-y I initially thought.",
        "createdAt" : "2017-12-09T02:15:56Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc043a946f2c6edd5a5e21c1de6ae0ea74ec0b6a",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@///  * [CupertinoScrollbar] for a widget showing a scrollbar around a\n///    [Scrollable] in the iOS style.\nclass ScrollbarPainter extends ChangeNotifier implements CustomPainter {\n  /// Creates a scrollbar with customizations given by construction arguments.\n  ScrollbarPainter({"
  },
  {
    "id" : "00faf3bb-014f-4508-8a3e-22c0d833b82e",
    "prId" : 13290,
    "prUrl" : "https://github.com/flutter/flutter/pull/13290#pullrequestreview-85186535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cd24e72-d1cf-452d-927e-0e9e85bf182d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "These docs should talk about update() and how to use it",
        "createdAt" : "2017-12-21T20:50:41Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "932cb649-1cbb-4808-9756-e505f0952595",
        "parentId" : "3cd24e72-d1cf-452d-927e-0e9e85bf182d",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Done",
        "createdAt" : "2017-12-21T21:24:40Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc043a946f2c6edd5a5e21c1de6ae0ea74ec0b6a",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@///  * the scroll position changes; and\n///  * when the scrollbar fades away.\n///\n/// Calling [update] with the new [ScrollMetrics] will repaint the new scrollbar\n/// position."
  },
  {
    "id" : "5bcabf94-b987-46c4-b418-7538f5e2d283",
    "prId" : 13290,
    "prUrl" : "https://github.com/flutter/flutter/pull/13290#pullrequestreview-85191972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e58b1a8-a6a5-46bf-88b4-0d5797b90ed8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "when do you removeListener?",
        "createdAt" : "2017-12-21T20:51:14Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "10919300-f99a-4742-8988-f3d031f5669b",
        "parentId" : "0e58b1a8-a6a5-46bf-88b4-0d5797b90ed8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think you need to override dispose() and call removeListener there.\r\n\r\nAlso, the docs need to talk about how it's important to call dispose() on this object when you're done with it.",
        "createdAt" : "2017-12-21T20:51:47Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "350c47cb-48fe-4b04-bd3e-4299b41e6eaa",
        "parentId" : "0e58b1a8-a6a5-46bf-88b4-0d5797b90ed8",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Added doc about needing to dispose.\r\nChangeNotifier.dispose already more or less does removeListener. ",
        "createdAt" : "2017-12-21T21:24:37Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "b441c94b-3720-4968-9539-a553b11c7fa4",
        "parentId" : "0e58b1a8-a6a5-46bf-88b4-0d5797b90ed8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "How does ChangeNotifier know about fadeoutOpacityAnimation?",
        "createdAt" : "2017-12-21T21:42:46Z",
        "updatedAt" : "2017-12-21T21:49:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "cc646896-1e53-4689-bbf9-3b5eb1f3fa5b",
        "parentId" : "0e58b1a8-a6a5-46bf-88b4-0d5797b90ed8",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "ah you're right. Sorry, I mixed the 2 layers of listeners up. ",
        "createdAt" : "2017-12-21T21:49:29Z",
        "updatedAt" : "2017-12-21T21:49:29Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc043a946f2c6edd5a5e21c1de6ae0ea74ec0b6a",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@       assert(crossAxisMargin != null),\n       assert(minLength != null) {\n    fadeoutOpacityAnimation.addListener(notifyListeners);\n  }\n"
  },
  {
    "id" : "5c875041-ff1b-4d33-a6b2-9ebd851c5064",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-231964718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d279f959-0478-4940-b89d-1ea41f7db6a9",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Not sure if we want to honor `crossAxisMargin` in a horizontal scrollbar. ",
        "createdAt" : "2019-04-29T01:01:25Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "9bc7bb95-40d3-492a-abc4-4c0d18ff6422",
        "parentId" : "d279f959-0478-4940-b89d-1ea41f7db6a9",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "sure, why not",
        "createdAt" : "2019-04-30T01:20:47Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +180,184 @@        thumbSize = Size(thumbExtent, thickness);\n        x = thumbOffset;\n        y = size.height - thickness - crossAxisMargin - padding.bottom;\n        break;\n      case AxisDirection.right:"
  },
  {
    "id" : "59df1378-d966-4b83-9f77-e5f5c5d9df82",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-231964718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0966a443-f591-49e8-8dee-14c1435327df",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "In case we say 'preferred' describe when do things fall out of the preferred behavior.",
        "createdAt" : "2019-04-30T01:20:29Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +125,129 @@  final double minLength;\n\n  /// The preferred smallest size the scrollbar can shrink to when viewport is\n  /// overscrolled.\n  ///"
  },
  {
    "id" : "ddaad167-e37e-47ab-9fdf-62747f40befb",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-233362083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50a93d17-7684-4dd4-bd14-50d5e2f6d6ee",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Seems a bit more indirect and harder to communicate than just letting both have defaults and letting both not be nullable.",
        "createdAt" : "2019-05-06T21:35:09Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +66,70 @@       assert(padding != null),\n       assert(padding.isNonNegative),\n       minOverscrollLength = minOverscrollLength ?? minLength {\n    fadeoutOpacityAnimation.addListener(notifyListeners);\n  }"
  },
  {
    "id" : "d42ca2cb-0742-4391-8dc4-eb6cf854fc0e",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-233362083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba1b2ab1-7e6b-49e8-972a-719901b8ec5c",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "`when the total scrollable extent is large, the current visible viewport is small, and the viewport is not overscrolled.`",
        "createdAt" : "2019-05-06T21:58:27Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +114,118 @@  /// The preferred smallest size the scrollbar can shrink to when the total\n  /// scrollable extent is large, the current visible viewport is small, and the\n  /// viewport is not overscrolled.\n  ///\n  /// The size of the scrollbar may shrink to a smaller size than [minLength]"
  },
  {
    "id" : "b44612ac-da72-445f-a473-e471295556da",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-233362083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b3d3854-f4a0-4c2e-ab00-7826ab5e8fe6",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ah ok, disregard the comment above about defaulting the minOverscrollLength.",
        "createdAt" : "2019-05-06T22:00:38Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +133,137 @@  /// the [viewportDimension] and [mainAxisMargin] are finite.\n  ///\n  /// The value is less than or equal to [minLength] and greater than or equal to 0.\n  /// If unspecified or set to null, it will defaults to the value of [minLength].\n  final double minOverscrollLength;"
  },
  {
    "id" : "a44f648f-c002-4e6e-9e1f-b20288b667aa",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-242928546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46c09ff2-fd40-450b-940c-0fdf6ae7c75b",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2019-05-28T21:42:07Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +206,210 @@    // Thumb extent reflects fraction of content visible, as long as this\n    // isn't less than the absolute minimum size.\n    // contentExtent >= viewportDimension, so (contentExtent - mainAxisPadding) > 0\n    final double fractionVisible = ((extentInside - mainAxisPadding) / (contentExtent - mainAxisPadding))\n      .clamp(0.0, 1.0);"
  }
]