[
  {
    "id" : "e2b79351-2c1e-4d8f-b677-783929842002",
    "prId" : 34712,
    "prUrl" : "https://github.com/flutter/flutter/pull/34712#pullrequestreview-260260287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7350357-755e-4fcb-a704-7d1b7d238948",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I think we need to better understand how this could happen.  I'm concerned that this may arise because some node that is supposed to be kept alive is actually not being kept alive, and that's why we're losing it.  Making this change would hide that, if it is in fact the problem.",
        "createdAt" : "2019-06-26T21:44:02Z",
        "updatedAt" : "2019-07-12T06:35:59Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "f2cd58c1-2707-4ef0-95c3-95825ba6ad1e",
        "parentId" : "f7350357-755e-4fcb-a704-7d1b7d238948",
        "authorId" : "32c18370-b804-47c0-afc6-52fe97ae9791",
        "body" : "This situation is widespread in the Sliver component. \r\nsuch as GridView(#34153):  when we move the focus down, grid element slides up. The grid elements would be unmount if they out of grid container, which cause history kept an unreachable node.\r\n",
        "createdAt" : "2019-06-27T01:57:37Z",
        "updatedAt" : "2019-07-12T06:35:59Z",
        "lastEditedBy" : "32c18370-b804-47c0-afc6-52fe97ae9791",
        "tags" : [
        ]
      },
      {
        "id" : "363c1c75-341f-45e8-9346-cf1c9127e4bf",
        "parentId" : "f7350357-755e-4fcb-a704-7d1b7d238948",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Why just the last element in the history?  Couldn't any of the nodes have been unmounted?\r\n\r\nHow about this instead:\r\n```suggestion\r\n      // If a node has been removed from the tree, then we should stop\r\n      // referencing it and reset the scope data so that we don't try and\r\n      // request focus on it. This can happen in slivers where the rendered node\r\n      // has been unmounted. This has the side effect that hysteresis might not\r\n      // be avoided when items that go off screen get unmounted.\r\n      if (policyData.history.lastWhere(\r\n            (_DirectionalPolicyDataEntry node) => node.node.parent == null,\r\n            orElse: () => null,\r\n          ) != null) {\r\n        invalidateScopeData(nearestScope);\r\n        return false;\r\n      }\r\n```",
        "createdAt" : "2019-07-09T15:20:32Z",
        "updatedAt" : "2019-07-12T06:35:59Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "0c5fa26c-3282-42ca-9a12-f488033926b5",
        "parentId" : "f7350357-755e-4fcb-a704-7d1b7d238948",
        "authorId" : "32c18370-b804-47c0-afc6-52fe97ae9791",
        "body" : "What I think is that the last element might not be unmounted, in this situation, the last node can still be used to avoid hysteresis. ",
        "createdAt" : "2019-07-10T03:26:01Z",
        "updatedAt" : "2019-07-12T06:35:59Z",
        "lastEditedBy" : "32c18370-b804-47c0-afc6-52fe97ae9791",
        "tags" : [
        ]
      },
      {
        "id" : "c566e6f1-a04a-4648-b1be-5fd4ca3a1fa8",
        "parentId" : "f7350357-755e-4fcb-a704-7d1b7d238948",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, I guess that makes sense, just because a previous node is already unmounted doesn't mean that the last one is invalid. OK.  I do think you should add the comment I suggested above, though, to explain what's going on.",
        "createdAt" : "2019-07-10T14:51:12Z",
        "updatedAt" : "2019-07-12T06:35:59Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "489cc1cf-def1-4f84-9013-749cb3f9dbc6",
        "parentId" : "f7350357-755e-4fcb-a704-7d1b7d238948",
        "authorId" : "32c18370-b804-47c0-afc6-52fe97ae9791",
        "body" : "Yes, I think I should add a comment to explain why this code was added.",
        "createdAt" : "2019-07-10T17:55:07Z",
        "updatedAt" : "2019-07-12T06:35:59Z",
        "lastEditedBy" : "32c18370-b804-47c0-afc6-52fe97ae9791",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb00fecb66b15ee187182684c457ce183a0cc1c6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +312,316 @@    final _DirectionalPolicyData policyData = _policyData[nearestScope];\n    if (policyData != null && policyData.history.isNotEmpty && policyData.history.first.direction != direction) {\n      if (policyData.history.last.node.parent == null) {\n        // If a node has been removed from the tree, then we should stop\n        // referencing it and reset the scope data so that we don't try and"
  },
  {
    "id" : "6a31e651-4f0b-49ab-a401-a737a5dc37d3",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-347438254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0b5b520-9dc5-4132-945d-72ed0cf2dba9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "assert that forward is not null?",
        "createdAt" : "2020-01-22T20:50:02Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "bb4d441b-86dc-4cf1-8c57-be2bb567c1a4",
        "parentId" : "b0b5b520-9dc5-4132-945d-72ed0cf2dba9",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2020-01-23T16:47:14Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 300,
    "diffHunk" : "@@ -1,1 +329,333 @@  bool _moveFocus(FocusNode currentNode, {@required bool forward}) {\n    assert(forward != null);\n    if (currentNode == null) {\n      return false;\n    }"
  },
  {
    "id" : "a3d5de0d-e2c2-4de0-baab-dec87dbefb4a",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-347438254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c159cbd9-bd99-48c0-af53-fa58511d56f5",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "also mention the LexicalFocusOrder here?",
        "createdAt" : "2020-01-22T20:59:22Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "fa31b968-c1b0-4ad1-874c-64690e310cd6",
        "parentId" : "c159cbd9-bd99-48c0-af53-fa58511d56f5",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2020-01-23T16:58:37Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 974,
    "diffHunk" : "@@ -1,1 +1102,1106 @@///    for the [OrderedFocusTraversalPolicy] to use.\n///  * [NumericFocusOrder], for a focus order that describes its order with a\n///    `double`.\n///  * [LexicalFocusOrder], a focus order that assigns a string-based lexical\n///    traversal order to a [FocusTraversalOrder] widget."
  },
  {
    "id" : "926fc626-56ac-4193-9baf-19b496600282",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-347438254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaa1b8d5-9fa8-466c-8077-a1e21d168685",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Looks like subclasses should override doCompare and never override compareTo? That should be documented somewhere and we could also mark compareTo as `nonVirtual`?",
        "createdAt" : "2020-01-22T21:02:15Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "52409280-1b57-4219-9245-e5eb6df44d21",
        "parentId" : "aaa1b8d5-9fa8-466c-8077-a1e21d168685",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Sure.  I didn't know `@nonVirtual` existed.",
        "createdAt" : "2020-01-23T17:17:35Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 996,
    "diffHunk" : "@@ -1,1 +1124,1128 @@  @override\n  @nonVirtual\n  int compareTo(FocusOrder other) {\n    assert(\n        runtimeType == other.runtimeType,"
  },
  {
    "id" : "a7c83c01-512b-419e-8575-0932e1136b3b",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-347438254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fefc0415-2f91-4941-acaa-faad39c55462",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Isn't it most likely a bug if I have two widgets with `NumericFocusOrder(1.0)`? This fallback seems to be hiding that?",
        "createdAt" : "2020-01-22T21:17:29Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "36afbe43-10c8-4243-be86-672b99db6598",
        "parentId" : "fefc0415-2f91-4941-acaa-faad39c55462",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "No, not necessarily.  Maybe you want all the items with 1.0 as an order to be traversed together using the secondary policy, and then all of the items with 2.0 to likewise be traversed.",
        "createdAt" : "2020-01-23T17:47:58Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 1196,
    "diffHunk" : "@@ -1,1 +1324,1328 @@  ///\n  /// This policy determines the secondary sorting order of nodes which evaluate\n  /// as having an identical order (including those with no order specified).\n  ///\n  /// Nodes with no order specified will be sorted after nodes with an explicit"
  },
  {
    "id" : "15ef181e-dad0-40c3-80c8-e7f145b7788c",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-348272246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f6b0c14-8b1b-43ea-922b-44ff5449419a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "As far as I can tell, the implementation doesn't enforce that nodes with identical order end up in the order defined by secondary. Dart's List.sort is not stable: https://master-api.flutter.dev/flutter/dart-core/List/sort.html",
        "createdAt" : "2020-01-22T21:22:32Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "69388a47-fad0-43f3-8e58-8ff2724b61bd",
        "parentId" : "6f6b0c14-8b1b-43ea-922b-44ff5449419a",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Fixed by introducing `FocusTraversalGroup`.",
        "createdAt" : "2020-01-24T23:04:25Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 1196,
    "diffHunk" : "@@ -1,1 +1324,1328 @@  ///\n  /// This policy determines the secondary sorting order of nodes which evaluate\n  /// as having an identical order (including those with no order specified).\n  ///\n  /// Nodes with no order specified will be sorted after nodes with an explicit"
  },
  {
    "id" : "537400e4-6036-4c89-8e96-0833b98a2074",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-348272304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4695dfc2-246e-4567-a49d-d9401e0bff01",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Somewhere it should be documented that nodes sorted by the secondary sort are all inserted into the ordered list after all nodes that were orderable under the primary sort. ",
        "createdAt" : "2020-01-22T21:24:58Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "dfdea99f-e56f-4a41-8d57-1919b4dfd626",
        "parentId" : "4695dfc2-246e-4567-a49d-d9401e0bff01",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2020-01-24T23:04:40Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 1196,
    "diffHunk" : "@@ -1,1 +1324,1328 @@  ///\n  /// This policy determines the secondary sorting order of nodes which evaluate\n  /// as having an identical order (including those with no order specified).\n  ///\n  /// Nodes with no order specified will be sorted after nodes with an explicit"
  },
  {
    "id" : "49f5b4ba-058e-4f35-8238-2ad76c903b88",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-350530467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f325efa3-9050-42fc-a643-6c921f536dfc",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "It feels like this if deserves a comment explaining what this is for. (just like the other parts of the algorithm are pretty well documented)",
        "createdAt" : "2020-01-29T21:34:14Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "1a511e8a-eeb6-45aa-aba8-37cfedc3ceef",
        "parentId" : "f325efa3-9050-42fc-a643-6c921f536dfc",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK, added a comment.",
        "createdAt" : "2020-01-30T01:12:59Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 226,
    "diffHunk" : "@@ -1,1 +255,259 @@      // and makes it so the entire group is sorted along with the other members\n      // of the parent group.\n      if (node == groupNode) {\n        // To find the parent of the group node, we need to skip over the parent\n        // of the Focus node in _FocusTraversalGroupState.build, and start"
  },
  {
    "id" : "d6df304a-dc41-4a63-808c-bc818b9d5c88",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-350530467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbdeaed3-ec95-4f04-8fbc-c5dc3fc2b4a5",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "In the line above link it to [Directionality]?",
        "createdAt" : "2020-01-29T21:53:30Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "22123056-248b-4588-8843-fcf878489712",
        "parentId" : "bbdeaed3-ec95-4f04-8fbc-c5dc3fc2b4a5",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.  Silly GitHub (not allowing comments on all lines).",
        "createdAt" : "2020-01-30T01:20:20Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 754,
    "diffHunk" : "@@ -1,1 +955,959 @@/// to determine which direction is \"reading order\".\n///\n/// See also:\n///\n///  * [FocusNode], for a description of the focus system."
  },
  {
    "id" : "3326345b-81b2-468a-ac62-2a83e992511a",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-353396284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fedb98e-51c8-4922-92a8-1a5929ad36a4",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "@immutable",
        "createdAt" : "2020-02-03T21:24:05Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ad9e8778-3814-43ff-8288-12e2af8111e9",
        "parentId" : "1fedb98e-51c8-4922-92a8-1a5929ad36a4",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Fixed.",
        "createdAt" : "2020-02-05T00:25:00Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +116,120 @@///    focus traversal in a direction.\n@immutable\nabstract class FocusTraversalPolicy extends Diagnosticable {\n  /// A const constructor so subclasses can be const.\n  const FocusTraversalPolicy();"
  },
  {
    "id" : "0eaad1e6-94d3-4290-b053-4cbf2d42e76c",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-356210777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5933dd5c-b646-4622-ab2a-9f112090a5d2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The class doc should probably mention that you should override doCompare instead of compareTo.",
        "createdAt" : "2020-02-10T19:25:54Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ff3972fc-5f0e-4af3-935f-4cb07edc1355",
        "parentId" : "5933dd5c-b646-4622-ab2a-9f112090a5d2",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Added.",
        "createdAt" : "2020-02-10T19:57:26Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 996,
    "diffHunk" : "@@ -1,1 +1124,1128 @@  @override\n  @nonVirtual\n  int compareTo(FocusOrder other) {\n    assert(\n        runtimeType == other.runtimeType,"
  },
  {
    "id" : "e83e0c62-07f7-4b33-88b9-4e089f9f9e51",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-356210777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0b32c23-3b1a-4a27-9949-481c1dea4c82",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Turn this into a fancy dartpad sample? :) ",
        "createdAt" : "2020-02-10T19:27:19Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "e38ad50d-6055-49b1-a922-4dfcb12bc566",
        "parentId" : "a0b32c23-3b1a-4a27-9949-481c1dea4c82",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Oooh, good idea.  I wrote this before I had converted them.",
        "createdAt" : "2020-02-10T20:02:27Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 1102,
    "diffHunk" : "@@ -1,1 +1230,1234 @@/// in the nearest [FocusTraversalOrder] widget ancestor.\n///\n/// {@macro flutter.widgets.focusorder.comparable}\n///\n/// {@tool dartpad --template=stateless_widget_scaffold_center}"
  },
  {
    "id" : "58635404-6383-472d-b40a-0684c93d17a4",
    "prId" : 49235,
    "prUrl" : "https://github.com/flutter/flutter/pull/49235#pullrequestreview-356210777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b160df35-e247-4927-a059-4ee4e29c8ccf",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I wish we wouldn't have to sort according to the secondary policy if there's no need to do so. I imagine in most use cases, you would fully specify a numeric sort order for most (maybe even all) nodes?",
        "createdAt" : "2020-02-10T19:30:56Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "5ceb1680-adf6-40ed-b2dc-231df8c76b92",
        "parentId" : "b160df35-e247-4927-a059-4ee4e29c8ccf",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Well, but if even two nodes compare as \"equal\", we have to give them some kind of deterministic order.  Also, imagine mixing your own code on a page with a widget that someone else provides: even if you provide a sort order for your widgets, the other one won't have done it the same way (and probably didn't provide an order for each one).  You can order their group of widgets within yours with a group, but if you don't do that (or don't know to do that), it should be reasonable and deterministic.",
        "createdAt" : "2020-02-10T20:05:50Z",
        "updatedAt" : "2020-02-10T21:53:21Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cecf80d247f881e457d5dba2ce70a1c3ac7aa4a",
    "line" : 1205,
    "diffHunk" : "@@ -1,1 +1333,1337 @@  Iterable<FocusNode> sortDescendants(Iterable<FocusNode> descendants) {\n    final FocusTraversalPolicy secondaryPolicy = secondary ?? ReadingOrderTraversalPolicy();\n    final Iterable<FocusNode> sortedDescendants = secondaryPolicy.sortDescendants(descendants);\n    final List<FocusNode> unordered = <FocusNode>[];\n    final List<_OrderedFocusInfo> ordered = <_OrderedFocusInfo>[];"
  }
]