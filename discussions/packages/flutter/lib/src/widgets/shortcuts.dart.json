[
  {
    "id" : "9a76f880-a4dc-4682-903f-cdc1ec765a55",
    "prId" : 33298,
    "prUrl" : "https://github.com/flutter/flutter/pull/33298#pullrequestreview-245579281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a40005a7-5bb3-4c03-89ed-3125a2114056",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Why not just have `fromSet` be the default constructor? Set literals are are pretty concise, don't have a limit of four  items. Is it that they won't assert if there are duplicates?\r\n",
        "createdAt" : "2019-06-04T16:46:30Z",
        "updatedAt" : "2019-06-04T16:48:37Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "1b49b241-2796-49cb-805b-f274e24ea104",
        "parentId" : "a40005a7-5bb3-4c03-89ed-3125a2114056",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Because it's just more concise and easy to read when you define them.  Compare this:\r\n```dart\r\nLogicalKeySet(LogicalKeyboardKey.tab): const Intent(NextFocusAction.key),\r\nLogicalKeySet(LogicalKeyboardKey.shift, LogicalKeyboardKey.tab): const Intent(PreviousFocusAction.key),\r\n```\r\nwith this:\r\n```dart\r\nLogicalKeySet(<LogicalKeyboardKey>{LogicalKeyboardKey.tab}): const Intent(NextFocusAction.key),\r\nLogicalKeySet(<LogicalKeyboardKey>{LogicalKeyboardKey.shift, LogicalKeyboardKey.tab}): const Intent(PreviousFocusAction.key}),\r\n```\r\n\r\nAnd it's not because of the duplicate checking, because Dart sets aren't multisets, so there are no duplicates in a `Set` anyhow.\r\n\r\nThe vast majority of key bindings will be single keys (or maybe two), so I thought it made sense to streamline those a bit.",
        "createdAt" : "2019-06-04T17:02:11Z",
        "updatedAt" : "2019-06-04T17:02:48Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e6f7874df466b96626655339f2187fcdbc0485b",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@  /// The `key1` parameter must not be null. The same [KeyboardKey] may\n  /// not be appear more than once in the set.\n  KeySet(\n    T key1, [\n    T key2,"
  },
  {
    "id" : "be006426-596f-4047-b7f9-ad65989fc92e",
    "prId" : 45728,
    "prUrl" : "https://github.com/flutter/flutter/pull/45728#pullrequestreview-325744658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c55f59c-400f-42c7-a0b3-75ab22ee9511",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same.",
        "createdAt" : "2019-12-02T21:19:23Z",
        "updatedAt" : "2019-12-04T07:52:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b009aec83e54bb8b2abdfad5105ea28936c98a4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +90,94 @@      return false;\n    }\n    return other is KeySet<T>\n        && setEquals<T>(other._keys, _keys);\n  }"
  },
  {
    "id" : "5c032c1c-0598-4911-9b31-1d361b192a2f",
    "prId" : 63426,
    "prUrl" : "https://github.com/flutter/flutter/pull/63426#pullrequestreview-464664715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "190dcb20-9896-4c42-92ec-c709fc35c57f",
        "parentId" : null,
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Do you mean this should crash in debug mode but pass in release mode? I kind of get the intention, but still why would anyone release a piece of code that crashes in debug mode?",
        "createdAt" : "2020-08-10T23:29:19Z",
        "updatedAt" : "2020-08-11T00:03:39Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "87b4e783-0e42-4873-bb18-b8a538e9baf4",
        "parentId" : "190dcb20-9896-4c42-92ec-c709fc35c57f",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "The reason is that unless they press the key that causes the problem during their testing, they won't know that it crashes in debug mode.\r\n\r\nAnd I don't think an invalid key sequence should crash the app in release mode: it can be ignored if it gets that far.",
        "createdAt" : "2020-08-10T23:31:43Z",
        "updatedAt" : "2020-08-11T00:03:39Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "3d69f858-ff42-4e82-8b1b-257cb78f06aa",
        "parentId" : "190dcb20-9896-4c42-92ec-c709fc35c57f",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Sounds good :) ",
        "createdAt" : "2020-08-10T23:54:14Z",
        "updatedAt" : "2020-08-11T00:03:39Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "ae6fb080-7959-4168-b91b-2e5cdd5d21bf",
        "parentId" : "190dcb20-9896-4c42-92ec-c709fc35c57f",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Maybe you can add this to the comment. Your explanation is pretty helpful.",
        "createdAt" : "2020-08-10T23:55:07Z",
        "updatedAt" : "2020-08-11T00:03:39Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "a0109d43-cc76-44c8-989b-17b09df477d8",
        "parentId" : "190dcb20-9896-4c42-92ec-c709fc35c57f",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK, sounds good, added a comment.",
        "createdAt" : "2020-08-11T00:03:59Z",
        "updatedAt" : "2020-08-11T00:03:59Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f924aaf05dc7c01855de0a433f201e75ba8657b4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +316,320 @@      // Avoid the crash in release mode, since it's easy to miss a particular\n      // bad key sequence in testing, and so shouldn't crash the app in release.\n      if (RawKeyboard.instance.keysPressed.isNotEmpty) {\n        keySet = LogicalKeySet.fromSet(RawKeyboard.instance.keysPressed);\n      } else {"
  },
  {
    "id" : "069f863d-d8b6-4f03-b9f1-81ef8217c7fa",
    "prId" : 64672,
    "prUrl" : "https://github.com/flutter/flutter/pull/64672#pullrequestreview-481530448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68192337-1bf2-4401-a0d1-175a16d9805d",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I think this can be `late`, and then the getter below can return a non-nullable value.",
        "createdAt" : "2020-09-02T00:38:14Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "9494e893-3b84-44a3-b221-7e97e5252fce",
        "parentId" : "68192337-1bf2-4401-a0d1-175a16d9805d",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "It cannot be late because it can be set to null:\r\n```\r\n  @override\r\n  void didUpdateWidget(Shortcuts oldWidget) {\r\n    super.didUpdateWidget(oldWidget);\r\n    if (widget.manager != oldWidget.manager) {\r\n      if (widget.manager != null) {\r\n        _internalManager?.dispose();\r\n        _internalManager = null;\r\n      } else {\r\n        _internalManager ??= ShortcutManager();\r\n      }\r\n    }\r\n    manager!.shortcuts = widget.shortcuts;\r\n  }\r\n```",
        "createdAt" : "2020-09-02T21:02:28Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "b1ccb6db-c585-4a02-b1f0-08d8b622d5a1",
        "parentId" : "68192337-1bf2-4401-a0d1-175a16d9805d",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK, I see. Can we mark the `manager` getter as non-nullable and return `widget.manager ?? _internalManager!` from it?  The `manager` getter shouldn't ever return null when accessed, since one or the other of `_internalManager` and `widget.manager` should always be non-null.",
        "createdAt" : "2020-09-02T22:16:29Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "7777e009-ab01-4b72-b945-f26738a2c913",
        "parentId" : "68192337-1bf2-4401-a0d1-175a16d9805d",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Done",
        "createdAt" : "2020-09-03T06:35:18Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "414a28205060a97cc9557b48ed0b677a142009aa",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +449,453 @@\nclass _ShortcutsState extends State<Shortcuts> {\n  ShortcutManager? _internalManager;\n  ShortcutManager get manager => widget.manager ?? _internalManager!;\n"
  },
  {
    "id" : "9a2131e9-729c-47bb-ad4e-e809390ceff1",
    "prId" : 67359,
    "prUrl" : "https://github.com/flutter/flutter/pull/67359#pullrequestreview-503323708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d764a96a-042e-4f16-8fd5-3f40b8eefbe9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "We should assert that that's actually true here so we notice when that actually ever changes.",
        "createdAt" : "2020-10-06T20:02:12Z",
        "updatedAt" : "2020-10-16T18:12:04Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "7c57b2a2-e438-45d2-b0b5-0a3dff3d8adb",
        "parentId" : "d764a96a-042e-4f16-8fd5-3f40b8eefbe9",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Good idea. Done.",
        "createdAt" : "2020-10-06T21:02:13Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a7b56760946cea0c1c4d752a1b3d94e93f9bedb",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +311,315 @@          final Set<LogicalKeyboardKey> synonyms = setKey.synonyms;\n          if (synonyms.isNotEmpty) {\n            // There currently aren't any synonyms that match more than one key.\n            assert(synonyms.length == 1, 'Unexpectedly encountered a key synonym with more than one key.');\n            pseudoKeys.add(synonyms.first);"
  },
  {
    "id" : "e135b56f-fe97-4bf1-a310-74b7fa53e63d",
    "prId" : 67359,
    "prUrl" : "https://github.com/flutter/flutter/pull/67359#pullrequestreview-503298328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e059be49-115c-451c-9266-909163c74fd2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Don't we already have to do this matching to dispatch the actual key-press? Can we re-use that logic here?",
        "createdAt" : "2020-10-06T20:04:02Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8f472915-6737-4edc-99e7-85833fc8527e",
        "parentId" : "e059be49-115c-451c-9266-909163c74fd2",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Never mind, just scrolled down and saw that the re-use is the other way around. That works :) ",
        "createdAt" : "2020-10-06T20:04:30Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a7b56760946cea0c1c4d752a1b3d94e93f9bedb",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +303,307 @@    Intent? matchedIntent = _shortcuts[keysPressed];\n    if (matchedIntent == null) {\n      // If there's not a more specific match, We also look for any keys that\n      // have synonyms in the map.  This is for things like left and right shift\n      // keys mapping to just the \"shift\" pseudo-key."
  },
  {
    "id" : "ac3578f1-ddb0-4ca9-b1cd-90a516411b54",
    "prId" : 69568,
    "prUrl" : "https://github.com/flutter/flutter/pull/69568#pullrequestreview-522217330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e84ae86-1202-4cb3-ac3d-aa1a37b145bf",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Right before this line, I think we should add some text to describe how to use this sample:\r\n\r\n```dart\r\n/// Here, we will use a [Shortcuts] and [Actions] widget to add and remove from a counter. \r\n/// This can be done by creating a child widget that is focused and pressing the logical key \r\n/// sets that have been defined in [Shortcuts] and defining the actions that each key set \r\n/// performs.\r\n```",
        "createdAt" : "2020-11-03T06:50:06Z",
        "updatedAt" : "2020-11-04T15:55:43Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      }
    ],
    "commit" : "05884362750616f36982d62c506666dee489bae6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +394,398 @@/// performs.\n///\n/// ```dart imports\n/// import 'package:flutter/services.dart';\n/// ```"
  },
  {
    "id" : "e031217e-123d-42b7-9618-d45155eacd30",
    "prId" : 69568,
    "prUrl" : "https://github.com/flutter/flutter/pull/69568#pullrequestreview-523169401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "015d2216-de51-4e73-9ce9-b729d7fdadf6",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Sorry, I should have been a little more specific. It should be in the dartpad :) Like this:\r\n```dart\r\n/// {@tool dartpad --template=stateful_widget_scaffold_center}\r\n///\r\n/// Here, we will use a [Shortcuts] and [Actions] widget to add and remove from a counter. \r\n/// This can be done by creating a child widget that is focused and pressing the logical key \r\n/// sets that have been defined in [Shortcuts] and defining the actions that each key set \r\n/// performs.\r\n/// \r\n/// ```dart imports\r\n/// ....\r\n```",
        "createdAt" : "2020-11-04T00:38:44Z",
        "updatedAt" : "2020-11-04T15:55:43Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "4df2a9e9-6617-4074-a2c7-5dcbba7c73b0",
        "parentId" : "015d2216-de51-4e73-9ce9-b729d7fdadf6",
        "authorId" : "a2265f77-0790-4d16-b5c9-b4d8b46fc7d5",
        "body" : "Sure, no issues! 😄",
        "createdAt" : "2020-11-04T09:16:03Z",
        "updatedAt" : "2020-11-04T15:55:43Z",
        "lastEditedBy" : "a2265f77-0790-4d16-b5c9-b4d8b46fc7d5",
        "tags" : [
        ]
      }
    ],
    "commit" : "05884362750616f36982d62c506666dee489bae6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +389,393 @@/// {@tool dartpad --template=stateful_widget_scaffold_center}\n///\n/// Here, we will use a [Shortcuts] and [Actions] widget to add and remove from a counter.\n/// This can be done by creating a child widget that is focused and pressing the logical key\n/// sets that have been defined in [Shortcuts] and defining the actions that each key set"
  }
]