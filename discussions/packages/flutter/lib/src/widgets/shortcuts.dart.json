[
  {
    "id" : "9a76f880-a4dc-4682-903f-cdc1ec765a55",
    "prId" : 33298,
    "prUrl" : "https://github.com/flutter/flutter/pull/33298#pullrequestreview-245579281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a40005a7-5bb3-4c03-89ed-3125a2114056",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Why not just have `fromSet` be the default constructor? Set literals are are pretty concise, don't have a limit of four  items. Is it that they won't assert if there are duplicates?\r\n",
        "createdAt" : "2019-06-04T16:46:30Z",
        "updatedAt" : "2019-06-04T16:48:37Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "1b49b241-2796-49cb-805b-f274e24ea104",
        "parentId" : "a40005a7-5bb3-4c03-89ed-3125a2114056",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Because it's just more concise and easy to read when you define them.  Compare this:\r\n```dart\r\nLogicalKeySet(LogicalKeyboardKey.tab): const Intent(NextFocusAction.key),\r\nLogicalKeySet(LogicalKeyboardKey.shift, LogicalKeyboardKey.tab): const Intent(PreviousFocusAction.key),\r\n```\r\nwith this:\r\n```dart\r\nLogicalKeySet(<LogicalKeyboardKey>{LogicalKeyboardKey.tab}): const Intent(NextFocusAction.key),\r\nLogicalKeySet(<LogicalKeyboardKey>{LogicalKeyboardKey.shift, LogicalKeyboardKey.tab}): const Intent(PreviousFocusAction.key}),\r\n```\r\n\r\nAnd it's not because of the duplicate checking, because Dart sets aren't multisets, so there are no duplicates in a `Set` anyhow.\r\n\r\nThe vast majority of key bindings will be single keys (or maybe two), so I thought it made sense to streamline those a bit.",
        "createdAt" : "2019-06-04T17:02:11Z",
        "updatedAt" : "2019-06-04T17:02:48Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e6f7874df466b96626655339f2187fcdbc0485b",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@  /// The `key1` parameter must not be null. The same [KeyboardKey] may\n  /// not be appear more than once in the set.\n  KeySet(\n    T key1, [\n    T key2,"
  },
  {
    "id" : "be006426-596f-4047-b7f9-ad65989fc92e",
    "prId" : 45728,
    "prUrl" : "https://github.com/flutter/flutter/pull/45728#pullrequestreview-325744658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c55f59c-400f-42c7-a0b3-75ab22ee9511",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same.",
        "createdAt" : "2019-12-02T21:19:23Z",
        "updatedAt" : "2019-12-04T07:52:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b009aec83e54bb8b2abdfad5105ea28936c98a4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +90,94 @@      return false;\n    }\n    return other is KeySet<T>\n        && setEquals<T>(other._keys, _keys);\n  }"
  },
  {
    "id" : "5c032c1c-0598-4911-9b31-1d361b192a2f",
    "prId" : 63426,
    "prUrl" : "https://github.com/flutter/flutter/pull/63426#pullrequestreview-464664715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "190dcb20-9896-4c42-92ec-c709fc35c57f",
        "parentId" : null,
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Do you mean this should crash in debug mode but pass in release mode? I kind of get the intention, but still why would anyone release a piece of code that crashes in debug mode?",
        "createdAt" : "2020-08-10T23:29:19Z",
        "updatedAt" : "2020-08-11T00:03:39Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "87b4e783-0e42-4873-bb18-b8a538e9baf4",
        "parentId" : "190dcb20-9896-4c42-92ec-c709fc35c57f",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "The reason is that unless they press the key that causes the problem during their testing, they won't know that it crashes in debug mode.\r\n\r\nAnd I don't think an invalid key sequence should crash the app in release mode: it can be ignored if it gets that far.",
        "createdAt" : "2020-08-10T23:31:43Z",
        "updatedAt" : "2020-08-11T00:03:39Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "3d69f858-ff42-4e82-8b1b-257cb78f06aa",
        "parentId" : "190dcb20-9896-4c42-92ec-c709fc35c57f",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Sounds good :) ",
        "createdAt" : "2020-08-10T23:54:14Z",
        "updatedAt" : "2020-08-11T00:03:39Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "ae6fb080-7959-4168-b91b-2e5cdd5d21bf",
        "parentId" : "190dcb20-9896-4c42-92ec-c709fc35c57f",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Maybe you can add this to the comment. Your explanation is pretty helpful.",
        "createdAt" : "2020-08-10T23:55:07Z",
        "updatedAt" : "2020-08-11T00:03:39Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "a0109d43-cc76-44c8-989b-17b09df477d8",
        "parentId" : "190dcb20-9896-4c42-92ec-c709fc35c57f",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK, sounds good, added a comment.",
        "createdAt" : "2020-08-11T00:03:59Z",
        "updatedAt" : "2020-08-11T00:03:59Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f924aaf05dc7c01855de0a433f201e75ba8657b4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +316,320 @@      // Avoid the crash in release mode, since it's easy to miss a particular\n      // bad key sequence in testing, and so shouldn't crash the app in release.\n      if (RawKeyboard.instance.keysPressed.isNotEmpty) {\n        keySet = LogicalKeySet.fromSet(RawKeyboard.instance.keysPressed);\n      } else {"
  },
  {
    "id" : "069f863d-d8b6-4f03-b9f1-81ef8217c7fa",
    "prId" : 64672,
    "prUrl" : "https://github.com/flutter/flutter/pull/64672#pullrequestreview-481530448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68192337-1bf2-4401-a0d1-175a16d9805d",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I think this can be `late`, and then the getter below can return a non-nullable value.",
        "createdAt" : "2020-09-02T00:38:14Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "9494e893-3b84-44a3-b221-7e97e5252fce",
        "parentId" : "68192337-1bf2-4401-a0d1-175a16d9805d",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "It cannot be late because it can be set to null:\r\n```\r\n  @override\r\n  void didUpdateWidget(Shortcuts oldWidget) {\r\n    super.didUpdateWidget(oldWidget);\r\n    if (widget.manager != oldWidget.manager) {\r\n      if (widget.manager != null) {\r\n        _internalManager?.dispose();\r\n        _internalManager = null;\r\n      } else {\r\n        _internalManager ??= ShortcutManager();\r\n      }\r\n    }\r\n    manager!.shortcuts = widget.shortcuts;\r\n  }\r\n```",
        "createdAt" : "2020-09-02T21:02:28Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "b1ccb6db-c585-4a02-b1f0-08d8b622d5a1",
        "parentId" : "68192337-1bf2-4401-a0d1-175a16d9805d",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK, I see. Can we mark the `manager` getter as non-nullable and return `widget.manager ?? _internalManager!` from it?  The `manager` getter shouldn't ever return null when accessed, since one or the other of `_internalManager` and `widget.manager` should always be non-null.",
        "createdAt" : "2020-09-02T22:16:29Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "7777e009-ab01-4b72-b945-f26738a2c913",
        "parentId" : "68192337-1bf2-4401-a0d1-175a16d9805d",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Done",
        "createdAt" : "2020-09-03T06:35:18Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "414a28205060a97cc9557b48ed0b677a142009aa",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +449,453 @@\nclass _ShortcutsState extends State<Shortcuts> {\n  ShortcutManager? _internalManager;\n  ShortcutManager get manager => widget.manager ?? _internalManager!;\n"
  },
  {
    "id" : "9a2131e9-729c-47bb-ad4e-e809390ceff1",
    "prId" : 67359,
    "prUrl" : "https://github.com/flutter/flutter/pull/67359#pullrequestreview-503323708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d764a96a-042e-4f16-8fd5-3f40b8eefbe9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "We should assert that that's actually true here so we notice when that actually ever changes.",
        "createdAt" : "2020-10-06T20:02:12Z",
        "updatedAt" : "2020-10-16T18:12:04Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "7c57b2a2-e438-45d2-b0b5-0a3dff3d8adb",
        "parentId" : "d764a96a-042e-4f16-8fd5-3f40b8eefbe9",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Good idea. Done.",
        "createdAt" : "2020-10-06T21:02:13Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a7b56760946cea0c1c4d752a1b3d94e93f9bedb",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +311,315 @@          final Set<LogicalKeyboardKey> synonyms = setKey.synonyms;\n          if (synonyms.isNotEmpty) {\n            // There currently aren't any synonyms that match more than one key.\n            assert(synonyms.length == 1, 'Unexpectedly encountered a key synonym with more than one key.');\n            pseudoKeys.add(synonyms.first);"
  },
  {
    "id" : "e135b56f-fe97-4bf1-a310-74b7fa53e63d",
    "prId" : 67359,
    "prUrl" : "https://github.com/flutter/flutter/pull/67359#pullrequestreview-503298328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e059be49-115c-451c-9266-909163c74fd2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Don't we already have to do this matching to dispatch the actual key-press? Can we re-use that logic here?",
        "createdAt" : "2020-10-06T20:04:02Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8f472915-6737-4edc-99e7-85833fc8527e",
        "parentId" : "e059be49-115c-451c-9266-909163c74fd2",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Never mind, just scrolled down and saw that the re-use is the other way around. That works :) ",
        "createdAt" : "2020-10-06T20:04:30Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a7b56760946cea0c1c4d752a1b3d94e93f9bedb",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +303,307 @@    Intent? matchedIntent = _shortcuts[keysPressed];\n    if (matchedIntent == null) {\n      // If there's not a more specific match, We also look for any keys that\n      // have synonyms in the map.  This is for things like left and right shift\n      // keys mapping to just the \"shift\" pseudo-key."
  },
  {
    "id" : "ac3578f1-ddb0-4ca9-b1cd-90a516411b54",
    "prId" : 69568,
    "prUrl" : "https://github.com/flutter/flutter/pull/69568#pullrequestreview-522217330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e84ae86-1202-4cb3-ac3d-aa1a37b145bf",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Right before this line, I think we should add some text to describe how to use this sample:\r\n\r\n```dart\r\n/// Here, we will use a [Shortcuts] and [Actions] widget to add and remove from a counter. \r\n/// This can be done by creating a child widget that is focused and pressing the logical key \r\n/// sets that have been defined in [Shortcuts] and defining the actions that each key set \r\n/// performs.\r\n```",
        "createdAt" : "2020-11-03T06:50:06Z",
        "updatedAt" : "2020-11-04T15:55:43Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      }
    ],
    "commit" : "05884362750616f36982d62c506666dee489bae6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +394,398 @@/// performs.\n///\n/// ```dart imports\n/// import 'package:flutter/services.dart';\n/// ```"
  },
  {
    "id" : "e031217e-123d-42b7-9618-d45155eacd30",
    "prId" : 69568,
    "prUrl" : "https://github.com/flutter/flutter/pull/69568#pullrequestreview-523169401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "015d2216-de51-4e73-9ce9-b729d7fdadf6",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Sorry, I should have been a little more specific. It should be in the dartpad :) Like this:\r\n```dart\r\n/// {@tool dartpad --template=stateful_widget_scaffold_center}\r\n///\r\n/// Here, we will use a [Shortcuts] and [Actions] widget to add and remove from a counter. \r\n/// This can be done by creating a child widget that is focused and pressing the logical key \r\n/// sets that have been defined in [Shortcuts] and defining the actions that each key set \r\n/// performs.\r\n/// \r\n/// ```dart imports\r\n/// ....\r\n```",
        "createdAt" : "2020-11-04T00:38:44Z",
        "updatedAt" : "2020-11-04T15:55:43Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "4df2a9e9-6617-4074-a2c7-5dcbba7c73b0",
        "parentId" : "015d2216-de51-4e73-9ce9-b729d7fdadf6",
        "authorId" : "a2265f77-0790-4d16-b5c9-b4d8b46fc7d5",
        "body" : "Sure, no issues! 😄",
        "createdAt" : "2020-11-04T09:16:03Z",
        "updatedAt" : "2020-11-04T15:55:43Z",
        "lastEditedBy" : "a2265f77-0790-4d16-b5c9-b4d8b46fc7d5",
        "tags" : [
        ]
      }
    ],
    "commit" : "05884362750616f36982d62c506666dee489bae6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +389,393 @@/// {@tool dartpad --template=stateful_widget_scaffold_center}\n///\n/// Here, we will use a [Shortcuts] and [Actions] widget to add and remove from a counter.\n/// This can be done by creating a child widget that is focused and pressing the logical key\n/// sets that have been defined in [Shortcuts] and defining the actions that each key set"
  },
  {
    "id" : "682abffe-6589-4339-83c0-22d8ac1d7030",
    "prId" : 70343,
    "prUrl" : "https://github.com/flutter/flutter/pull/70343#pullrequestreview-528677044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6c39e71-3411-4129-bd18-20f6fb648f0d",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "For this one, the alignment was off and the text is a little too verbose. Also added some styling to differentiate where the user should look at for the actual state change.",
        "createdAt" : "2020-11-12T01:49:13Z",
        "updatedAt" : "2020-11-12T01:49:23Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      }
    ],
    "commit" : "08430f83ba2ba9149f3b944cccd1a02ffe1b2aea",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +427,431 @@///           mainAxisAlignment: MainAxisAlignment.center,\n///           children: <Widget>[\n///             Text('Add: keyboard Shift + \"k\"'),\n///             Text('Subtract: keyboard Shift + \"l\"'),\n///             SizedBox(height: 10.0),"
  },
  {
    "id" : "5c1094ef-fad3-419a-a9b2-5a752c0827e8",
    "prId" : 78522,
    "prUrl" : "https://github.com/flutter/flutter/pull/78522#pullrequestreview-632854313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e80df6e-f8c5-41a9-9f28-d46573e03bc5",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Why can't `LogicalKeySet` implement `triggers` such that it filters out any modifiers from the set unless that would result in an empty set?  Wouldn't that give the same behavior as `SingleActivator`?",
        "createdAt" : "2021-04-07T16:30:53Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "9a3c1b6c-c44b-43c7-a552-faa0cf463b78",
        "parentId" : "0e80df6e-f8c5-41a9-9f28-d46573e03bc5",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "That was my previous implementation, but then I decided against it.\r\n\r\n`LogicalKeySet` currently produces a weird behavior (as described here). There are two possible fates `LogicalKeySet`:\r\n\r\n*  **(The current choice)** Implement `LogicalKeySet` in `ShortcutActivator` while keeping its behavior exactly as is. In the future we will deprecate `LogicalKeySet`, and possibly create a new class that has a behavior similar to `LogicalKeySet` but much more regular (assume it's called `KeySetActivator`).\r\n* Change `LogicalKeySet` so that it behaves in the same way as the current `SingleActivator`. \r\n\r\nThe previous implementation chose the 2nd way, but resulted in some weird behavior due to backward compatibility, such as the question raised in https://github.com/flutter/flutter/pull/78522#discussion_r597836007.\r\n\r\n**More detailed explanation to the question for the previous implementation:** Basically it judges whether a `LogicalKeySet` was \"regular\" by checking if it contains any non-modifier keys (so that non-modifier keys can be used as `triggers`). For \"regular\" key combinations `LogicalKeySet` should ignore sides because we're removing synonym modifier keys (no more `alt`, only `altLeft` and `altRight`). For \"irregular\" key combinations `LogicalKeySet` should consider sides because `KeySetActivator` is supposed to.",
        "createdAt" : "2021-04-08T00:05:54Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "546a7493-9dd4-4ea8-a7fb-537130f1453f",
        "parentId" : "0e80df6e-f8c5-41a9-9f28-d46573e03bc5",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK, makes sense.",
        "createdAt" : "2021-04-10T00:08:06Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff7cf9732167c4610d8b50629353ac8a1d150ef9",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +212,216 @@/// to use [LogicalKeySet] for a common shortcut such as `Delete` or `Ctrl+C`,\n/// prefer [SingleActivator] when possible, whose behavior more closely resembles\n/// that of typical platforms.\n///\n/// When used as a [ShortcutActivator], [LogicalKeySet] will activate the intent"
  },
  {
    "id" : "37e69a8b-394c-4137-a344-b75eba9379f2",
    "prId" : 78522,
    "prUrl" : "https://github.com/flutter/flutter/pull/78522#pullrequestreview-633763127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "964502a8-dc0a-4278-9d4c-8a9ae6fcaf31",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "So, given this, I presume that if I want \"leftAlt\" or \"alt\" to be a trigger, I have to use a `LogicalKeySet`, right?\r\n\r\nWhy is this a restriction?  Couldn't we just allow the specified trigger key to be the trigger key even if it was a modifier? That would allow `SingleActivator` to handle things like \"Ctrl-Alt\" as a shortcut (while still excluding \"Alt-Ctrl\"). We'd just need to ignore (or disallow) the \"alt\" argument in the case where alt was the trigger key.\r\n\r\nI know it seems like things like \"Ctrl-Alt\" would be an unlikely sequence, but I can see cases where it triggers a mode change that needs a UI update. 3D modeling apps often do this sort of thing to allow a class of operations on the currently selected object. The \"Ctrl-Alt\" often doesn't actually do an operation by itself, but it puts the app into a state where the next key triggered _would_ do an operation, and the UI changes to indicate the state change by drawing new UI, so it does need to invoke something for the state change.",
        "createdAt" : "2021-04-07T16:38:50Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "a1e17a0d-7951-46f2-b00e-0d52e220642a",
        "parentId" : "964502a8-dc0a-4278-9d4c-8a9ae6fcaf31",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Modifier-only shortcuts are **not** a goal of `SingleActivator`.\r\nWe can provide another class in the future once we receive enough demands; or developers can define their own before that. Implementing `ShortcutActivator` is always possible.",
        "createdAt" : "2021-04-08T00:23:39Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "3003af38-dca3-4906-ac5c-65c9b04760af",
        "parentId" : "964502a8-dc0a-4278-9d4c-8a9ae6fcaf31",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I don't think it's a good idea to limit the keys that can be used in a shortcut: people won't implement their own subclass, they'll just assume it can't be done. I think that if we're deprecating `LogicalKeySet`, we should add that other class (it could be the `KeySetActivator` that you're already planning) to give people a way to migrate without having to implement a new subclass.\r\n\r\nIs the reason that you don't want modifier-only shortcuts to be a goal of `SingleActivator` because of the non-sidedness of the `control`, `meta`, etc. flags?\r\n\r\nI can see that it might be confusing to say `SingleActivator(LogicalKeyboardKey.shiftLeft, shift: true)`, since now it's not clear whether you're talking about any shift or just `shiftLeft`, but you could just assert that the trigger isn't a `shift`, `shiftLeft` or `shiftRight` if the `shift` flag is true. Other than that, I don't see why the modifier keys should be excluded from being triggers.",
        "createdAt" : "2021-04-10T00:21:29Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "ef788359-195b-450d-9780-2840d0cb5654",
        "parentId" : "964502a8-dc0a-4278-9d4c-8a9ae6fcaf31",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "> you could just assert that the trigger isn't a shift, shiftLeft or shiftRight if the shift flag is true\r\n\r\nIf `shift` is not true, then it's false, which means that it checks that all shift keys should be released. The boolean here does not mean whether the key is checked, but the expected pressing state of the key during the check. It always checks.\r\n\r\nAnd we probably should not change this semantic only when the trigger is a modifier key to cause more confusion.\r\n\r\n> if we're deprecating LogicalKeySet, we should add that other class\r\n\r\nWe haven't deprecated `LogicalKeySet` yet. If we do, we can have another round of discussion on the scope of the impact and. This PR is meant to be non-breaking.\r\n\r\n> people won't implement their own subclass, they'll just assume it can't be done\r\n\r\nIf there's a clear, sufficient demand and situation this can be used, we can always add a class for it. We can't add a new API just because we imagine the current API does not cover all possible combinations. Anyway, we haven't deprecated `LogicalKeySet` yet.",
        "createdAt" : "2021-04-10T01:01:28Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "b70053a3-4375-4b52-8619-472f49dd7fdd",
        "parentId" : "964502a8-dc0a-4278-9d4c-8a9ae6fcaf31",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Ahh, OK, I didn't notice that it also enforces the key is not pressed. OK, then I guess it'll just have to be a separate class.",
        "createdAt" : "2021-04-12T16:51:09Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff7cf9732167c4610d8b50629353ac8a1d150ef9",
    "line" : 284,
    "diffHunk" : "@@ -1,1 +417,421 @@  /// The `trigger` should be the non-modifier key that is pressed after all the\n  /// modifiers, such as [LogicalKeyboardKey.keyC] as in `Ctrl+C`. It must not be\n  /// a modifier key (sided or unsided).\n  ///\n  /// The `control`, `shift`, `alt`, and `meta` flags represent whether"
  },
  {
    "id" : "f27a3b10-7eef-4f0e-bef5-01ada3fbc20f",
    "prId" : 78522,
    "prUrl" : "https://github.com/flutter/flutter/pull/78522#pullrequestreview-632854313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "351184b9-ba43-4e5f-8612-f22119e35833",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "You can delete this line, it's implied by the previous line.",
        "createdAt" : "2021-04-07T18:15:05Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "1339ca77-ba32-4a23-87b3-c2f1b1b6cbbc",
        "parentId" : "351184b9-ba43-4e5f-8612-f22119e35833",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "I'm afraid that this line is deleted, the reader might think \"otherwise, control keys are not checked\".",
        "createdAt" : "2021-04-08T00:35:26Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "d0a57602-b1a9-4416-b088-e23f97b5d79b",
        "parentId" : "351184b9-ba43-4e5f-8612-f22119e35833",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK, fair enough.",
        "createdAt" : "2021-04-10T00:12:14Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff7cf9732167c4610d8b50629353ac8a1d150ef9",
    "line" : 266,
    "diffHunk" : "@@ -1,1 +399,403 @@///  * The incoming event is a down event for a [trigger] key.\n///  * If [control] is true, then at least one control key must be held.\n///    Otherwise, no control keys must be held.\n///  * Similar conditions apply for the [alt], [shift], and [meta] keys.\n///"
  },
  {
    "id" : "6b578650-2d4e-48ec-9fe3-6b8e722ed52e",
    "prId" : 78522,
    "prUrl" : "https://github.com/flutter/flutter/pull/78522#pullrequestreview-630171539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8f5ba19-bee0-4bc6-a2f6-19d8279b19db",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Could the body of this function be wrapped by an `assert((){}())`?",
        "createdAt" : "2021-04-07T19:06:34Z",
        "updatedAt" : "2021-04-14T23:23:26Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff7cf9732167c4610d8b50629353ac8a1d150ef9",
    "line" : 427,
    "diffHunk" : "@@ -1,1 +560,564 @@  /// [debugDescribeKeys] returns an empty string.\n  @override\n  String debugDescribeKeys() {\n    String result = '';\n    assert(() {"
  }
]