[
  {
    "id" : "79844f01-cf4e-46a9-b3ac-7443e7f830f4",
    "prId" : 2358,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12048aec-49a2-4ddc-9424-cbaa5e098f9e",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "@Hixie I had to change these lines to pass the analyzer.  Not sure why.\n",
        "createdAt" : "2016-03-03T02:40:42Z",
        "updatedAt" : "2016-03-03T02:40:42Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "1dbcb2c8-a781-4395-82a8-3735a9f55eca",
        "parentId" : "12048aec-49a2-4ddc-9424-cbaa5e098f9e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Filed https://github.com/flutter/flutter/issues/2365 to track it.\n",
        "createdAt" : "2016-03-03T16:48:07Z",
        "updatedAt" : "2016-03-03T16:48:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "865e3cc0ceb118d1cce172482f2ab769daf4a77d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +323,327 @@      metaData: this,\n      behavior: HitTestBehavior.translucent,\n      child: config.builder(context, _candidateData, _rejectedData)\n    );\n  }"
  },
  {
    "id" : "0d43e3fe-9654-4700-bffb-8259420f522a",
    "prId" : 6150,
    "prUrl" : "https://github.com/flutter/flutter/pull/6150#pullrequestreview-2386807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85de3184-8c54-4c28-b54e-f21d4dca7f45",
        "parentId" : null,
        "authorId" : "a50d169e-27b9-43ce-b1ac-ebf0c920f875",
        "body" : "I think you still need to remove data.  Just not setState...?\n",
        "createdAt" : "2016-09-30T18:40:53Z",
        "updatedAt" : "2016-09-30T19:46:22Z",
        "lastEditedBy" : "a50d169e-27b9-43ce-b1ac-ebf0c920f875",
        "tags" : [
        ]
      },
      {
        "id" : "907010e0-55d1-420c-a922-52d38b2d4efd",
        "parentId" : "85de3184-8c54-4c28-b54e-f21d4dca7f45",
        "authorId" : "a50d169e-27b9-43ce-b1ac-ebf0c920f875",
        "body" : "Oh wait, I guess if the target is disposed it doesn't matter.\n",
        "createdAt" : "2016-09-30T18:41:36Z",
        "updatedAt" : "2016-09-30T19:46:22Z",
        "lastEditedBy" : "a50d169e-27b9-43ce-b1ac-ebf0c920f875",
        "tags" : [
        ]
      },
      {
        "id" : "ce69da4d-2f7c-4b14-be19-e653241f1bd7",
        "parentId" : "85de3184-8c54-4c28-b54e-f21d4dca7f45",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "That sounds right to me. The target's internal state will be dropped at dipose time.\n",
        "createdAt" : "2016-09-30T19:21:02Z",
        "updatedAt" : "2016-09-30T19:46:22Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "2de29cc0a09486313dd74914b2389295f61d19fb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +318,322 @@    assert(_candidateData.contains(data) || _rejectedData.contains(data));\n    if (!mounted)\n      return;\n    setState(() {\n      _candidateData.remove(data);"
  },
  {
    "id" : "998eced4-8126-464c-b206-970aed984f8b",
    "prId" : 6150,
    "prUrl" : "https://github.com/flutter/flutter/pull/6150#pullrequestreview-2386909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cde2b7b-d207-4acb-9129-593e23b752b3",
        "parentId" : null,
        "authorId" : "a50d169e-27b9-43ce-b1ac-ebf0c920f875",
        "body" : "same?\n",
        "createdAt" : "2016-09-30T18:41:12Z",
        "updatedAt" : "2016-09-30T19:46:22Z",
        "lastEditedBy" : "a50d169e-27b9-43ce-b1ac-ebf0c920f875",
        "tags" : [
        ]
      },
      {
        "id" : "7a74746f-01a4-4cd4-b8ea-c703b6b18c52",
        "parentId" : "2cde2b7b-d207-4acb-9129-593e23b752b3",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Yes, there's no need to clear the target's internal state.\n",
        "createdAt" : "2016-09-30T19:21:46Z",
        "updatedAt" : "2016-09-30T19:46:22Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "2de29cc0a09486313dd74914b2389295f61d19fb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +328,332 @@    assert(_candidateData.contains(data));\n    if (!mounted)\n      return;\n    setState(() {\n      _candidateData.remove(data);"
  },
  {
    "id" : "b3c79984-d115-4461-b5cc-3657a96b0f42",
    "prId" : 6341,
    "prUrl" : "https://github.com/flutter/flutter/pull/6341#pullrequestreview-4382183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff738ac1-caa5-448a-b9ee-a0d7ec6462d4",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "please add a comment here or in _disposeRecognizerIfInactive or at the class level discussing the unusual lifetime conventions of this object and the _recognizer it creates.\n",
        "createdAt" : "2016-10-15T17:18:20Z",
        "updatedAt" : "2016-10-16T01:14:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d9376e08-9b34-491f-b7b3-8e03fb596737",
        "parentId" : "ff738ac1-caa5-448a-b9ee-a0d7ec6462d4",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Done.\n",
        "createdAt" : "2016-10-16T01:25:42Z",
        "updatedAt" : "2016-10-16T01:25:42Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "608cec4924174749fdbd0f221e7026d9fd5f640b",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +212,216 @@  @override\n  void dispose() {\n    _disposeRecognizerIfInactive();\n    super.dispose();\n  }"
  },
  {
    "id" : "aeaa42f0-251d-4768-8624-ef79a4651df9",
    "prId" : 6343,
    "prUrl" : "https://github.com/flutter/flutter/pull/6343#pullrequestreview-4375815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c58ba5d4-e063-48ef-8bf7-1b518f2fd77a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why do you build it before calling the callback?\n",
        "createdAt" : "2016-10-15T16:57:37Z",
        "updatedAt" : "2016-10-15T16:57:37Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "9bd2f587-c1cd-4e89-b487-c49731bae882",
        "parentId" : "c58ba5d4-e063-48ef-8bf7-1b518f2fd77a",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "paranoia about being re-entered during the callback.\n",
        "createdAt" : "2016-10-15T17:02:02Z",
        "updatedAt" : "2016-10-15T17:02:02Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "5c7a20e9-b7d4-4033-b129-ab185013faf7",
        "parentId" : "c58ba5d4-e063-48ef-8bf7-1b518f2fd77a",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "yeah ok\n",
        "createdAt" : "2016-10-15T17:04:18Z",
        "updatedAt" : "2016-10-15T17:04:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "35288012776748535c9213807a524d0d302dd179",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +251,255 @@    if (config.onDragStarted != null)\n      config.onDragStarted();\n    return avatar;\n  }\n"
  },
  {
    "id" : "954fc078-4a3e-45df-9120-981627d2851a",
    "prId" : 10455,
    "prUrl" : "https://github.com/flutter/flutter/pull/10455#pullrequestreview-41830995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a248ab2-ed19-4f0d-bb0c-4277a420795b",
        "parentId" : null,
        "authorId" : "4645df42-03e2-47fd-a9f5-0a9c1cdb8c68",
        "body" : "The naming of the callbacks looks inconsistent.",
        "createdAt" : "2017-06-02T17:05:59Z",
        "updatedAt" : "2017-06-03T00:01:35Z",
        "lastEditedBy" : "4645df42-03e2-47fd-a9f5-0a9c1cdb8c68",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecfc1aeea88728a5939d577480a5cbb5efa25d6e",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +94,98 @@    this.affinity,\n    this.maxSimultaneousDrags,\n    this.onDragStarted,\n    this.onDraggableCanceled,\n    this.onDragCompleted,"
  },
  {
    "id" : "9aff42e6-594e-4911-b09d-8b7b60f2295e",
    "prId" : 14103,
    "prUrl" : "https://github.com/flutter/flutter/pull/14103#pullrequestreview-90269690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3272eaec-4864-45cc-9afc-33c17f2d2003",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "We should probably add to the onWillAccept docs that that is called when a piece of data enters the target, and that that will be followed by either onAccept or onLeave.",
        "createdAt" : "2018-01-19T22:53:34Z",
        "updatedAt" : "2018-01-20T13:24:40Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "09c5817fe9beb635adc59ab2662b933dac2b092c",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +401,405 @@  /// Called when a given piece of data being dragged over this target leaves\n  /// the target.\n  final DragTargetLeave<T> onLeave;\n\n  @override"
  },
  {
    "id" : "3d6777a4-dfa0-4db8-99c6-cd7e424ff2cb",
    "prId" : 22267,
    "prUrl" : "https://github.com/flutter/flutter/pull/22267#pullrequestreview-163993491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0fe7d65-29dd-40e8-9766-758f5b1378d8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "For these docs we should have more detail (these don't technically pass our style guide, since they don't give more information than you could guess from the names). Please see https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#documentation-comments-dartdocs for discussion including a list of writing prompts that might suggest more information to include here.",
        "createdAt" : "2018-10-11T19:15:25Z",
        "updatedAt" : "2018-10-31T22:57:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2dd2ceb3-9287-41c4-8a6c-ebee82a3a395",
        "parentId" : "b0fe7d65-29dd-40e8-9766-758f5b1378d8",
        "authorId" : "5d230542-5ceb-4a73-9fbd-20d48ec42b79",
        "body" : "@Hixie added some more details to the documentation of my changes. Please let me know if this suffices, since this should be in line with style guidelines.",
        "createdAt" : "2018-10-11T20:08:56Z",
        "updatedAt" : "2018-10-31T22:57:29Z",
        "lastEditedBy" : "5d230542-5ceb-4a73-9fbd-20d48ec42b79",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0fa64795e2b823330fd3b67f7a9b24dce87e3e8",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +455,459 @@  /// The global position when the specific pointer event occurred on\n  /// the draggable.\n  final Offset offset;\n}\n"
  },
  {
    "id" : "68067fb8-f0a5-45ca-94db-2eb6d9524d9e",
    "prId" : 38789,
    "prUrl" : "https://github.com/flutter/flutter/pull/38789#pullrequestreview-277918931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e84682e-b525-444e-8cb5-a311d8a4d556",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Should we also then remove the rejected avatar in `didDrop` (l#547)? It looks like `didLeave` (l#535) removes the avatar from rejected and candidates, but only candidates are removed in `didDrop`. \r\nThis might result in an assert being thrown if you drag and drop a rejected avatar once, and then again since the assert above (l#521) checks that it is not already in the list.",
        "createdAt" : "2019-08-20T20:19:54Z",
        "updatedAt" : "2019-08-21T12:04:08Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "adf0eeb7-2b2d-4e04-a925-d27553d6850a",
        "parentId" : "1e84682e-b525-444e-8cb5-a311d8a4d556",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "If that is the case I would add another test that drags and drops rejected targets twice, as well as drags and leaves for good measure, to check that doesn't trigger the assertion.",
        "createdAt" : "2019-08-20T20:21:29Z",
        "updatedAt" : "2019-08-21T12:04:08Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "5a0cdf19-1b89-470c-aa6c-b0ea101e5036",
        "parentId" : "1e84682e-b525-444e-8cb5-a311d8a4d556",
        "authorId" : "dc002755-fe8d-46f0-8da1-6d9dbe7aa0b3",
        "body" : "Thanks for the review! \r\n\r\nSo `didDrop` is never called with an avatar in `_rejectedAvatars`, only ones in `_acceptedAvatars`, hence this assertion will never fail. This is because `didDrop` is only called on `_DragAvatar._activeTarget` (#690) and `_activeTarget` is guaranteed to be a target which is accepting the avatar as it is only ever a target which returns true on `_DragTargetState.didEnter` (#661, #666), which only returns true if it is accepted (#526). Phew. \r\n\r\nGiven this long chain of reasoning closely tied to maintaining internal state in multiple widgets I agree it's prudent to introduce some extra tests.\r\n\r\nI've updated my original test to be the two you suggested:\r\n* Check that `DragTarget` rebuilds correctly when the same rejected `Draggable` is dropped two times in a row.\r\n* Check that `DragTarget` rebuilds correctly when a rejected `Draggable` leaves then enters. ",
        "createdAt" : "2019-08-21T12:17:35Z",
        "updatedAt" : "2019-08-21T13:57:52Z",
        "lastEditedBy" : "dc002755-fe8d-46f0-8da1-6d9dbe7aa0b3",
        "tags" : [
        ]
      },
      {
        "id" : "ffe1e626-6c01-466d-a61b-5ca12e8cdd90",
        "parentId" : "1e84682e-b525-444e-8cb5-a311d8a4d556",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Ah! Thank you for being so thorough! \r\nI think I mixed up a re-factor I've been looking into to address #37053 that would involve `didDrop`. 😜 \r\nThank you for adding the additional test as well. This is a great fix - which I see you mentioned (in #38786) may eradicate the need for exposing another callback in #37053. I'd be interested to see feedback there after this lands. ",
        "createdAt" : "2019-08-21T16:28:01Z",
        "updatedAt" : "2019-08-21T16:29:51Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a7dd254a94781b2a6c823013383d0c115900d7d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +525,529 @@      });\n      return true;\n    } else {\n      setState(() {\n        _rejectedAvatars.add(avatar);"
  },
  {
    "id" : "59a855ea-52fe-441f-872f-b57dcffc87b1",
    "prId" : 55257,
    "prUrl" : "https://github.com/flutter/flutter/pull/55257#pullrequestreview-398359108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "852272d6-52b0-48d8-8837-7c7d5ea1fc60",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Add a link from this doc to the new callback?",
        "createdAt" : "2020-04-22T16:21:45Z",
        "updatedAt" : "2020-04-30T23:30:06Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "87b556fa57d970f19118351887298946b695ebe3",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +519,523 @@  final DragTargetWillAccept<T> onWillAccept;\n\n  /// Called when an acceptable piece of data was dropped over this drag target.\n  ///\n  /// Equivalent to [onAcceptWithDetails], but only includes the data."
  },
  {
    "id" : "e9240bf9-e5c3-4e7f-80d7-a76e49a011df",
    "prId" : 60174,
    "prUrl" : "https://github.com/flutter/flutter/pull/60174#pullrequestreview-441131530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60a02f40-7238-4dfe-b9fa-1f4b6c076a74",
        "parentId" : null,
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Is a public `onMove` property necessary for your demand?",
        "createdAt" : "2020-06-26T00:49:28Z",
        "updatedAt" : "2020-07-24T18:19:59Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "69fda881-cf9d-446c-8bfd-3cd1acae35dc",
        "parentId" : "60a02f40-7238-4dfe-b9fa-1f4b6c076a74",
        "authorId" : "56c382db-27c4-408a-97dd-acecc5538648",
        "body" : "Yes, in order to trigger logic (outside of the build tree) in the same way as onLeave, etc.",
        "createdAt" : "2020-07-01T19:13:31Z",
        "updatedAt" : "2020-07-24T18:19:59Z",
        "lastEditedBy" : "56c382db-27c4-408a-97dd-acecc5538648",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5b3d3e04c76f317990bf7cbb804adc26e42f6ac",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +510,514 @@    this.onAcceptWithDetails,\n    this.onLeave,\n    this.onMove,\n  }) : super(key: key);\n"
  },
  {
    "id" : "61a1cedb-5735-4484-89a0-4ea71b776f0f",
    "prId" : 60174,
    "prUrl" : "https://github.com/flutter/flutter/pull/60174#pullrequestreview-445892057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6eb58ba-2ad2-4051-8368-ba64a42caf93",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Actually, why do you need the detailsBuilder? Doesn't the onMove callback give you enough information to change the state from the outside to what you want?",
        "createdAt" : "2020-07-01T20:07:06Z",
        "updatedAt" : "2020-07-24T18:19:59Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "c85d63c8-a454-415e-b731-03c577d69239",
        "parentId" : "c6eb58ba-2ad2-4051-8368-ba64a42caf93",
        "authorId" : "56c382db-27c4-408a-97dd-acecc5538648",
        "body" : "See my original bug description: https://github.com/flutter/flutter/issues/58982\r\nIt would be unergonomic to trigger a second rebuild outside (of the initial movement rebuild) when the user wants to update children.",
        "createdAt" : "2020-07-01T21:32:41Z",
        "updatedAt" : "2020-07-24T18:19:59Z",
        "lastEditedBy" : "56c382db-27c4-408a-97dd-acecc5538648",
        "tags" : [
        ]
      },
      {
        "id" : "3f3b19a2-e539-4821-8930-6d9a7278b91c",
        "parentId" : "c6eb58ba-2ad2-4051-8368-ba64a42caf93",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why would there be a second rebuild? If I remember correctly, onMove is executed between frame (before DragTarget can rebuild in response to the move), so any state changes that are triggered in the onMove would be applied in the same frame as the DragTarget rebuild, no?",
        "createdAt" : "2020-07-01T22:02:49Z",
        "updatedAt" : "2020-07-24T18:19:59Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "b6fadea8-cdf0-45d1-bbfe-881ff431ef6a",
        "parentId" : "c6eb58ba-2ad2-4051-8368-ba64a42caf93",
        "authorId" : "56c382db-27c4-408a-97dd-acecc5538648",
        "body" : "Here's didDrop (existing code) and didMove (new code, modeled on the existing patterns). It calls setState() first, then calls any relevant callbacks. \r\n\r\n```\r\n  void didDrop(_DragAvatar<Object> avatar) {\r\n    assert(_candidateAvatars.contains(avatar));\r\n    if (!mounted)\r\n      return;\r\n    setState(() {\r\n      _candidateAvatars.remove(avatar);\r\n    });\r\n    if (widget.onAccept != null)\r\n      widget.onAccept(avatar.data as T);\r\n    if (widget.onAcceptWithDetails != null)\r\n      widget.onAcceptWithDetails(DragTargetDetails<T>(data: avatar.data as T, offset: avatar._lastOffset));\r\n  }\r\n\r\n  void didMove(_DragAvatar<Object> avatar) {\r\n    if (!mounted)\r\n      return;\r\n    if (widget.detailedMovementBuilder != null)\r\n      setState(() {});\r\n    if (widget.onMove != null)\r\n      widget.onMove(DragTargetDetails<dynamic>(data: avatar.data, offset: avatar._lastOffset));\r\n  }\r\n```\r\n\r\nEven if it were to work without needing to add it to the next frame, that's not apparent to the caller. I feel that most Dart/Flutter developers will instead assume that callbacks may be called during rebuild, and will always schedule it on the next frame, e.g. would use onMove:\r\n```\r\nonMove:(details) => SchedulerBinding.instance.addPostFrameCallback((_) => setState(()=>_coords = details.offset));\r\n```\r\n",
        "createdAt" : "2020-07-01T23:14:22Z",
        "updatedAt" : "2020-07-24T18:19:59Z",
        "lastEditedBy" : "56c382db-27c4-408a-97dd-acecc5538648",
        "tags" : [
        ]
      },
      {
        "id" : "6c9ff8a4-58a7-4ab2-9062-8278207606f1",
        "parentId" : "c6eb58ba-2ad2-4051-8368-ba64a42caf93",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The order of calling setState and calling the callbacks doesn't matter here. setState just marks this widget to need rebuild in the next frame. It doesn't actually do the rebuild.\r\n\r\nScheduling a postFrameCallback like that in response to a gesture callback is also very unusual. You wouldn't do that in a GestureDetector's onDrag/onTap/etc. either.",
        "createdAt" : "2020-07-08T17:10:49Z",
        "updatedAt" : "2020-07-24T18:19:59Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "6f8406a0-ae12-4471-920f-8313555a6168",
        "parentId" : "c6eb58ba-2ad2-4051-8368-ba64a42caf93",
        "authorId" : "56c382db-27c4-408a-97dd-acecc5538648",
        "body" : "I've confirmed that the postFrameCallback is not required, i.e. I can just call setState() in the onMove() callback. However, I think many flutter coders instinctivly avoid setState() within a build _method_ out of habit, even though it is ok in this context since it is part of a callback outside of the build phase. But yes, I agree it's not needed. More thoughts in the other comment below.\r\n\r\n",
        "createdAt" : "2020-07-09T19:05:28Z",
        "updatedAt" : "2020-07-24T18:19:59Z",
        "lastEditedBy" : "56c382db-27c4-408a-97dd-acecc5538648",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5b3d3e04c76f317990bf7cbb804adc26e42f6ac",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +545,549 @@  ///\n  /// Note that this includes entering and leaving the target.\n  final DragTargetMove onMove;\n\n  @override"
  },
  {
    "id" : "dea47e0f-fd1b-4651-9f04-233e599d701c",
    "prId" : 60174,
    "prUrl" : "https://github.com/flutter/flutter/pull/60174#pullrequestreview-455075746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dea0011-1635-4dc8-91be-193a456896fd",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe extract this out into a private method and call it below as well.",
        "createdAt" : "2020-07-24T17:48:40Z",
        "updatedAt" : "2020-07-24T18:19:59Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5b3d3e04c76f317990bf7cbb804adc26e42f6ac",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +703,707 @@      for (final _DragTargetState<T> target in _enteredTargets) {\n        target.didMove(this);\n      }\n      return;\n    }"
  }
]