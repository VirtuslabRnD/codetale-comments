[
  {
    "id" : "4d592e41-f838-4858-be7e-de77b963ae67",
    "prId" : 594,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74aa5b2f-debf-4d0d-9e4d-1558d2ce48d1",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Dart can handle diamond inheritance without going crazy?\n",
        "createdAt" : "2015-11-26T02:02:57Z",
        "updatedAt" : "2015-11-26T02:02:57Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "2b069778-73b7-467d-ab5e-832d59940b11",
        "parentId" : "74aa5b2f-debf-4d0d-9e4d-1558d2ce48d1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "It's not really inheritance in the mixin. When the class is used as a mixin, it only inserts the class itself into the hierarchy, and then verifies that the thing it now inherits from is type-compatible with the thing that the declaration says it should inherit from. Or something like that.\n",
        "createdAt" : "2015-11-26T02:07:19Z",
        "updatedAt" : "2015-11-26T02:07:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e513822efffbe123c7f5b40034a84cf6814ee50",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +266,270 @@}\n\nabstract class ModalRoute<T> extends TransitionRoute<T> with LocalHistoryRoute<T> {\n  ModalRoute({\n    Completer<T> completer,"
  },
  {
    "id" : "def08370-53cf-4b2f-b849-88d7a916bd5f",
    "prId" : 806,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "060c0c91-aa9a-4bc7-b7aa-7131481fb23a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "what about when the forward performance changes?\n",
        "createdAt" : "2015-12-08T05:52:57Z",
        "updatedAt" : "2015-12-08T05:52:57Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "bf92947d-d8bd-4402-b353-f5bc9afe1ecd",
        "parentId" : "060c0c91-aa9a-4bc7-b7aa-7131481fb23a",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ooh never mind. it's a proxy and handles that transparently.\n",
        "createdAt" : "2015-12-08T05:55:34Z",
        "updatedAt" : "2015-12-08T05:55:34Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "20debfa4-a3e1-486d-9dbb-c23bf998679a",
        "parentId" : "060c0c91-aa9a-4bc7-b7aa-7131481fb23a",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah\n",
        "createdAt" : "2015-12-08T06:42:32Z",
        "updatedAt" : "2015-12-08T06:42:32Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "f202e7ab170a69a859146e876d1c39f06d462774",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +297,301 @@    super.initState();\n    config.route.performance?.addStatusListener(_performanceStatusChanged);\n    config.route.forwardPerformance?.addStatusListener(_performanceStatusChanged);\n  }\n"
  },
  {
    "id" : "e1efb67f-d4d2-4ba4-bbe8-4a2dbfbf35d8",
    "prId" : 832,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9db3d911-f0d0-40c4-b711-017e15bb5bac",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "does this overwrite the inherited documentation? if so, we should duplicate the inherited documentation here, and adjust it as necessary to explain the thing with finished().\n",
        "createdAt" : "2015-12-09T17:21:50Z",
        "updatedAt" : "2015-12-09T17:21:50Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a26c92af-ab10-453b-9a6a-45cbaea3ecef",
        "parentId" : "9db3d911-f0d0-40c4-b711-017e15bb5bac",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Done.\n",
        "createdAt" : "2015-12-09T17:30:22Z",
        "updatedAt" : "2015-12-09T17:30:22Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55858411fae9f7de2efc75400c6e706dddd5b07",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +34,38 @@  }\n\n  /// Subclasses shouldn't call this if they want to delay the finished() call.\n  bool didPop(T result) {\n    finished();"
  },
  {
    "id" : "9633298b-c376-413f-a29c-7f7a9f797321",
    "prId" : 2483,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b7a6f28-34f4-452a-bbd6-c0a0540caae5",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "add something about how if this is true, we discard the previous routes to save memory etc\n",
        "createdAt" : "2016-03-08T05:01:50Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ecd80358821e3e3a1719d36e9890b496cef67e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +93,97 @@  Duration get transitionDuration;\n\n  /// Whether the route obscures previous routes when the transition is complete.\n  ///\n  /// When an opaque route's entrance transition is complete, the routes behind"
  },
  {
    "id" : "b034fbd9-154e-4e13-9edd-febfc0d2ce3c",
    "prId" : 2483,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a09adce3-240b-4419-b8fb-67fda4f042bc",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this was public so that subclasses could override it\n",
        "createdAt" : "2016-03-08T05:02:37Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "55fe2420-1577-4327-97ff-e8fd7c8a2fca",
        "parentId" : "a09adce3-240b-4419-b8fb-67fda4f042bc",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "in fact I thought someone did. I wonder what happened with that.\n",
        "createdAt" : "2016-03-08T05:11:25Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "69cc140c-4a71-4db3-a658-d924a7a134cd",
        "parentId" : "a09adce3-240b-4419-b8fb-67fda4f042bc",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "looks like I made it public in https://github.com/flutter/flutter/commit/88e74693ae36942503ea42a17ea873725f544f55\n",
        "createdAt" : "2016-03-08T05:13:51Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "fb149c43-e973-4c84-810a-090012661184",
        "parentId" : "a09adce3-240b-4419-b8fb-67fda4f042bc",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I guess people could always just reoverride didPush and didReplace and call animation.addStatusListener...\n",
        "createdAt" : "2016-03-08T05:15:22Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c17e6f08-38ba-4e46-91e8-67e9fab950bd",
        "parentId" : "a09adce3-240b-4419-b8fb-67fda4f042bc",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, I don't see much value in making it public.  Maybe to have a defined ordering w.r.t. other listeners?\n",
        "createdAt" : "2016-03-08T05:22:55Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "bf8c0398-96ac-42cd-8a1b-cf6826ce49da",
        "parentId" : "a09adce3-240b-4419-b8fb-67fda4f042bc",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't feel strongly either way. It doesn't seem to have any clients currently. If any of our customers use it, then we'll find out and can make it public again.\n",
        "createdAt" : "2016-03-08T05:23:48Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ecd80358821e3e3a1719d36e9890b496cef67e",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +124,128 @@  T _result;\n\n  void _handleStatusChanged(AnimationStatus status) {\n    switch (status) {\n      case AnimationStatus.completed:"
  },
  {
    "id" : "29dc7f6d-e183-4e96-b3a6-1f8378103ed5",
    "prId" : 2483,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7e4b55d-136f-49b9-b405-e1e1d1f87042",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "We really should use RelativeRect here. It's exactly the same data model but has sprouted more helper functions.\n",
        "createdAt" : "2016-03-08T05:08:14Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "5f48d7e5-4d2d-425f-b848-50108f5778b7",
        "parentId" : "c7e4b55d-136f-49b9-b405-e1e1d1f87042",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Filed https://github.com/flutter/flutter/issues/2484\n",
        "createdAt" : "2016-03-08T05:10:36Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ecd80358821e3e3a1719d36e9890b496cef67e",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +412,416 @@\n/// Where a [ModalRoute] should be positioned within the [Navigator]'s [Overlay].\nclass ModalPosition {\n  const ModalPosition({ this.top, this.right, this.bottom, this.left });\n"
  },
  {
    "id" : "f7a3d789-9095-49af-8533-2b07566ff333",
    "prId" : 2483,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6621e89c-023c-46bb-a722-0bc1186bdf57",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should fill in the details about the arguments\n",
        "createdAt" : "2016-03-08T05:09:13Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ecd80358821e3e3a1719d36e9890b496cef67e",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +458,462 @@  ModalPosition getPosition(BuildContext context) => null;\n\n  /// Override this function to build the primary content of this route.\n  ///\n  /// * [context] The context in which the route is being built."
  },
  {
    "id" : "ef47aa5c-da41-4461-a719-acbb0f8fe5c4",
    "prId" : 2483,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d9ab565-479d-4649-bcd9-9e7fe7cd2bbb",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "here too\n",
        "createdAt" : "2016-03-08T05:09:20Z",
        "updatedAt" : "2016-03-08T17:36:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ecd80358821e3e3a1719d36e9890b496cef67e",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +474,478 @@  /// widget in a [FadeTransition] using the given animation as the opacity.\n  ///\n  /// By default, the child is not wrapped in any transition widgets.\n  ///\n  /// * [context] The context in which the route is being built."
  },
  {
    "id" : "3ded4f9f-ac5a-4978-ba5d-00dd98f2d32e",
    "prId" : 4382,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eec77deb-3300-4720-bff3-f16ccc603dfe",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Sorry, I removed the comment explaining why this would cause the test failures you're seeing on Travis.  We need to set `_offstage` even if `_scopeKey.currentState` is null.  The way you've got this setup, the callback isn't run then.  Probably `setState` should run the callback unconditionally.\n",
        "createdAt" : "2016-06-04T04:19:02Z",
        "updatedAt" : "2016-06-07T23:00:35Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "be2881a0-2bdb-427b-ab57-0e2f1600cb7c",
        "parentId" : "eec77deb-3300-4720-bff3-f16ccc603dfe",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "fixed\n",
        "createdAt" : "2016-06-07T22:42:02Z",
        "updatedAt" : "2016-06-07T23:00:35Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c8ccb7f628edf82988eff4c3af9c3df172c2c3e",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +551,555 @@      return;\n    setState(() {\n      _offstage = value;\n    });\n  }"
  },
  {
    "id" : "fa319839-4bf5-41ee-bc68-ed7375393e04",
    "prId" : 4382,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6447ce3-0dec-4767-bdf9-948c9ba3d162",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Maybe add a link to the linter bug about getting rid of these trampolines?\n",
        "createdAt" : "2016-06-04T04:20:03Z",
        "updatedAt" : "2016-06-07T23:00:35Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "9adb30cf-e3ea-450f-8708-967e5b01bb2e",
        "parentId" : "a6447ce3-0dec-4767-bdf9-948c9ba3d162",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "it wouldn't help here, since the setState() we're calling isn't defined in this file.\n",
        "createdAt" : "2016-06-07T22:42:36Z",
        "updatedAt" : "2016-06-07T23:00:35Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c8ccb7f628edf82988eff4c3af9c3df172c2c3e",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +403,407 @@  }\n\n  void _routeSetState(VoidCallback fn) {\n    setState(fn);\n  }"
  },
  {
    "id" : "9b360f80-7db5-4405-84c1-30cf7c2394c4",
    "prId" : 7488,
    "prUrl" : "https://github.com/flutter/flutter/pull/7488#pullrequestreview-17156600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85c0c7c0-8f00-489e-aef6-27c4fb6d611c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Maybe this would be better starting off as null, since it's a rare case.",
        "createdAt" : "2017-01-17T21:43:03Z",
        "updatedAt" : "2017-01-18T18:49:26Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ce0d076d-938a-4284-b97f-e4f95e31a587",
        "parentId" : "85c0c7c0-8f00-489e-aef6-27c4fb6d611c",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I had it that way originally. Doing so makes all of the other references to willPopCallbacks messier; I don't think there's much of a win here.",
        "createdAt" : "2017-01-17T23:28:29Z",
        "updatedAt" : "2017-01-18T18:49:26Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "e6b2b3fb-1bf7-474a-bff8-b22963c4a0e2",
        "parentId" : "85c0c7c0-8f00-489e-aef6-27c4fb6d611c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Oh, I see. I didn't realise it was used from outside this class.",
        "createdAt" : "2017-01-18T05:59:55Z",
        "updatedAt" : "2017-01-18T18:49:26Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9402692fa8c97d1b17b223b175184136088359d3",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +386,390 @@class _ModalScopeState extends State<_ModalScope> {\n  // See addScopedWillPopCallback, removeScopedWillPopCallback in ModalRoute.\n  List<WillPopCallback> willPopCallbacks = <WillPopCallback>[];\n\n  @override"
  },
  {
    "id" : "0ad1a369-a4fd-49e1-bc02-edfcd6ad909a",
    "prId" : 7488,
    "prUrl" : "https://github.com/flutter/flutter/pull/7488#pullrequestreview-17129154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f460294-a6df-4b43-8fe3-3834380b3c26",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should probably warn that this callback might get called long after the route and the widget tree is disposed.",
        "createdAt" : "2017-01-17T21:46:04Z",
        "updatedAt" : "2017-01-18T18:49:26Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f0cf76db-8f2b-4a61-97a0-a9d1e3a7337a",
        "parentId" : "6f460294-a6df-4b43-8fe3-3834380b3c26",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I've updated the doc.",
        "createdAt" : "2017-01-18T00:32:28Z",
        "updatedAt" : "2017-01-18T18:49:26Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "9402692fa8c97d1b17b223b175184136088359d3",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +693,697 @@  /// * [removeScopedWillPopCallback], which removes a callback from the list\n  ///   that [willPop] checks.\n  void addScopedWillPopCallback(WillPopCallback callback) {\n    assert(_scopeKey.currentState != null);\n    _scopeKey.currentState.addWillPopCallback(callback);"
  },
  {
    "id" : "330250e3-6a24-4398-a20e-798802e116ad",
    "prId" : 7526,
    "prUrl" : "https://github.com/flutter/flutter/pull/7526#pullrequestreview-17351284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77bea07a-5b2b-407e-b248-316da3276496",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "a question that this text raises (and should answer) is: if they do, are they required to call finalizeRoute?",
        "createdAt" : "2017-01-18T23:21:38Z",
        "updatedAt" : "2017-01-19T00:09:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7c1b51f75a2692e8933b27522b9fa64a9c8609",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +41,45 @@  /// Subclasses can override this getter if they want to delay finalization\n  /// (for example to animate the route's exit before removing it from the\n  /// overlay).\n  ///\n  /// Subclasses that return false from [finishedWhenPopped] are responsible for"
  },
  {
    "id" : "3480eb31-e330-44ee-909e-cc423593cf11",
    "prId" : 7996,
    "prUrl" : "https://github.com/flutter/flutter/pull/7996#pullrequestreview-20904642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8b09189-33f0-4466-910c-92a0b6913fcd",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "didChangeInternalState ?",
        "createdAt" : "2017-02-08T23:59:04Z",
        "updatedAt" : "2017-02-09T01:46:43Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "299b309b-99b6-41c1-8175-1c458c7535f6",
        "parentId" : "c8b09189-33f0-4466-910c-92a0b6913fcd",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I didn't really want it to sound the same as the others since the others are called by the Navigator",
        "createdAt" : "2017-02-09T00:21:34Z",
        "updatedAt" : "2017-02-09T01:46:43Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b309daa5d15cf961835f69db6e640880d19d9ff",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +343,347 @@  @protected\n  @mustCallSuper\n  void changedInternalState() { }\n}\n"
  },
  {
    "id" : "8de26717-d76c-4433-879a-2f1c36cf09d7",
    "prId" : 9165,
    "prUrl" : "https://github.com/flutter/flutter/pull/9165#pullrequestreview-30679724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41de1c1c-9bfa-4c9d-8392-b98b76554f28",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Please add a breadcrumb to willPop.",
        "createdAt" : "2017-04-04T03:12:23Z",
        "updatedAt" : "2017-04-04T21:35:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9aa4b35e23312fd72f6e0b90fd1550719d19cdd7",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +388,392 @@}\n\n/// Indicates whether the current route should be popped.\n///\n/// Used as the return value for [Route.willPop]."
  },
  {
    "id" : "11d405d3-909b-4f8f-abbe-0bd951d533e1",
    "prId" : 11236,
    "prUrl" : "https://github.com/flutter/flutter/pull/11236#pullrequestreview-50430885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c834185-9e33-49dc-8be1-ce3d78c385d8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This kind of code should be in a `## Sample Code` block so that it gets analyzed.",
        "createdAt" : "2017-07-17T20:03:40Z",
        "updatedAt" : "2017-07-17T20:03:41Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "40240cf80e55970246b77f651666c4f33e936b43",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +972,976 @@/// state of their [Route].\n///\n/// To make a [StatefulWidget] aware of its current [Route] state, implement\n/// [RouteAware] in its [State] and subscribe it to the [RouteObserver]:\n///"
  },
  {
    "id" : "80b091dd-51c3-4d2a-bfed-cef186075cfa",
    "prId" : 11236,
    "prUrl" : "https://github.com/flutter/flutter/pull/11236#pullrequestreview-86801938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19b5911a-ab38-4a10-9c59-7ca3cf1d98e0",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why do we call didPush when you subscribe?",
        "createdAt" : "2018-01-04T00:08:04Z",
        "updatedAt" : "2018-01-04T00:08:04Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d0fc7421-1f70-4867-af44-f571b1843bed",
        "parentId" : "19b5911a-ab38-4a10-9c59-7ca3cf1d98e0",
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "This code was originally written by @weisong0 for internal use and then migrated into open source Flutter.\r\n\r\nIt looks like the intention is for `subscribe()` to be called in `dependenciesChanged()`, which is the earliest point that a `State` has become active and can safely call `ModalRoute.of(context)`. This will notify the observer that the `State` is now interactive and start listening for new modal routes that would make the `State` be noninteractive.\r\n\r\nExample code here: https://github.com/flutter/plugins/blob/master/packages/firebase_analytics/example/lib/tabs_page.dart#L35\r\n\r\nIt's looks a bit odd to me that the corresponding call to `didPop()` occurs in `didPop()` instead of `unsubscribe()`. @weisong0, do you think it would make sense to move the `_listeners[route]?.didPop()` call to `unsubscribe()`?\r\n  ",
        "createdAt" : "2018-01-04T20:30:11Z",
        "updatedAt" : "2018-01-04T20:32:53Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      },
      {
        "id" : "f97c783a-0fb9-4550-9224-34c2510f102c",
        "parentId" : "19b5911a-ab38-4a10-9c59-7ca3cf1d98e0",
        "authorId" : "e968d717-fd9e-48ab-8e1b-aa57c75c4545",
        "body" : "`unsubscribe()` is intended to be called in `dispose()`. However, I am not sure when `dispose()` occurs after the associated route is popped. If `dispose()` is called every time the route is popped, then I think it makes sense to move it to `unsubscribe()`.",
        "createdAt" : "2018-01-04T21:04:09Z",
        "updatedAt" : "2018-01-04T21:04:09Z",
        "lastEditedBy" : "e968d717-fd9e-48ab-8e1b-aa57c75c4545",
        "tags" : [
        ]
      },
      {
        "id" : "746f0f6b-9737-487a-b5d0-0613bf49d296",
        "parentId" : "19b5911a-ab38-4a10-9c59-7ca3cf1d98e0",
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "I filed https://github.com/flutter/flutter/issues/13919 to track this",
        "createdAt" : "2018-01-05T00:55:13Z",
        "updatedAt" : "2018-01-05T00:55:14Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      }
    ],
    "commit" : "40240cf80e55970246b77f651666c4f33e936b43",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1008,1012 @@    assert(route != null);\n    if (!_listeners.containsKey(route)) {\n      routeAware.didPush();\n      _listeners[route] = routeAware;\n    }"
  },
  {
    "id" : "dc9b535b-a10a-4801-99be-9fd3dcd189c2",
    "prId" : 11257,
    "prUrl" : "https://github.com/flutter/flutter/pull/11257#pullrequestreview-51062355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b93245f4-7a5a-40ab-a82d-ed9feca9ef0e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This seems like a weird feature. What if they're going from a PageRoute to a DialogRoute to a PageRoute to a PageRoute? Why should they only be notified once?",
        "createdAt" : "2017-07-17T23:31:51Z",
        "updatedAt" : "2017-07-20T20:32:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6d97716c-6f70-4ba9-8163-89b770457193",
        "parentId" : "b93245f4-7a5a-40ab-a82d-ed9feca9ef0e",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "For analytics, you mostly care about transition from one full-screen page to another (at least for this use case). You don't care about transient routes (e.g. an error dialog informing you that your phone number is required to have 10 digits should not show up as a page transition in analytics). Those transient route-specific sub-routes should be popped off the navigation stack before moving to the next page route (and from my experience that's how almost all apps behave).\r\n\r\nThat's how leafy wants Google Analytics to be wired up and that also made the most sense to me when wiring up Firebase Analytics.\r\n\r\nIf you really want to be informed about all route changes, you're free to instantiate `RouteObserver<Route>` as mentioned in the docs in the paragraph below.",
        "createdAt" : "2017-07-19T22:45:38Z",
        "updatedAt" : "2017-07-20T20:32:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "81c16d4916f1f1370477b28cf66d5815a136b11e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +976,980 @@/// useful to keep track of page transitions, e.i. a `RouteObserver<PageRoute>`\n/// will inform subscribed [RouteAware]s whenever the user navigates away from\n/// the current page route to another page route.\n///\n/// If you want to be informed about route changes of any type, you should"
  },
  {
    "id" : "60c264c4-3bf0-4cd9-b4ba-ea515ce4863a",
    "prId" : 11473,
    "prUrl" : "https://github.com/flutter/flutter/pull/11473#pullrequestreview-54772814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49c1bd25-d29e-4679-b7e8-ef6beab041bc",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Not entirely clear what we're proposing to the user. Doesn't sound like we're asking them to build the page content here. Perhaps an example of what might the user want to build each time the route state changes?",
        "createdAt" : "2017-08-07T18:24:58Z",
        "updatedAt" : "2017-08-07T20:53:53Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "b0655eca-bfb1-4e89-a198-1220f87b4602",
        "parentId" : "49c1bd25-d29e-4679-b7e8-ef6beab041bc",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Why doesn't it sound like we're asking them to build the page content? That's exactly what we're trying to make them provide, and the description starts with \"Override this method to build the primary content of this route\".",
        "createdAt" : "2017-08-07T20:22:00Z",
        "updatedAt" : "2017-08-07T20:53:53Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "187d4522-c802-4b5f-8244-dc5e20bed178",
        "parentId" : "49c1bd25-d29e-4679-b7e8-ef6beab041bc",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Sorry, I meant I think you're just saying \"don't forget to build all components of your transition that changes during the transition in buildTransitions\" but the phrasing might sound a bit broad, like \"if you want to be safe and conservative, you might want to double think putting stuff in buildPage\"",
        "createdAt" : "2017-08-07T20:45:18Z",
        "updatedAt" : "2017-08-07T20:53:53Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "85a87013-0113-4bb2-9d02-0dd49ac40929",
        "parentId" : "49c1bd25-d29e-4679-b7e8-ef6beab041bc",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Either way, minor nit. It just made me stop and read it twice before realizing what you meant. ",
        "createdAt" : "2017-08-07T20:46:11Z",
        "updatedAt" : "2017-08-07T20:53:53Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "1c7a726f-0c27-45cc-a96c-4c771f4ebb30",
        "parentId" : "49c1bd25-d29e-4679-b7e8-ef6beab041bc",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I've added some prose to try to disambiguate this issue.",
        "createdAt" : "2017-08-07T20:54:38Z",
        "updatedAt" : "2017-08-07T20:54:38Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "dd8656f3-7abf-45de-942d-e8ef9b99e477",
        "parentId" : "49c1bd25-d29e-4679-b7e8-ef6beab041bc",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "LG, thanks!",
        "createdAt" : "2017-08-07T20:59:25Z",
        "updatedAt" : "2017-08-07T20:59:25Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a530b511376ce857a58cf38d19ab6c8389f9129",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +576,580 @@  ///    and exit transition of routes pushed on top of this route.\n  ///\n  /// This method is called when the route is first built, and rarely\n  /// thereafter. In particular, it is not called again when the route's state\n  /// changes. For a builder that is called every time the route's state"
  },
  {
    "id" : "9111630a-57bd-4de0-8801-10195cd10bbe",
    "prId" : 25477,
    "prUrl" : "https://github.com/flutter/flutter/pull/25477#pullrequestreview-186183855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c03e33a3-6035-4b7f-bc38-561e825ee27f",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "While you're here, can you document the consequences of it being false? ",
        "createdAt" : "2018-12-17T21:13:15Z",
        "updatedAt" : "2018-12-18T17:13:46Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "83c99b03-587a-4ada-88f4-1bc8c4261475",
        "parentId" : "c03e33a3-6035-4b7f-bc38-561e825ee27f",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Good point, done.",
        "createdAt" : "2018-12-18T17:13:59Z",
        "updatedAt" : "2018-12-18T17:13:59Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8da176d3963ebdee06e2aac819b177566997ce2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +270,274 @@  /// the [nextRoute] is popped off of this route, the\n  /// `secondaryAnimation` will run from 1.0 - 0.0.\n  ///\n  /// If false, this route's [buildTransitions] `secondaryAnimation` parameter\n  /// value will be [kAlwaysDismissedAnimation]. In other words, this route"
  },
  {
    "id" : "08b89495-9271-46c5-b069-325a5a32cf8c",
    "prId" : 31614,
    "prUrl" : "https://github.com/flutter/flutter/pull/31614#pullrequestreview-230911657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e98c2be4-c329-4d7e-84e5-05950597d860",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "According to https://docs.flutter.io/flutter/widgets/Route/navigator.html, a route's navigator can be null (here and below).",
        "createdAt" : "2019-04-25T21:41:37Z",
        "updatedAt" : "2019-04-25T22:35:36Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "d31fd065-068b-46d1-b4b8-d050a646e5a2",
        "parentId" : "e98c2be4-c329-4d7e-84e5-05950597d860",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "It can only be null if it hasn't been pushed yet, or if it has been disposed.\r\n\r\nIn this case `isCurrent` checks that the navigator isn't null, and in the case of `didPush` below, by definition it has been pushed, so it's probably OK as-is.  I'm happy to still add the ?'s if you think it would be better to do it defensively against a future change, but they're not needed as-is.",
        "createdAt" : "2019-04-25T22:20:12Z",
        "updatedAt" : "2019-04-25T22:35:36Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "15063a382e3a70d04d7f071cf283d4bf6d51016a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +597,601 @@    _listenable = Listenable.merge(animations);\n    if (widget.route.isCurrent) {\n      widget.route.navigator.focusScopeNode.setFirstFocus(focusScopeNode);\n    }\n  }"
  },
  {
    "id" : "40f334b8-1718-4a16-82ef-e1d54dc129b6",
    "prId" : 42482,
    "prUrl" : "https://github.com/flutter/flutter/pull/42482#pullrequestreview-300773495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff11274f-1562-4a37-9a97-29dc54f7aa72",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "When would `Navigator.userGestureInProgressNotifier` end up as null?",
        "createdAt" : "2019-10-11T00:12:16Z",
        "updatedAt" : "2019-10-11T16:24:02Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "45a62935-9c71-4132-8623-d9ed6f9d0329",
        "parentId" : "ff11274f-1562-4a37-9a97-29dc54f7aa72",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "It doesn't, it's the `widget.route.navigator` that is sometimes null, like in a test, or before the route is pushed.",
        "createdAt" : "2019-10-11T15:45:54Z",
        "updatedAt" : "2019-10-11T16:24:06Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "622257fc174884063a5c83b928c8ff65f8785cbc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +662,666 @@                    // the focus node's ability to focus.\n                    AnimatedBuilder(\n                      animation: widget.route.navigator?.userGestureInProgressNotifier ?? ValueNotifier<bool>(false),\n                      builder: (BuildContext context, Widget child) {\n                        final bool ignoreEvents = widget.route.animation?.status == AnimationStatus.reverse ||"
  },
  {
    "id" : "8fa250cc-a4d9-48be-8b5f-9174fad3f56d",
    "prId" : 47476,
    "prUrl" : "https://github.com/flutter/flutter/pull/47476#pullrequestreview-353369863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23c51961-a386-4203-8a0b-84c7a7c07e49",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "How do you know at this point that there's an existing train hopping in progress?",
        "createdAt" : "2020-02-04T22:09:25Z",
        "updatedAt" : "2020-02-05T00:18:36Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "15f21ee4-f600-4c7f-8e7f-60c885912790",
        "parentId" : "23c51961-a386-4203-8a0b-84c7a7c07e49",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "whoever calls this method will need to make sure to set this private field to null as to indicate there is no more train hopping in progress. I think the comment in line 253 is not clear enough, will update",
        "createdAt" : "2020-02-04T23:13:20Z",
        "updatedAt" : "2020-02-05T00:18:36Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "414d95cb58a4b07222ece22b2a5d542e2227ee27",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +265,269 @@\n  void _updateSecondaryAnimation(Route<dynamic> nextRoute) {\n    // There is an existing train hopping in progress. Unfortunately, we cannot\n    // dispose current train hopping animation until we replace it with a new\n    // animation."
  }
]