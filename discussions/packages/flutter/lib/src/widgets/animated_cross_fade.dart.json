[
  {
    "id" : "255ed0ad-e2df-4439-b552-0bb93b0148fe",
    "prId" : 5650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5805da2d-2144-44fb-a13e-d4a60d9085b5",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "There should be a short-circuit return here, when oldConfig and the new one are equal.\n",
        "createdAt" : "2016-08-30T18:48:03Z",
        "updatedAt" : "2016-08-30T21:47:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "9869cad3-3b2c-4902-a413-f1737cba3fc7",
        "parentId" : "5805da2d-2144-44fb-a13e-d4a60d9085b5",
        "authorId" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "body" : "Adding a short-circuit return here would simply mean checking every field so see whether they changed, which I already do. In term of performance and logic, there would be no difference.\n",
        "createdAt" : "2016-08-30T20:48:09Z",
        "updatedAt" : "2016-08-30T21:47:12Z",
        "lastEditedBy" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "tags" : [
        ]
      },
      {
        "id" : "2a42e437-f14d-4d5a-8314-c79b4b567aa6",
        "parentId" : "5805da2d-2144-44fb-a13e-d4a60d9085b5",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Yes. Except for this case, which is worth checking too.\n",
        "createdAt" : "2016-08-30T21:19:05Z",
        "updatedAt" : "2016-08-30T21:47:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4f609a9a4b9809b1fd85749bf25c5eef475b5e3",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@  void didUpdateConfig(AnimatedCrossFade oldConfig) {\n    super.didUpdateConfig(oldConfig);\n\n    if (config.crossFadeState != oldConfig.crossFadeState) {\n      switch (config.crossFadeState) {"
  },
  {
    "id" : "e6c1ddab-7026-4b72-8608-d9063de06ba1",
    "prId" : 11343,
    "prUrl" : "https://github.com/flutter/flutter/pull/11343#pullrequestreview-51581188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb81a31c-0002-4ce4-a6d4-c05f3f3319e8",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I'd add `See [AnimatedCrossFade.defaultLayoutBuilder] for an example implementation'.\r\n\r\nI also wonder if the keys should be uniquely generated `GlobalKey`s instead, thus allowing more interesting layouts than those based on multiple children. In fact, I wonder if we would need to pass the keys here at all if they are `GlobalKey`s?",
        "createdAt" : "2017-07-21T19:26:18Z",
        "updatedAt" : "2017-07-21T20:44:16Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "e534572b-6d94-4e4e-99a0-e4d4f1f4cbea",
        "parentId" : "bb81a31c-0002-4ce4-a6d4-c05f3f3319e8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "We want to avoid using global keys if at all possible. They're expensive.\r\n\r\nYou can always convert a LocalKey to a GlobalKey if you really need a global key on the receiving end.",
        "createdAt" : "2017-07-21T20:34:11Z",
        "updatedAt" : "2017-07-21T20:44:16Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ddccc67f-617b-4af2-bfe5-13904e4ea2fe",
        "parentId" : "bb81a31c-0002-4ce4-a6d4-c05f3f3319e8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "~~added your suggested text~~\r\n\r\nActually, i've just put in some sample code instead.",
        "createdAt" : "2017-07-21T20:43:50Z",
        "updatedAt" : "2017-07-21T20:44:16Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3712f941d4cc82f366b1c5f77e6894890797e89f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +35,39 @@/// should be the same; and where there is a widget with multiple children, the\n/// top child and the bottom child should be keyed using the provided\n/// `topChildKey` and `bottomChildKey` keys respectively.\n///\n/// ## Sample code"
  }
]