[
  {
    "id" : "d7a31ead-6998-4c2c-aae1-1c5ca2bd03a7",
    "prId" : 820,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2d0f748-7224-4402-824c-d17e6383de48",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Note that I'm updating these equations in https://github.com/flutter/flutter/pull/831.\n",
        "createdAt" : "2015-12-09T06:44:51Z",
        "updatedAt" : "2015-12-09T22:11:28Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "c43a5d56-aaf5-481c-8461-c39a30d1709d",
        "parentId" : "c2d0f748-7224-4402-824c-d17e6383de48",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I moved the default tolerance definitions to scrollable_dart so that ScrollBehavior remains unaware of pixels. I didn't (intentionally) change the meaning of the changes from #831.\n",
        "createdAt" : "2015-12-09T21:59:23Z",
        "updatedAt" : "2015-12-09T22:11:28Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1d42a2fde44cf20e264f802befda57b0be15809",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +203,207 @@    // normalizing by the devicePixelRatio so that the threshold has the\n    // same effect independent of the device's pixel density.\n    double endVelocity = pixelToScrollOffset(15.0 * ui.window.devicePixelRatio);\n\n    // Similar to endVelocity. Stop scrolling when we're this close to"
  },
  {
    "id" : "e4a9418e-98d0-4f90-9ae2-49dc493844a0",
    "prId" : 1644,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05533f00-de9f-4a8e-9977-b27f2b3e4385",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "find out :-)\n",
        "createdAt" : "2016-02-06T02:00:28Z",
        "updatedAt" : "2016-02-06T04:21:47Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "465ccc25-3f84-4871-be1e-8b076298b595",
        "parentId" : "05533f00-de9f-4a8e-9977-b27f2b3e4385",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "@hansmuller probably knows\n",
        "createdAt" : "2016-02-06T02:00:48Z",
        "updatedAt" : "2016-02-06T04:21:47Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "806c3ad5-9f26-43c1-ab85-9f25ab847aae",
        "parentId" : "05533f00-de9f-4a8e-9977-b27f2b3e4385",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I looked into it and didn't quite understand what it was doing.  Hopefully @HansMuller can explain it to me and we can document it.\n",
        "createdAt" : "2016-02-06T04:19:27Z",
        "updatedAt" : "2016-02-06T04:21:47Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "9251504a577842844b96bd2067844347c4c56ee9",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +75,79 @@  final SnapOffsetCallback snapOffsetCallback;\n\n  final double snapAlignmentOffset; // What does this do?\n\n  /// The state from the closest instance of this class that encloses the given context."
  },
  {
    "id" : "4c418bd8-f427-4029-9cb6-adeb14e3745c",
    "prId" : 2207,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c80f3523-8849-4a75-9285-b2d2c9e620ce",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should we add an assert to that effect?\n",
        "createdAt" : "2016-02-26T01:49:39Z",
        "updatedAt" : "2016-02-26T18:17:52Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "be865e1e1a6b8ad45d0efdb0edd4781ef3e4a863",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +385,389 @@  /// the new offset, do not provide a duration, rather than providing\n  /// a zero duration.\n  Future scrollTo(double newScrollOffset, { Duration duration, Curve curve: Curves.ease }) {\n    if (newScrollOffset == _scrollOffset)\n      return new Future.value();"
  },
  {
    "id" : "5951d428-5b4a-4d4c-88c3-10dd6112a172",
    "prId" : 2227,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfa3f0e2-4624-4d83-833c-33c32369763d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "https://github.com/flutter/flutter/issues/2233\n",
        "createdAt" : "2016-02-26T22:16:22Z",
        "updatedAt" : "2016-02-26T22:39:56Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c629006748f4f32e456fa013bfc379493277d877",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +303,307 @@\n  Simulation _createFlingSimulation(double scrollVelocity) {\n    final Simulation simulation =  scrollBehavior.createFlingScrollSimulation(scrollOffset, scrollVelocity);\n    if (simulation != null) {\n      final double endVelocity = pixelOffsetToScrollOffset(kPixelScrollTolerance.velocity).abs() * (scrollVelocity < 0.0 ? -1.0 : 1.0);"
  },
  {
    "id" : "4467310d-9130-4c75-8dc3-e000688e50e9",
    "prId" : 2227,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b86eadf-44d6-489e-bbf3-d3ae1dede8b8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "tolerance probably should be a magnitude anyway, so no need to fiddle with signs\n",
        "createdAt" : "2016-02-26T22:24:17Z",
        "updatedAt" : "2016-02-26T22:39:56Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c629006748f4f32e456fa013bfc379493277d877",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +338,342 @@\n    final double snapVelocity = scrollVelocity.abs() * (snappedScrollOffset - scrollOffset).sign;\n    final double endVelocity = pixelOffsetToScrollOffset(kPixelScrollTolerance.velocity).abs() * (scrollVelocity < 0.0 ? -1.0 : 1.0);\n    Simulation toSnapSimulation = scrollBehavior.createSnapScrollSimulation(\n      scrollOffset, snappedScrollOffset, snapVelocity, endVelocity"
  },
  {
    "id" : "e4190fb5-1cf2-4916-a825-1d9913afd8cf",
    "prId" : 3950,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f9712d7-2527-4ea6-9a4b-a69adf90677a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this should be an assert or TODO\n",
        "createdAt" : "2016-05-17T17:30:57Z",
        "updatedAt" : "2016-05-17T17:30:57Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d480a2c4-1792-4533-8c69-42dabd1e6d3d",
        "parentId" : "7f9712d7-2527-4ea6-9a4b-a69adf90677a",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It should have been an assert. I think it took longer to write the TBD note to myself (which I promptly forgot about) than to just write the assert :-).\n",
        "createdAt" : "2016-05-17T17:56:59Z",
        "updatedAt" : "2016-05-17T17:56:59Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a0f85c2c5f882a3828fd482545e2284cda9cc28",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +634,638 @@  /// the gesture detectors accordingly.\n  Widget buildContent(BuildContext context) {\n    // TBD: if config.builder is null throw a sensible error.\n    return config.builder(context, this);\n  }"
  },
  {
    "id" : "2d83056f-08ed-48f4-90cc-00f0cf8a8c6c",
    "prId" : 3950,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac25df3f-486b-4cdc-8154-8bde63159eae",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "there are ~~three~~ four places where you now have this paragraph but as far as I can tell, none of them are places where talking about subclasses makes sense.\n",
        "createdAt" : "2016-05-17T17:31:50Z",
        "updatedAt" : "2016-05-17T17:34:12Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a0f85c2c5f882a3828fd482545e2284cda9cc28",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +709,713 @@  /// indices, up to the item with the index 0) will be pushed up.\n  ///\n  /// Subclasses may ignore this value if, for instance, they do not\n  /// have a concept of an anchor, or have more complicated behavior\n  /// (e.g. they would by default put the middle item in the middle of"
  },
  {
    "id" : "bc155d83-792f-4f6e-b903-c1949aef035d",
    "prId" : 3950,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a6fc388-4baf-45b0-837b-88ddcf39acb1",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "We should add a comment to the four places that duplicate all these docs listing the four classes that have those docs and telling future maintainers that they must ensure the four places are kept in sync.\n",
        "createdAt" : "2016-05-17T17:33:55Z",
        "updatedAt" : "2016-05-17T17:33:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a0f85c2c5f882a3828fd482545e2284cda9cc28",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +49,53 @@  }) : super(key: key) {\n    assert(scrollDirection == Axis.vertical || scrollDirection == Axis.horizontal);\n    assert(scrollAnchor == ViewportAnchor.start || scrollAnchor == ViewportAnchor.end);\n  }\n"
  },
  {
    "id" : "d387ff8a-4f87-45fb-8c60-38989fae0d7b",
    "prId" : 5038,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86db6453-45a3-402a-b1f4-345bb1857b9f",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We have a Velocity type which might be helpful here.\n",
        "createdAt" : "2016-07-26T00:26:52Z",
        "updatedAt" : "2016-07-26T16:42:11Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "c0f379f5-606f-4cc5-8b26-7d8bbfba4144",
        "parentId" : "86db6453-45a3-402a-b1f4-345bb1857b9f",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Velocity has X and Y components but this velocity is defined to be in the direction of the scrollable's axis.\n\nIt might be nice to carry a Velocity type around anyway; maybe add a Velocity.along(Axis) method.  Eventually, in classes like ScrollBehavior that don't have an axis, I think we'd still need a velocity scalar.\n",
        "createdAt" : "2016-07-26T16:01:04Z",
        "updatedAt" : "2016-07-26T16:42:11Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "a75d94f6-06eb-4ff5-b7fa-40494232ea81",
        "parentId" : "86db6453-45a3-402a-b1f4-345bb1857b9f",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We could have a Speed type that's a scalar.\n",
        "createdAt" : "2016-07-26T16:03:18Z",
        "updatedAt" : "2016-07-26T16:42:11Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "b14e92f0-f8ea-41b5-acb4-18e33fb4d851",
        "parentId" : "86db6453-45a3-402a-b1f4-345bb1857b9f",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "https://github.com/flutter/flutter/issues/5040\n",
        "createdAt" : "2016-07-26T16:37:40Z",
        "updatedAt" : "2016-07-26T16:42:11Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "5270c63cf15d24d52f7c3c2602b35a0bde45cd06",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +461,465 @@  /// offset with the given value as the initial velocity. The physics\n  /// simulation is determined by the scroll behavior.\n  Future<Null> fling(double scrollVelocity) {\n    if (scrollVelocity.abs() > kPixelScrollTolerance.velocity || !_controller.isAnimating)\n      return _startToEndAnimation(scrollVelocity);"
  },
  {
    "id" : "96d2b7e5-bd21-43f4-95be-aab8706beeef",
    "prId" : 5752,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63ff452b-1fba-492f-9ace-1111daa20c55",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If the scroll behavior's contentExtent changes, but the scrollOffset does not, and there aren't scrolls in progress, I think we still need to redraw.\n",
        "createdAt" : "2016-09-07T16:49:49Z",
        "updatedAt" : "2016-09-07T21:27:29Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "8c301e7a-54f0-4cca-9631-74acfd7d63bd",
        "parentId" : "63ff452b-1fba-492f-9ace-1111daa20c55",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The only way that can happen (the contentExtents changing) is during layout, right? And if you're doing layout, you're guaranteed to repaint.\n",
        "createdAt" : "2016-09-07T21:02:33Z",
        "updatedAt" : "2016-09-07T21:27:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f37e88bc-af99-4607-b5a2-23fd9fec43b6",
        "parentId" : "63ff452b-1fba-492f-9ace-1111daa20c55",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I suppose an app could call handleExtentsChanged() at any time, although I don't think that's how it's intended to be used. \n\nIn our code it's only called at layout time.\n",
        "createdAt" : "2016-09-07T21:35:35Z",
        "updatedAt" : "2016-09-07T21:35:35Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "431e764e8b9179bf4e542b1c59ca4b07090e6e9b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +456,460 @@  /// the given offset instead.\n  void didUpdateScrollBehavior(double newScrollOffset) {\n    // This does not call setState, because if anything below actually\n    // changes our build, it will itself independently trigger a frame.\n    assert(_controller.isAnimating || _simulation == null);"
  },
  {
    "id" : "1cea2712-2149-4b35-9391-d84ed5329378",
    "prId" : 5779,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eafb6e67-b686-4465-acad-c5ef03f93a5c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Thanks!\n",
        "createdAt" : "2016-09-09T15:58:01Z",
        "updatedAt" : "2016-09-09T17:06:47Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3756dc21d9e05a5a1b7cea52619f37a637da28c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +784,788 @@  /// notification ultimately came from a [DragGestureRecognizer.onStart]\n  /// handler; otherwise null.\n  DragStartDetails get dragStartDetails => kind == ScrollNotificationKind.started ? _details : null;\n\n  /// The details from the underlying [DragGestureRecognizer] gesture, if the"
  },
  {
    "id" : "d8768af0-be79-4652-a073-f79ea5a2deba",
    "prId" : 5836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1fae0c7-4c8a-4903-8155-fc84d64776c7",
        "parentId" : null,
        "authorId" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "body" : "This should probably explain what _limits_ means.\n",
        "createdAt" : "2016-09-13T15:59:57Z",
        "updatedAt" : "2016-09-14T17:12:36Z",
        "lastEditedBy" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc4250b995688274b0ba16d6f2ad4c5759664489",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +20,24 @@import 'scroll_configuration.dart';\n\n/// Identifies one or both limits of a [Scrollable] in terms of its scrollDirection.\nenum ScrollableEdge {\n  /// The top and bottom of the scrollable if its scrollDirection is vertical"
  },
  {
    "id" : "09218b65-f3c4-438f-b567-12e374b78d32",
    "prId" : 5836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aff52c92-a2f0-4aa5-94d3-d4c4c7e54e35",
        "parentId" : null,
        "authorId" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "body" : "~~Would `IndicatorEdge` be a better name? Or maybe `OverscrollEdge`?~~\n\nNever mind, I see how this fits better.\n",
        "createdAt" : "2016-09-13T16:00:32Z",
        "updatedAt" : "2016-09-14T17:12:36Z",
        "lastEditedBy" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc4250b995688274b0ba16d6f2ad4c5759664489",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +21,25 @@\n/// Identifies one or both limits of a [Scrollable] in terms of its scrollDirection.\nenum ScrollableEdge {\n  /// The top and bottom of the scrollable if its scrollDirection is vertical\n  /// or the left and right if its scrollDirection is horizontal."
  },
  {
    "id" : "4acea201-7396-46d2-89e2-07a61d160bdc",
    "prId" : 5836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6e124bd-cb4c-472b-a980-8bfe3a89d2b5",
        "parentId" : null,
        "authorId" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "body" : "Wouldn't it be better to give up on a bit of explicitness in order to have more consistent naming and name these `start` and `end` like in other cases?\n",
        "createdAt" : "2016-09-13T16:01:37Z",
        "updatedAt" : "2016-09-14T17:12:36Z",
        "lastEditedBy" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "tags" : [
        ]
      },
      {
        "id" : "1fbb1305-73ac-4f85-9b8d-5535bfccada9",
        "parentId" : "f6e124bd-cb4c-472b-a980-8bfe3a89d2b5",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "We do use start/end in the same sense for ViewportAnchor.  However edges are usually characterized as leading and trailing. I could change the enum to ScrollableLimit with values start, end, both, none?\n",
        "createdAt" : "2016-09-13T19:34:45Z",
        "updatedAt" : "2016-09-14T17:12:36Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "1598be55-550e-4466-a44f-11571d9484f9",
        "parentId" : "f6e124bd-cb4c-472b-a980-8bfe3a89d2b5",
        "authorId" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "body" : "That seems to me like a better name. @Hixie ?\n",
        "createdAt" : "2016-09-13T20:26:17Z",
        "updatedAt" : "2016-09-14T17:12:36Z",
        "lastEditedBy" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "tags" : [
        ]
      },
      {
        "id" : "75a4f9f6-403f-4bc0-83de-72f7710d130b",
        "parentId" : "f6e124bd-cb4c-472b-a980-8bfe3a89d2b5",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't have a strong opinion here. Generally, in LTR text, start is the left hand side, end is the right hand side, before is above, and after is below. I think it might be confusing to use start/end here because you might be in an RTL context with a reversed vertical scroller in which case \"start\" would mean the bottom edge and that wouldn't make any sense. So I can see value in leading/trailing.\n",
        "createdAt" : "2016-09-14T00:39:55Z",
        "updatedAt" : "2016-09-14T17:12:36Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc4250b995688274b0ba16d6f2ad4c5759664489",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +28,32 @@  /// Only the top of the scrollable if its scrollDirection is vertical,\n  /// or only the left if its scrollDirection is horizontal.\n  leading,\n\n  /// Only the bottom of the scrollable if its scroll-direction is vertical,"
  },
  {
    "id" : "5c861f74-2b66-4118-b446-e17fba92821f",
    "prId" : 6310,
    "prUrl" : "https://github.com/flutter/flutter/pull/6310#pullrequestreview-4159554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fc2406c-8e4d-4c01-8a06-4759c569ddd7",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm not sure this is really valid. What if your ancestor is setting it on you during their build, for instance?\n\nBut I'm fine with checking this in. It will work around a bug that people are complaining about, and this code is all getting rewritten in my refactor anyway.\n\ncc @abarth who may have opinions about this in particular.\n",
        "createdAt" : "2016-10-13T20:35:43Z",
        "updatedAt" : "2016-10-13T21:58:50Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "093f9250-514c-4a30-a03e-f9a54d59e356",
        "parentId" : "6fc2406c-8e4d-4c01-8a06-4759c569ddd7",
        "authorId" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "body" : "Yeah, it's ugly and I'm hoping it won't be necessary in the Scrollable rewrite. I'll add a note in the comments.\n",
        "createdAt" : "2016-10-13T20:37:04Z",
        "updatedAt" : "2016-10-13T21:58:50Z",
        "lastEditedBy" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "tags" : [
        ]
      }
    ],
    "commit" : "85b41ff65f9f56c5d850c3e3d21e30c35197024e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +712,716 @@  // needed after Scrollable is rewritten.\n  void _setStateMaybeDuringBuild(VoidCallback fn) {\n    if (SchedulerBinding.instance.schedulerPhase == SchedulerPhase.persistentCallbacks) {\n      fn();\n    } else {"
  },
  {
    "id" : "0173c7b2-085c-42fe-b61c-2621f927fbdf",
    "prId" : 7842,
    "prUrl" : "https://github.com/flutter/flutter/pull/7842#pullrequestreview-20083771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cd0669c-1bb2-4cc5-8967-cbaf4cdf865a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "does physics have a good toString?",
        "createdAt" : "2017-02-03T19:17:41Z",
        "updatedAt" : "2017-02-03T19:17:41Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c2a979d7-e88e-4412-b8bd-7791ed4ec1b6",
        "parentId" : "1cd0669c-1bb2-4cc5-8967-cbaf4cdf865a",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I did that in the other patch.",
        "createdAt" : "2017-02-03T19:18:41Z",
        "updatedAt" : "2017-02-03T19:18:41Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c5f14070b66e842071432d4012791b31a574c7c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +451,455 @@    description.add('$axisDirection');\n    if (physics != null)\n      description.add('physics: $physics');\n    if (scrollBehavior != null) {\n      description.add('scrollBehavior: $scrollBehavior');"
  },
  {
    "id" : "2ad59a9b-3b66-4223-84b9-58dce7305a19",
    "prId" : 7868,
    "prUrl" : "https://github.com/flutter/flutter/pull/7868#pullrequestreview-20130147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb858a60-38fa-45f0-963f-2d1229162d8f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe make this private? We probably don't want to encourage people to look this class up.",
        "createdAt" : "2017-02-04T00:08:50Z",
        "updatedAt" : "2017-02-04T00:08:50Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e112039dbc1472d0d6b97a9f4d2639f12ad2bd0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +69,73 @@  /// Scrollable2State scrollable = Scrollable2.of(context);\n  /// ```\n  static Scrollable2State of(BuildContext context) {\n    return context.ancestorStateOfType(const TypeMatcher<Scrollable2State>());\n  }"
  },
  {
    "id" : "f0aa0fd9-c168-44b8-abed-f1ed446e81ad",
    "prId" : 9156,
    "prUrl" : "https://github.com/flutter/flutter/pull/9156#pullrequestreview-32506236",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fd761c4-c273-40fb-ade4-02b4f99cdb57",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "At some point (not this patch) we might want to provide a flag here to say if you want to subscribe or not, since otherwise just trying to call Scrollable.of() to scroll will hook you up.\r\n(I think some of our .of()s do this already?)",
        "createdAt" : "2017-04-12T20:00:56Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f949ee6d-cf87-4fcf-be59-f583426d55fd",
        "parentId" : "1fd761c4-c273-40fb-ade4-02b4f99cdb57",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "We could certainly do that. I looked through the existing inherited widget .of()  methods but  I didn't see one that gave you the option of not subscribing.",
        "createdAt" : "2017-04-12T22:08:09Z",
        "updatedAt" : "2017-04-12T22:08:09Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "08531c3b1713d41e827bdc7afbddcdf96f17c81c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +66,70 @@  /// ```\n  static ScrollableState of(BuildContext context) {\n    final _ScrollableScope widget = context.inheritFromWidgetOfExactType(_ScrollableScope);\n    return widget?.scrollable;\n  }"
  },
  {
    "id" : "c03db851-4b26-4605-8efa-5dec299797fb",
    "prId" : 9711,
    "prUrl" : "https://github.com/flutter/flutter/pull/9711#pullrequestreview-35826991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9eeff98-567e-4d37-af85-fd81ea83b56e",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Maybe call attention to of() and ensureVisible() here, since those methods will not appear with ListView et al.",
        "createdAt" : "2017-05-02T16:48:49Z",
        "updatedAt" : "2017-05-02T17:12:23Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "78b9e4f181de57ded1de60c3d0dced32cfb94bf5",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +39,43 @@/// combine layout models (or to use a custom layout mode), consider using\n/// [CustomScrollView].\n///\n/// The static [Scrollable.of] and [Scrollable.ensureVisible] functions are\n/// often used to interact with the [Scrollable] widget inside a [ListView] or"
  },
  {
    "id" : "2a77b656-f4e8-4d43-9195-54568b39f1e0",
    "prId" : 9711,
    "prUrl" : "https://github.com/flutter/flutter/pull/9711#pullrequestreview-35827301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b95e1ebc-6add-414e-ac33-2857db70d64f",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It's not clear what this means. The property is used to map from input gestures to scroll offset deltas?",
        "createdAt" : "2017-05-02T16:49:58Z",
        "updatedAt" : "2017-05-02T17:12:23Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "78b9e4f181de57ded1de60c3d0dced32cfb94bf5",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +82,86 @@       super (key: key);\n\n  /// The direction in which this widget scrolls.\n  ///\n  /// For example, if the [axisDirection] is [AxisDirection.down], increasing"
  },
  {
    "id" : "96395fff-63a6-4909-9ae8-7c7cde7dca77",
    "prId" : 9711,
    "prUrl" : "https://github.com/flutter/flutter/pull/9711#pullrequestreview-35827393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4f71c33-696a-4e71-99b0-585eea1040c8",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Maybe see-also ensureVisible()",
        "createdAt" : "2017-05-02T16:50:18Z",
        "updatedAt" : "2017-05-02T17:12:23Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "78b9e4f181de57ded1de60c3d0dced32cfb94bf5",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +95,99 @@\n  /// An object that can be used to control the position to which this widget is\n  /// scrolled.\n  ///\n  /// See also:"
  },
  {
    "id" : "6910282b-4966-4523-ba0d-75f1a63abe3d",
    "prId" : 21764,
    "prUrl" : "https://github.com/flutter/flutter/pull/21764#pullrequestreview-161425289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7e33c27-e3e7-4813-b630-d83f4d73cc97",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "what if there are infinite children?",
        "createdAt" : "2018-09-27T16:48:13Z",
        "updatedAt" : "2018-10-09T19:38:13Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "b4932616-2242-4112-bf0f-39351904d886",
        "parentId" : "a7e33c27-e3e7-4813-b630-d83f4d73cc97",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Added doc comment here",
        "createdAt" : "2018-10-04T02:05:46Z",
        "updatedAt" : "2018-10-09T19:38:13Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "aac90f44edfec1a16b0ca19ee67e444efe212e6d",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +173,177 @@  ///\n  /// For [CustomScrollView] and other types which do not receive a builder\n  /// or list of widgets, the child count must be explicitly provided.\n  ///\n  /// See also:"
  },
  {
    "id" : "ff4e1af2-8389-4eba-baff-421a19e4e664",
    "prId" : 23424,
    "prUrl" : "https://github.com/flutter/flutter/pull/23424#pullrequestreview-174125976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cfec657-4f07-4648-89ad-bde0ebe093d3",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe add a paragraph explaining why someone might care?",
        "createdAt" : "2018-11-12T22:44:21Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f463e9f73d8a7eb59f05588877bc12fec02d40",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +199,203 @@  ///\n  ///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for the different behaviors.\n  /// {@endtemplate}\n  final DragStartBehavior dragStartBehavior;\n"
  },
  {
    "id" : "c2fab113-bad7-46e3-b2eb-700158bfa5f7",
    "prId" : 23424,
    "prUrl" : "https://github.com/flutter/flutter/pull/23424#pullrequestreview-175071247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8040e0a-67de-46e3-8781-69d3a5a31a22",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Document what the default is?",
        "createdAt" : "2018-11-14T21:30:49Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f463e9f73d8a7eb59f05588877bc12fec02d40",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +199,203 @@  ///\n  ///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for the different behaviors.\n  /// {@endtemplate}\n  final DragStartBehavior dragStartBehavior;\n"
  },
  {
    "id" : "61e1d8ed-8b09-4a1f-96d4-e6e8a66a30e0",
    "prId" : 45019,
    "prUrl" : "https://github.com/flutter/flutter/pull/45019#pullrequestreview-320431083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0ce7696-4d6a-4c8d-a186-f6cd1f63bdec",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Can this method ever be called before the first layout has happened?  If so, we're accessing values here that might be null, e.g. if we're in the first build of the widget and we're trying to access the `state.position.pixels`, as well as the `state.position.viewportDimensions` (for the default calculateIncrement impl).",
        "createdAt" : "2019-11-20T06:41:18Z",
        "updatedAt" : "2019-11-26T01:16:05Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "4e65f027-763d-4965-843b-9548e0344728",
        "parentId" : "e0ce7696-4d6a-4c8d-a186-f6cd1f63bdec",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "It would be unlikely (a key event would have to arrive and be handled before the first frame), but better safe than sorry. Added null checks.",
        "createdAt" : "2019-11-20T18:50:07Z",
        "updatedAt" : "2019-11-26T01:16:05Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "edfc2539-ea37-43a7-a4c9-ae126ea2aea6",
        "parentId" : "e0ce7696-4d6a-4c8d-a186-f6cd1f63bdec",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Actually, this is probably impossible: initial focus would have to also be set, and the earliest that can happen is the second frame.",
        "createdAt" : "2019-11-20T18:51:01Z",
        "updatedAt" : "2019-11-26T01:16:05Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "8fa6713e-a5ba-45a7-a16c-9f38fff5934d",
        "parentId" : "e0ce7696-4d6a-4c8d-a186-f6cd1f63bdec",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Maybe just some asserts then?",
        "createdAt" : "2019-11-20T18:54:47Z",
        "updatedAt" : "2019-11-26T01:16:05Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "1c41f421-b3b1-4c2e-b919-d6bf004276b9",
        "parentId" : "e0ce7696-4d6a-4c8d-a186-f6cd1f63bdec",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2019-11-20T22:44:47Z",
        "updatedAt" : "2019-11-26T01:16:05Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "093509b7393049dbe51730603dec17f4894ce0d3",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +990,994 @@\n  @override\n  void invoke(FocusNode node, ScrollIntent intent) {\n    final ScrollableState state = Scrollable.of(node.context);\n    assert(state != null, '$ScrollAction was invoked on a context that has no scrollable parent');"
  },
  {
    "id" : "0c393508-d571-497a-8d3a-99a540e6b927",
    "prId" : 45019,
    "prUrl" : "https://github.com/flutter/flutter/pull/45019#pullrequestreview-322476458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae53477f-ba40-45ad-8d5d-bb9a800383f5",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Nice explanation! ",
        "createdAt" : "2019-11-25T18:10:59Z",
        "updatedAt" : "2019-11-26T01:16:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "093509b7393049dbe51730603dec17f4894ce0d3",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +800,804 @@///\n/// {@template flutter.widgets.scrollable.scroll_increment_type.intent}\n/// This indicates the *intent* of the scroll, not necessarily the size. Not all\n/// scrollable areas will have the concept of a \"line\" or \"page\", but they can\n/// respond to the different standard key bindings that cause scrolling, which"
  },
  {
    "id" : "61cd383a-b85e-4542-b815-dc451308fa8a",
    "prId" : 62359,
    "prUrl" : "https://github.com/flutter/flutter/pull/62359#pullrequestreview-458768166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "174b8253-1c9d-44fa-ab44-f7e1ec50cdf7",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "This code looks correct to me, I am curious though why we want to & with the offset.zero at the first place @goderbauer ",
        "createdAt" : "2020-07-29T00:14:05Z",
        "updatedAt" : "2020-07-29T00:59:10Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "548932e5-fee7-4be2-a4cf-54854ba60f2d",
        "parentId" : "174b8253-1c9d-44fa-ab44-f7e1ec50cdf7",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I think we forgot to change this when the code was moved in https://github.com/flutter/flutter/pull/13983 a loong time ago!",
        "createdAt" : "2020-07-30T21:26:25Z",
        "updatedAt" : "2020-07-30T21:28:19Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "8190522dabbaeeed3f5a3415fecdea059bc1096c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +785,789 @@    _innerNode\n      ..isMergedIntoParent = node.isPartOfNodeMerging\n      ..rect = node.rect;\n\n    int firstVisibleIndex;"
  },
  {
    "id" : "bf20b82c-6c00-4e11-ae39-ba2f2fec2ee8",
    "prId" : 63131,
    "prUrl" : "https://github.com/flutter/flutter/pull/63131#pullrequestreview-464398502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11d4fd4a-2ffa-4116-9bf1-a1f71801cb60",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "even if it didn't change?",
        "createdAt" : "2020-08-08T00:50:44Z",
        "updatedAt" : "2020-08-10T16:57:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f89397ff-3aef-4b2b-ad52-4ea894967945",
        "parentId" : "11d4fd4a-2ffa-4116-9bf1-a1f71801cb60",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "RestorableValue only calls didUpdateValue if old and new value are different.",
        "createdAt" : "2020-08-10T16:42:43Z",
        "updatedAt" : "2020-08-10T16:57:19Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "601b09481a4664c31225deb88e45db1b115bc23b",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +1084,1088 @@  @override\n  void didUpdateValue(double oldValue) {\n    notifyListeners();\n  }\n"
  },
  {
    "id" : "3c27b387-bf5e-4e06-b33f-798920b6e706",
    "prId" : 69795,
    "prUrl" : "https://github.com/flutter/flutter/pull/69795#pullrequestreview-523694341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e21f832-2cfa-4ba2-a8bf-893d56a11eb6",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The comments here and below seem outdated?",
        "createdAt" : "2020-11-04T20:05:03Z",
        "updatedAt" : "2020-11-10T20:31:40Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f91402fcff735ab2752abc7cc93fac174d139d9",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +971,975 @@    final bool contextIsValid = focus != null && focus.context != null;\n    if (contextIsValid) {\n      // Check for primary scrollable within the current context\n      if (Scrollable.of(focus!.context!) != null)\n        return true;"
  },
  {
    "id" : "7eb387f2-4c86-424f-9b4e-18b8621fc69d",
    "prId" : 69795,
    "prUrl" : "https://github.com/flutter/flutter/pull/69795#pullrequestreview-527487547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca8be1b6-449d-4530-a08e-789eb3349fe3",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "You could just move this into the if, since you only use it once.",
        "createdAt" : "2020-11-10T18:30:18Z",
        "updatedAt" : "2020-11-10T20:31:40Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "26789814-8060-4756-b755-7408f6bc050b",
        "parentId" : "ca8be1b6-449d-4530-a08e-789eb3349fe3",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Or, you could leave it.  The name does provide inherent documentation. Your choice.",
        "createdAt" : "2020-11-10T18:31:01Z",
        "updatedAt" : "2020-11-10T20:31:40Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f91402fcff735ab2752abc7cc93fac174d139d9",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +969,973 @@  bool isEnabled(ScrollIntent intent) {\n    final FocusNode? focus = primaryFocus;\n    final bool contextIsValid = focus != null && focus.context != null;\n    if (contextIsValid) {\n      // Check for primary scrollable within the current context"
  }
]