[
  {
    "id" : "a313304f-e15f-4945-b8c2-852be2f806a9",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574030893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f654fb50-bfb7-4c61-b3ba-9ab28b1b5575",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "I can't seem to figure out where `ReorderableList` is used. It seems like `SliverReorderableList` is what is used by `ReorderableListView`.",
        "createdAt" : "2021-01-22T06:38:00Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "259ac946-d50c-4756-b4f5-2ab5d5f44c5a",
        "parentId" : "f654fb50-bfb7-4c61-b3ba-9ab28b1b5575",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "`ReorderableList` is not used directly by anything in the framework. It is meant to be a non-opinionated base version of the reorderable list as a widget. If people don't want the built-in drag handles and decorations of the  Material `ReorderableListView` they can use this instead. Otherwise, yeah everything is just using the sliver version internally.",
        "createdAt" : "2021-01-22T08:12:17Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +103,107 @@///  * [ReorderableListView], a material design list that allows the user to\n///    reorder its items.\nclass ReorderableList extends StatefulWidget {\n  /// Creates a scrolling container that allows the user to interactively\n  /// reorder the list items."
  },
  {
    "id" : "cd50c2cf-98b6-4037-9af4-907fd7a72c86",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574625833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c76ca7f1-c9bf-4983-9693-8bf447d97fe4",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "a current drag => a reordering drag that's already underway",
        "createdAt" : "2021-01-22T21:34:48Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +93,97 @@///\n/// This widget's [ReorderableListState] can be used to manually start an item\n/// reorder, or cancel a current drag. To refer to the\n/// [ReorderableListState] either provide a [GlobalKey] or use the static\n/// [ReorderableList.of] method from an item's build method."
  },
  {
    "id" : "cd9ef76e-79fb-4e41-8e54-2a1f5dec32de",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574625833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb71d18c-7181-48b0-b192-79d0d5e83dae",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "```dart\r\n///\r\n/// Default value is zero.\r\n```",
        "createdAt" : "2021-01-22T21:39:45Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +136,140 @@  final IndexedWidgetBuilder itemBuilder;\n\n  /// The number of items in the list.\n  final int itemCount;\n"
  },
  {
    "id" : "9d17cce1-ecc5-4445-9f73-7ee37d41ad4b",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574625833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "288ab747-275d-4dc7-b684-1e226428f411",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "context given => given context",
        "createdAt" : "2021-01-22T23:00:22Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 419,
    "diffHunk" : "@@ -1,1 +417,421 @@  /// start or cancel an item drag operation.\n  ///\n  /// If no [SliverReorderableList] surrounds the context given, this function\n  /// will assert in debug mode and throw an exception in release mode.\n  ///"
  },
  {
    "id" : "befee9f4-60d7-480f-8d92-472d7b503c0f",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a373fad2-ea4f-458c-a52b-b9b6bb7a22cb",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: this should say something about the parameters, e.g. what does the animation do?",
        "createdAt" : "2021-01-22T23:04:19Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "5394967c-b148-4302-a5b0-d969c90832fa",
        "parentId" : "a373fad2-ea4f-458c-a52b-b9b6bb7a22cb",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "(I was also wondering why we give it the index of the item, is there a use case for it?)",
        "createdAt" : "2021-01-22T23:04:52Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "13358c3b-01df-4cb5-93fd-d8e244524d64",
        "parentId" : "a373fad2-ea4f-458c-a52b-b9b6bb7a22cb",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The documentation should also say that this typically returns `child` wrapped in some other widgets.\r\n\r\nIs it legal to return a widget that does not include child (e.g. if you want to show some strange palceholder while draging)?",
        "createdAt" : "2021-01-22T23:05:48Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@\n/// Signature for the builder callback used to decorate the dragging item in\n/// [ReorderableList] and [SliverReorderableList].\n///\n/// The [child] will be the item that is being dragged, and [index] is the"
  },
  {
    "id" : "b2d1a7b0-a9a6-4681-9285-c87ea0e2d982",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4272ad79-0114-423a-a429-2dd618ca26d9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This is a little odd, and different than ListView.builder. In ListView you can leave this as null and the ListView will know that the end of the list is reached when itemBuilder returns null.\r\n\r\nIf the ReorderableList needs to know upfront the itemCount (does it?), maybe it should be a required param? The cases in which you want to leave it as the default 0 are probably very uncommon?",
        "createdAt" : "2021-01-22T23:13:32Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +121,125 @@    this.shrinkWrap = false,\n    this.padding,\n  }) : assert(itemCount >= 0),\n       super(key: key);\n"
  },
  {
    "id" : "bec26fdf-0c5b-4894-a95c-e58bfa137f1c",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574711357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84ffd69c-a373-4160-abc1-c85afbd31a63",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Don't we need to `_listState._unregisterItem(this)` here? If the item was (somehow) explicitly disposed, then it wouldn't have been deactivated first...",
        "createdAt" : "2021-01-22T23:13:58Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "cb880460-4ee5-4c33-8e3c-e623aa6a456a",
        "parentId" : "84ffd69c-a373-4160-abc1-c85afbd31a63",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Ah, my bad. I thought it had to go through deactivate before dispose. Good catch.\r\n",
        "createdAt" : "2021-01-23T00:39:46Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 890,
    "diffHunk" : "@@ -1,1 +888,892 @@    _offsetAnimation?.dispose();\n    _listState._unregisterItem(index, this);\n    super.dispose();\n  }\n"
  },
  {
    "id" : "47b21a53-829d-4130-905c-a9ac11cc38ef",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9045bc52-2537-469b-bd4d-747f01d338c4",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same of these docs sound very familiar from other parts of the framework. Can we use macros instead of coping them over?",
        "createdAt" : "2021-01-22T23:15:50Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +153,157 @@  final Axis scrollDirection;\n\n  /// Whether the scroll view scrolls in the reading direction.\n  ///\n  /// For example, if the reading direction is left-to-right and"
  },
  {
    "id" : "16455933-af23-4e05-8792-2c6898eed453",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574711727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf268fcb-f2d7-40ce-8491-daa2897632ec",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "What happens if the item is activated later? Isn't that possible when the item is moved within the list?",
        "createdAt" : "2021-01-22T23:16:05Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "bc553961-9f3d-46be-a2e3-84e44d32bab3",
        "parentId" : "bf268fcb-f2d7-40ce-8491-daa2897632ec",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Yeah, I should probably catch that in the build method.\r\n",
        "createdAt" : "2021-01-23T00:41:32Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 916,
    "diffHunk" : "@@ -1,1 +914,918 @@  @override\n  void deactivate() {\n    _listState._unregisterItem(index, this);\n    super.deactivate();\n  }"
  },
  {
    "id" : "b5d81ac3-1e30-437c-8ee6-007aaf9d5323",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1848ad2-89ab-4f7c-b9d9-82962ae3b250",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe document: Will this animate the item back to its original position or will the dragged item just disappear?",
        "createdAt" : "2021-01-22T23:20:30Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 320,
    "diffHunk" : "@@ -1,1 +318,322 @@  /// changes to the underlying list.\n  ///\n  /// If no drag is active, this will do nothing.\n  void cancelReorder() {\n    _sliverReorderableListKey.currentState!.cancelReorder();"
  },
  {
    "id" : "2253c5cd-e620-4583-93e2-40a4cdcd6d69",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e7b64b8-6860-4a6f-bf59-dc201fd8c19a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why make widget.padding nullable in the first place then? Can it's default value just be `const EdgeInsets.all(0)`?",
        "createdAt" : "2021-01-22T23:21:32Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 336,
    "diffHunk" : "@@ -1,1 +334,338 @@      slivers: <Widget>[\n        SliverPadding(\n          padding: widget.padding ?? const EdgeInsets.all(0),\n          sliver: SliverReorderableList(\n            key: _sliverReorderableListKey,"
  },
  {
    "id" : "af8e7544-de6f-4f41-9ee4-2033e43579c1",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4b5d976-f2fb-4e9e-8a4d-bf5bb599be99",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "an example that shows how to wrap the items would be nice here to give people the right idea.",
        "createdAt" : "2021-01-22T23:22:26Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +83,87 @@/// an [IndexedWidgetBuilder] to create each item.\n///\n/// It is up to the application to wrap each child (or an internal part of the\n/// child such as a drag handle) with a drag listener that will recognize\n/// the start of an item drag and then start the reorder by calling"
  },
  {
    "id" : "9461a8b4-73ff-4105-ba84-b80368e37104",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c38282bd-6060-46aa-866c-66df78b163ea",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "use macros for some of these docs to share them with the different implementations? ",
        "createdAt" : "2021-01-22T23:25:13Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 386,
    "diffHunk" : "@@ -1,1 +384,388 @@       super(key: key);\n\n  /// Called, as needed, to build list item widgets.\n  ///\n  /// List items are only built when they're scrolled into view."
  },
  {
    "id" : "07772a22-967d-4179-88d9-7d461b21b5ac",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bab6ba86-3b4e-4b2d-9b57-2495b5b0db40",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "What's the int in this mapping? Maybe add a comment?",
        "createdAt" : "2021-01-22T23:26:54Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 489,
    "diffHunk" : "@@ -1,1 +487,491 @@  // Map of index -> child state used manage where the dragging item will need\n  // to be inserted.\n  final Map<int, _ReorderableItemState> _items = <int, _ReorderableItemState>{};\n\n  bool _reorderingDrag = false;"
  },
  {
    "id" : "ccc334af-5508-4ab2-a3bc-4f3050c47a17",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fada613c-3943-4881-97ca-c736e9b3df9d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why only when the itemCount changes? Wouldn't we also need to cancel if the order of the children changes? (Which I guess we cannot really detect)",
        "createdAt" : "2021-01-22T23:29:49Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 515,
    "diffHunk" : "@@ -1,1 +513,517 @@  void didUpdateWidget(covariant SliverReorderableList oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.itemCount != oldWidget.itemCount) {\n      cancelReorder();\n    }"
  },
  {
    "id" : "a92268ae-8096-4429-87cd-af78975662be",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87472024-5b74-4e94-b909-472998572fcf",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "should document that this calls takes ownership over the provided recognizer and will dispose it when no longer needed.",
        "createdAt" : "2021-01-22T23:32:36Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 530,
    "diffHunk" : "@@ -1,1 +528,532 @@  ///\n  /// The given [recognizer] will be used to recognize and start the drag\n  /// item tracking and lead to either an item reorder, or a cancelled drag.\n  ///\n  /// Most applications will not use this directly, but will wrap the item"
  },
  {
    "id" : "5093bb12-93f7-4682-935a-6ec2c26cda57",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6918eeb0-2401-4e38-9a5d-fbb5dadf02fb",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "assert that _reorderingDrag was false before?",
        "createdAt" : "2021-01-22T23:33:17Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 589,
    "diffHunk" : "@@ -1,1 +587,591 @@\n    _insertIndex = item.index;\n    _reorderingDrag = true;\n    _dragInfo = _DragInfo(\n      item: item,"
  },
  {
    "id" : "776f14a0-3f9e-4810-984b-67b5f4f71ed8",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f74ab968-cc87-4d58-9bc0-9ca7116b6349",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "assert that overlayEntry is null (and we don't accidentally lose track of another entry)?",
        "createdAt" : "2021-01-22T23:34:23Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 604,
    "diffHunk" : "@@ -1,1 +602,606 @@    final OverlayState overlay = Overlay.of(context)!;\n    assert(_overlayEntry == null);\n    _overlayEntry = OverlayEntry(builder: _dragInfo!.createProxy);\n    overlay.insert(_overlayEntry!);\n"
  },
  {
    "id" : "f6a5398e-4ec8-41fe-ad9f-9fa6e6d47244",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16a26a34-df70-4afe-8c4e-4b945e356a16",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: the param that takes \"false\" should be a named required one so it's obvious from the callsite here what is set to false.",
        "createdAt" : "2021-01-22T23:35:13Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 613,
    "diffHunk" : "@@ -1,1 +611,615 @@      if (childItem == item || !childItem.mounted)\n        continue;\n      childItem.updateForGap(_insertIndex!, _dragInfo!.itemExtent, false, _reverse);\n    }\n    return _dragInfo;"
  },
  {
    "id" : "49616021-d354-445c-8232-e17468572c02",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11b917a6-d96c-4115-b573-8d40f9725ba1",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why this key? And is it necessary that the material ReordarableListView already wraps the items in their own key? Why two keys?",
        "createdAt" : "2021-01-22T23:41:54Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 824,
    "diffHunk" : "@@ -1,1 +822,826 @@    final OverlayState overlay = Overlay.of(context)!;\n    return _ReorderableItem(\n      key: _ReorderableItemGlobalKey(child.key!, index, this),\n      index: index,\n      child: child,"
  },
  {
    "id" : "379b4927-b485-4455-b494-8a346af4a00b",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd06146c-2ecf-49b3-9795-1fddd15dd841",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Does it need to unregister from the _listState?",
        "createdAt" : "2021-01-22T23:45:10Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 888,
    "diffHunk" : "@@ -1,1 +886,890 @@  @override\n  void dispose() {\n    _offsetAnimation?.dispose();\n    _listState._unregisterItem(index, this);\n    super.dispose();"
  },
  {
    "id" : "5ebc231f-f7b7-4f54-a890-045ce63011c5",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7143de43-7657-4e44-9d55-43c033acbc23",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Haven't thought this fully through, is it guaranteed that the SliverReorderableList cannot change throughout the life of this item>",
        "createdAt" : "2021-01-22T23:46:47Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 881,
    "diffHunk" : "@@ -1,1 +879,883 @@  @override\n  void initState() {\n    _listState = SliverReorderableList.of(context);\n    _listState._registerItem(this);\n    super.initState();"
  },
  {
    "id" : "819e930f-9732-40a2-b876-3d983b4e26e9",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee3c739c-1b88-4cb1-af6f-ee46c7e58d0d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "After deactivate has been called, the object may be added to a different part of the tree. In that case, you'd have to re-register the item, but I don't think the state has a hook for that... Maybe just do the unregistering in dispose?",
        "createdAt" : "2021-01-22T23:51:35Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 916,
    "diffHunk" : "@@ -1,1 +914,918 @@  @override\n  void deactivate() {\n    _listState._unregisterItem(index, this);\n    super.deactivate();\n  }"
  },
  {
    "id" : "fad1ce2d-26d8-49d4-8e0a-1662735e464f",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574652548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b530fef-bd8b-480a-a537-78f7ee817831",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Should we assert this and others like it are not null above? I think we are still null checking in the framework for folks that have not migrated to null safety yet. I may be wrong though. ",
        "createdAt" : "2021-01-23T01:04:22Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 214,
    "diffHunk" : "@@ -1,1 +212,216 @@  ///\n  /// Defaults to false.\n  final bool shrinkWrap;\n\n  /// The amount of space by which to inset the children."
  },
  {
    "id" : "d6610df5-534e-4a78-b230-9ab2b19a502b",
    "prId" : 81372,
    "prUrl" : "https://github.com/flutter/flutter/pull/81372#pullrequestreview-648929089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed83ac89-9c82-40ce-8052-b1d30062cddd",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "This comment block needs to be moved up above the `childCount: widget.itemCount ...` line in the new childDelegate as it doesn't make sense here anymore.\r\n",
        "createdAt" : "2021-04-30T06:58:25Z",
        "updatedAt" : "2021-04-30T09:12:16Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ec7acc78abefed294016a0b5581f1b905e4dad0",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +839,843 @@      // When dragging, the dragged item is still in the list but has been replaced\n      // by a zero height SizedBox, so that the gap can move around. To make the\n      // list extent stable we add a dummy entry to the end.\n      childCount: widget.itemCount + (_dragInfo != null ? 1 : 0),\n    );"
  },
  {
    "id" : "c9845aba-2989-4766-aa33-614174da4a7b",
    "prId" : 82296,
    "prUrl" : "https://github.com/flutter/flutter/pull/82296#pullrequestreview-660236209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef667f56-dd00-4693-a389-1dd80a178fd0",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Wouldn't it be enough to unconditionally set _dartStartTransitionComplete to true after the first time we test it?",
        "createdAt" : "2021-05-14T22:02:13Z",
        "updatedAt" : "2021-05-14T22:03:03Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "9861c01d2b9f32059bb8aba5949bcd6e0eb36cf0",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +627,631 @@    item.rebuild();\n    _dragStartTransitionComplete = false;\n    SchedulerBinding.instance!.addPostFrameCallback((Duration duration) {\n      _dragStartTransitionComplete = true;\n    });"
  },
  {
    "id" : "5ac1446a-ec26-4450-b26f-ef8e8f19592a",
    "prId" : 82296,
    "prUrl" : "https://github.com/flutter/flutter/pull/82296#pullrequestreview-660267652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f873e7f-f810-4857-bc71-a7d172c4b2b7",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Just set _dragStartTransitionComplete to true here, instead of using a post-frame callback?",
        "createdAt" : "2021-05-14T22:02:57Z",
        "updatedAt" : "2021-05-14T22:03:03Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "79828324-af58-4b98-b72f-80c783d2e03d",
        "parentId" : "3f873e7f-f810-4857-bc71-a7d172c4b2b7",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "I thought about that, but the issue is that we don't know when this first update will occur. It could happen after the first frame, in which case we don't want to recompute the offset as it is already correct. Using this flag is just a way of making sure this is only recomputed if we are still before the first frame of the drag which is when we need to compensate for the dragged item that is still in the list.\r\n",
        "createdAt" : "2021-05-14T22:09:57Z",
        "updatedAt" : "2021-05-14T22:09:57Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "aad8fdb3-8151-4300-82b9-a40b515fac48",
        "parentId" : "3f873e7f-f810-4857-bc71-a7d172c4b2b7",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Another alternative I played with was to reset the flag from the `build` method of the dragged widget (when it was actually being replaced with the zero sized box). That seemed messier because it meant the child item widget was directly manipulating the state in the list (or I would need to expose a method). The post-frame callback seemed the most self contained. \r\n",
        "createdAt" : "2021-05-14T22:26:48Z",
        "updatedAt" : "2021-05-14T22:26:49Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "8f03d0ab-3205-4b23-8d4b-8238f8f6d1f7",
        "parentId" : "3f873e7f-f810-4857-bc71-a7d172c4b2b7",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I see, thanks for the detailed explanation!",
        "createdAt" : "2021-05-14T22:54:44Z",
        "updatedAt" : "2021-05-14T22:54:44Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "dfb58cd6-6014-4f8a-8f94-6102c246b400",
        "parentId" : "3f873e7f-f810-4857-bc71-a7d172c4b2b7",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Thanks for the review.",
        "createdAt" : "2021-05-14T22:57:06Z",
        "updatedAt" : "2021-05-14T22:57:06Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9861c01d2b9f32059bb8aba5949bcd6e0eb36cf0",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +744,748 @@        final Offset transitionOffset = _extentOffset(_reverse ? -gapExtent : gapExtent, _scrollDirection);\n        geometry = (geometry.topLeft - transitionOffset) & geometry.size;\n      }\n      final double itemStart = _scrollDirection == Axis.vertical ? geometry.top : geometry.left;\n      final double itemExtent = _scrollDirection == Axis.vertical ? geometry.height : geometry.width;"
  }
]