[
  {
    "id" : "c26ef9f3-3625-44fa-a998-622f8b5442de",
    "prId" : 645,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a598157d-67d2-43ec-bc6c-0d889fba04fb",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This still leaks the number of characters. We could be slightly better by just drawing a rounded rectangle of the length that the text would be, or something.\n",
        "createdAt" : "2015-12-01T01:09:22Z",
        "updatedAt" : "2015-12-01T01:09:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ffd9f972-be63-4170-b7c2-bc2c5be99b8f",
        "parentId" : "a598157d-67d2-43ec-bc6c-0d889fba04fb",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "The normal thing for password fields is to show one bullet per character.  That way typing and deleting have good visual feedback.\n",
        "createdAt" : "2015-12-01T01:12:59Z",
        "updatedAt" : "2015-12-01T01:12:59Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "179d191e3ae6481da50b78f6431682d4a7d52648",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +286,290 @@    String text = value.text;\n    if (hideText)\n      text = new String.fromCharCodes(new List<int>.filled(text.length, 0x2022));\n    return new StyledTextSpan(style, <TextSpan>[\n      new PlainTextSpan(text.isEmpty ? _kZeroWidthSpace : text)"
  },
  {
    "id" : "dee94c9f-1a70-466a-bdf0-74a4c7037809",
    "prId" : 9119,
    "prUrl" : "https://github.com/flutter/flutter/pull/9119#pullrequestreview-30364663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf6399bf-9881-4952-ae30-e42436e104b9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "does this actually work?",
        "createdAt" : "2017-03-31T17:42:49Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "22c4b3b7-3089-42ed-b481-0a0b49616d8c",
        "parentId" : "cf6399bf-9881-4952-ae30-e42436e104b9",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It does something, but not much.",
        "createdAt" : "2017-03-31T23:35:30Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "abd6da3d1ab5c0a5221dd9d1c2ab3f320cdde802",
    "line" : 375,
    "diffHunk" : "@@ -1,1 +353,357 @@  /// state or the \"off\" state). A complete cursor blink period is twice this\n  /// value (half on, half off).\n  @visibleForTesting\n  Duration get cursorBlinkInterval => _kCursorBlinkHalfPeriod;\n"
  },
  {
    "id" : "fad5459d-abff-4179-8b09-51b531612437",
    "prId" : 11067,
    "prUrl" : "https://github.com/flutter/flutter/pull/11067#pullrequestreview-47536723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "832439b2-749a-4945-8895-2418e5135ef7",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "The focusNode seems like another common cause where the mixin could do all the fiddly work for you.",
        "createdAt" : "2017-07-01T05:09:33Z",
        "updatedAt" : "2017-07-01T20:44:24Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "1d2c8f63-30d0-41a3-a4c9-a9db80c66a8a",
        "parentId" : "832439b2-749a-4945-8895-2418e5135ef7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "There's not that much fiddly work. :-)",
        "createdAt" : "2017-07-01T20:41:14Z",
        "updatedAt" : "2017-07-01T20:44:24Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "328807ef06a3cadf289dfc059e7b154c3a698ffe",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +281,285 @@\n  @override\n  bool get wantKeepAlive => widget.focusNode.hasFocus;\n\n  // State lifecycle:"
  },
  {
    "id" : "30239776-3a18-4f38-8008-caa74dde932f",
    "prId" : 11830,
    "prUrl" : "https://github.com/flutter/flutter/pull/11830#pullrequestreview-59411047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "735a058c-f933-447c-8106-7a3055d34d1f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "minor issue, feel free to ignore: consider `-= 1` rather than postfix `--`",
        "createdAt" : "2017-08-29T23:35:45Z",
        "updatedAt" : "2017-08-29T23:35:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "044b5ba84cab93cda6240c454566eb49cda0960f",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +532,536 @@    _showCursor.value = !_showCursor.value;\n    if (_obscureShowCharTicksPending > 0) {\n      setState(() { _obscureShowCharTicksPending--; });\n    }\n  }"
  },
  {
    "id" : "e390f2eb-d09c-4739-aea7-f9319da2b147",
    "prId" : 18291,
    "prUrl" : "https://github.com/flutter/flutter/pull/18291#pullrequestreview-128472401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97b97df4-b9a4-4d5b-b8c9-aa7562da7daf",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Couldn't something else do that, like rotating the screen, or a \"virtual\" safe area element (like the iOS bottom button) disappearing? I suppose we probably want this to happen in those cases too, however.",
        "createdAt" : "2018-06-13T01:47:04Z",
        "updatedAt" : "2018-06-13T01:47:41Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "8487fc37-f4c0-4355-9f8c-1f0579cc1e96",
        "parentId" : "97b97df4-b9a4-4d5b-b8c9-aa7562da7daf",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Yes, this will be triggered by the events you list as well. I'd argue that you'd still want to ensure that a focused textfield stays visible when any of those happen.",
        "createdAt" : "2018-06-13T16:56:33Z",
        "updatedAt" : "2018-06-13T16:56:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "73eb8341c4b52ec301e083091cfaaeb1ae6d377d",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +667,671 @@    _updateOrDisposeSelectionOverlayIfNeeded();\n    if (_hasFocus) {\n      // Listen for changing viewInsets, which indicates keyboard showing up.\n      WidgetsBinding.instance.addObserver(this);\n      _lastBottomViewInset = ui.window.viewInsets.bottom;"
  },
  {
    "id" : "000c5233-8b0d-43a3-a992-18ed34483121",
    "prId" : 18855,
    "prUrl" : "https://github.com/flutter/flutter/pull/18855#pullrequestreview-132253934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3134de07-99e3-4342-8725-6fe4f1e41a3d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "somewhere (maybe the class documentation) we should have a section that talks about the event lifecycle (e.g. that onEditingComplete happens before onSubmitted but after onChanged, or whatever)",
        "createdAt" : "2018-06-26T22:54:02Z",
        "updatedAt" : "2018-06-29T23:47:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6f6097fa-2e6e-495a-b03d-512608040975",
        "parentId" : "3134de07-99e3-4342-8725-6fe4f1e41a3d",
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "I added a few lines to the class docs.  Let me know if you have any comments.",
        "createdAt" : "2018-06-27T00:57:21Z",
        "updatedAt" : "2018-06-29T23:47:29Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2cb7bbd9ab930ab99534169f2c7dddf55754199",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +311,315 @@\n  /// The type of keyboard to use for editing the text.\n  final TextInputType keyboardType;\n\n  /// The type of action button to use with the soft keyboard."
  },
  {
    "id" : "7102d99b-53a3-4532-a2a5-64e94b575078",
    "prId" : 18855,
    "prUrl" : "https://github.com/flutter/flutter/pull/18855#pullrequestreview-132253897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2b2ad72-f2a3-485c-8e5d-bf6a25a53fe2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this seems to be missing the constructor argument",
        "createdAt" : "2018-06-26T22:54:25Z",
        "updatedAt" : "2018-06-29T23:47:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a547acf2-9e97-447a-b902-39b7c9d4f836",
        "parentId" : "a2b2ad72-f2a3-485c-8e5d-bf6a25a53fe2",
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "Fixed",
        "createdAt" : "2018-06-27T00:57:05Z",
        "updatedAt" : "2018-06-29T23:47:29Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2cb7bbd9ab930ab99534169f2c7dddf55754199",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +335,339 @@  ///\n  /// Providing [onEditingComplete] prevents the aforementioned default behavior.\n  final VoidCallback onEditingComplete;\n\n  /// Called when the user indicates that they are done editing the text in the field."
  },
  {
    "id" : "d9287397-1953-486b-b3c3-cde36f55120b",
    "prId" : 19317,
    "prUrl" : "https://github.com/flutter/flutter/pull/19317#pullrequestreview-136865976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "922a63ee-1431-477e-9b06-cdaa5235a7bb",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This is a backwards incompatible change. Is it really needed?",
        "createdAt" : "2018-07-12T23:00:20Z",
        "updatedAt" : "2018-07-23T20:41:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "5dc8f982-aec5-425c-9d15-7c66683de4d3",
        "parentId" : "922a63ee-1431-477e-9b06-cdaa5235a7bb",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "[per discussion with @sandrasandeep] If the native textfields all use 2.0 wide cursors, and Material doesn't specify a text cursor width, then it makes sense to bite the bullet and make the default 2.0.\r\n\r\nSo although this is an incompatible change, it's probably best to go though with it now, while Flutter is still in beta.",
        "createdAt" : "2018-07-12T23:38:12Z",
        "updatedAt" : "2018-07-23T20:41:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d87d6b5060e6fe57be2cad556d91560371c40256",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +210,214 @@    List<TextInputFormatter> inputFormatters,\n    this.rendererIgnoresPointer = false,\n    this.cursorWidth = 2.0,\n    this.cursorRadius,\n    this.scrollPadding = const EdgeInsets.all(20.0),"
  },
  {
    "id" : "709694fe-bea3-4698-8f70-ab86544913ef",
    "prId" : 20004,
    "prUrl" : "https://github.com/flutter/flutter/pull/20004#pullrequestreview-143730530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0219afdf-bae4-4217-a558-cd9ed38ee3ed",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "nit: leave the last newline",
        "createdAt" : "2018-08-06T18:31:23Z",
        "updatedAt" : "2018-08-06T18:31:28Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "d9bd9d14-73f2-4db5-8484-3a99ff0e39ac",
        "parentId" : "0219afdf-bae4-4217-a558-cd9ed38ee3ed",
        "authorId" : "ee0cb3a6-6d76-417c-8f81-959063820628",
        "body" : "I took it out because it causes the tests to fail.",
        "createdAt" : "2018-08-06T19:34:00Z",
        "updatedAt" : "2018-08-06T19:34:00Z",
        "lastEditedBy" : "ee0cb3a6-6d76-417c-8f81-959063820628",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ecc464ba02b11bb5ce8f72c54f2579db5724d48",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1037,1041 @@      ..cursorRadius = cursorRadius;\n  }\n}"
  },
  {
    "id" : "d71b80cb-13f4-4fe8-9a16-8398639bdfe3",
    "prId" : 20004,
    "prUrl" : "https://github.com/flutter/flutter/pull/20004#pullrequestreview-146161955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b07f6fc9-dc58-430c-bcd0-6fa5246d75ee",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we should probably have a constant here rather than creating a new value notifier each frame",
        "createdAt" : "2018-08-14T17:06:16Z",
        "updatedAt" : "2018-08-14T17:06:16Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ecc464ba02b11bb5ce8f72c54f2579db5724d48",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +888,892 @@              value: _value,\n              cursorColor: widget.cursorColor,\n              showCursor: EditableText.debugDeterministicCursor ? ValueNotifier<bool>(true) : _showCursor,\n              hasFocus: _hasFocus,\n              maxLines: widget.maxLines,"
  },
  {
    "id" : "ddd0f618-fb12-49f5-a60f-54426f2acd9b",
    "prId" : 21083,
    "prUrl" : "https://github.com/flutter/flutter/pull/21083#pullrequestreview-151103338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1e3fc04-6b03-48d4-9f00-7af81f58e28c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you should also add this to updateRenderObject, for completeness (it can't currently change, but if we ever change the way this is built, we'd have a weird latent bug that's hard to track down if we don't do it correctly now)",
        "createdAt" : "2018-08-28T18:42:40Z",
        "updatedAt" : "2018-09-06T20:23:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "83876faf-f271-46a3-a933-ca0ccb26fd94",
        "parentId" : "b1e3fc04-6b03-48d4-9f00-7af81f58e28c",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Alright did that!",
        "createdAt" : "2018-08-30T17:33:40Z",
        "updatedAt" : "2018-09-06T20:23:59Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "bba287f6dceb1005235461c60b3773e67f20717b",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1016,1020 @@      cursorWidth: cursorWidth,\n      cursorRadius: cursorRadius,\n      textSelectionDelegate: textSelectionDelegate,\n    );\n  }"
  },
  {
    "id" : "234035d1-fdaa-44c2-8584-a7ff0c174a71",
    "prId" : 23015,
    "prUrl" : "https://github.com/flutter/flutter/pull/23015#pullrequestreview-164388603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd0020c8-9639-4e9b-b7df-e499619cce49",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Can you please add a test for this change in behavior?",
        "createdAt" : "2018-10-12T17:36:38Z",
        "updatedAt" : "2018-10-16T19:51:58Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "42f1175c-5415-4f47-a5bf-e59f8eb02891",
        "parentId" : "dd0020c8-9639-4e9b-b7df-e499619cce49",
        "authorId" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "body" : "Done",
        "createdAt" : "2018-10-12T19:58:59Z",
        "updatedAt" : "2018-10-16T19:51:58Z",
        "lastEditedBy" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "abf3c889e15a5a010a9ba09f63df37ecd6d03cdb",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +516,520 @@        // editing.\n        if (widget.maxLines == 1)\n          _finalizeEditing(true);\n        break;\n      case TextInputAction.done:"
  },
  {
    "id" : "0f4d78a4-4abc-4a7d-87eb-c64cce6ffee5",
    "prId" : 24135,
    "prUrl" : "https://github.com/flutter/flutter/pull/24135#pullrequestreview-173243342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2b0daf0-3807-4973-9dfc-91c31028329b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Out of scope for this PR but we should probably draw on top of the text",
        "createdAt" : "2018-11-09T01:19:18Z",
        "updatedAt" : "2018-11-09T01:41:44Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "92bd9bd9d66475650863194f3350e929f77c6326",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +419,423 @@  /// Defaults to 2.0\n  ///\n  /// The cursor will draw under the text. The cursor width will extend\n  /// to the right of the boundary between characters for left-to-right text\n  /// and to the left for right-to-left text. This corresponds to extending"
  },
  {
    "id" : "3a59dc25-80b4-420e-8518-da50b8ef0c53",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c96e1c7e-ddc6-40a4-b29a-190a02bb55eb",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "You didn't assert non-null",
        "createdAt" : "2018-12-10T23:33:36Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +184,188 @@  /// default to [TextInputType.multiline].\n  ///\n  /// The [controller], [focusNode], [style], [cursorColor], [backgroundCursorColor],\n  /// [textAlign], [rendererIgnoresPointer], and [enableInteractiveSelection]\n  /// arguments must not be null."
  },
  {
    "id" : "48bdd597-6f71-4bad-9c1f-a7f417d27c3d",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caee5a56-8ddc-4004-a280-a336ddf893c0",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Not super clear what this is. Add more comments.",
        "createdAt" : "2018-12-10T23:54:07Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +516,520 @@  // The time it takes for the floating cursor to snap to the text aligned\n  // cursor position after the user has finished placing it.\n  static const Duration _floatingCursorResetTime = Duration(milliseconds: 125);\n\n  AnimationController _floatingCursorResetController;"
  },
  {
    "id" : "1e3ad5f4-2b39-436a-b388-048562b50b60",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "054cb346-5d7a-4653-b981-970a679bf61a",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I would add comment for all of these since it's not clear what they are exactly.",
        "createdAt" : "2018-12-11T00:06:24Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +615,619 @@\n  // The original position of the caret on FloatingCursorDragState.start.\n  Rect _startCaretRect;\n\n  // The most recent text position as determined by the location of the floating"
  },
  {
    "id" : "e2b6c67d-3181-4f9a-b5e8-944435154ff1",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab8ab4a0-15dd-4abf-9c22-806577a42a63",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "For cleanness, we should probably reset these variables when not in force touch.",
        "createdAt" : "2018-12-11T06:56:41Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +619,623 @@  // The most recent text position as determined by the location of the floating\n  // cursor.\n  TextPosition _lastTextPosition;\n\n  // The offset of the floating cursor as determined from the first update call."
  },
  {
    "id" : "1ad2063d-1712-483e-9f5c-ce03a0ed2cf7",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfe5f0f5-41e7-449c-b85d-786439a29219",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "It's not really a tap selection cause right? I don't know if we need to do anythnig different but I would at least add a comment.",
        "createdAt" : "2018-12-11T06:57:56Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +666,670 @@      if (_lastTextPosition.offset != renderEditable.selection.baseOffset)\n        // The cause is technically the force cursor, but the cause is listed as tap as the desired functionality is the same.\n        _handleSelectionChanged(TextSelection.collapsed(offset: _lastTextPosition.offset), renderEditable, SelectionChangedCause.tap);\n      _startCaretRect = null;\n      _lastTextPosition = null;"
  },
  {
    "id" : "b94b68ea-dc66-4898-a3bb-6ea1368761ae",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190502955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b3a8494-beb2-4f51-98fb-c68bb25b77fe",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I'm not sure I could figure out what this is from the name. Add comments.",
        "createdAt" : "2018-11-30T21:15:47Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "d4db4ba3-cfbd-416b-b0aa-fca67e07aab4",
        "parentId" : "8b3a8494-beb2-4f51-98fb-c68bb25b77fe",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Is it the same amount of time it waits before animating to become opaque as well? While you're here, document the 500ms above too and how they relate.",
        "createdAt" : "2019-01-09T00:00:21Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +40,44 @@// The time the cursor is static in opacity before animating to become\n// transparent.\nconst Duration _kCursorBlinkWaitForStart = Duration(milliseconds: 150);\n\n// Number of cursor ticks during which the most recently entered character"
  },
  {
    "id" : "0b655ac6-bd26-4adc-b4e3-1decacd2907f",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190526092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0695f222-9c37-40ad-9271-d24e8efb8714",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Random thought: could we just have the composer pass in a Curve instead of a bool? This way, Android passes a step function, iOS passes something linear (or some such. I don't really know). But then fuchsia can pass in something else and our users can pass in whatever they like too. ",
        "createdAt" : "2019-01-09T00:02:31Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "6431be8f-c324-47a9-a1a0-697692a8050d",
        "parentId" : "0695f222-9c37-40ad-9271-d24e8efb8714",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "The way things are set up right now, doing this would be non trivial... But if there's a need for it in the future, we could definitely add that.",
        "createdAt" : "2019-01-09T00:54:03Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "6c25ca8f-9d4e-4203-a1d3-05f9e20809f2",
        "parentId" : "0695f222-9c37-40ad-9271-d24e8efb8714",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Sure. Just try to account letting it be non-API-breaking when leaving room for it.",
        "createdAt" : "2019-01-09T01:01:45Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +490,494 @@  /// By default, the cursor opacity will animate on iOS platforms and will not\n  /// animate on Android platforms.\n  final bool cursorOpacityAnimates;\n\n  ///{@macro flutter.rendering.editable.cursorOffset}"
  },
  {
    "id" : "426cb7a5-d1ea-45de-93fd-d58025fbcebe",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190502955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e12daec4-6323-43f5-83f3-27cc5d57245d",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Describe how the number is derived",
        "createdAt" : "2019-01-09T00:03:08Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +580,584 @@  // This value is an eyeball estimation of the time it takes for the iOS cursor\n  // to ease in and out.\n  static const Duration _fadeDuration = Duration(milliseconds: 250);\n\n  // The time it takes for the floating cursor to snap to the text aligned"
  },
  {
    "id" : "098ba1e4-78f4-4f92-9ba9-95563308b154",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190502955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45c12c0f-8286-46c4-9644-65c768ab7214",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "There should be some assert somewhere in the constructor or here that compares the values of _kCursorBlinkHalfPeriod and _fadeDuration to make sure someone changing this value in the future doesn't mess up. ",
        "createdAt" : "2019-01-09T00:33:49Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +1049,1053 @@    assert(_kCursorBlinkHalfPeriod > _fadeDuration);\n    _cursorTimer?.cancel();\n    _cursorTimer = Timer.periodic(_kCursorBlinkHalfPeriod, _cursorTick);\n  }\n"
  },
  {
    "id" : "6b491c47-bdc5-4ee3-b77f-75b45f68230e",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190542156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "048a2517-a6a4-4f0f-ad1e-ba19bf4e30c6",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Oh, I get what _kCursorBlinkHalfPeriod is now. \r\n\r\nI think when it's hard to describe, let's stick to industry terms with prior art. Like signal processing or something https://goo.gl/images/n99F1c. Since it's private, let's rename it.",
        "createdAt" : "2019-01-09T00:36:18Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "518d7cbf-7e12-4824-99e9-ec338a5a5ee7",
        "parentId" : "048a2517-a6a4-4f0f-ad1e-ba19bf4e30c6",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "This was a prior named value, not something I came up with! :) Though do you have a better name? I do feel like it describes the value well.",
        "createdAt" : "2019-01-09T01:24:34Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +1049,1053 @@    assert(_kCursorBlinkHalfPeriod > _fadeDuration);\n    _cursorTimer?.cancel();\n    _cursorTimer = Timer.periodic(_kCursorBlinkHalfPeriod, _cursorTick);\n  }\n"
  },
  {
    "id" : "b6c46164-52f7-4173-a006-fc11b2e05e14",
    "prId" : 27003,
    "prUrl" : "https://github.com/flutter/flutter/pull/27003#pullrequestreview-198415811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2495f8a0-606e-460a-b411-5e1cdeddd079",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Refactored this to keep it working. Ideally we should get rid of it since it's not that useful but it's already public.",
        "createdAt" : "2019-01-31T03:58:14Z",
        "updatedAt" : "2019-02-05T07:41:16Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "b548f8612bf46f69372006fc01201906d56c4d54",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1010,1014 @@  /// (it's hidden half the time, since it blinks).\n  @visibleForTesting\n  bool get cursorCurrentlyVisible => _cursorBlinkOpacityController.value > 0;\n\n  /// The cursor blink interval (the amount of time the cursor is in the \"on\""
  },
  {
    "id" : "80941568-001c-4806-bd62-82ab468e4ba0",
    "prId" : 27205,
    "prUrl" : "https://github.com/flutter/flutter/pull/27205#pullrequestreview-208664605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a42d70f8-5f22-4f14-9a24-a27d0e774859",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This is documentation for the EditableText class (too). Probably need some qualifying statement early on that explains that the examples apply equally well to EditableText or TextFormField.\r\n\r\nGenerally speaking I think we're talking about the \"input widget's [EditableText]\" rather than just \"Input\".",
        "createdAt" : "2019-02-27T18:05:25Z",
        "updatedAt" : "2019-03-08T16:59:42Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "56d0a1b6d0ab5598c651c73c6dc67d49c731d25f",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +479,483 @@  /// Input that occupies a single line and scrolls horizontally as needed.\n  /// ```dart\n  /// TextField()\n  /// ```\n  ///"
  },
  {
    "id" : "aa6af6a5-d39c-4670-85ab-f0499ea07962",
    "prId" : 27612,
    "prUrl" : "https://github.com/flutter/flutter/pull/27612#pullrequestreview-202427114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "731bf081-0c13-4fc7-9695-7b0acad741ed",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If null, a [StrutStyle] based on [style], with [StrutStyle.forceStrutHeight] set to true, will be used.  If  [style] is null (the default) then the theme's [TextStyle] will be used instead.\r\n\r\nHowever: we don't seem to be defaulting style to the theme's style?",
        "createdAt" : "2019-02-12T00:41:55Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "8b002215-6b22-454e-a0bd-d6067983bab9",
        "parentId" : "731bf081-0c13-4fc7-9695-7b0acad741ed",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "This behavior is actually inherited from the TextStyle taking the theme's style, which the StrutStyle then in turn inherits.",
        "createdAt" : "2019-02-12T01:05:30Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0642aa749afd3ea3ff4b5fd453d36a1ba2e8704f",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +294,298 @@  /// [style]. This ensures the typed text fits within the alotted space.\n  ///\n  /// If null, the strut used will is inherit values from the [style] and will\n  /// have [StrutStyle.forceStrutHeight] set to true. When no [style] is\n  /// passed, the theme's [TextStyle] will be used to generate [strutStyle]"
  },
  {
    "id" : "b8e9e5ce-ce76-474b-9d2d-d528ab4e0324",
    "prId" : 27612,
    "prUrl" : "https://github.com/flutter/flutter/pull/27612#pullrequestreview-205528315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca9896c1-d169-4ced-a781-f6572bc38152",
        "parentId" : null,
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "Would you mind adding a URL reference to something that explains the concept of a strut in general?  It's an odd name for those that are not already familiar with it.",
        "createdAt" : "2019-02-19T22:20:03Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "ca027d52-baae-4586-ba95-f068deca2c23",
        "parentId" : "ca9896c1-d169-4ced-a781-f6572bc38152",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "I can put a link to https://www.w3.org/TR/CSS2/visudet.html#line-height in the docs for `StrutStyle`. Sticking the link everywhere strut is used might cause a bit too much clutter.",
        "createdAt" : "2019-02-20T00:37:11Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "24b4a41d-1eae-4ec7-bb6a-8a24e080bd30",
        "parentId" : "ca9896c1-d169-4ced-a781-f6572bc38152",
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "I was just recommending that it be added to this template.  The other places where this template appears is likely to be the first and only interaction most developers have with this concept, so it seemed like a good place for an external reference.",
        "createdAt" : "2019-02-20T00:45:34Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "d3ae055a-4468-45fa-ac31-42b5a3075ac2",
        "parentId" : "ca9896c1-d169-4ced-a781-f6572bc38152",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "https://en.wikipedia.org/wiki/Strut_(typesetting) may also be a good more generic albeit brief reference.",
        "createdAt" : "2019-02-20T00:46:28Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "5a57878d-2d3a-4d11-aecb-f98eb4f08f33",
        "parentId" : "ca9896c1-d169-4ced-a781-f6572bc38152",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Ahh my bad, missed that this was the template! That's a good idea.",
        "createdAt" : "2019-02-20T00:48:21Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0642aa749afd3ea3ff4b5fd453d36a1ba2e8704f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +304,308 @@  /// Flutter's strut is based on [typesetting strut](https://en.wikipedia.org/wiki/Strut_(typesetting))\n  /// and CSS's [line-height](https://www.w3.org/TR/CSS2/visudet.html#line-height).\n  /// {@endtemplate}\n  ///\n  /// Within editable text and textfields, [StrutStyle] will not use its standalone"
  },
  {
    "id" : "3af786e1-8e01-47ca-88ff-bd8e3e2ae3bf",
    "prId" : 28955,
    "prUrl" : "https://github.com/flutter/flutter/pull/28955#pullrequestreview-211555193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c784c87e-3b31-407e-8b66-aa41907c9050",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "When used on its own, the [EditableText] widget will not display the selection toolbar.",
        "createdAt" : "2019-03-06T20:29:52Z",
        "updatedAt" : "2019-03-06T22:37:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "4a870e90-d98e-4050-b859-bfc6afd05c6e",
        "parentId" : "c784c87e-3b31-407e-8b66-aa41907c9050",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "This might be over-simplified. When used on its own, the EditableText widget can display the selection toolbar. It'll just not trigger it by itself.",
        "createdAt" : "2019-03-06T22:39:23Z",
        "updatedAt" : "2019-03-06T22:39:24Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "260f8dde-e5d7-4b81-a874-91927777e090",
        "parentId" : "c784c87e-3b31-407e-8b66-aa41907c9050",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Good point.",
        "createdAt" : "2019-03-07T01:00:11Z",
        "updatedAt" : "2019-03-07T01:00:11Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "eee2511d217c61e9f26b6ed703151ee6904def7e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +490,494 @@  /// Optional delegate for building the text selection handles and toolbar.\n  ///\n  /// The [EditableText] widget used on its own will not trigger the display\n  /// of the selection toolbar by itself. The toolbar is shown by calling\n  /// [EditableTextState.showToolbar] in response to an appropriate user event."
  },
  {
    "id" : "d9efb898-252a-4422-a631-30bd78081290",
    "prId" : 28955,
    "prUrl" : "https://github.com/flutter/flutter/pull/28955#pullrequestreview-211514540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57f80fa7-9447-4746-bd5d-34112b7a508c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "it shows a platform-specific toolbar too, right?",
        "createdAt" : "2019-03-06T20:31:47Z",
        "updatedAt" : "2019-03-06T22:37:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "aa58fcb5-cdf1-4a85-8a18-b7ec28bae0c2",
        "parentId" : "57f80fa7-9447-4746-bd5d-34112b7a508c",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "It does. We don't necessarily have to talk about it here though.",
        "createdAt" : "2019-03-06T22:40:00Z",
        "updatedAt" : "2019-03-06T22:40:00Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "eee2511d217c61e9f26b6ed703151ee6904def7e",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +500,504 @@  ///    platform.\n  ///  * [TextField], a Material Design themed wrapper of [EditableText], which\n  ///    shows the selection toolbar upon appropriate user events based on the\n  ///    user's platform set in [ThemeData.platform].\n  final TextSelectionControls selectionControls;"
  },
  {
    "id" : "a77bb2dd-f0f7-4897-adfb-bd88564f92eb",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-233679905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ede24dd-f921-418c-9b04-2a3add83365f",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Maybe for a different PR, might be nice to let users explicitly control which of these are enabled or not.",
        "createdAt" : "2019-05-03T21:29:50Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +865,869 @@\n  @override\n  bool get cutEnabled => !widget.readOnly;\n\n  @override"
  },
  {
    "id" : "095571ef-6521-47b7-bd0d-f8bac9ec08d0",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-242790683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This is here to close the keyboard if the Editable switched from non-readOnly to readOnly? Can you add a test case for that scenario? ",
        "createdAt" : "2019-05-06T11:19:16Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "159385d0-9dfe-4b2e-9455-6add840e3756",
        "parentId" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "What if the opposite happens (going from readOnly to editable)?",
        "createdAt" : "2019-05-06T11:27:12Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "1ac2ee07-4859-47a3-8682-ad0022ff1412",
        "parentId" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I will add a test.\r\n\r\nRight now the current behavior is when you on focus on the text input in readOnly mode and then switch to non-readonly, the focus is still attached without the keyboard pop up. The prompt will get to the start of the textfield. if you click anywhere in the text again, the keyboard will pop up. I feel the behavior is ok. I can make the keyboard pop up right after update. I am not sure which one is more natural.",
        "createdAt" : "2019-05-06T16:54:22Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "a7478a3c-a1c4-4de1-8925-4da4053f281c",
        "parentId" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "added test 'Dynamically switching to read only should close input connection'",
        "createdAt" : "2019-05-06T21:47:38Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "dd79a298-ea75-4818-b198-4bc3dfb99421",
        "parentId" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I feel like the keyboard should come up right away when readOnly switches. But we may want to check what Android and iOS do natively.",
        "createdAt" : "2019-05-21T16:46:07Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "bfb5be69-a510-40c1-aee3-d4df0cf81df2",
        "parentId" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "ios and android does not have build in readonly textfield. It is a web thing, I updated it so the keyboard come up when switches",
        "createdAt" : "2019-05-28T16:40:13Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +921,925 @@      updateKeepAlive();\n    }\n    if (widget.readOnly) {\n      _closeInputConnectionIfNeeded();\n    } else {"
  },
  {
    "id" : "1aaffa0a-44e9-49fc-b228-6e987471baf3",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-237962049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cab81a2-c5ed-48ee-a43a-28e1acc85ab9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "From the discussion above I inferred that you'd still need the input connection to receive keyboard events to change the selection. Why is returning here without a connection ok then?",
        "createdAt" : "2019-05-06T11:23:19Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "fe9fd3d6-db6b-4581-adf2-aa9c1ce9c104",
        "parentId" : "4cab81a2-c5ed-48ee-a43a-28e1acc85ab9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "The key press event are sent through RawKeyboard listener, the inputConnection here is the in screen keyboard. As long as we have listener attached to RawKeyboard in RenderEditable, we can listen to keyboard input. The in screen keyboard is not required. Furthermore, I think you cannot select text with in screen keyboard, can you?",
        "createdAt" : "2019-05-06T16:39:34Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "c1b190d1-59d1-4631-bb80-982ff1b8d21f",
        "parentId" : "4cab81a2-c5ed-48ee-a43a-28e1acc85ab9",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "You can force press the keyboard on iOS to move the cursor - but I don't now that you can select text.  Are we covered on the force press though?",
        "createdAt" : "2019-05-14T23:54:15Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "c031fe87-09cd-49a8-b395-65a4c8bceea5",
        "parentId" : "4cab81a2-c5ed-48ee-a43a-28e1acc85ab9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I don't think we need to support that in read only text field. As far as i can tell, the force press move cursor only available during text editing, which is not applicable in this case.",
        "createdAt" : "2019-05-15T17:21:06Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +1137,1141 @@\n  void _openInputConnection() {\n    if (widget.readOnly) {\n      return;\n    }"
  },
  {
    "id" : "1af66dfa-b1d6-42bc-b075-a02b9a89c0a2",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-234654517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b2417ef-310e-4f46-bce1-184ea149206f",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "after play a little bit more, I figure we do not update the overlay when selection change during didupdatewidget.\r\nI filed https://github.com/flutter/flutter/issues/32152 to demonstrate this issue.\r\nadded test 'Sawping controllers should update selection'",
        "createdAt" : "2019-05-06T22:01:38Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "22ea5f8d-f50b-443e-971b-4381325d38fa",
        "parentId" : "4b2417ef-310e-4f46-bce1-184ea149206f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I cannot separate this into different pr, since the readonly requires this issue to fix to work properly.",
        "createdAt" : "2019-05-07T17:25:23Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +911,915 @@    }\n    if (widget.controller.selection != oldWidget.controller.selection) {\n      _selectionOverlay?.update(_value);\n    }\n    _selectionOverlay?.handlesVisible = widget.showSelectionHandles;"
  },
  {
    "id" : "f43c42d0-68eb-4b84-9b9c-81c6e38d4c9c",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-235317552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85366323-6a14-4638-a872-a34900e699dd",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "disable composing",
        "createdAt" : "2019-05-08T22:12:14Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 222,
    "diffHunk" : "@@ -1,1 +1566,1570 @@  TextSpan buildTextSpan() {\n    // Read only mode should not paint text composing.\n    if (!widget.obscureText && _value.composing.isValid && !widget.readOnly) {\n      final TextStyle composingStyle = widget.style.merge(\n        const TextStyle(decoration: TextDecoration.underline),"
  },
  {
    "id" : "a210e874-5b48-4feb-8ab2-c322083de321",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-239607187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f341916a-c581-49ad-941e-d025fa3025f9",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "also `assert(showCursor != null)`?",
        "createdAt" : "2019-05-14T22:29:24Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "f79fd0bb-520d-4713-bd35-f900567bad02",
        "parentId" : "f341916a-c581-49ad-941e-d025fa3025f9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I changed that so showcursor can be null, if it is null it will be set to !readOnly",
        "createdAt" : "2019-05-20T16:35:17Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +316,320 @@       assert(autocorrect != null),\n       assert(showSelectionHandles != null),\n       assert(readOnly != null),\n       assert(style != null),\n       assert(cursorColor != null),"
  },
  {
    "id" : "bfcd1ff3-2546-431e-9715-83529584be25",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-240159819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5f00c05-ca79-4042-a043-c5f0e211de2e",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Update the doc above to indicate that readOnly may not be null and that showCursor is initialized based on readOnly if it is null?",
        "createdAt" : "2019-05-21T16:31:28Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "a5cc8a3e-cdcd-493f-a469-c18b0112386f",
        "parentId" : "c5f00c05-ca79-4042-a043-c5f0e211de2e",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "(This should also be done for the other classes that have these constructor arguments)",
        "createdAt" : "2019-05-21T16:31:51Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +316,320 @@       assert(autocorrect != null),\n       assert(showSelectionHandles != null),\n       assert(readOnly != null),\n       assert(style != null),\n       assert(cursorColor != null),"
  },
  {
    "id" : "99f88b4e-7b5b-40eb-bf70-84e69aa3d97c",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-244509846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59ac7707-df22-41b2-932f-db7325049453",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Maybe this is where the following text belongs and the other showCursor doc string should just use the macro.\r\n\r\nThe text cursor is not shown if [showCursor] is false or if [showCursor] is null (the default) and [readOnly] is true.",
        "createdAt" : "2019-05-31T17:41:38Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "71369c87-ccf6-47f3-8b91-628561f82c6f",
        "parentId" : "59ac7707-df22-41b2-932f-db7325049453",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "The sentence make sense in the constructor because the [showCursor] there refer to pass in parameter.\r\n\r\nHowever, [showCursor] here will refer to the actually property Editable.showCursor. it will be a little bit confusing When parameter passed in is null, this property will actually be initialized to true or false.\r\n",
        "createdAt" : "2019-05-31T20:38:54Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +387,391 @@\n  /// {@template flutter.widgets.editableText.showCursor}\n  /// Whether to show cursor.\n  ///\n  /// The cursor refers to the blinking caret when the [EditableText] is focused."
  },
  {
    "id" : "5b16f4da-e765-4a91-8727-8c936a72c510",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-244989717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "001af8ae-1b3d-4ada-b85a-bd534ca07d14",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "It may be good to explain in a sentence or two what the selection handle is and how it is different from the cursor. Maybe also link to showCursor?",
        "createdAt" : "2019-06-03T16:28:23Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +375,379 @@  final bool readOnly;\n\n  /// Whether to show selection handles.\n  ///\n  /// When a selection is active, there will be two handles at each side of"
  },
  {
    "id" : "fe9d5c04-21ac-4e2f-bd1a-c64d50465059",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-244989717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ad1e415-37b8-49d4-8f50-8e1a0e6d7369",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "It may be helpful to differentiate the cursor from the selection handle in this doc and also link to showSelectionHandles.",
        "createdAt" : "2019-06-03T16:28:52Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +387,391 @@\n  /// {@template flutter.widgets.editableText.showCursor}\n  /// Whether to show cursor.\n  ///\n  /// The cursor refers to the blinking caret when the [EditableText] is focused."
  },
  {
    "id" : "15a232c6-dbc0-48b5-aa0a-ebb605c5fdee",
    "prId" : 32620,
    "prUrl" : "https://github.com/flutter/flutter/pull/32620#pullrequestreview-239410364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "622fa0c0-f631-46e7-a942-32661df66672",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I was thinking it might be better to set this default in EditableText rather than here in the state, but I think it won't be possible because it needs to be const.  This should be fine then.",
        "createdAt" : "2019-05-15T15:49:04Z",
        "updatedAt" : "2019-05-20T10:21:46Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "401f1f5f-06b5-4a0c-b306-87b516791143",
        "parentId" : "622fa0c0-f631-46e7-a942-32661df66672",
        "authorId" : "3b46b22b-ca61-486b-8f7b-c8501f0d2559",
        "body" : "For the same reason, It is impossible to add scrollController to the debugFillProperties test in material/text_field_test.dart and I haven't added it as the tests were failing.",
        "createdAt" : "2019-05-20T10:19:21Z",
        "updatedAt" : "2019-05-20T10:21:46Z",
        "lastEditedBy" : "3b46b22b-ca61-486b-8f7b-c8501f0d2559",
        "tags" : [
        ]
      }
    ],
    "commit" : "2819e045e2ea87dc5d752fdaa0249f00ba9dee55",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +829,833 @@    _focusAttachment = widget.focusNode.attach(context);\n    widget.focusNode.addListener(_handleFocusChanged);\n    _scrollController = widget.scrollController ?? ScrollController();\n    _scrollController.addListener(() { _selectionOverlay?.updateForScroll(); });\n    _cursorBlinkOpacityController = AnimationController(vsync: this, duration: _fadeDuration);"
  },
  {
    "id" : "00939f18-84b0-4875-9a62-ec118db0442a",
    "prId" : 34019,
    "prUrl" : "https://github.com/flutter/flutter/pull/34019#pullrequestreview-253636915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8530ada3-9028-48df-8239-34ee8dcdb3c7",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Is this for the case where you have text that's less than 1 line, but you want it to take up the full width?  I was worried that `textWidthBasis` didn't handle that case when I wrote it.  What about adding another value to the `textWidthBasis` enum called `fill` or `max` instead of having a separate bool?",
        "createdAt" : "2019-06-12T16:24:40Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "0df67cf8-161e-4328-9546-571ce67f01ba",
        "parentId" : "8530ada3-9028-48df-8239-34ee8dcdb3c7",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Just responding to my own comment so I don't forget: We talked offline about this and I also tried running it on my machine.  It's not quite the same as `textWidthBasis`, and I can't think of another option besides a bool.",
        "createdAt" : "2019-06-21T20:29:41Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "5c731f05-36cb-4e0f-9598-39ff40d672af",
        "parentId" : "8530ada3-9028-48df-8239-34ee8dcdb3c7",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "The purpose of it is to make RenderEditable draw something that's not full width.",
        "createdAt" : "2019-06-21T20:30:55Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "c10a11a9-bbb1-42b5-95e5-a53c1ff3de03",
        "parentId" : "8530ada3-9028-48df-8239-34ee8dcdb3c7",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "@HansMuller Is there any cleaner way to expose this sort of idea other than a bool?  Or any better name?  Let me know if you want me to explain what forceLine does.",
        "createdAt" : "2019-06-24T20:21:32Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "be32ea44e7039448da1451856923c1bc82d68e27",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +418,422 @@  ///\n  ///  * [textWidthBasis], which controls the calculation of text width.\n  final bool forceLine;\n\n  /// Whether to show selection handles."
  },
  {
    "id" : "680e3307-fa81-4979-9eb5-c5bce165e86a",
    "prId" : 34676,
    "prUrl" : "https://github.com/flutter/flutter/pull/34676#pullrequestreview-256589571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1016caa-b93b-471f-a4dd-b653e0fefe17",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe include a sentence indicating what the toolbar is used for?",
        "createdAt" : "2019-07-01T22:28:31Z",
        "updatedAt" : "2019-07-24T16:43:52Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "658008270c11d9c59d670c0ea185e6ae3908f2e6",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +230,234 @@/// [EditableText] and its derived widgets have their own default [ToolbarOptions].\n/// Create a custom [ToolbarOptions] if you want explicit control over the toolbar\n/// option.\nclass ToolbarOptions {\n  /// Create a toolbar configuration with given options."
  },
  {
    "id" : "211a4a8e-14c5-451d-afbf-850650582a54",
    "prId" : 35219,
    "prUrl" : "https://github.com/flutter/flutter/pull/35219#pullrequestreview-257559622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32aca4e7-c161-4107-9794-489df9b3556e",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I am not sure if it is necessary, we might also want to check _selectionOverlay.handlesarevisible",
        "createdAt" : "2019-07-01T23:30:38Z",
        "updatedAt" : "2019-07-10T18:30:59Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "3d4eea78-98b1-4018-ac09-708d35ce914f",
        "parentId" : "32aca4e7-c161-4107-9794-489df9b3556e",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I just tried playing around with it and using `handlesAreVisible` and I think it has to stay as-is.  The use case is tapping to close the selection menu in an empty text field.  In that case no handles are shown, only the toolbar, but we still want to close the toolbar on tap.  However I also don't want to call `selectionOverlay.hide` when there is no selection overlay, like tapping on an empty field without the menu up.",
        "createdAt" : "2019-07-03T15:14:16Z",
        "updatedAt" : "2019-07-10T18:30:59Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "147ab986396f3fc16191cf785bc348259bf24ba4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1496,1500 @@  @override\n  void hideToolbar() {\n    if (_selectionOverlay == null || !_selectionOverlay.toolbarIsVisible) {\n      return;\n    }"
  },
  {
    "id" : "63c4ea61-52b9-41b9-92bd-71711577fab7",
    "prId" : 35926,
    "prUrl" : "https://github.com/flutter/flutter/pull/35926#pullrequestreview-260993479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25e1fc80-2ae2-455a-a167-4bd34f8b15bc",
        "parentId" : null,
        "authorId" : "a6ca4e3d-4201-4456-84b4-5f389034b0b5",
        "body" : "Shouldn't this be `.nextFocus` not `.focusNext` as per L713?\r\n\r\nhttps://github.com/flutter/flutter/pull/35926/files#diff-2d74aabcc309c260810a6cca572e134eR713",
        "createdAt" : "2019-07-11T22:46:34Z",
        "updatedAt" : "2019-07-11T22:46:35Z",
        "lastEditedBy" : "a6ca4e3d-4201-4456-84b4-5f389034b0b5",
        "tags" : [
        ]
      },
      {
        "id" : "c71d271b-3b58-46b9-9a01-6ce10a1ad3ee",
        "parentId" : "25e1fc80-2ae2-455a-a167-4bd34f8b15bc",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yep, thanks for catching that!  I'll fix it in another PR.",
        "createdAt" : "2019-07-11T22:59:35Z",
        "updatedAt" : "2019-07-11T22:59:35Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bba24f7853d089ae6f96f810f21e78edbceaa69",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +693,697 @@  /// When a non-completion action is pressed, such as \"next\" or \"previous\", it\n  /// is often desirable to move the focus to the next or previous field.  To do\n  /// this, handle it as in this example, by calling [FocusNode.focusNext] in\n  /// the [TextFormField.onFieldSubmitted] callback ([TextFormField] wraps\n  /// [EditableText] internally, and uses the value of `onFieldSubmitted` as its"
  },
  {
    "id" : "5b69777c-1357-4142-858a-b7fd718b305f",
    "prId" : 39344,
    "prUrl" : "https://github.com/flutter/flutter/pull/39344#pullrequestreview-281511157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df503f36-2c94-4d87-9822-a0e7b7b03996",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I wonder if we should have a more descriptive and less platform-dependent `kUsePlatformContextMenu` or something. I imagine this being used in other situations, such as links and images, and on other platforms, such as Flutter for desktop.",
        "createdAt" : "2019-08-29T15:06:05Z",
        "updatedAt" : "2019-08-29T22:21:58Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0ee01d4103bdc1ae737ec86eb3f82c5e87aa140",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +1703,1707 @@    // functionality depending on the browser (such as translate). Due to this\n    // we should not show a Flutter toolbar for the editable text elements.\n    if (kIsWeb) {\n      return false;\n    }"
  },
  {
    "id" : "78bdf31b-4eeb-4b8c-b87a-d5d9537247c8",
    "prId" : 40695,
    "prUrl" : "https://github.com/flutter/flutter/pull/40695#pullrequestreview-289561011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "148c7195-0917-40ca-87a8-293e95302f34",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "First call super.initState() and in dispose() call super.dispose() afterwards. This is boilerplate and docs like this will make it so :-)",
        "createdAt" : "2019-09-17T21:26:21Z",
        "updatedAt" : "2019-09-17T22:38:15Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "8a099664-35ff-449f-bd03-1fff512648ed",
        "parentId" : "148c7195-0917-40ca-87a8-293e95302f34",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Good call!",
        "createdAt" : "2019-09-17T21:36:42Z",
        "updatedAt" : "2019-09-17T22:38:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd2a3bbfc0dfbc3624a4736f049e7d1acb865ba",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +773,777 @@  /// void initState() {\n  ///   super.initState();\n  ///   _controller = TextEditingController();\n  /// }\n  ///"
  },
  {
    "id" : "78b36551-eee4-47b5-ba19-24ccffa73716",
    "prId" : 45354,
    "prUrl" : "https://github.com/flutter/flutter/pull/45354#pullrequestreview-327093644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3b024f7-aa2a-4b61-9b61-0651a9525f52",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Why did you create this method instead of handling the range as a parameter only?",
        "createdAt" : "2019-12-03T16:25:29Z",
        "updatedAt" : "2019-12-17T06:32:12Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "34b03496-a941-4595-8d36-146efc533f9c",
        "parentId" : "d3b024f7-aa2a-4b61-9b61-0651a9525f52",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "It's part of the `TextInputClient` interface now.",
        "createdAt" : "2019-12-03T19:42:50Z",
        "updatedAt" : "2019-12-17T06:32:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "a68a2f2f-62bc-446f-b2e3-081818e4917f",
        "parentId" : "d3b024f7-aa2a-4b61-9b61-0651a9525f52",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Oh I see, I didn't realize how that worked.  Thanks.",
        "createdAt" : "2019-12-04T19:23:55Z",
        "updatedAt" : "2019-12-17T06:32:12Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "495233d442afeab90178a337c17f03cba41e976b",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1837,1841 @@\n  @override\n  void showAutocorrectionPromptRect(int start, int end) {\n    setState(() {\n      _currentPromptRectRange = TextRange(start: start, end: end);"
  },
  {
    "id" : "815ba153-48c1-47cf-a8b3-15de043374d4",
    "prId" : 48917,
    "prUrl" : "https://github.com/flutter/flutter/pull/48917#pullrequestreview-354063491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66b34a96-2871-4e41-9a7b-4008bff11105",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Is null ok? If not, assert and also update the doc comment above?",
        "createdAt" : "2020-02-05T21:50:40Z",
        "updatedAt" : "2020-02-05T22:24:28Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4822286f54a6073dbd4db67bd1e557313a60f4",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +390,394 @@    this.cursorOffset,\n    this.paintCursorAboveText = false,\n    this.selectionHeightStyle = ui.BoxHeightStyle.tight,\n    this.selectionWidthStyle = ui.BoxWidthStyle.tight,\n    this.scrollPadding = const EdgeInsets.all(20.0),"
  },
  {
    "id" : "d600a80e-6b7a-4b45-8f90-6a5103c769af",
    "prId" : 51410,
    "prUrl" : "https://github.com/flutter/flutter/pull/51410#pullrequestreview-364242440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75bf2869-16e1-4da8-8583-d99d3226d554",
        "parentId" : null,
        "authorId" : "48e1b91d-64e2-4bb8-894c-50cce634bfa9",
        "body" : "Use /// for highlighting ",
        "createdAt" : "2020-02-25T15:37:53Z",
        "updatedAt" : "2020-02-26T09:48:41Z",
        "lastEditedBy" : "48e1b91d-64e2-4bb8-894c-50cce634bfa9",
        "tags" : [
        ]
      },
      {
        "id" : "1d99d649-1e76-4180-94df-9d1e398cfe64",
        "parentId" : "75bf2869-16e1-4da8-8583-d99d3226d554",
        "authorId" : "d48930d9-61da-495f-bdf6-e0405429cfbb",
        "body" : "This is a [comment](https://dart.dev/guides/language/effective-dart/documentation#do-format-comments-like-sentences) though and not a doc comment. So I'll keep it as it is.",
        "createdAt" : "2020-02-25T15:39:20Z",
        "updatedAt" : "2020-02-26T09:48:41Z",
        "lastEditedBy" : "d48930d9-61da-495f-bdf6-e0405429cfbb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bafd0d98a8984945df6de4c9ca576d79b9d17d0",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1537,1541 @@  void _handleSelectionChanged(TextSelection selection, RenderEditable renderObject, SelectionChangedCause cause) {\n    // We return early if the selection is not valid. This can happen when the\n    // text of [EditableText] is updated at the same time as the selection is\n    // changed by a gesture event.\n    if (!widget.controller.isSelectionWithinTextBounds(selection))"
  },
  {
    "id" : "f1a92b13-3ad9-42a6-a119-557737d006bd",
    "prId" : 51964,
    "prUrl" : "https://github.com/flutter/flutter/pull/51964#pullrequestreview-370623162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c96cea3-eaec-461d-aef4-d7da5fe25326",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "The first sentence isn't clear to me after reading. \"un-enclosed whitespace gets the directionality of the paragraph\"  sounds like that's a generally desired behavior. \"When typing in a direction that opposes the base direction of the paragraph\" maybe describe how you can cause this.",
        "createdAt" : "2020-03-06T21:00:15Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e179e4dbc6dcf579630dcbe26fe8b856770ef63",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +2158,2162 @@// whitespace is inserted.\n//\n// When typing in a direction that opposes the base direction\n// of the paragraph, un-enclosed whitespace gets the directionality\n// of the paragraph. This is often at odds with what is immeditely"
  },
  {
    "id" : "3634a9a3-789f-4ca6-b698-51e0ac6bad0d",
    "prId" : 51964,
    "prUrl" : "https://github.com/flutter/flutter/pull/51964#pullrequestreview-370627518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e64eee99-ea01-4258-b5ef-91a6e82cc990",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Also describe what the content glyphs are supposed to be since the next maintainers can't read this and/or know what's the suitable criteria to maintain this / add / remove items. ",
        "createdAt" : "2020-03-06T21:08:52Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e179e4dbc6dcf579630dcbe26fe8b856770ef63",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +2180,2184 @@  // ideographic scripts (Chinese, Japanese, etc), Cyrilic, Indic, and\n  // SE Asian scripts.\n  final RegExp _ltrRegExp = RegExp(r'[A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u2C00-\\uFB1C\\uFDFE-\\uFE6F\\uFEFD-\\uFFFF]');\n  // RTL covers Arabic, Hebrew, and other RTL languages such as Urdu,\n  // Aramic, Farsi, Dhivehi."
  },
  {
    "id" : "a3e4f362-ed83-4bec-a5b0-b21c7ae16efc",
    "prId" : 51964,
    "prUrl" : "https://github.com/flutter/flutter/pull/51964#pullrequestreview-371583683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7795bdf9-2a58-4183-8a24-7d0886861caa",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "If you have this comment, you should also explain why you're not just importing those consts instead.",
        "createdAt" : "2020-03-06T21:09:31Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "27c920b2-321d-4e85-a136-0b7352a4608c",
        "parentId" : "7795bdf9-2a58-4183-8a24-7d0886861caa",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Yeah will explain. Those consts in `Unicode` are actually strings, so not really usable without parsing them.",
        "createdAt" : "2020-03-06T21:23:27Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "b7c9d28b-4ffd-4785-a740-fe8a18672c58",
        "parentId" : "7795bdf9-2a58-4183-8a24-7d0886861caa",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "SG",
        "createdAt" : "2020-03-09T23:01:41Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e179e4dbc6dcf579630dcbe26fe8b856770ef63",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +2198,2202 @@  bool _hasOpposingDirection = false;\n\n  // See [Unicode.RLM] and [Unicode.LRM].\n  //\n  // We do not directly use the [Unicode] constants since they are strings."
  },
  {
    "id" : "c13e2f74-0fa8-4e28-b23e-d34b83a24ee7",
    "prId" : 51964,
    "prUrl" : "https://github.com/flutter/flutter/pull/51964#pullrequestreview-371583816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b31cd663-1820-4db5-b877-5789801377c9",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ah, you did it here. Can you benchmark the cost of this regex?",
        "createdAt" : "2020-03-06T21:10:32Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "e729d1ff-80fc-43a4-ab5a-58960d5442f1",
        "parentId" : "b31cd663-1820-4db5-b877-5789801377c9",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Don't have numbers but I expect this to just be an O(N) single pass. Will update with more solid numbers.",
        "createdAt" : "2020-03-07T01:26:29Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "75a01bbf-c5bf-49a8-a786-a7279f8c7b2d",
        "parentId" : "b31cd663-1820-4db5-b877-5789801377c9",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Ok, so ran both regexes on a string of 235million long simple english string on my desktop, clocked in at ~439ms, so ~215ms for one pass of the regex 235million long strings. Just under 1ms/million characters.\r\n\r\n10million runs of both regexes on 20k strings took ~398ms.",
        "createdAt" : "2020-03-07T01:56:50Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "6c22af42-7ed0-408c-9b4a-0890f54d3383",
        "parentId" : "b31cd663-1820-4db5-b877-5789801377c9",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "great, thanks for checking",
        "createdAt" : "2020-03-09T23:02:04Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e179e4dbc6dcf579630dcbe26fe8b856770ef63",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +2212,2216 @@    // mixing directionality. Once a case of mixed directionality is found,\n    // always perform the formatting.\n    if (!_hasOpposingDirection) {\n      _hasOpposingDirection = _baseDirection == TextDirection.ltr ?\n        _rtlRegExp.hasMatch(newValue.text) : _ltrRegExp.hasMatch(newValue.text);"
  },
  {
    "id" : "84439442-f73c-42f5-8303-f3ed4359e1bb",
    "prId" : 52126,
    "prUrl" : "https://github.com/flutter/flutter/pull/52126#pullrequestreview-389404435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "815d074f-0c27-470d-a45e-8d0648fc18b4",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Why is this an Iterable and not specifically a List?",
        "createdAt" : "2020-04-07T18:07:17Z",
        "updatedAt" : "2020-04-16T19:27:44Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "870bc318-10c8-42a6-9497-62ff41c12a76",
        "parentId" : "815d074f-0c27-470d-a45e-8d0648fc18b4",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The hints collection does not need random access.",
        "createdAt" : "2020-04-07T18:59:18Z",
        "updatedAt" : "2020-04-16T19:27:44Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "1260a8083a4a98db54114f4091a6f52703a70b24",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1097,1101 @@  /// {@macro flutter.services.autofill.autofillHints}\n  /// {@endtemplate}\n  final Iterable<String> autofillHints;\n\n  @override"
  },
  {
    "id" : "2fefbebf-a3d4-48cf-bca8-cdba642ea9ef",
    "prId" : 52366,
    "prUrl" : "https://github.com/flutter/flutter/pull/52366#pullrequestreview-372909498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80aec3a6-2013-4ddf-a549-f74cc0d07e64",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "it's missing a word after the `be`",
        "createdAt" : "2020-03-11T16:11:13Z",
        "updatedAt" : "2020-03-11T18:21:11Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b6556c39f58de82a5d7c2658e23896b2d0e56ef",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1226,1230 @@  // that the formatter ran on and is used to prevent double-formatting.\n  TextEditingValue _lastFormattedUnmodifiedTextEditingValue;\n  // _lastFormattedValue tracks the last post-format value, so that it can be\n  // reused without rerunning the formatter when the input value is repeated.\n  TextEditingValue _lastFormattedValue;"
  },
  {
    "id" : "bdc025ce-701f-4623-916c-7d69c1cfcb71",
    "prId" : 52366,
    "prUrl" : "https://github.com/flutter/flutter/pull/52366#pullrequestreview-373007830",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67dff40f-7c51-43ee-8658-92b14be262e5",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Is it ok if either of these is true in a `null == null` situation?",
        "createdAt" : "2020-03-11T16:24:39Z",
        "updatedAt" : "2020-03-11T18:21:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "57e61f9a-1258-4a34-b74b-103bcf549e02",
        "parentId" : "67dff40f-7c51-43ee-8658-92b14be262e5",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Yeah, the `.text` and `.selection` values are asserted to be non-null and if the entire value passed is null, then that is a case of repeat that we want to filter as we would already know what the formatted result is.",
        "createdAt" : "2020-03-11T18:12:02Z",
        "updatedAt" : "2020-03-11T18:21:11Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b6556c39f58de82a5d7c2658e23896b2d0e56ef",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1650,1654 @@    final bool textChanged = _value?.text != value?.text;\n    final bool isRepeatText = value?.text == _lastFormattedUnmodifiedTextEditingValue?.text;\n    final bool isRepeatSelection = value?.selection == _lastFormattedUnmodifiedTextEditingValue?.selection;\n    // Only format when the text has changed and there are available formatters.\n    if (!isRepeatText && textChanged && widget.inputFormatters != null && widget.inputFormatters.isNotEmpty) {"
  },
  {
    "id" : "375d60ee-0779-47ab-a2a2-eceb2a2e1267",
    "prId" : 52765,
    "prUrl" : "https://github.com/flutter/flutter/pull/52765#pullrequestreview-377204571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14b03cb4-4ea2-4364-b6b9-9cd79273eb62",
        "parentId" : null,
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Added checks to ensure composing regions are also updated.",
        "createdAt" : "2020-03-18T20:19:04Z",
        "updatedAt" : "2020-03-18T20:38:05Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dab8c49d2c3e36b14d5bbef895287bd968520b56",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1666,1670 @@    final bool isRepeatText = value?.text == _lastFormattedUnmodifiedTextEditingValue?.text;\n    final bool isRepeatSelection = value?.selection == _lastFormattedUnmodifiedTextEditingValue?.selection;\n    final bool isRepeatComposing = value?.composing == _lastFormattedUnmodifiedTextEditingValue?.composing;\n    // Only format when the text has changed and there are available formatters.\n    if (!isRepeatText && textChanged && widget.inputFormatters != null && widget.inputFormatters.isNotEmpty) {"
  },
  {
    "id" : "bfdc2592-93c7-4e03-8168-dffbb79c226e",
    "prId" : 52765,
    "prUrl" : "https://github.com/flutter/flutter/pull/52765#pullrequestreview-377204714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cab8b002-918f-4bc1-9a2d-05c0dff8de95",
        "parentId" : null,
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Also track composing region here",
        "createdAt" : "2020-03-18T20:19:18Z",
        "updatedAt" : "2020-03-18T20:38:05Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dab8c49d2c3e36b14d5bbef895287bd968520b56",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +2226,2230 @@      int selectionBase = newValue.selection.baseOffset;\n      int selectionExtent = newValue.selection.extentOffset;\n      int composingStart = newValue.composing.start;\n      int composingEnd = newValue.composing.end;\n"
  },
  {
    "id" : "c59e7142-ff22-47f3-ada0-874c96b891aa",
    "prId" : 53974,
    "prUrl" : "https://github.com/flutter/flutter/pull/53974#pullrequestreview-389460807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a954ea05-cf64-44e3-b5b6-e7af590c0200",
        "parentId" : null,
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "The main change in this PR is here, where we no longer gate on isRepeatText, which was preventing the formatter from receiving backspace cases where the input before and after the backspace is the same. Handling for this was moved to the engine PR linked.",
        "createdAt" : "2020-04-07T20:21:46Z",
        "updatedAt" : "2020-04-07T20:21:47Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1ddd831b65643aaa142880b7947dcb1b2462a7b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1666,1670 @@    final bool isRepeat = value == _lastFormattedUnmodifiedTextEditingValue;\n\n    if (textChanged && widget.inputFormatters != null && widget.inputFormatters.isNotEmpty) {\n      // Only format when the text has changed and there are available formatters.\n      // Pass through the formatter regardless of repeat status if the input value is"
  },
  {
    "id" : "0523d29e-54db-48e9-b8fe-a250fbe0a2f8",
    "prId" : 54902,
    "prUrl" : "https://github.com/flutter/flutter/pull/54902#pullrequestreview-403911773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89996645-0b02-4724-9e8d-7dee5470c365",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Good catch, looks like we forgot to add this earlier...",
        "createdAt" : "2020-04-30T18:16:49Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "21ced94d-0ff7-444e-ad88-ef3a2c880f01",
        "parentId" : "89996645-0b02-4724-9e8d-7dee5470c365",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Yeah I lucked into noticing that!",
        "createdAt" : "2020-04-30T22:09:39Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "722ad5adde3d77633618e0d10f9a0707c9056dfb",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +1296,1300 @@    _focusAttachment.detach();\n    widget.focusNode.removeListener(_handleFocusChanged);\n    WidgetsBinding.instance.removeObserver(this);\n    _clipboardStatus.removeListener(_onChangedClipboardStatus);\n    _clipboardStatus.dispose();"
  },
  {
    "id" : "1d4c8ebc-dca4-4487-992a-283287fbd230",
    "prId" : 54902,
    "prUrl" : "https://github.com/flutter/flutter/pull/54902#pullrequestreview-403911981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22ad4c1b-b01d-41ab-b098-74c54943579c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "dispose the _clipboardStatus since you own it?",
        "createdAt" : "2020-04-30T18:17:39Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d89cd2b0-f161-48ac-aef8-76fb0efb28b8",
        "parentId" : "22ad4c1b-b01d-41ab-b098-74c54943579c",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "👍 See https://github.com/flutter/flutter/pull/54902#discussion_r418316612",
        "createdAt" : "2020-04-30T22:10:03Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "722ad5adde3d77633618e0d10f9a0707c9056dfb",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1297,1301 @@    widget.focusNode.removeListener(_handleFocusChanged);\n    WidgetsBinding.instance.removeObserver(this);\n    _clipboardStatus.removeListener(_onChangedClipboardStatus);\n    _clipboardStatus.dispose();\n    super.dispose();"
  },
  {
    "id" : "7aeb74f9-7564-4add-87ff-904481b5997e",
    "prId" : 55415,
    "prUrl" : "https://github.com/flutter/flutter/pull/55415#pullrequestreview-398667717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37d96755-e5c8-47c6-99ba-fd3ea74fbe96",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "missing `{@endtemplate}`\r\n",
        "createdAt" : "2020-04-23T00:13:11Z",
        "updatedAt" : "2020-04-23T21:45:25Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "987607a23138979deff4c51bd8f98f68e3b4525b",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +472,476 @@  /// Must be only a single character.\n  ///\n  /// Defaults to the character U+2022 BULLET (•).\n  /// {@endtemplate}\n  final String obscuringCharacter;"
  },
  {
    "id" : "3990d29c-3e95-4b1c-a03d-780e68c4b931",
    "prId" : 56641,
    "prUrl" : "https://github.com/flutter/flutter/pull/56641#pullrequestreview-420573142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee709b97-58b1-4247-905c-198f39e0c564",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "There're surprisingly many `UITextContentType`s that don't trigger autofill (at least I couldn't find a way to, I had added all the fields, middle name, name prefix, etc., in Contacts). Maybe I should rename the field to `textContentType`?",
        "createdAt" : "2020-05-08T07:59:21Z",
        "updatedAt" : "2020-05-14T18:02:21Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "47ed9e8c-37fa-4022-b431-4466e969bb31",
        "parentId" : "ee709b97-58b1-4247-905c-198f39e0c564",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Not sure what `textContentType` field you're referring to. Calling the enum that's used to select a keyboard `TextInputType` seems reasonable to me.",
        "createdAt" : "2020-05-29T00:10:33Z",
        "updatedAt" : "2020-05-29T00:11:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c36b639833317218084d84184a4fbea41dd0a0b",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +1149,1153 @@          const Map<String, TextInputType> iOSKeyboardType = <String, TextInputType> {\n            AutofillHints.addressCity : TextInputType.name,\n            AutofillHints.addressCityAndState : TextInputType.name, // Autofill not working.\n            AutofillHints.addressState : TextInputType.name,\n            AutofillHints.countryName : TextInputType.name,"
  },
  {
    "id" : "cbacd623-cb43-4001-9fb4-5686796c551a",
    "prId" : 56794,
    "prUrl" : "https://github.com/flutter/flutter/pull/56794#pullrequestreview-410323022",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ece8296-e08b-4f65-98de-b25231d94816",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "It sounds like we should make sure that we get these platforms correct.\r\n\r\n@yjbanov You [commented](https://github.com/flutter/flutter/issues/51218#issuecomment-592230646) about this not being an issue on web.  Do you want the behavior to stay as-is on web?  Or @goderbauer mentioned that Safari on iOS shows the last character, do we want to try to match that specific behavior?",
        "createdAt" : "2020-05-12T18:42:49Z",
        "updatedAt" : "2020-06-05T17:25:45Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "1eb347a942e3f811f876aef296342df30a853553",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2134,2138 @@              defaultTargetPlatform == TargetPlatform.iOS ||\n              defaultTargetPlatform == TargetPlatform.fuchsia) &&\n          !kIsWeb) {\n        final int o =\n            _obscureShowCharTicksPending > 0 ? _obscureLatestCharIndex : null;"
  },
  {
    "id" : "d75d6e51-19e9-40a6-8ff6-545a3be2f336",
    "prId" : 57628,
    "prUrl" : "https://github.com/flutter/flutter/pull/57628#pullrequestreview-418734385",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87e5fb3f-074e-4e59-b478-31e64f088646",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2020-05-26T23:38:17Z",
        "updatedAt" : "2020-05-28T18:29:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "86fded36a29d23359212aa409a3cc6abf7af7107",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +986,990 @@  /// If this property is null, [SystemMouseCursors.text] will be used.\n  ///\n  /// The [mouseCursor] is the only property of [EditableText] that controls the\n  /// mouse pointer. All other properties related to \"cursor\" stands for the text\n  /// cursor, which is usually a blinking vertical line at the editing position."
  },
  {
    "id" : "5f0f695c-ed29-44a1-9010-e90fe074ecb4",
    "prId" : 58346,
    "prUrl" : "https://github.com/flutter/flutter/pull/58346#pullrequestreview-421967177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a19da06-1b16-48c7-97e3-cc90d226b8fb",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Cool way of doing this that I haven't seen before 👍 ",
        "createdAt" : "2020-06-01T15:51:17Z",
        "updatedAt" : "2020-06-01T15:55:54Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "d05af88924a2bcba855aefc669ccb171cac9fb7f",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1511,1515 @@        // Valid additional offsets range from (rect.right - size.width)\n        // to (rect.left). Pick the closest one if out of range.\n        : 0.0.clamp(rect.right - editableSize.width, rect.left) as double;\n      unitOffset = const Offset(1, 0);\n    } else {"
  },
  {
    "id" : "a0861643-336d-4ee2-bd83-659c28fe9e1f",
    "prId" : 58731,
    "prUrl" : "https://github.com/flutter/flutter/pull/58731#pullrequestreview-441272897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c60a730b-874c-4a88-839e-c6dee2c0cdc7",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "_isInAutofillContext can never be set to false once it becomes true, is that right?",
        "createdAt" : "2020-07-01T23:10:29Z",
        "updatedAt" : "2020-07-17T23:26:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "76d394c7-3e1d-43a2-8662-2b6bf2bfb20c",
        "parentId" : "c60a730b-874c-4a88-839e-c6dee2c0cdc7",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Yes. If a text field's was in the current autofill context, and then its autofill gets disabled (by setting `autofillHints` to null), the engine needs to remove it from the autofill context. It lets the engine know by sending its new `TextInputConfiguration`, instead of remain silent in which case the engine will just assume the text field is gone and it will keep the old user input (See line 1528).",
        "createdAt" : "2020-07-02T00:21:16Z",
        "updatedAt" : "2020-07-17T23:26:01Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "04b5ab74d5fa47ca1c2c269a9d99b74de602b9ca",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1408,1412 @@      _currentAutofillScope = newAutofillGroup;\n      newAutofillGroup?.register(this);\n      _isInAutofillContext = _isInAutofillContext || _shouldBeInAutofillContext;\n    }\n"
  },
  {
    "id" : "64a1e684-eb4c-4072-85eb-728a19090bb9",
    "prId" : 60956,
    "prUrl" : "https://github.com/flutter/flutter/pull/60956#pullrequestreview-444170518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2406f64d-9819-4b2f-a91c-81ded27dac3f",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "It's somewhat confusing that `value.composing.isValid` and `value.isComposingRangeValid` seem so similar but mean different things.  I can't think of a way to make it more clear though 🤷 ",
        "createdAt" : "2020-07-07T15:27:54Z",
        "updatedAt" : "2020-07-07T15:31:59Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "533f81c8-d74c-4221-a39f-5e8509b72a44",
        "parentId" : "2406f64d-9819-4b2f-a91c-81ded27dac3f",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I guess we could use null to represent an editing value that has no composing range. That would be a breaking change.",
        "createdAt" : "2020-07-07T17:28:49Z",
        "updatedAt" : "2020-07-07T17:28:49Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "9b886462-4388-436c-8096-85d24f724246",
        "parentId" : "2406f64d-9819-4b2f-a91c-81ded27dac3f",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Probably not worth it.",
        "createdAt" : "2020-07-07T19:03:53Z",
        "updatedAt" : "2020-07-07T19:03:53Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "d46fa51d8cfcb74a3e948d42d62c0455889bb998",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +136,140 @@  TextEditingController.fromValue(TextEditingValue value)\n    : assert(\n        value == null || !value.composing.isValid || value.isComposingRangeValid,\n        'New TextEditingValue $value has an invalid non-empty composing range '\n        '${value.composing}. It is recommended to use a valid composing range, '"
  },
  {
    "id" : "ea11f05f-8d65-4c8e-b8f6-3d66c9a8b73a",
    "prId" : 61981,
    "prUrl" : "https://github.com/flutter/flutter/pull/61981#pullrequestreview-458812262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1087aadd-e120-4169-9562-bba56ec05def",
        "parentId" : null,
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Can this lag cause jitter when the true information is received? 1 frame swapping between an estimate and true info may be a source of jank.",
        "createdAt" : "2020-07-30T21:57:15Z",
        "updatedAt" : "2020-09-23T00:01:39Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "0d909a8e-8646-4f28-89e7-daa2ec7e1cd0",
        "parentId" : "1087aadd-e120-4169-9562-bba56ec05def",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The \"true\" information does not trigger a UI update of any sort when it's sent to the platform. It will be used as an estimate the next time iOS requests this information. ",
        "createdAt" : "2020-07-30T22:41:42Z",
        "updatedAt" : "2020-09-23T00:01:39Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccd1dc18c7d2a8c39ae69b0570d5715b0a16e362",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +2299,2303 @@  // input channel. We need to keep sending the information even if no text is\n  // currently marked, as the information usually lags behind. The text input\n  // plugin needs to estimate the composing rect based on the latest caret rect,\n  // when the composing rect info didn't arrive in time.\n  void _updateComposingRectIfNeeded() {"
  },
  {
    "id" : "3cdf082e-8909-438c-b0c7-15811347760b",
    "prId" : 61981,
    "prUrl" : "https://github.com/flutter/flutter/pull/61981#pullrequestreview-491802132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "579ddeb8-1370-44c9-ad19-aba883e80b5d",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Nice way of getting rid of all of the exclamation marks elsewhere in the file.  I'm still figuring out all of the NNBD stuff but it's looking pretty slick.",
        "createdAt" : "2020-09-18T21:47:37Z",
        "updatedAt" : "2020-09-23T00:01:39Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccd1dc18c7d2a8c39ae69b0570d5715b0a16e362",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +2329,2333 @@  /// This property is typically used to notify the renderer of input gestures\n  /// when [RenderEditable.ignorePointer] is true.\n  RenderEditable get renderEditable => _editableKey.currentContext!.findRenderObject()! as RenderEditable;\n\n  @override"
  },
  {
    "id" : "a05730c8-5020-479c-a95a-acbfd6a25e5c",
    "prId" : 62712,
    "prUrl" : "https://github.com/flutter/flutter/pull/62712#pullrequestreview-512899543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f8a76b6-656e-49b6-bdc9-9999497cda2d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Any chance we can have this documentation elaborated? It doesn't really follow our style guide, which requires that documentation be more detailed than could be guessed just from the name. :-)",
        "createdAt" : "2020-10-19T22:57:23Z",
        "updatedAt" : "2020-10-19T22:57:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f7e128c6-22bb-476c-a7fd-4154eb0316d5",
        "parentId" : "5f8a76b6-656e-49b6-bdc9-9999497cda2d",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Good call, I'll open a quick PR to elaborate on this.",
        "createdAt" : "2020-10-20T16:05:09Z",
        "updatedAt" : "2020-10-20T16:05:09Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "6de0b08e200a9412b65f8415af5584fe4a978619",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1038,1042 @@  /// Called when the result of an app private command is received.\n  /// {@endtemplate}\n  final AppPrivateCommandCallback onAppPrivateCommand;\n\n  /// Called when the user changes the selection of text (including the cursor"
  },
  {
    "id" : "2e321682-448b-42dd-b188-3f145af1616e",
    "prId" : 63786,
    "prUrl" : "https://github.com/flutter/flutter/pull/63786#pullrequestreview-469701410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf434d18-1219-4a5c-815f-8b3ea2ac34fd",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Should the last three use-cases use the `SelectableText` infrastructure in the case of read-only input?",
        "createdAt" : "2020-08-17T22:57:19Z",
        "updatedAt" : "2020-08-19T18:58:27Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "22a6f3c4-5045-4159-b556-33a4501f6f40",
        "parentId" : "bf434d18-1219-4a5c-815f-8b3ea2ac34fd",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "It's the other way around. The `SelectableText` widget is the one using read-only field infrastructure :)",
        "createdAt" : "2020-08-18T18:05:14Z",
        "updatedAt" : "2020-08-19T18:58:27Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "45e86d1455d3e6a3b516f43dc1d380f5e23da9c7",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1454,1458 @@  /// - cmd/ctrl+c shortcut to copy.\n  /// - cmd/ctrl+a to select all.\n  /// - Changing the selection using a physical keyboard.\n  bool get _shouldCreateInputConnection => kIsWeb || !widget.readOnly;\n"
  },
  {
    "id" : "e7a03c8f-0cea-486d-a5da-a870040f4df8",
    "prId" : 65127,
    "prUrl" : "https://github.com/flutter/flutter/pull/65127#pullrequestreview-481381262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30543a4d-a35f-4f47-96ed-0afea22cd715",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Does the web go through the text input client instead of raw keyboard event?",
        "createdAt" : "2020-09-02T22:40:13Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "f72e7685-f62e-4d56-9000-d3f6474be682",
        "parentId" : "30543a4d-a35f-4f47-96ed-0afea22cd715",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Yes. All keyboard interactions with the text field are handled by the browser and we only receive the result of the change. e.g. If the user clicks \"shift+right arrow\", we receive an event from the browser telling us that selection has changed, so we read the new selection state from the input field and we send it to Flutter through the text input client.",
        "createdAt" : "2020-09-02T23:30:43Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "055ac891823d1598f32d0fc258fe0cb1ee3c8c97",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1644,1648 @@    }\n\n    if (_isSelectionOnlyChange(value)) {\n      _handleSelectionChanged(value.selection, renderEditable, SelectionChangedCause.keyboard);\n    } else {"
  },
  {
    "id" : "f8a9980d-8884-4a4a-aed6-0020fa1af8d0",
    "prId" : 65127,
    "prUrl" : "https://github.com/flutter/flutter/pull/65127#pullrequestreview-485403797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "This also attempt to sync the remove editing value in the embedding side, I think we should still need to do that if it is a selection change? cc @gspencergoog .",
        "createdAt" : "2020-09-02T22:45:46Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "54c4756a-55e2-49b9-b925-fa2723bc1695",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "What is a \"remove editing value\"? Shouldn't it send a `TextEditingValue` with an empty `text` in that case? And that would fail the `_isSelectionOnlyChange` check.",
        "createdAt" : "2020-09-03T20:27:42Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "c295bfb6-0306-4b8b-819f-9560ec4e4821",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "@chunhtai can you explain what you mean again?  I'm not sure I understand exactly what you're referring to.",
        "createdAt" : "2020-09-09T17:34:24Z",
        "updatedAt" : "2020-09-09T17:34:25Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "11c295c7-367a-4010-b941-fc0a77093ca9",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "sorry it is a typo, i meant the remote editing value. The formatAndSetValue also called _updateRemoteEditingValueIfNeeded\r\nhttps://github.com/flutter/flutter/blob/9e315985d0788ee04df48559896be46225ecf2f5/packages/flutter/lib/src/widgets/editable_text.dart#L1804\r\n\r\nThis will attempt to sync the current editing value to the embedding. I was wondering if selection only change needs to be sync to the embedding as well.",
        "createdAt" : "2020-09-09T17:58:30Z",
        "updatedAt" : "2020-09-09T17:58:31Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "05ca3fe2-ad8c-4b1f-a652-6745fd2cdf98",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, it does, because otherwise the next editing operation won't operate on the same selection in both places.",
        "createdAt" : "2020-09-09T18:03:25Z",
        "updatedAt" : "2020-09-09T18:03:25Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "c0fbe1c6-41d9-4aaf-8364-d1a4f5ffdb51",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "After receiving a new value from embedding, if it's a selection-only change, we won't be formatting the text. Which means that `_value` and `_receivedRemoteTextEditingValue` are certainly the same. Is there something I'm missing?",
        "createdAt" : "2020-09-09T18:07:40Z",
        "updatedAt" : "2020-09-09T18:07:40Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "36dcee0c-64a5-41ac-99d8-f134b7443244",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "If I understand correctly, the only reason we may want to update remote editing value is when the text formatting causes changes in the editing value, so we send it to the embedding to avoid getting out-of-sync.",
        "createdAt" : "2020-09-09T18:09:23Z",
        "updatedAt" : "2020-09-09T18:09:24Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "964dc270-0c20-437b-a85e-55c5cbe7bbfa",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I took a look at the code in engine https://github.com/flutter/engine/blob/f7c7b41f0a0c72163d749321d070880fcac6402d/shell/platform/android/io/flutter/plugin/editing/TextInputPlugin.java#L577\r\nIt looks like we care about the selection value. I was under the impression that the engine should sync its own editing value before sending the updateEditingValue to the framework, but i couldn't find the code that does that. So It seems like we do need to call _updateRemoteEditingValueIfNeeded somewhere even if it is a selection only change? ",
        "createdAt" : "2020-09-09T18:16:03Z",
        "updatedAt" : "2020-09-09T18:16:55Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "0c098f7d-6ecc-4688-af69-ac0c6c8c5a1a",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "The `TextEditingValue` includes the current selection.  So a \"selection only\" change does cause a change to `_value` or `_receivedRemoteTextEditingValue`, which then needs to be synced.",
        "createdAt" : "2020-09-09T18:18:16Z",
        "updatedAt" : "2020-09-09T18:18:17Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "385e128f-8c4d-4dfa-b1a8-4966fb3e49ac",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Maybe we're all in agreement here that it needs to be synced? I somehow feel like we're all saying the same thing...",
        "createdAt" : "2020-09-09T18:19:26Z",
        "updatedAt" : "2020-09-09T18:19:27Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "3bd7180d-a063-42a4-96a8-a23834b2419f",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "ah I see, the updateEditingState is sent with the value inside the embedding, so it is already the same. yes, we don't need to sync it in this case.",
        "createdAt" : "2020-09-09T18:23:35Z",
        "updatedAt" : "2020-09-09T18:23:45Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "b2ef1d67-469f-48ee-a1d8-08a8da891d45",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Ok, let me try to clarify a bit. I think we are using the word \"sync\" which has many meanings in this context.\r\n\r\nOn the framework side, we keep two variables:\r\n- `_value`: The current editing value on the framework side.\r\n- `_receivedRemoteTextEditingValue`: This is what the framework thinks is the current editing value on the engine side.\r\n\r\nWhenever the editing value changes in the engine, it sends an `updateEditingValue` message to the framework. The framework then sets `_receivedRemoteTextEditingValue` to the new value received from the engine (this is one meaning of \"sync\"). Then the framework tries to format the text of the new editing value received from the engine. If the formatting causes changes to the editing value (i.e. `_value` != `_receivedRemoteTextEditingValue`) then the framework sends the new (formatted) `_value` to the engine via `_updateRemoteEditingValueIfNeeded` (another meaning of \"sync\").\r\n\r\nIn the case of this PR, a selection-only change means there'll be no formatting changes, hence `_value` and `_receivedRemoteTextEditingValue` are guaranteed to be the same. So there's no need to call `_updateRemoteEditingValueIfNeeded` to \"sync\" the editing value back to the engine.",
        "createdAt" : "2020-09-09T18:43:00Z",
        "updatedAt" : "2020-09-09T18:43:01Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "1fba870c-2fa8-4e36-8a24-82c6fd494b70",
        "parentId" : "60c15fdc-1954-4e81-ae26-105eaf2479cb",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Thanks for the clarification. Makes sense now. LGTM.",
        "createdAt" : "2020-09-09T21:06:24Z",
        "updatedAt" : "2020-09-09T21:06:25Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "055ac891823d1598f32d0fc258fe0cb1ee3c8c97",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1647,1651 @@      _handleSelectionChanged(value.selection, renderEditable, SelectionChangedCause.keyboard);\n    } else {\n      _formatAndSetValue(value);\n    }\n"
  },
  {
    "id" : "c5410d24-1307-4c25-a14f-4c4be83c2970",
    "prId" : 65499,
    "prUrl" : "https://github.com/flutter/flutter/pull/65499#pullrequestreview-485453780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b64bbaf-80a9-42f0-a776-a01de72d128d",
        "parentId" : null,
        "authorId" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "body" : "question: what is `oldwidget`?",
        "createdAt" : "2020-09-09T20:20:43Z",
        "updatedAt" : "2020-09-17T17:28:33Z",
        "lastEditedBy" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "tags" : [
        ]
      },
      {
        "id" : "9fe4188c-b97c-4867-a4ed-f49b1fff0960",
        "parentId" : "8b64bbaf-80a9-42f0-a776-a01de72d128d",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "it is the original widget before the update",
        "createdAt" : "2020-09-09T20:41:56Z",
        "updatedAt" : "2020-09-17T17:28:33Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "fcd0f1ee-44bd-4762-83c6-a4a99cfeaa52",
        "parentId" : "8b64bbaf-80a9-42f0-a776-a01de72d128d",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "This is a stateful widget, which means the `state` instance remains alive even if you build `EditableText` multiple times. So when you do:\r\n```dart\r\nWidget build(BuildContext context) {\r\n  return EditableText(\r\n    readOnly: true,\r\n    ...\r\n  );\r\n}\r\n```\r\n^ this `EditableText` instance becomes the new value for `widget`, and the `EditableText` instance from the previous build is available in `oldWidget`.",
        "createdAt" : "2020-09-09T22:47:53Z",
        "updatedAt" : "2020-09-17T17:28:33Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "177f712c4eec4d47b7f1254abf6b4213abbe61ec",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1562,1566 @@      _closeInputConnectionIfNeeded();\n    } else {\n      if (oldWidget.readOnly && _hasFocus) {\n        _openInputConnection();\n      }"
  },
  {
    "id" : "d67d2357-c733-4911-9aa2-de742f80e58d",
    "prId" : 65754,
    "prUrl" : "https://github.com/flutter/flutter/pull/65754#pullrequestreview-487979303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4325c868-c474-4986-b30f-028fe4044dad",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "This PR really reminds me of this issue, which also deals with the asynchronous communication between the engine and framework: https://github.com/flutter/flutter/issues/61282\r\n\r\nMy solution there wasn't anything like this PR, but I think using this flag `_updateEditingValueInProgress` could maybe help us handle problems like that.",
        "createdAt" : "2020-09-14T17:29:44Z",
        "updatedAt" : "2020-09-17T02:13:00Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "a88c992056c222a87ef2f79b97734caccc2569a0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1621,1625 @@  TextEditingValue get currentTextEditingValue => _value;\n\n  bool _updateEditingValueInProgress = false;\n\n  @override"
  },
  {
    "id" : "14e18420-da19-43f5-b92e-4ae7c650e700",
    "prId" : 66864,
    "prUrl" : "https://github.com/flutter/flutter/pull/66864#pullrequestreview-499048237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43651e88-3e6a-41cd-8183-b3e8dbef4b8a",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "This is a bit questionable.  For example if `inputFormatters` is updated and the same `TextEditingValue` is received a second time it should probably not shortcircuit.",
        "createdAt" : "2020-09-29T00:04:53Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "7658b001-bec6-4b74-8200-c6d667e31fac",
        "parentId" : "43651e88-3e6a-41cd-8183-b3e8dbef4b8a",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "It was recently added in https://github.com/flutter/flutter/pull/65754.  I'm not sure what's up with the numeric keyboard problem.",
        "createdAt" : "2020-09-30T00:31:38Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "bf283a88-4600-48a2-a378-58c6c78bac86",
        "parentId" : "43651e88-3e6a-41cd-8183-b3e8dbef4b8a",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "> This is a bit questionable. For example if `inputFormatters` is updated and the same `TextEditingValue` is received a second time it should probably not shortcircuit.\r\n\r\nYes, the situation you said should not be short-circuited. Maybe we should go through `_formatAndSetValue` if we receive duplicate values at this situation. Can we add a test case to test the situation you said?\r\nThere is also a scenario where duplicate values will be received. When the keyboard is hidden, the engine will send the current value again. #66036 ",
        "createdAt" : "2020-09-30T02:43:01Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      }
    ],
    "commit" : "306832f8225f09e732fb06db5755c9ac5a3fa2f8",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +1691,1695 @@    _lastKnownRemoteTextEditingValue = value;\n\n    if (value == _value) {\n      // This is possible, for example, when the numeric keyboard is input,\n      // the engine will notify twice for the same value."
  },
  {
    "id" : "903072ad-98a3-4ef2-9e66-cdb1a09c5b71",
    "prId" : 66864,
    "prUrl" : "https://github.com/flutter/flutter/pull/66864#pullrequestreview-501494612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bad71a9c-39ff-40cd-8622-3077ffbb4169",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Do we need to update the formatter (and reapply it) when `_textDirection` changes?",
        "createdAt" : "2020-09-29T00:05:48Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "c87f3cf5-4c5d-46fc-adad-50a3dea4d785",
        "parentId" : "bad71a9c-39ff-40cd-8622-3077ffbb4169",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "It's possible to write a formatter that does something different depending on the text direction, right?  If so I would say yes we need to reapply it.  But I can't think of a real world example.  Maybe open an issue for it for another PR.",
        "createdAt" : "2020-09-30T00:36:40Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "7d62d9a9-e572-43af-9c42-00480a8e8db3",
        "parentId" : "bad71a9c-39ff-40cd-8622-3077ffbb4169",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I didn't take a very careful look but `_WhitespaceDirectionalityFormatter` maintains states and may need to be re-instantiated and re-applied.",
        "createdAt" : "2020-10-02T23:31:13Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "306832f8225f09e732fb06db5755c9ac5a3fa2f8",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +2216,2220 @@  }\n\n  late final _WhitespaceDirectionalityFormatter _whitespaceFormatter = _WhitespaceDirectionalityFormatter(textDirection: _textDirection);\n\n  void _formatAndSetValue(TextEditingValue value) {"
  },
  {
    "id" : "29acceca-31a0-4a50-820b-3aca6f2284c8",
    "prId" : 66864,
    "prUrl" : "https://github.com/flutter/flutter/pull/66864#pullrequestreview-497976634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06ac083c-89a1-4ddf-a144-07479d76505e",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The logic here is a bit different. We used to skip the `_whitespaceFormatter` when there's no other formatters.",
        "createdAt" : "2020-09-29T00:06:51Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "306832f8225f09e732fb06db5755c9ac5a3fa2f8",
    "line" : 308,
    "diffHunk" : "@@ -1,1 +2234,2238 @@      // Always pass the text through the whitespace directionality formatter to\n      // maintain expected behavior with carets on trailing whitespace.\n      value = _whitespaceFormatter.formatEditUpdate(_value, value);\n    }\n"
  },
  {
    "id" : "8e88acb2-25b9-403b-95b8-54097ea22aa7",
    "prId" : 66864,
    "prUrl" : "https://github.com/flutter/flutter/pull/66864#pullrequestreview-499002723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cdb281b-f728-4869-98a1-0aa44198ef78",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Removing the formatter caching altogether. I think a `TextInputFormatter` is allowed to have states? If that's the case we shouldn't cache the formatter outputs.",
        "createdAt" : "2020-09-29T19:42:36Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "af44e55f-0ed9-47a6-9c65-7f6727e56047",
        "parentId" : "0cdb281b-f728-4869-98a1-0aa44198ef78",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I could imagine a formatter that has state.  Not sure what Flutter's opinion on that is, though.",
        "createdAt" : "2020-09-30T00:37:32Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "306832f8225f09e732fb06db5755c9ac5a3fa2f8",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +2221,2225 @@    // Check if the new value is the same as the current local value, or is the same\n    // as the pre-formatting value of the previous pass (repeat call).\n    final bool textChanged = _value.text != value.text || _value.composing != value.composing;\n\n    if (textChanged) {"
  },
  {
    "id" : "a42d7757-22a1-4ee8-9c74-5433faab0085",
    "prId" : 66864,
    "prUrl" : "https://github.com/flutter/flutter/pull/66864#pullrequestreview-499002723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ae0fd4b-7fbb-4fc9-ae5e-f04ed89047d6",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Should `inputFormatters` work retroactively?",
        "createdAt" : "2020-09-29T19:51:54Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "aafe955f-5838-4f02-89eb-5c17a4a67a89",
        "parentId" : "9ae0fd4b-7fbb-4fc9-ae5e-f04ed89047d6",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Good question...  I'm not sure.  I guess it would be easy for the user to apply their input formatter to the existing text if they want to.  Maybe some users are doing that now.  I guess I don't have a strong reason to change it.",
        "createdAt" : "2020-09-30T00:25:36Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "306832f8225f09e732fb06db5755c9ac5a3fa2f8",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1098,1102 @@  /// Formatters are run in the provided order when the text input changes. When\n  /// this parameter changes, the new formatters will not be applied until the\n  /// next time the user inserts or deletes text.\n  /// {@endtemplate}\n  final List<TextInputFormatter>? inputFormatters;"
  },
  {
    "id" : "4d32f4db-5053-45a1-954a-19d35f0da14a",
    "prId" : 66864,
    "prUrl" : "https://github.com/flutter/flutter/pull/66864#pullrequestreview-499054924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "952afae9-ad05-4955-82b9-4f4d9e088452",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "👍  for the name improvement.",
        "createdAt" : "2020-09-30T00:26:58Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "cf1ea6de-cc4d-4cc6-a8c1-6a2b8094cd22",
        "parentId" : "952afae9-ad05-4955-82b9-4f4d9e088452",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "It's a great job to remove those caches.",
        "createdAt" : "2020-09-30T03:08:11Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      }
    ],
    "commit" : "306832f8225f09e732fb06db5755c9ac5a3fa2f8",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +1667,1671 @@  /// Used in [_updateRemoteEditingValueIfNeeded] to determine whether the\n  /// remote value is outdated and needs updating.\n  TextEditingValue? _lastKnownRemoteTextEditingValue;\n\n  @override"
  },
  {
    "id" : "2899c94b-6577-4461-9f3e-e6a4ecc2b35c",
    "prId" : 66864,
    "prUrl" : "https://github.com/flutter/flutter/pull/66864#pullrequestreview-501488134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "486a524e-0ccc-4104-bcb3-410d14d4a711",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "The user also can change the text by the `controller` directly. If change the text by `controller` [inpitFormatters] will not be applied. Should [inpitFormatters] work here?",
        "createdAt" : "2020-09-30T06:10:36Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "a51d96fa-c23d-4b08-963d-472cb458ae98",
        "parentId" : "486a524e-0ccc-4104-bcb3-410d14d4a711",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The \"user\" here refers to end-users (that use the app). I think `inputFormatters` is meant for sanitizing user input. If the developer decides to change the text programmatically then they should be responsible for making sure the new text is valid.  ",
        "createdAt" : "2020-10-02T22:51:33Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "27320bfd-1645-4ca6-9d9c-37241286ff11",
        "parentId" : "486a524e-0ccc-4104-bcb3-410d14d4a711",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Oh in the documentation it only says \"when the text input changes\": https://api.flutter.dev/flutter/material/TextField/inputFormatters.html. I think we should make that clear.",
        "createdAt" : "2020-10-02T23:02:17Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "306832f8225f09e732fb06db5755c9ac5a3fa2f8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +323,327 @@/// ## Handling User Input\n///\n/// Currently the user may change the text this widget contains via keyboard or\n/// the text selection menu. When the user inserted or deleted text, you will be\n/// notified of the change and get a chance to modify the new text value:"
  },
  {
    "id" : "a4668aa5-3973-4dae-aec6-8bca4edcddc3",
    "prId" : 67197,
    "prUrl" : "https://github.com/flutter/flutter/pull/67197#pullrequestreview-501683835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "732e8f18-93b0-4477-9b58-dce6a9cc7ea2",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "typo: extra \"composing\"",
        "createdAt" : "2020-10-05T01:43:45Z",
        "updatedAt" : "2020-10-05T01:49:36Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e4ad9ad3d8c3eef62eb3500e02c569eb5708ef2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +217,221 @@  ///\n  /// If the new selection if of non-zero length, or is outside the composing\n  /// range, the composing composing range is cleared.\n  set selection(TextSelection newSelection) {\n    if (!isSelectionWithinTextBounds(newSelection))"
  },
  {
    "id" : "5f9df574-cd90-4c1f-9999-5be46aaaa5f3",
    "prId" : 67197,
    "prUrl" : "https://github.com/flutter/flutter/pull/67197#pullrequestreview-501683835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c19d6516-6fa6-4288-a455-048fb5d8102d",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "nit: maybe inline `_isSelectionWithinComposingRange`? It's private and not used anywhere else. ",
        "createdAt" : "2020-10-05T01:46:33Z",
        "updatedAt" : "2020-10-05T01:49:36Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e4ad9ad3d8c3eef62eb3500e02c569eb5708ef2",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +222,226 @@      throw FlutterError('invalid text selection: $newSelection');\n    final TextRange newComposing =\n        newSelection.isCollapsed && _isSelectionWithinComposingRange(newSelection)\n            ? value.composing\n            : TextRange.empty;"
  },
  {
    "id" : "5991bace-c585-411c-bb00-0670b9e82a32",
    "prId" : 67361,
    "prUrl" : "https://github.com/flutter/flutter/pull/67361#pullrequestreview-503401372",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e461e0ff-d682-4b28-b705-1208a41a3f5f",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I think that's probably not true If the editable text is only meant for english alphabets and/or numbers (verification code, for example), and there's a formatter that guarantees that?",
        "createdAt" : "2020-10-06T20:09:56Z",
        "updatedAt" : "2020-10-06T22:26:44Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "2842b042-9d04-458c-afa8-554f999b34b7",
        "parentId" : "e461e0ff-d682-4b28-b705-1208a41a3f5f",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "True.  I'll change it to something like \"when working with user input text that may contain complex characters\"",
        "createdAt" : "2020-10-06T22:23:19Z",
        "updatedAt" : "2020-10-06T22:26:44Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "f26c053873aa1e7758cc4722373dcb7629784b7a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +949,953 @@  /// ## Handling emojis and other complex characters\n  /// {@template flutter.widgets.editableText.complexCharacters}\n  /// It's important to always use\n  /// [characters](https://pub.dev/packages/characters) when dealing with user\n  /// input text that may contain complex characters. This will ensure that"
  },
  {
    "id" : "64c461eb-605d-4dd0-a894-2fd624cf5deb",
    "prId" : 67892,
    "prUrl" : "https://github.com/flutter/flutter/pull/67892#pullrequestreview-506300843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf6b8e39-d291-4d31-bdbe-705238f61c30",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "This function is manually called only when the value has not changed. In other cases, the controller's notifier will call it.",
        "createdAt" : "2020-10-12T05:27:34Z",
        "updatedAt" : "2020-10-12T06:24:05Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      }
    ],
    "commit" : "34685074e00c4dccf70b027903e1c9ecc2954980",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2216,2220 @@      // If the value was modified by the formatter, the remote should be notified to keep in sync,\n      // if not modified, it will short-circuit.\n      _updateRemoteEditingValueIfNeeded();\n    } else {\n      // Setting _value here ensures the selection and composing region info is passed."
  },
  {
    "id" : "b757b8d0-f9f1-4754-af80-d5e53a4aa7ed",
    "prId" : 68043,
    "prUrl" : "https://github.com/flutter/flutter/pull/68043#pullrequestreview-507862328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cab4fd14-33aa-47d4-9b07-a89cf951325e",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "This is the only diff from the previous version. \r\n\r\nThe if statement seems unnecessary and I'll try to remove it in an upcoming PR.",
        "createdAt" : "2020-10-13T22:06:41Z",
        "updatedAt" : "2020-10-13T22:06:41Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b2d81866d49280661db96203f93d6cbcc01b3cc",
    "line" : 311,
    "diffHunk" : "@@ -1,1 +2237,2241 @@      // previous behavior. The input formatter logic will be updated in an\n      // upcoming PR.\n      if (widget.inputFormatters?.isNotEmpty ?? false)\n        value = _whitespaceFormatter.formatEditUpdate(_value, value);\n    }"
  },
  {
    "id" : "4dc57c46-e9a1-496c-bd4e-a89309abea04",
    "prId" : 68166,
    "prUrl" : "https://github.com/flutter/flutter/pull/68166#pullrequestreview-526683203",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db307d5d-22d6-474e-b151-d72c8e7ddaa8",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "the input formatters need to checked against the old input formatters associated with the controller, not the ones associated the widget. Rebuilding from `Column(children: <Widget>[TextField('text1', inputFormatter1), Text('text2', inputFormatter2)])` to `Column(children: <Widget>[TextField('text2', inputFormatter2), Text('text1', inputFormatter1)])` should not reformat, without having to use global keys.",
        "createdAt" : "2020-11-09T21:55:58Z",
        "updatedAt" : "2020-12-23T20:23:19Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ee443ec9ec2dff5b9a943cd3bde8d585f126446",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +1757,1761 @@    }\n\n    widget.controller._setInputFormatters(\n      widget.inputFormatters ?? const <TextInputFormatter>[]\n    );"
  },
  {
    "id" : "d8fa5c21-2da0-4bac-836f-0023b079d64d",
    "prId" : 68166,
    "prUrl" : "https://github.com/flutter/flutter/pull/68166#pullrequestreview-541109553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b2fafd3-7387-4077-8951-5b10e3176d13",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Good catch.",
        "createdAt" : "2020-11-30T17:37:02Z",
        "updatedAt" : "2020-12-23T20:23:20Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ee443ec9ec2dff5b9a943cd3bde8d585f126446",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +229,233 @@  ///\n  /// If the new selection if of non-zero length, or is outside the composing\n  /// range, the composing range is cleared.\n  set selection(TextSelection newSelection) {\n    if (!isSelectionWithinTextBounds(newSelection))"
  },
  {
    "id" : "b5e2bac1-033d-4a35-a552-120ad1b284e6",
    "prId" : 68166,
    "prUrl" : "https://github.com/flutter/flutter/pull/68166#pullrequestreview-542249910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbffe1d4-cf26-421c-b723-f68892c3bd3e",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Nit: Comma at the end of this line.",
        "createdAt" : "2020-11-30T18:23:42Z",
        "updatedAt" : "2020-12-23T20:23:20Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "f2c3c9e2-156a-403f-82c0-13ffbd7a8223",
        "parentId" : "bbffe1d4-cf26-421c-b723-f68892c3bd3e",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Was there something about inputFormatters not being allowed to be empty?  Or I'm thinking of `formatters`.",
        "createdAt" : "2020-11-30T18:24:22Z",
        "updatedAt" : "2020-12-23T20:23:20Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "e22e0e77-cc9c-4d1d-93df-3659e91c28f3",
        "parentId" : "bbffe1d4-cf26-421c-b723-f68892c3bd3e",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "`EditableText.inputFormatters`'s type is `List<TextInputFormatters>?`.",
        "createdAt" : "2020-12-02T09:57:51Z",
        "updatedAt" : "2020-12-23T20:23:20Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ee443ec9ec2dff5b9a943cd3bde8d585f126446",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +1758,1762 @@\n    widget.controller._setInputFormatters(\n      widget.inputFormatters ?? const <TextInputFormatter>[]\n    );\n    endBatchEdit();"
  },
  {
    "id" : "21fb9e84-5860-48ed-a0ea-8a1f2f1c5bf2",
    "prId" : 68166,
    "prUrl" : "https://github.com/flutter/flutter/pull/68166#pullrequestreview-544504838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c2bab6c-192e-4eef-842f-c8556b18c351",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "This is super clear to me now, thanks.",
        "createdAt" : "2020-12-03T22:33:01Z",
        "updatedAt" : "2020-12-23T20:23:20Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ee443ec9ec2dff5b9a943cd3bde8d585f126446",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +1130,1134 @@  /// them together to an already formatted value is a no-op. The\n  /// `UsPhoneNumberFormatter` is not idempotent, thus should not be used by\n  /// itself.\n  ///\n  /// ```dart"
  },
  {
    "id" : "ad3250f5-5733-4839-b55e-c0718a735282",
    "prId" : 70883,
    "prUrl" : "https://github.com/flutter/flutter/pull/70883#pullrequestreview-543335529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63206d6c-da7a-466d-a55f-37b49a492862",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "What will happen if a developer does programmatically change the composing region now?  Will the IME still receive the update somehow or will it think that it's using the old composing region?  Or are we saying that developers shouldn't do that (only in TextInputFormatters)?",
        "createdAt" : "2020-12-02T23:40:17Z",
        "updatedAt" : "2020-12-03T00:49:05Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "274ad8aa-f61c-45b5-b0d8-67f279c14f50",
        "parentId" : "63206d6c-da7a-466d-a55f-37b49a492862",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Yeah it's still possible to create an infinite loop in a `TextEditingController` listener callback, but that's like the developer directly fighting the IME, I'm not sure if there's anything we can do to stop that from happening. ",
        "createdAt" : "2020-12-02T23:56:29Z",
        "updatedAt" : "2020-12-03T00:49:05Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c969e9ad7252bd1c616eb52d1a4a2890787702e",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +2196,2200 @@    // trying to restore the original composing region.\n    final bool textChanged = _value.text != value.text\n                          || (!_value.composing.isCollapsed && value.composing.isCollapsed);\n\n    if (textChanged) {"
  },
  {
    "id" : "a8b85f84-fae1-468e-93ea-5e182694d136",
    "prId" : 72011,
    "prUrl" : "https://github.com/flutter/flutter/pull/72011#pullrequestreview-549696329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24e1636e-4896-467a-b74e-caa3eff2ad78",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "We don't seem to have a selection change cause when it is caused by selection overlay, I passing null instead. Should we create a new cause? This method will be called when user drag selection handles or tap on tool bar select all. I don't think we have a way to distinguish them. ",
        "createdAt" : "2020-12-09T18:25:07Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "ac9c269f-656b-481d-8f74-1e5a72961b50",
        "parentId" : "24e1636e-4896-467a-b74e-caa3eff2ad78",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Would it be possible to call onSelectionChanged somewhere higher up in the call stack where you can distinguish drag/select-all?  That might also help work around the duplicate call to onSelectionChanged that @LongCatIsLooong mentioned above.",
        "createdAt" : "2020-12-09T19:51:54Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "60a64aa7-c6ed-464d-ac7f-b81752696936",
        "parentId" : "24e1636e-4896-467a-b74e-caa3eff2ad78",
        "authorId" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "body" : "I think we should create an issue to track the new cause creation, add implement it if lots of people are interested in it.\r\n\r\nLGTM, once you update the docs of `onSelectionChanged` to make it clear in which cases the `cause` will be null.",
        "createdAt" : "2020-12-09T19:55:59Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "tags" : [
        ]
      },
      {
        "id" : "63ec4307-458a-4cf8-b21b-4d77193aba5a",
        "parentId" : "24e1636e-4896-467a-b74e-caa3eff2ad78",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "The only place we can tell what causes the selection change is in the selection overlay because it just set textEditingValue for all the changes happens in selection overlay. I am struggling to find a clean API to be able to move the logic into selection overlay.\r\n\r\nThe problem that @LongCatIsLooong  mentioned is a bug in render editable i think.\r\n\r\nSo handleMovement does two thing in this order\r\n1. set textEditingValue\r\n2. call onSelectionChange\r\n\r\nThis is wrong because the selection would have been updated in step 1, so step 2 is calling selection change with the same selection.\r\n\r\nThe correct order should be as following\r\n1. call onSelectionChange\r\n2. set textEditingValue\r\n\r\nI am not sure whether 2 is even needed.",
        "createdAt" : "2020-12-09T20:13:10Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "a4d3b23d-dc41-4238-97e6-df527c3d8728",
        "parentId" : "24e1636e-4896-467a-b74e-caa3eff2ad78",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "So I decide to leave at the same place. If we want to move it higher up, we will have to add API to TextSelectionDelegate to update the selection, and makes selection overlay to call both set textEditingValue and  the new update selection API which is quite ugly. I am still open to suggestion though.",
        "createdAt" : "2020-12-09T21:01:49Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "622c32cb-190a-4fde-8ebe-56a25d199701",
        "parentId" : "24e1636e-4896-467a-b74e-caa3eff2ad78",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "That sounds good to me.  I think getting this right will require a bigger refactor, which hopefully is upcoming.  No need to hack something now.",
        "createdAt" : "2020-12-10T23:35:06Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3ce30a6654661619850342c4aba0a01f5ab8c46",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2239,2243 @@    if (selectionChanged) {\n      try {\n        widget.onSelectionChanged?.call(value.selection, null);\n      } catch (exception, stack) {\n        FlutterError.reportError(FlutterErrorDetails("
  },
  {
    "id" : "92b31341-9a75-4b57-ad80-b7f5416feda0",
    "prId" : 72011,
    "prUrl" : "https://github.com/flutter/flutter/pull/72011#pullrequestreview-548502610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc5b15a5-58c8-4cbc-aa3c-cf5ae94f77c2",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The controller's value is updated before we call the user callbacks so developers get the correct `TextEditingValue` in `onChanged` should they decide to get the `TextEditingValue` from the controller. Is there a reason we want to delay this?",
        "createdAt" : "2020-12-09T18:50:52Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3ce30a6654661619850342c4aba0a01f5ab8c46",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2224,2228 @@    beginBatchEdit();\n    _value = value;\n    if (textChanged) {\n      try {\n        widget.onChanged?.call(value.text);"
  },
  {
    "id" : "111808f5-a73c-4370-85c3-d88c85443ac2",
    "prId" : 74454,
    "prUrl" : "https://github.com/flutter/flutter/pull/74454#pullrequestreview-574539879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f10d2286-c58e-46ab-b4b8-960705e5abae",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "It would be nicer if this could be a private value, rather than a public API. Reducing code duplication probably wins out, but here's another case where I wish Dart had package-private values.",
        "createdAt" : "2021-01-22T17:55:21Z",
        "updatedAt" : "2021-01-22T17:55:29Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "f0f00504-8575-493b-b7e2-b833ec5e2ff9",
        "parentId" : "f10d2286-c58e-46ab-b4b8-960705e5abae",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "It's possible to hide this map by putting it in a new file that's not exported in `widgets.dart`. But my understanding is that's against Flutter's policy of exporting everything.",
        "createdAt" : "2021-01-22T19:05:25Z",
        "updatedAt" : "2021-01-22T19:05:25Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9c0aebdd70c4360ac27007e9912633d96c50ea0",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +59,63 @@///\n/// This is a temporary fix for: https://github.com/flutter/flutter/issues/74191\nfinal Map<LogicalKeySet, Intent> scrollShortcutOverrides = kIsWeb\n    ? <LogicalKeySet, Intent>{\n        LogicalKeySet(LogicalKeyboardKey.space): DoNothingAndStopPropagationIntent(),"
  },
  {
    "id" : "2246b8f7-7f31-42b8-9d40-d88242047563",
    "prId" : 75541,
    "prUrl" : "https://github.com/flutter/flutter/pull/75541#pullrequestreview-593715264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ba9ba32-68df-4dae-b0b1-1296e787c87b",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "nit: could you add a TODO since ideally this shouldn't call `widget.onSelectionChanged`?",
        "createdAt" : "2021-02-18T22:45:14Z",
        "updatedAt" : "2021-02-19T17:47:13Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "88688193afc038041ba190aff27e0628bf842ff2",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +2285,2289 @@        (cause == SelectionChangedCause.longPress ||\n         cause == SelectionChangedCause.keyboard))) {\n      _handleSelectionChanged(value.selection, cause);\n    }\n    if (textChanged) {"
  },
  {
    "id" : "11c4773f-b2f1-4822-8068-cc727a767592",
    "prId" : 75604,
    "prUrl" : "https://github.com/flutter/flutter/pull/75604#pullrequestreview-596790390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "992bba10-1b80-426a-81fe-3b035c571e0b",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "@goderbauer I saw you added the viewInset-triggered showCaretOnScreen code. Should we do something similar when the phone rotates?",
        "createdAt" : "2021-02-23T19:36:42Z",
        "updatedAt" : "2021-02-24T08:21:22Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "9ac89640-9aed-4e1b-92cf-850531cae18b",
        "parentId" : "992bba10-1b80-426a-81fe-3b035c571e0b",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "What do Android and iOS do natively when you rotate the phone? Do they keep the focused textfield in view? If so, we should probably do something similar.",
        "createdAt" : "2021-02-23T20:51:35Z",
        "updatedAt" : "2021-02-24T08:21:22Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "5b42d66c-f16e-4d7b-ba75-af53b59df866",
        "parentId" : "992bba10-1b80-426a-81fe-3b035c571e0b",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "iOS text fields don't seem to do that. There are no open issues either I guess I'll leave it as is. ",
        "createdAt" : "2021-02-23T20:58:34Z",
        "updatedAt" : "2021-02-24T08:21:22Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7eaa34eae9ccb263bd82b42402cc199f4d854a6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +408,412 @@///  * When the user changes the selection of the text field, or changes the\n///    text when the text field is not [readOnly].\n///  * When the virtual keyboard pops up.\n/// {@endtemplate}\n///"
  },
  {
    "id" : "6a047e8b-dd27-4409-9353-5a63671c7f86",
    "prId" : 75604,
    "prUrl" : "https://github.com/flutter/flutter/pull/75604#pullrequestreview-596735675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8e35f78-eb3e-40a7-81fc-ba3a14883de4",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I like the name change 👍 ",
        "createdAt" : "2021-02-23T19:50:44Z",
        "updatedAt" : "2021-02-24T08:21:22Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7eaa34eae9ccb263bd82b42402cc199f4d854a6",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +2182,2186 @@  bool _showCaretOnScreenScheduled = false;\n\n  void _scheduleShowCaretOnScreen() {\n    if (_showCaretOnScreenScheduled) {\n      return;"
  },
  {
    "id" : "762dacd3-b6bf-45da-a386-9967b116371f",
    "prId" : 77608,
    "prUrl" : "https://github.com/flutter/flutter/pull/77608#pullrequestreview-609054530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d8926e9-fec1-4804-a4d8-106b6d3d56e4",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "This makes me worry about an infinite loop (well at least doing this unnecessarily once every frame).  Are we sure that can never happen?  Like for example if the selection is (-1,-1).",
        "createdAt" : "2021-03-10T17:58:29Z",
        "updatedAt" : "2021-03-26T17:24:20Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "ee278662-8b6d-4251-a01d-9374b057b253",
        "parentId" : "6d8926e9-fec1-4804-a4d8-106b6d3d56e4",
        "authorId" : "a83c472d-ad71-42ae-8c4b-09f4ba928af2",
        "body" : "TextInputConnection checks if the rect is same, and so skips the message. \r\n\r\nI'm not quite sure how infinite loop could happen, it is started in `_openInputConnection` and repeated every frame for as long as there is input connection. It is exactly the same behavior as `_updateComposingRectIfNeeded`, so if that doesn't cause infinite loops neither should this.",
        "createdAt" : "2021-03-10T18:31:35Z",
        "updatedAt" : "2021-03-26T17:24:20Z",
        "lastEditedBy" : "a83c472d-ad71-42ae-8c4b-09f4ba928af2",
        "tags" : [
        ]
      },
      {
        "id" : "089d60c8-2ae5-4345-add3-c841be3542b8",
        "parentId" : "6d8926e9-fec1-4804-a4d8-106b6d3d56e4",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "You're right, _updateComposingRectIfNeeded does seem to do the same thing so I think it's ok 👍 ",
        "createdAt" : "2021-03-10T18:50:08Z",
        "updatedAt" : "2021-03-26T17:24:20Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "a499cc9b58ad72adb69f0f8047dc64d102ad00b3",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2447,2451 @@      }\n      SchedulerBinding.instance!\n          .addPostFrameCallback((Duration _) => _updateCaretRectIfNeeded());\n    }\n  }"
  },
  {
    "id" : "10485c29-79aa-47e4-994c-7609e9b053f1",
    "prId" : 78588,
    "prUrl" : "https://github.com/flutter/flutter/pull/78588#pullrequestreview-624696265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "413e40ee-3062-4fbb-bf25-83805119702a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "We should also document this on `scrollPhysics`.",
        "createdAt" : "2021-03-30T21:01:20Z",
        "updatedAt" : "2021-04-02T19:14:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee8e14110098c68c4a570ef5aa5f9766213ab622",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1321,1325 @@  /// [ScrollBehavior]s also provide [ScrollPhysics]. If an explicit\n  /// [ScrollPhysics] is provided in [scrollPhysics], it will take precedence,\n  /// followed by [scrollBehavior], and then the inherited ancestor\n  /// [ScrollBehavior].\n  ///"
  },
  {
    "id" : "f5d6a5a6-7df0-41eb-aa3b-9c8434581253",
    "prId" : 78707,
    "prUrl" : "https://github.com/flutter/flutter/pull/78707#pullrequestreview-616966513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ebf8722-9110-486a-8394-43275f4c39f5",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "changed the parameter name because it was making this expression kinda confusing.",
        "createdAt" : "2021-03-20T23:03:53Z",
        "updatedAt" : "2021-03-31T22:55:55Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8da0387ebebe5fc21b101d6809abe51ff7f3ed5",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +2248,2252 @@    // trying to restore the original composing region.\n    final bool preformatTextChanged = _value.text != newTextEditingValue.text\n                                      || (!_value.composing.isCollapsed && newTextEditingValue.composing.isCollapsed);\n\n    final List<TextInputFormatter>? formatters = widget.inputFormatters;"
  }
]