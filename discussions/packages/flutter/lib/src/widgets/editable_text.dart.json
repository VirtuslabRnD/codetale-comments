[
  {
    "id" : "c26ef9f3-3625-44fa-a998-622f8b5442de",
    "prId" : 645,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a598157d-67d2-43ec-bc6c-0d889fba04fb",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This still leaks the number of characters. We could be slightly better by just drawing a rounded rectangle of the length that the text would be, or something.\n",
        "createdAt" : "2015-12-01T01:09:22Z",
        "updatedAt" : "2015-12-01T01:09:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ffd9f972-be63-4170-b7c2-bc2c5be99b8f",
        "parentId" : "a598157d-67d2-43ec-bc6c-0d889fba04fb",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "The normal thing for password fields is to show one bullet per character.  That way typing and deleting have good visual feedback.\n",
        "createdAt" : "2015-12-01T01:12:59Z",
        "updatedAt" : "2015-12-01T01:12:59Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "179d191e3ae6481da50b78f6431682d4a7d52648",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +286,290 @@    String text = value.text;\n    if (hideText)\n      text = new String.fromCharCodes(new List<int>.filled(text.length, 0x2022));\n    return new StyledTextSpan(style, <TextSpan>[\n      new PlainTextSpan(text.isEmpty ? _kZeroWidthSpace : text)"
  },
  {
    "id" : "dee94c9f-1a70-466a-bdf0-74a4c7037809",
    "prId" : 9119,
    "prUrl" : "https://github.com/flutter/flutter/pull/9119#pullrequestreview-30364663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf6399bf-9881-4952-ae30-e42436e104b9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "does this actually work?",
        "createdAt" : "2017-03-31T17:42:49Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "22c4b3b7-3089-42ed-b481-0a0b49616d8c",
        "parentId" : "cf6399bf-9881-4952-ae30-e42436e104b9",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It does something, but not much.",
        "createdAt" : "2017-03-31T23:35:30Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "abd6da3d1ab5c0a5221dd9d1c2ab3f320cdde802",
    "line" : 375,
    "diffHunk" : "@@ -1,1 +353,357 @@  /// state or the \"off\" state). A complete cursor blink period is twice this\n  /// value (half on, half off).\n  @visibleForTesting\n  Duration get cursorBlinkInterval => _kCursorBlinkHalfPeriod;\n"
  },
  {
    "id" : "fad5459d-abff-4179-8b09-51b531612437",
    "prId" : 11067,
    "prUrl" : "https://github.com/flutter/flutter/pull/11067#pullrequestreview-47536723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "832439b2-749a-4945-8895-2418e5135ef7",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "The focusNode seems like another common cause where the mixin could do all the fiddly work for you.",
        "createdAt" : "2017-07-01T05:09:33Z",
        "updatedAt" : "2017-07-01T20:44:24Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "1d2c8f63-30d0-41a3-a4c9-a9db80c66a8a",
        "parentId" : "832439b2-749a-4945-8895-2418e5135ef7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "There's not that much fiddly work. :-)",
        "createdAt" : "2017-07-01T20:41:14Z",
        "updatedAt" : "2017-07-01T20:44:24Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "328807ef06a3cadf289dfc059e7b154c3a698ffe",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +281,285 @@\n  @override\n  bool get wantKeepAlive => widget.focusNode.hasFocus;\n\n  // State lifecycle:"
  },
  {
    "id" : "30239776-3a18-4f38-8008-caa74dde932f",
    "prId" : 11830,
    "prUrl" : "https://github.com/flutter/flutter/pull/11830#pullrequestreview-59411047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "735a058c-f933-447c-8106-7a3055d34d1f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "minor issue, feel free to ignore: consider `-= 1` rather than postfix `--`",
        "createdAt" : "2017-08-29T23:35:45Z",
        "updatedAt" : "2017-08-29T23:35:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "044b5ba84cab93cda6240c454566eb49cda0960f",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +532,536 @@    _showCursor.value = !_showCursor.value;\n    if (_obscureShowCharTicksPending > 0) {\n      setState(() { _obscureShowCharTicksPending--; });\n    }\n  }"
  },
  {
    "id" : "e390f2eb-d09c-4739-aea7-f9319da2b147",
    "prId" : 18291,
    "prUrl" : "https://github.com/flutter/flutter/pull/18291#pullrequestreview-128472401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97b97df4-b9a4-4d5b-b8c9-aa7562da7daf",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Couldn't something else do that, like rotating the screen, or a \"virtual\" safe area element (like the iOS bottom button) disappearing? I suppose we probably want this to happen in those cases too, however.",
        "createdAt" : "2018-06-13T01:47:04Z",
        "updatedAt" : "2018-06-13T01:47:41Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "8487fc37-f4c0-4355-9f8c-1f0579cc1e96",
        "parentId" : "97b97df4-b9a4-4d5b-b8c9-aa7562da7daf",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Yes, this will be triggered by the events you list as well. I'd argue that you'd still want to ensure that a focused textfield stays visible when any of those happen.",
        "createdAt" : "2018-06-13T16:56:33Z",
        "updatedAt" : "2018-06-13T16:56:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "73eb8341c4b52ec301e083091cfaaeb1ae6d377d",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +667,671 @@    _updateOrDisposeSelectionOverlayIfNeeded();\n    if (_hasFocus) {\n      // Listen for changing viewInsets, which indicates keyboard showing up.\n      WidgetsBinding.instance.addObserver(this);\n      _lastBottomViewInset = ui.window.viewInsets.bottom;"
  },
  {
    "id" : "000c5233-8b0d-43a3-a992-18ed34483121",
    "prId" : 18855,
    "prUrl" : "https://github.com/flutter/flutter/pull/18855#pullrequestreview-132253934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3134de07-99e3-4342-8725-6fe4f1e41a3d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "somewhere (maybe the class documentation) we should have a section that talks about the event lifecycle (e.g. that onEditingComplete happens before onSubmitted but after onChanged, or whatever)",
        "createdAt" : "2018-06-26T22:54:02Z",
        "updatedAt" : "2018-06-29T23:47:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6f6097fa-2e6e-495a-b03d-512608040975",
        "parentId" : "3134de07-99e3-4342-8725-6fe4f1e41a3d",
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "I added a few lines to the class docs.  Let me know if you have any comments.",
        "createdAt" : "2018-06-27T00:57:21Z",
        "updatedAt" : "2018-06-29T23:47:29Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2cb7bbd9ab930ab99534169f2c7dddf55754199",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +311,315 @@\n  /// The type of keyboard to use for editing the text.\n  final TextInputType keyboardType;\n\n  /// The type of action button to use with the soft keyboard."
  },
  {
    "id" : "7102d99b-53a3-4532-a2a5-64e94b575078",
    "prId" : 18855,
    "prUrl" : "https://github.com/flutter/flutter/pull/18855#pullrequestreview-132253897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2b2ad72-f2a3-485c-8e5d-bf6a25a53fe2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this seems to be missing the constructor argument",
        "createdAt" : "2018-06-26T22:54:25Z",
        "updatedAt" : "2018-06-29T23:47:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a547acf2-9e97-447a-b902-39b7c9d4f836",
        "parentId" : "a2b2ad72-f2a3-485c-8e5d-bf6a25a53fe2",
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "Fixed",
        "createdAt" : "2018-06-27T00:57:05Z",
        "updatedAt" : "2018-06-29T23:47:29Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2cb7bbd9ab930ab99534169f2c7dddf55754199",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +335,339 @@  ///\n  /// Providing [onEditingComplete] prevents the aforementioned default behavior.\n  final VoidCallback onEditingComplete;\n\n  /// Called when the user indicates that they are done editing the text in the field."
  },
  {
    "id" : "d9287397-1953-486b-b3c3-cde36f55120b",
    "prId" : 19317,
    "prUrl" : "https://github.com/flutter/flutter/pull/19317#pullrequestreview-136865976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "922a63ee-1431-477e-9b06-cdaa5235a7bb",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This is a backwards incompatible change. Is it really needed?",
        "createdAt" : "2018-07-12T23:00:20Z",
        "updatedAt" : "2018-07-23T20:41:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "5dc8f982-aec5-425c-9d15-7c66683de4d3",
        "parentId" : "922a63ee-1431-477e-9b06-cdaa5235a7bb",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "[per discussion with @sandrasandeep] If the native textfields all use 2.0 wide cursors, and Material doesn't specify a text cursor width, then it makes sense to bite the bullet and make the default 2.0.\r\n\r\nSo although this is an incompatible change, it's probably best to go though with it now, while Flutter is still in beta.",
        "createdAt" : "2018-07-12T23:38:12Z",
        "updatedAt" : "2018-07-23T20:41:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d87d6b5060e6fe57be2cad556d91560371c40256",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +210,214 @@    List<TextInputFormatter> inputFormatters,\n    this.rendererIgnoresPointer = false,\n    this.cursorWidth = 2.0,\n    this.cursorRadius,\n    this.scrollPadding = const EdgeInsets.all(20.0),"
  },
  {
    "id" : "709694fe-bea3-4698-8f70-ab86544913ef",
    "prId" : 20004,
    "prUrl" : "https://github.com/flutter/flutter/pull/20004#pullrequestreview-143730530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0219afdf-bae4-4217-a558-cd9ed38ee3ed",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "nit: leave the last newline",
        "createdAt" : "2018-08-06T18:31:23Z",
        "updatedAt" : "2018-08-06T18:31:28Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "d9bd9d14-73f2-4db5-8484-3a99ff0e39ac",
        "parentId" : "0219afdf-bae4-4217-a558-cd9ed38ee3ed",
        "authorId" : "ee0cb3a6-6d76-417c-8f81-959063820628",
        "body" : "I took it out because it causes the tests to fail.",
        "createdAt" : "2018-08-06T19:34:00Z",
        "updatedAt" : "2018-08-06T19:34:00Z",
        "lastEditedBy" : "ee0cb3a6-6d76-417c-8f81-959063820628",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ecc464ba02b11bb5ce8f72c54f2579db5724d48",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1037,1041 @@      ..cursorRadius = cursorRadius;\n  }\n}"
  },
  {
    "id" : "d71b80cb-13f4-4fe8-9a16-8398639bdfe3",
    "prId" : 20004,
    "prUrl" : "https://github.com/flutter/flutter/pull/20004#pullrequestreview-146161955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b07f6fc9-dc58-430c-bcd0-6fa5246d75ee",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we should probably have a constant here rather than creating a new value notifier each frame",
        "createdAt" : "2018-08-14T17:06:16Z",
        "updatedAt" : "2018-08-14T17:06:16Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ecc464ba02b11bb5ce8f72c54f2579db5724d48",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +888,892 @@              value: _value,\n              cursorColor: widget.cursorColor,\n              showCursor: EditableText.debugDeterministicCursor ? ValueNotifier<bool>(true) : _showCursor,\n              hasFocus: _hasFocus,\n              maxLines: widget.maxLines,"
  },
  {
    "id" : "ddd0f618-fb12-49f5-a60f-54426f2acd9b",
    "prId" : 21083,
    "prUrl" : "https://github.com/flutter/flutter/pull/21083#pullrequestreview-151103338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1e3fc04-6b03-48d4-9f00-7af81f58e28c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you should also add this to updateRenderObject, for completeness (it can't currently change, but if we ever change the way this is built, we'd have a weird latent bug that's hard to track down if we don't do it correctly now)",
        "createdAt" : "2018-08-28T18:42:40Z",
        "updatedAt" : "2018-09-06T20:23:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "83876faf-f271-46a3-a933-ca0ccb26fd94",
        "parentId" : "b1e3fc04-6b03-48d4-9f00-7af81f58e28c",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Alright did that!",
        "createdAt" : "2018-08-30T17:33:40Z",
        "updatedAt" : "2018-09-06T20:23:59Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "bba287f6dceb1005235461c60b3773e67f20717b",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1016,1020 @@      cursorWidth: cursorWidth,\n      cursorRadius: cursorRadius,\n      textSelectionDelegate: textSelectionDelegate,\n    );\n  }"
  },
  {
    "id" : "234035d1-fdaa-44c2-8584-a7ff0c174a71",
    "prId" : 23015,
    "prUrl" : "https://github.com/flutter/flutter/pull/23015#pullrequestreview-164388603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd0020c8-9639-4e9b-b7df-e499619cce49",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Can you please add a test for this change in behavior?",
        "createdAt" : "2018-10-12T17:36:38Z",
        "updatedAt" : "2018-10-16T19:51:58Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "42f1175c-5415-4f47-a5bf-e59f8eb02891",
        "parentId" : "dd0020c8-9639-4e9b-b7df-e499619cce49",
        "authorId" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "body" : "Done",
        "createdAt" : "2018-10-12T19:58:59Z",
        "updatedAt" : "2018-10-16T19:51:58Z",
        "lastEditedBy" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "abf3c889e15a5a010a9ba09f63df37ecd6d03cdb",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +516,520 @@        // editing.\n        if (widget.maxLines == 1)\n          _finalizeEditing(true);\n        break;\n      case TextInputAction.done:"
  },
  {
    "id" : "0f4d78a4-4abc-4a7d-87eb-c64cce6ffee5",
    "prId" : 24135,
    "prUrl" : "https://github.com/flutter/flutter/pull/24135#pullrequestreview-173243342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2b0daf0-3807-4973-9dfc-91c31028329b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Out of scope for this PR but we should probably draw on top of the text",
        "createdAt" : "2018-11-09T01:19:18Z",
        "updatedAt" : "2018-11-09T01:41:44Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "92bd9bd9d66475650863194f3350e929f77c6326",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +419,423 @@  /// Defaults to 2.0\n  ///\n  /// The cursor will draw under the text. The cursor width will extend\n  /// to the right of the boundary between characters for left-to-right text\n  /// and to the left for right-to-left text. This corresponds to extending"
  },
  {
    "id" : "3a59dc25-80b4-420e-8518-da50b8ef0c53",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c96e1c7e-ddc6-40a4-b29a-190a02bb55eb",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "You didn't assert non-null",
        "createdAt" : "2018-12-10T23:33:36Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +184,188 @@  /// default to [TextInputType.multiline].\n  ///\n  /// The [controller], [focusNode], [style], [cursorColor], [backgroundCursorColor],\n  /// [textAlign], [rendererIgnoresPointer], and [enableInteractiveSelection]\n  /// arguments must not be null."
  },
  {
    "id" : "48bdd597-6f71-4bad-9c1f-a7f417d27c3d",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caee5a56-8ddc-4004-a280-a336ddf893c0",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Not super clear what this is. Add more comments.",
        "createdAt" : "2018-12-10T23:54:07Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +516,520 @@  // The time it takes for the floating cursor to snap to the text aligned\n  // cursor position after the user has finished placing it.\n  static const Duration _floatingCursorResetTime = Duration(milliseconds: 125);\n\n  AnimationController _floatingCursorResetController;"
  },
  {
    "id" : "1e3ad5f4-2b39-436a-b388-048562b50b60",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "054cb346-5d7a-4653-b981-970a679bf61a",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I would add comment for all of these since it's not clear what they are exactly.",
        "createdAt" : "2018-12-11T00:06:24Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +615,619 @@\n  // The original position of the caret on FloatingCursorDragState.start.\n  Rect _startCaretRect;\n\n  // The most recent text position as determined by the location of the floating"
  },
  {
    "id" : "e2b6c67d-3181-4f9a-b5e8-944435154ff1",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab8ab4a0-15dd-4abf-9c22-806577a42a63",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "For cleanness, we should probably reset these variables when not in force touch.",
        "createdAt" : "2018-12-11T06:56:41Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +619,623 @@  // The most recent text position as determined by the location of the floating\n  // cursor.\n  TextPosition _lastTextPosition;\n\n  // The offset of the floating cursor as determined from the first update call."
  },
  {
    "id" : "1ad2063d-1712-483e-9f5c-ce03a0ed2cf7",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfe5f0f5-41e7-449c-b85d-786439a29219",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "It's not really a tap selection cause right? I don't know if we need to do anythnig different but I would at least add a comment.",
        "createdAt" : "2018-12-11T06:57:56Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +666,670 @@      if (_lastTextPosition.offset != renderEditable.selection.baseOffset)\n        // The cause is technically the force cursor, but the cause is listed as tap as the desired functionality is the same.\n        _handleSelectionChanged(TextSelection.collapsed(offset: _lastTextPosition.offset), renderEditable, SelectionChangedCause.tap);\n      _startCaretRect = null;\n      _lastTextPosition = null;"
  },
  {
    "id" : "b94b68ea-dc66-4898-a3bb-6ea1368761ae",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190502955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b3a8494-beb2-4f51-98fb-c68bb25b77fe",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I'm not sure I could figure out what this is from the name. Add comments.",
        "createdAt" : "2018-11-30T21:15:47Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "d4db4ba3-cfbd-416b-b0aa-fca67e07aab4",
        "parentId" : "8b3a8494-beb2-4f51-98fb-c68bb25b77fe",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Is it the same amount of time it waits before animating to become opaque as well? While you're here, document the 500ms above too and how they relate.",
        "createdAt" : "2019-01-09T00:00:21Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +40,44 @@// The time the cursor is static in opacity before animating to become\n// transparent.\nconst Duration _kCursorBlinkWaitForStart = Duration(milliseconds: 150);\n\n// Number of cursor ticks during which the most recently entered character"
  },
  {
    "id" : "0b655ac6-bd26-4adc-b4e3-1decacd2907f",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190526092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0695f222-9c37-40ad-9271-d24e8efb8714",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Random thought: could we just have the composer pass in a Curve instead of a bool? This way, Android passes a step function, iOS passes something linear (or some such. I don't really know). But then fuchsia can pass in something else and our users can pass in whatever they like too. ",
        "createdAt" : "2019-01-09T00:02:31Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "6431be8f-c324-47a9-a1a0-697692a8050d",
        "parentId" : "0695f222-9c37-40ad-9271-d24e8efb8714",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "The way things are set up right now, doing this would be non trivial... But if there's a need for it in the future, we could definitely add that.",
        "createdAt" : "2019-01-09T00:54:03Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "6c25ca8f-9d4e-4203-a1d3-05f9e20809f2",
        "parentId" : "0695f222-9c37-40ad-9271-d24e8efb8714",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Sure. Just try to account letting it be non-API-breaking when leaving room for it.",
        "createdAt" : "2019-01-09T01:01:45Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +490,494 @@  /// By default, the cursor opacity will animate on iOS platforms and will not\n  /// animate on Android platforms.\n  final bool cursorOpacityAnimates;\n\n  ///{@macro flutter.rendering.editable.cursorOffset}"
  },
  {
    "id" : "426cb7a5-d1ea-45de-93fd-d58025fbcebe",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190502955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e12daec4-6323-43f5-83f3-27cc5d57245d",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Describe how the number is derived",
        "createdAt" : "2019-01-09T00:03:08Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +580,584 @@  // This value is an eyeball estimation of the time it takes for the iOS cursor\n  // to ease in and out.\n  static const Duration _fadeDuration = Duration(milliseconds: 250);\n\n  // The time it takes for the floating cursor to snap to the text aligned"
  },
  {
    "id" : "098ba1e4-78f4-4f92-9ba9-95563308b154",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190502955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45c12c0f-8286-46c4-9644-65c768ab7214",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "There should be some assert somewhere in the constructor or here that compares the values of _kCursorBlinkHalfPeriod and _fadeDuration to make sure someone changing this value in the future doesn't mess up. ",
        "createdAt" : "2019-01-09T00:33:49Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +1049,1053 @@    assert(_kCursorBlinkHalfPeriod > _fadeDuration);\n    _cursorTimer?.cancel();\n    _cursorTimer = Timer.periodic(_kCursorBlinkHalfPeriod, _cursorTick);\n  }\n"
  },
  {
    "id" : "6b491c47-bdc5-4ee3-b77f-75b45f68230e",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190542156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "048a2517-a6a4-4f0f-ad1e-ba19bf4e30c6",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Oh, I get what _kCursorBlinkHalfPeriod is now. \r\n\r\nI think when it's hard to describe, let's stick to industry terms with prior art. Like signal processing or something https://goo.gl/images/n99F1c. Since it's private, let's rename it.",
        "createdAt" : "2019-01-09T00:36:18Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "518d7cbf-7e12-4824-99e9-ec338a5a5ee7",
        "parentId" : "048a2517-a6a4-4f0f-ad1e-ba19bf4e30c6",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "This was a prior named value, not something I came up with! :) Though do you have a better name? I do feel like it describes the value well.",
        "createdAt" : "2019-01-09T01:24:34Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +1049,1053 @@    assert(_kCursorBlinkHalfPeriod > _fadeDuration);\n    _cursorTimer?.cancel();\n    _cursorTimer = Timer.periodic(_kCursorBlinkHalfPeriod, _cursorTick);\n  }\n"
  },
  {
    "id" : "b6c46164-52f7-4173-a006-fc11b2e05e14",
    "prId" : 27003,
    "prUrl" : "https://github.com/flutter/flutter/pull/27003#pullrequestreview-198415811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2495f8a0-606e-460a-b411-5e1cdeddd079",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Refactored this to keep it working. Ideally we should get rid of it since it's not that useful but it's already public.",
        "createdAt" : "2019-01-31T03:58:14Z",
        "updatedAt" : "2019-02-05T07:41:16Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "b548f8612bf46f69372006fc01201906d56c4d54",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1010,1014 @@  /// (it's hidden half the time, since it blinks).\n  @visibleForTesting\n  bool get cursorCurrentlyVisible => _cursorBlinkOpacityController.value > 0;\n\n  /// The cursor blink interval (the amount of time the cursor is in the \"on\""
  },
  {
    "id" : "80941568-001c-4806-bd62-82ab468e4ba0",
    "prId" : 27205,
    "prUrl" : "https://github.com/flutter/flutter/pull/27205#pullrequestreview-208664605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a42d70f8-5f22-4f14-9a24-a27d0e774859",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This is documentation for the EditableText class (too). Probably need some qualifying statement early on that explains that the examples apply equally well to EditableText or TextFormField.\r\n\r\nGenerally speaking I think we're talking about the \"input widget's [EditableText]\" rather than just \"Input\".",
        "createdAt" : "2019-02-27T18:05:25Z",
        "updatedAt" : "2019-03-08T16:59:42Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "56d0a1b6d0ab5598c651c73c6dc67d49c731d25f",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +479,483 @@  /// Input that occupies a single line and scrolls horizontally as needed.\n  /// ```dart\n  /// TextField()\n  /// ```\n  ///"
  },
  {
    "id" : "aa6af6a5-d39c-4670-85ab-f0499ea07962",
    "prId" : 27612,
    "prUrl" : "https://github.com/flutter/flutter/pull/27612#pullrequestreview-202427114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "731bf081-0c13-4fc7-9695-7b0acad741ed",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If null, a [StrutStyle] based on [style], with [StrutStyle.forceStrutHeight] set to true, will be used.  If  [style] is null (the default) then the theme's [TextStyle] will be used instead.\r\n\r\nHowever: we don't seem to be defaulting style to the theme's style?",
        "createdAt" : "2019-02-12T00:41:55Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "8b002215-6b22-454e-a0bd-d6067983bab9",
        "parentId" : "731bf081-0c13-4fc7-9695-7b0acad741ed",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "This behavior is actually inherited from the TextStyle taking the theme's style, which the StrutStyle then in turn inherits.",
        "createdAt" : "2019-02-12T01:05:30Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0642aa749afd3ea3ff4b5fd453d36a1ba2e8704f",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +294,298 @@  /// [style]. This ensures the typed text fits within the alotted space.\n  ///\n  /// If null, the strut used will is inherit values from the [style] and will\n  /// have [StrutStyle.forceStrutHeight] set to true. When no [style] is\n  /// passed, the theme's [TextStyle] will be used to generate [strutStyle]"
  },
  {
    "id" : "b8e9e5ce-ce76-474b-9d2d-d528ab4e0324",
    "prId" : 27612,
    "prUrl" : "https://github.com/flutter/flutter/pull/27612#pullrequestreview-205528315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca9896c1-d169-4ced-a781-f6572bc38152",
        "parentId" : null,
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "Would you mind adding a URL reference to something that explains the concept of a strut in general?  It's an odd name for those that are not already familiar with it.",
        "createdAt" : "2019-02-19T22:20:03Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "ca027d52-baae-4586-ba95-f068deca2c23",
        "parentId" : "ca9896c1-d169-4ced-a781-f6572bc38152",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "I can put a link to https://www.w3.org/TR/CSS2/visudet.html#line-height in the docs for `StrutStyle`. Sticking the link everywhere strut is used might cause a bit too much clutter.",
        "createdAt" : "2019-02-20T00:37:11Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "24b4a41d-1eae-4ec7-bb6a-8a24e080bd30",
        "parentId" : "ca9896c1-d169-4ced-a781-f6572bc38152",
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "I was just recommending that it be added to this template.  The other places where this template appears is likely to be the first and only interaction most developers have with this concept, so it seemed like a good place for an external reference.",
        "createdAt" : "2019-02-20T00:45:34Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "d3ae055a-4468-45fa-ac31-42b5a3075ac2",
        "parentId" : "ca9896c1-d169-4ced-a781-f6572bc38152",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "https://en.wikipedia.org/wiki/Strut_(typesetting) may also be a good more generic albeit brief reference.",
        "createdAt" : "2019-02-20T00:46:28Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "5a57878d-2d3a-4d11-aecb-f98eb4f08f33",
        "parentId" : "ca9896c1-d169-4ced-a781-f6572bc38152",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Ahh my bad, missed that this was the template! That's a good idea.",
        "createdAt" : "2019-02-20T00:48:21Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0642aa749afd3ea3ff4b5fd453d36a1ba2e8704f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +304,308 @@  /// Flutter's strut is based on [typesetting strut](https://en.wikipedia.org/wiki/Strut_(typesetting))\n  /// and CSS's [line-height](https://www.w3.org/TR/CSS2/visudet.html#line-height).\n  /// {@endtemplate}\n  ///\n  /// Within editable text and textfields, [StrutStyle] will not use its standalone"
  },
  {
    "id" : "3af786e1-8e01-47ca-88ff-bd8e3e2ae3bf",
    "prId" : 28955,
    "prUrl" : "https://github.com/flutter/flutter/pull/28955#pullrequestreview-211555193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c784c87e-3b31-407e-8b66-aa41907c9050",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "When used on its own, the [EditableText] widget will not display the selection toolbar.",
        "createdAt" : "2019-03-06T20:29:52Z",
        "updatedAt" : "2019-03-06T22:37:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "4a870e90-d98e-4050-b859-bfc6afd05c6e",
        "parentId" : "c784c87e-3b31-407e-8b66-aa41907c9050",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "This might be over-simplified. When used on its own, the EditableText widget can display the selection toolbar. It'll just not trigger it by itself.",
        "createdAt" : "2019-03-06T22:39:23Z",
        "updatedAt" : "2019-03-06T22:39:24Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "260f8dde-e5d7-4b81-a874-91927777e090",
        "parentId" : "c784c87e-3b31-407e-8b66-aa41907c9050",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Good point.",
        "createdAt" : "2019-03-07T01:00:11Z",
        "updatedAt" : "2019-03-07T01:00:11Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "eee2511d217c61e9f26b6ed703151ee6904def7e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +490,494 @@  /// Optional delegate for building the text selection handles and toolbar.\n  ///\n  /// The [EditableText] widget used on its own will not trigger the display\n  /// of the selection toolbar by itself. The toolbar is shown by calling\n  /// [EditableTextState.showToolbar] in response to an appropriate user event."
  },
  {
    "id" : "d9efb898-252a-4422-a631-30bd78081290",
    "prId" : 28955,
    "prUrl" : "https://github.com/flutter/flutter/pull/28955#pullrequestreview-211514540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57f80fa7-9447-4746-bd5d-34112b7a508c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "it shows a platform-specific toolbar too, right?",
        "createdAt" : "2019-03-06T20:31:47Z",
        "updatedAt" : "2019-03-06T22:37:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "aa58fcb5-cdf1-4a85-8a18-b7ec28bae0c2",
        "parentId" : "57f80fa7-9447-4746-bd5d-34112b7a508c",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "It does. We don't necessarily have to talk about it here though.",
        "createdAt" : "2019-03-06T22:40:00Z",
        "updatedAt" : "2019-03-06T22:40:00Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "eee2511d217c61e9f26b6ed703151ee6904def7e",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +500,504 @@  ///    platform.\n  ///  * [TextField], a Material Design themed wrapper of [EditableText], which\n  ///    shows the selection toolbar upon appropriate user events based on the\n  ///    user's platform set in [ThemeData.platform].\n  final TextSelectionControls selectionControls;"
  },
  {
    "id" : "a77bb2dd-f0f7-4897-adfb-bd88564f92eb",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-233679905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ede24dd-f921-418c-9b04-2a3add83365f",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Maybe for a different PR, might be nice to let users explicitly control which of these are enabled or not.",
        "createdAt" : "2019-05-03T21:29:50Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +865,869 @@\n  @override\n  bool get cutEnabled => !widget.readOnly;\n\n  @override"
  },
  {
    "id" : "095571ef-6521-47b7-bd0d-f8bac9ec08d0",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-242790683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This is here to close the keyboard if the Editable switched from non-readOnly to readOnly? Can you add a test case for that scenario? ",
        "createdAt" : "2019-05-06T11:19:16Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "159385d0-9dfe-4b2e-9455-6add840e3756",
        "parentId" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "What if the opposite happens (going from readOnly to editable)?",
        "createdAt" : "2019-05-06T11:27:12Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "1ac2ee07-4859-47a3-8682-ad0022ff1412",
        "parentId" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I will add a test.\r\n\r\nRight now the current behavior is when you on focus on the text input in readOnly mode and then switch to non-readonly, the focus is still attached without the keyboard pop up. The prompt will get to the start of the textfield. if you click anywhere in the text again, the keyboard will pop up. I feel the behavior is ok. I can make the keyboard pop up right after update. I am not sure which one is more natural.",
        "createdAt" : "2019-05-06T16:54:22Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "a7478a3c-a1c4-4de1-8925-4da4053f281c",
        "parentId" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "added test 'Dynamically switching to read only should close input connection'",
        "createdAt" : "2019-05-06T21:47:38Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "dd79a298-ea75-4818-b198-4bc3dfb99421",
        "parentId" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I feel like the keyboard should come up right away when readOnly switches. But we may want to check what Android and iOS do natively.",
        "createdAt" : "2019-05-21T16:46:07Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "bfb5be69-a510-40c1-aee3-d4df0cf81df2",
        "parentId" : "999a7dd0-15c8-4ce8-83da-0d7a5a68be2f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "ios and android does not have build in readonly textfield. It is a web thing, I updated it so the keyboard come up when switches",
        "createdAt" : "2019-05-28T16:40:13Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +921,925 @@      updateKeepAlive();\n    }\n    if (widget.readOnly) {\n      _closeInputConnectionIfNeeded();\n    } else {"
  },
  {
    "id" : "1aaffa0a-44e9-49fc-b228-6e987471baf3",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-237962049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cab81a2-c5ed-48ee-a43a-28e1acc85ab9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "From the discussion above I inferred that you'd still need the input connection to receive keyboard events to change the selection. Why is returning here without a connection ok then?",
        "createdAt" : "2019-05-06T11:23:19Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "fe9fd3d6-db6b-4581-adf2-aa9c1ce9c104",
        "parentId" : "4cab81a2-c5ed-48ee-a43a-28e1acc85ab9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "The key press event are sent through RawKeyboard listener, the inputConnection here is the in screen keyboard. As long as we have listener attached to RawKeyboard in RenderEditable, we can listen to keyboard input. The in screen keyboard is not required. Furthermore, I think you cannot select text with in screen keyboard, can you?",
        "createdAt" : "2019-05-06T16:39:34Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "c1b190d1-59d1-4631-bb80-982ff1b8d21f",
        "parentId" : "4cab81a2-c5ed-48ee-a43a-28e1acc85ab9",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "You can force press the keyboard on iOS to move the cursor - but I don't now that you can select text.  Are we covered on the force press though?",
        "createdAt" : "2019-05-14T23:54:15Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "c031fe87-09cd-49a8-b395-65a4c8bceea5",
        "parentId" : "4cab81a2-c5ed-48ee-a43a-28e1acc85ab9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I don't think we need to support that in read only text field. As far as i can tell, the force press move cursor only available during text editing, which is not applicable in this case.",
        "createdAt" : "2019-05-15T17:21:06Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +1137,1141 @@\n  void _openInputConnection() {\n    if (widget.readOnly) {\n      return;\n    }"
  },
  {
    "id" : "1af66dfa-b1d6-42bc-b075-a02b9a89c0a2",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-234654517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b2417ef-310e-4f46-bce1-184ea149206f",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "after play a little bit more, I figure we do not update the overlay when selection change during didupdatewidget.\r\nI filed https://github.com/flutter/flutter/issues/32152 to demonstrate this issue.\r\nadded test 'Sawping controllers should update selection'",
        "createdAt" : "2019-05-06T22:01:38Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "22ea5f8d-f50b-443e-971b-4381325d38fa",
        "parentId" : "4b2417ef-310e-4f46-bce1-184ea149206f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I cannot separate this into different pr, since the readonly requires this issue to fix to work properly.",
        "createdAt" : "2019-05-07T17:25:23Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +911,915 @@    }\n    if (widget.controller.selection != oldWidget.controller.selection) {\n      _selectionOverlay?.update(_value);\n    }\n    _selectionOverlay?.handlesVisible = widget.showSelectionHandles;"
  },
  {
    "id" : "f43c42d0-68eb-4b84-9b9c-81c6e38d4c9c",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-235317552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85366323-6a14-4638-a872-a34900e699dd",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "disable composing",
        "createdAt" : "2019-05-08T22:12:14Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 222,
    "diffHunk" : "@@ -1,1 +1566,1570 @@  TextSpan buildTextSpan() {\n    // Read only mode should not paint text composing.\n    if (!widget.obscureText && _value.composing.isValid && !widget.readOnly) {\n      final TextStyle composingStyle = widget.style.merge(\n        const TextStyle(decoration: TextDecoration.underline),"
  },
  {
    "id" : "a210e874-5b48-4feb-8ab2-c322083de321",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-239607187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f341916a-c581-49ad-941e-d025fa3025f9",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "also `assert(showCursor != null)`?",
        "createdAt" : "2019-05-14T22:29:24Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "f79fd0bb-520d-4713-bd35-f900567bad02",
        "parentId" : "f341916a-c581-49ad-941e-d025fa3025f9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I changed that so showcursor can be null, if it is null it will be set to !readOnly",
        "createdAt" : "2019-05-20T16:35:17Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +316,320 @@       assert(autocorrect != null),\n       assert(showSelectionHandles != null),\n       assert(readOnly != null),\n       assert(style != null),\n       assert(cursorColor != null),"
  },
  {
    "id" : "bfcd1ff3-2546-431e-9715-83529584be25",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-240159819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5f00c05-ca79-4042-a043-c5f0e211de2e",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Update the doc above to indicate that readOnly may not be null and that showCursor is initialized based on readOnly if it is null?",
        "createdAt" : "2019-05-21T16:31:28Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "a5cc8a3e-cdcd-493f-a469-c18b0112386f",
        "parentId" : "c5f00c05-ca79-4042-a043-c5f0e211de2e",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "(This should also be done for the other classes that have these constructor arguments)",
        "createdAt" : "2019-05-21T16:31:51Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +316,320 @@       assert(autocorrect != null),\n       assert(showSelectionHandles != null),\n       assert(readOnly != null),\n       assert(style != null),\n       assert(cursorColor != null),"
  },
  {
    "id" : "99f88b4e-7b5b-40eb-bf70-84e69aa3d97c",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-244509846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59ac7707-df22-41b2-932f-db7325049453",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Maybe this is where the following text belongs and the other showCursor doc string should just use the macro.\r\n\r\nThe text cursor is not shown if [showCursor] is false or if [showCursor] is null (the default) and [readOnly] is true.",
        "createdAt" : "2019-05-31T17:41:38Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "71369c87-ccf6-47f3-8b91-628561f82c6f",
        "parentId" : "59ac7707-df22-41b2-932f-db7325049453",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "The sentence make sense in the constructor because the [showCursor] there refer to pass in parameter.\r\n\r\nHowever, [showCursor] here will refer to the actually property Editable.showCursor. it will be a little bit confusing When parameter passed in is null, this property will actually be initialized to true or false.\r\n",
        "createdAt" : "2019-05-31T20:38:54Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +387,391 @@\n  /// {@template flutter.widgets.editableText.showCursor}\n  /// Whether to show cursor.\n  ///\n  /// The cursor refers to the blinking caret when the [EditableText] is focused."
  },
  {
    "id" : "5b16f4da-e765-4a91-8727-8c936a72c510",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-244989717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "001af8ae-1b3d-4ada-b85a-bd534ca07d14",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "It may be good to explain in a sentence or two what the selection handle is and how it is different from the cursor. Maybe also link to showCursor?",
        "createdAt" : "2019-06-03T16:28:23Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +375,379 @@  final bool readOnly;\n\n  /// Whether to show selection handles.\n  ///\n  /// When a selection is active, there will be two handles at each side of"
  },
  {
    "id" : "fe9d5c04-21ac-4e2f-bd1a-c64d50465059",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-244989717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ad1e415-37b8-49d4-8f50-8e1a0e6d7369",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "It may be helpful to differentiate the cursor from the selection handle in this doc and also link to showSelectionHandles.",
        "createdAt" : "2019-06-03T16:28:52Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +387,391 @@\n  /// {@template flutter.widgets.editableText.showCursor}\n  /// Whether to show cursor.\n  ///\n  /// The cursor refers to the blinking caret when the [EditableText] is focused."
  },
  {
    "id" : "15a232c6-dbc0-48b5-aa0a-ebb605c5fdee",
    "prId" : 32620,
    "prUrl" : "https://github.com/flutter/flutter/pull/32620#pullrequestreview-239410364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "622fa0c0-f631-46e7-a942-32661df66672",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I was thinking it might be better to set this default in EditableText rather than here in the state, but I think it won't be possible because it needs to be const.  This should be fine then.",
        "createdAt" : "2019-05-15T15:49:04Z",
        "updatedAt" : "2019-05-20T10:21:46Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "401f1f5f-06b5-4a0c-b306-87b516791143",
        "parentId" : "622fa0c0-f631-46e7-a942-32661df66672",
        "authorId" : "3b46b22b-ca61-486b-8f7b-c8501f0d2559",
        "body" : "For the same reason, It is impossible to add scrollController to the debugFillProperties test in material/text_field_test.dart and I haven't added it as the tests were failing.",
        "createdAt" : "2019-05-20T10:19:21Z",
        "updatedAt" : "2019-05-20T10:21:46Z",
        "lastEditedBy" : "3b46b22b-ca61-486b-8f7b-c8501f0d2559",
        "tags" : [
        ]
      }
    ],
    "commit" : "2819e045e2ea87dc5d752fdaa0249f00ba9dee55",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +829,833 @@    _focusAttachment = widget.focusNode.attach(context);\n    widget.focusNode.addListener(_handleFocusChanged);\n    _scrollController = widget.scrollController ?? ScrollController();\n    _scrollController.addListener(() { _selectionOverlay?.updateForScroll(); });\n    _cursorBlinkOpacityController = AnimationController(vsync: this, duration: _fadeDuration);"
  },
  {
    "id" : "00939f18-84b0-4875-9a62-ec118db0442a",
    "prId" : 34019,
    "prUrl" : "https://github.com/flutter/flutter/pull/34019#pullrequestreview-253636915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8530ada3-9028-48df-8239-34ee8dcdb3c7",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Is this for the case where you have text that's less than 1 line, but you want it to take up the full width?  I was worried that `textWidthBasis` didn't handle that case when I wrote it.  What about adding another value to the `textWidthBasis` enum called `fill` or `max` instead of having a separate bool?",
        "createdAt" : "2019-06-12T16:24:40Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "0df67cf8-161e-4328-9546-571ce67f01ba",
        "parentId" : "8530ada3-9028-48df-8239-34ee8dcdb3c7",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Just responding to my own comment so I don't forget: We talked offline about this and I also tried running it on my machine.  It's not quite the same as `textWidthBasis`, and I can't think of another option besides a bool.",
        "createdAt" : "2019-06-21T20:29:41Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "5c731f05-36cb-4e0f-9598-39ff40d672af",
        "parentId" : "8530ada3-9028-48df-8239-34ee8dcdb3c7",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "The purpose of it is to make RenderEditable draw something that's not full width.",
        "createdAt" : "2019-06-21T20:30:55Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "c10a11a9-bbb1-42b5-95e5-a53c1ff3de03",
        "parentId" : "8530ada3-9028-48df-8239-34ee8dcdb3c7",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "@HansMuller Is there any cleaner way to expose this sort of idea other than a bool?  Or any better name?  Let me know if you want me to explain what forceLine does.",
        "createdAt" : "2019-06-24T20:21:32Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "be32ea44e7039448da1451856923c1bc82d68e27",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +418,422 @@  ///\n  ///  * [textWidthBasis], which controls the calculation of text width.\n  final bool forceLine;\n\n  /// Whether to show selection handles."
  },
  {
    "id" : "680e3307-fa81-4979-9eb5-c5bce165e86a",
    "prId" : 34676,
    "prUrl" : "https://github.com/flutter/flutter/pull/34676#pullrequestreview-256589571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1016caa-b93b-471f-a4dd-b653e0fefe17",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe include a sentence indicating what the toolbar is used for?",
        "createdAt" : "2019-07-01T22:28:31Z",
        "updatedAt" : "2019-07-24T16:43:52Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "658008270c11d9c59d670c0ea185e6ae3908f2e6",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +230,234 @@/// [EditableText] and its derived widgets have their own default [ToolbarOptions].\n/// Create a custom [ToolbarOptions] if you want explicit control over the toolbar\n/// option.\nclass ToolbarOptions {\n  /// Create a toolbar configuration with given options."
  },
  {
    "id" : "211a4a8e-14c5-451d-afbf-850650582a54",
    "prId" : 35219,
    "prUrl" : "https://github.com/flutter/flutter/pull/35219#pullrequestreview-257559622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32aca4e7-c161-4107-9794-489df9b3556e",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I am not sure if it is necessary, we might also want to check _selectionOverlay.handlesarevisible",
        "createdAt" : "2019-07-01T23:30:38Z",
        "updatedAt" : "2019-07-10T18:30:59Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "3d4eea78-98b1-4018-ac09-708d35ce914f",
        "parentId" : "32aca4e7-c161-4107-9794-489df9b3556e",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I just tried playing around with it and using `handlesAreVisible` and I think it has to stay as-is.  The use case is tapping to close the selection menu in an empty text field.  In that case no handles are shown, only the toolbar, but we still want to close the toolbar on tap.  However I also don't want to call `selectionOverlay.hide` when there is no selection overlay, like tapping on an empty field without the menu up.",
        "createdAt" : "2019-07-03T15:14:16Z",
        "updatedAt" : "2019-07-10T18:30:59Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "147ab986396f3fc16191cf785bc348259bf24ba4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1496,1500 @@  @override\n  void hideToolbar() {\n    if (_selectionOverlay == null || !_selectionOverlay.toolbarIsVisible) {\n      return;\n    }"
  },
  {
    "id" : "63c4ea61-52b9-41b9-92bd-71711577fab7",
    "prId" : 35926,
    "prUrl" : "https://github.com/flutter/flutter/pull/35926#pullrequestreview-260993479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25e1fc80-2ae2-455a-a167-4bd34f8b15bc",
        "parentId" : null,
        "authorId" : "a6ca4e3d-4201-4456-84b4-5f389034b0b5",
        "body" : "Shouldn't this be `.nextFocus` not `.focusNext` as per L713?\r\n\r\nhttps://github.com/flutter/flutter/pull/35926/files#diff-2d74aabcc309c260810a6cca572e134eR713",
        "createdAt" : "2019-07-11T22:46:34Z",
        "updatedAt" : "2019-07-11T22:46:35Z",
        "lastEditedBy" : "a6ca4e3d-4201-4456-84b4-5f389034b0b5",
        "tags" : [
        ]
      },
      {
        "id" : "c71d271b-3b58-46b9-9a01-6ce10a1ad3ee",
        "parentId" : "25e1fc80-2ae2-455a-a167-4bd34f8b15bc",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yep, thanks for catching that!  I'll fix it in another PR.",
        "createdAt" : "2019-07-11T22:59:35Z",
        "updatedAt" : "2019-07-11T22:59:35Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bba24f7853d089ae6f96f810f21e78edbceaa69",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +693,697 @@  /// When a non-completion action is pressed, such as \"next\" or \"previous\", it\n  /// is often desirable to move the focus to the next or previous field.  To do\n  /// this, handle it as in this example, by calling [FocusNode.focusNext] in\n  /// the [TextFormField.onFieldSubmitted] callback ([TextFormField] wraps\n  /// [EditableText] internally, and uses the value of `onFieldSubmitted` as its"
  },
  {
    "id" : "5b69777c-1357-4142-858a-b7fd718b305f",
    "prId" : 39344,
    "prUrl" : "https://github.com/flutter/flutter/pull/39344#pullrequestreview-281511157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df503f36-2c94-4d87-9822-a0e7b7b03996",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I wonder if we should have a more descriptive and less platform-dependent `kUsePlatformContextMenu` or something. I imagine this being used in other situations, such as links and images, and on other platforms, such as Flutter for desktop.",
        "createdAt" : "2019-08-29T15:06:05Z",
        "updatedAt" : "2019-08-29T22:21:58Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0ee01d4103bdc1ae737ec86eb3f82c5e87aa140",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +1703,1707 @@    // functionality depending on the browser (such as translate). Due to this\n    // we should not show a Flutter toolbar for the editable text elements.\n    if (kIsWeb) {\n      return false;\n    }"
  },
  {
    "id" : "78bdf31b-4eeb-4b8c-b87a-d5d9537247c8",
    "prId" : 40695,
    "prUrl" : "https://github.com/flutter/flutter/pull/40695#pullrequestreview-289561011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "148c7195-0917-40ca-87a8-293e95302f34",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "First call super.initState() and in dispose() call super.dispose() afterwards. This is boilerplate and docs like this will make it so :-)",
        "createdAt" : "2019-09-17T21:26:21Z",
        "updatedAt" : "2019-09-17T22:38:15Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "8a099664-35ff-449f-bd03-1fff512648ed",
        "parentId" : "148c7195-0917-40ca-87a8-293e95302f34",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Good call!",
        "createdAt" : "2019-09-17T21:36:42Z",
        "updatedAt" : "2019-09-17T22:38:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd2a3bbfc0dfbc3624a4736f049e7d1acb865ba",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +773,777 @@  /// void initState() {\n  ///   super.initState();\n  ///   _controller = TextEditingController();\n  /// }\n  ///"
  },
  {
    "id" : "78b36551-eee4-47b5-ba19-24ccffa73716",
    "prId" : 45354,
    "prUrl" : "https://github.com/flutter/flutter/pull/45354#pullrequestreview-327093644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3b024f7-aa2a-4b61-9b61-0651a9525f52",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Why did you create this method instead of handling the range as a parameter only?",
        "createdAt" : "2019-12-03T16:25:29Z",
        "updatedAt" : "2019-12-17T06:32:12Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "34b03496-a941-4595-8d36-146efc533f9c",
        "parentId" : "d3b024f7-aa2a-4b61-9b61-0651a9525f52",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "It's part of the `TextInputClient` interface now.",
        "createdAt" : "2019-12-03T19:42:50Z",
        "updatedAt" : "2019-12-17T06:32:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "a68a2f2f-62bc-446f-b2e3-081818e4917f",
        "parentId" : "d3b024f7-aa2a-4b61-9b61-0651a9525f52",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Oh I see, I didn't realize how that worked.  Thanks.",
        "createdAt" : "2019-12-04T19:23:55Z",
        "updatedAt" : "2019-12-17T06:32:12Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "495233d442afeab90178a337c17f03cba41e976b",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1837,1841 @@\n  @override\n  void showAutocorrectionPromptRect(int start, int end) {\n    setState(() {\n      _currentPromptRectRange = TextRange(start: start, end: end);"
  },
  {
    "id" : "815ba153-48c1-47cf-a8b3-15de043374d4",
    "prId" : 48917,
    "prUrl" : "https://github.com/flutter/flutter/pull/48917#pullrequestreview-354063491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66b34a96-2871-4e41-9a7b-4008bff11105",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Is null ok? If not, assert and also update the doc comment above?",
        "createdAt" : "2020-02-05T21:50:40Z",
        "updatedAt" : "2020-02-05T22:24:28Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4822286f54a6073dbd4db67bd1e557313a60f4",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +390,394 @@    this.cursorOffset,\n    this.paintCursorAboveText = false,\n    this.selectionHeightStyle = ui.BoxHeightStyle.tight,\n    this.selectionWidthStyle = ui.BoxWidthStyle.tight,\n    this.scrollPadding = const EdgeInsets.all(20.0),"
  }
]