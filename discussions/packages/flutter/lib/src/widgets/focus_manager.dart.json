[
  {
    "id" : "7eb19559-a5ab-48df-bd76-8bc43f517b16",
    "prId" : 28169,
    "prUrl" : "https://github.com/flutter/flutter/pull/28169#pullrequestreview-212378750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91dba991-0dab-462a-ba36-301043497f5f",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Doesn't setFirstFocus() already call detach?\r\n\r\nI can't say I completely understand this, however setFirstFocus() seems to DTRT?\r\n",
        "createdAt" : "2019-02-20T17:58:33Z",
        "updatedAt" : "2019-02-21T05:00:39Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "c47a8aba-bb3d-4918-88d5-ad8d312d6ad0",
        "parentId" : "91dba991-0dab-462a-ba36-301043497f5f",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "It does, but it has an assert before the detach that forces the child to either not have a parent, or to have the current node as a parent, so it fires the assert if the child is currently the child of another node.\r\n\r\nMaybe the assert is wrong? I've modified things to remove the assert instead of doing the detach here.",
        "createdAt" : "2019-02-20T20:33:35Z",
        "updatedAt" : "2019-02-21T05:01:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "f080897b-3b83-4a50-8cc7-ef38f9b5ef67",
        "parentId" : "91dba991-0dab-462a-ba36-301043497f5f",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I think we talked about that. Sounds good.",
        "createdAt" : "2019-03-08T17:01:04Z",
        "updatedAt" : "2019-03-08T17:05:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8484272a6f71c255cf65e24ef3f96cbf7872ef5",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +351,355 @@    if (child._parent == null || child._parent == this)\n      return;\n    if (child.isFirstFocus) {\n      setFirstFocus(child);\n    } else {"
  },
  {
    "id" : "f09e06f5-e9b6-4cd6-b69c-0567fbb3b0f4",
    "prId" : 30040,
    "prUrl" : "https://github.com/flutter/flutter/pull/30040#pullrequestreview-219765765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db5cbfcc-4393-44a6-adf5-14e558618802",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "per our discussion, would be good to put a book about focus here",
        "createdAt" : "2019-03-27T19:54:16Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2a79fbff-48cc-41d6-a9c1-ece1ee726375",
        "parentId" : "db5cbfcc-4393-44a6-adf5-14e558618802",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yeah, already well on my way.",
        "createdAt" : "2019-03-27T23:21:37Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b22cd54f96244b8038b11c98b3179bf2387fab21",
    "line" : 326,
    "diffHunk" : "@@ -1,1 +302,306 @@///   * [FocusManager], a singleton that manages the focus and distributes key\n///     events to focused nodes.\nclass FocusNode with DiagnosticableTreeMixin, ChangeNotifier {\n  /// Creates a focus node.\n  ///"
  },
  {
    "id" : "91a77f3e-c4da-4ba0-9373-2d5a629d2452",
    "prId" : 30040,
    "prUrl" : "https://github.com/flutter/flutter/pull/30040#pullrequestreview-220729625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14a354d8-6531-4688-9148-25b534f4c2aa",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Only because I like List.map:\r\n```\r\nint count = 1;\r\nreturn _children.map<DiagnosticsNode>(\r\n  (FocusNode child) => child.toDiagnosticsNode(name: 'child ${count++}')\r\n).toList();\r\n````\r\n",
        "createdAt" : "2019-03-28T19:04:48Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "f90938c3-2f54-4b68-9337-93bd54bdfc82",
        "parentId" : "14a354d8-6531-4688-9148-25b534f4c2aa",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Lovely.  Done.",
        "createdAt" : "2019-03-29T23:51:16Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b22cd54f96244b8038b11c98b3179bf2387fab21",
    "line" : 757,
    "diffHunk" : "@@ -1,1 +712,716 @@\n  @override\n  List<DiagnosticsNode> debugDescribeChildren() {\n    int count = 1;\n    return _children.map<DiagnosticsNode>((FocusNode child) {"
  },
  {
    "id" : "1c830fb2-b67b-477f-807c-c9aea3aec141",
    "prId" : 30040,
    "prUrl" : "https://github.com/flutter/flutter/pull/30040#pullrequestreview-220210268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7030958e-eed1-4d4a-a7a9-65baf2d2fe91",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2019-03-28T19:54:27Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "b22cd54f96244b8038b11c98b3179bf2387fab21",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +120,124 @@/// then removed, the previous node receives focus again.\n///\n/// The focus node hierarchy can be traversed using the [parent], [children],\n/// [ancestors] and [descendants] accessors.\n///"
  },
  {
    "id" : "d97cb6fc-2bd2-4519-a62f-8bc9e6f7eab7",
    "prId" : 30040,
    "prUrl" : "https://github.com/flutter/flutter/pull/30040#pullrequestreview-220729625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "689fc3c8-78e7-49f9-81e3-77aa99849b3c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The conventional format for properties define this way has the field next:\r\n```\r\nString get debugLabel => _debugLabel;\r\nString _debugLabel;\r\nset debugLabel(String value)...\r\n```\r\n\r\nThe rendering classes slavishly adhere to this.",
        "createdAt" : "2019-03-28T22:10:31Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "9330d649-aa23-49dc-870f-6dfb614f7b61",
        "parentId" : "689fc3c8-78e7-49f9-81e3-77aa99849b3c",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK, done.",
        "createdAt" : "2019-03-29T22:28:25Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b22cd54f96244b8038b11c98b3179bf2387fab21",
    "line" : 376,
    "diffHunk" : "@@ -1,1 +346,350 @@  ///\n  /// Will always return null in release builds.\n  String get debugLabel => _debugLabel;\n  String _debugLabel;\n  set debugLabel(String value) {"
  },
  {
    "id" : "04c74b16-5c07-4149-bf16-fd560450689b",
    "prId" : 30040,
    "prUrl" : "https://github.com/flutter/flutter/pull/30040#pullrequestreview-220729625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f279e5c-e908-4edd-97e9-7e83c67abb01",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Should this be \r\n```\r\nif  (scope._focusedChildren.remove(this))\r\n  _manager.willUnfocusNode(this);\r\n```",
        "createdAt" : "2019-03-28T22:29:15Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "2a13c040-aa6c-4ff2-b0d2-2ed55a5e9c42",
        "parentId" : "8f279e5c-e908-4edd-97e9-7e83c67abb01",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "No, that won't work.  It's possible to call this before the request has been acted upon, which would be before the `_focusedChildren` are updated (which happens when the primary focus is notified that it has the focus), meaning that it wouldn't get canceled even though it should have been.",
        "createdAt" : "2019-03-29T22:56:18Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b22cd54f96244b8038b11c98b3179bf2387fab21",
    "line" : 534,
    "diffHunk" : "@@ -1,1 +500,504 @@      return;\n    }\n    scope._focusedChildren.remove(this);\n    _manager?._willUnfocusNode(this);\n  }"
  },
  {
    "id" : "42bd03e8-4dc3-4942-83bd-65e9fea6a136",
    "prId" : 30040,
    "prUrl" : "https://github.com/flutter/flutter/pull/30040#pullrequestreview-220729625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d24f1013-d97f-423c-80f4-fc5cb9e032c2",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Shouldn't there be an \"if needed\" short-circuit check here?\r\n\r\nThe short circuit does happen a few lines down, `if (child._parent == this)`; just expected to see a parent/context compare and return here.",
        "createdAt" : "2019-03-28T22:49:50Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "d46eb17a-4393-4be2-826b-1ef617fd46b6",
        "parentId" : "d24f1013-d97f-423c-80f4-fc5cb9e032c2",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Moved the short circuit up.",
        "createdAt" : "2019-03-29T23:19:30Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b22cd54f96244b8038b11c98b3179bf2387fab21",
    "line" : 605,
    "diffHunk" : "@@ -1,1 +570,574 @@  void _reparent(FocusNode child) {\n    assert(child != null);\n    assert(child != this, 'Tried to make a child into a parent of itself.');\n    if (child._parent == this) {\n      assert(_children.contains(child), \"Found a node that says it's a child, but doesn't appear in the child list.\");"
  },
  {
    "id" : "659cc6f9-5d49-4050-8523-bc189e03d194",
    "prId" : 30040,
    "prUrl" : "https://github.com/flutter/flutter/pull/30040#pullrequestreview-220729625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef899254-8807-47a8-b3cd-e5ae85851184",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It would be useful to add a test that verifies that debugFillProperties works. Like the one in test/material/dialog_theme_test.dart",
        "createdAt" : "2019-03-29T00:12:00Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "aeec7209-d5cf-4375-bd8e-76e6a8582def",
        "parentId" : "ef899254-8807-47a8-b3cd-e5ae85851184",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done, for both `FocusNode` and `FocusScopeNode`.",
        "createdAt" : "2019-03-29T23:42:58Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b22cd54f96244b8038b11c98b3179bf2387fab21",
    "line" : 749,
    "diffHunk" : "@@ -1,1 +704,708 @@\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties.add(DiagnosticsProperty<BuildContext>('context', context, defaultValue: null));"
  },
  {
    "id" : "2d1bccce-efe2-4aaa-9fad-f3e7100dcf6c",
    "prId" : 30040,
    "prUrl" : "https://github.com/flutter/flutter/pull/30040#pullrequestreview-221399679",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b29dcaf1-0dc5-4694-9ac8-90ba8d210e0c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "There should be a test for this.",
        "createdAt" : "2019-04-01T23:49:53Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "401d8429-f2ed-430d-9edf-a03051bda735",
        "parentId" : "b29dcaf1-0dc5-4694-9ac8-90ba8d210e0c",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Added.",
        "createdAt" : "2019-04-02T00:28:33Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b22cd54f96244b8038b11c98b3179bf2387fab21",
    "line" : 1353,
    "diffHunk" : "@@ -1,1 +1045,1049 @@///\n/// Will return an empty string in release builds.\nString debugDescribeFocusTree() {\n  assert(WidgetsBinding.instance != null);\n  String result;"
  },
  {
    "id" : "cfdb8164-3fa1-42a4-a90a-ba84e6bbe26a",
    "prId" : 30040,
    "prUrl" : "https://github.com/flutter/flutter/pull/30040#pullrequestreview-226765465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4ce2838-1040-43f6-a4bd-5e1e78865fec",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "how useful is it to pass the node?",
        "createdAt" : "2019-04-12T23:32:16Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "727bff3d-e20d-4a68-a777-a12342265e2c",
        "parentId" : "a4ce2838-1040-43f6-a4bd-5e1e78865fec",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Pretty useful.  Otherwise you can't use the same callback for multiple `onKey` handlers, because you won't know which one sent you the event. Also, there is useful information in the node (like whether or not it's the primary focus, the bounds of the widget it's attached to, and the context it resides in) that could be useful things to look at in the handler.",
        "createdAt" : "2019-04-15T17:00:57Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b22cd54f96244b8038b11c98b3179bf2387fab21",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +18,22 @@///\n/// The [node] is the node that received the event.\ntypedef FocusOnKeyCallback = bool Function(FocusNode node, RawKeyEvent event);\n\n/// An attachment point for a [FocusNode]."
  },
  {
    "id" : "a256e55b-87d5-4cf9-b401-4138d5daa79e",
    "prId" : 30076,
    "prUrl" : "https://github.com/flutter/flutter/pull/30076#pullrequestreview-231942403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a620722c-c8f5-44b0-8e37-0f05b8f9ebb8",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "We use \"traversal\" a lot, without really saying what's meant.  It might be helpful to define what we mean by focus traversal here.",
        "createdAt" : "2019-04-26T22:48:19Z",
        "updatedAt" : "2019-05-10T03:17:35Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "0795e9b4-29e9-4acd-aba9-cd636ab37667",
        "parentId" : "a620722c-c8f5-44b0-8e37-0f05b8f9ebb8",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2019-04-29T23:08:04Z",
        "updatedAt" : "2019-05-10T03:17:35Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "61e3255f29b8160319c23b5720121c3743d1149a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +194,198 @@///\n/// ## Focus Traversal\n///\n/// The term _traversal_, sometimes called _tab traversal_, refers to moving the\n/// focus from one widget to the next in a particular order (also sometimes"
  },
  {
    "id" : "b41049bc-71be-49c3-96ff-a2b7eff69dc6",
    "prId" : 35913,
    "prUrl" : "https://github.com/flutter/flutter/pull/35913#pullrequestreview-260376950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e50c331e-477d-43a5-b245-9a4727050624",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Just curious, why was this originally in a `setState()`?",
        "createdAt" : "2019-07-10T21:46:00Z",
        "updatedAt" : "2019-07-10T21:46:23Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "213de194-a147-432a-8cbc-67d52a3eb279",
        "parentId" : "e50c331e-477d-43a5-b245-9a4727050624",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Because it was changing the state, so in order for the component to be rebuilt (since it wasn't listening to focus changes), it needed the `setState`. Now that it's listening for changes, it doesn't need it.\r\n\r\nHowever, most likely the tree would have been rebuilt even without the `setState`, because there's probably a `Focus` widget in the tree above this that would cause the tree to be rebuilt when its focus changed anyhow.",
        "createdAt" : "2019-07-10T21:52:48Z",
        "updatedAt" : "2019-07-10T21:52:48Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4960801f5f68a16e02371c6858dd39b575e1917",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +297,301 @@///       onTap: () {\n///         if (_focused) {\n///             _node.unfocus();\n///         } else {\n///            _node.requestFocus();"
  },
  {
    "id" : "d4c91883-c961-455b-bb04-a9b01ad59d1f",
    "prId" : 37825,
    "prUrl" : "https://github.com/flutter/flutter/pull/37825#pullrequestreview-274592422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb4c3826-255f-4d6c-820f-3eac2939da23",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Maybe use a `ValueNotifier<FocusHighlightMode>` instance here? Might eliminate some of the boilerplate.",
        "createdAt" : "2019-08-13T19:52:45Z",
        "updatedAt" : "2019-08-16T16:21:58Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "c38d8be2-c570-4086-aaef-da12f6ab15ae",
        "parentId" : "bb4c3826-255f-4d6c-820f-3eac2939da23",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "No, I didn't do that because the `ValueNotifier` only provides for a `VoidCallback`, and I wanted to send the value with the callback.  If I used `ValueNotifier`, I could wrap the `ValueChanged<FocusHighlightMode>` in a void callback closure, and pass the value of `_highlightMode` when the void callback is called, but then I couldn't remove the closure later without keeping it in a private list, which is more error-prone, and needs almost as much code as the boilerplate.",
        "createdAt" : "2019-08-13T22:54:04Z",
        "updatedAt" : "2019-08-16T16:21:58Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b33a3f8cb2a623ec610271489683b1e2a56b239",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +1096,1100 @@  }\n\n  // The list of listeners for [highlightMode] state changes.\n  ObserverList<ValueChanged<FocusHighlightMode>> _listeners;\n"
  },
  {
    "id" : "97d10fbe-feec-4ba7-9c79-4fbf82cfc592",
    "prId" : 37825,
    "prUrl" : "https://github.com/flutter/flutter/pull/37825#pullrequestreview-274592422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccfbba29-639c-46e5-a5c0-bbb7d90d69c7",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Where do we remove this \"global route\"?",
        "createdAt" : "2019-08-13T19:56:47Z",
        "updatedAt" : "2019-08-16T16:21:58Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "edd24191-ee1c-4db0-bbcc-bcac69ec8989",
        "parentId" : "ccfbba29-639c-46e5-a5c0-bbb7d90d69c7",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "We don't, because once we construct the `FocusManager`, we never release it: it's a singleton attached to the binding.",
        "createdAt" : "2019-08-13T22:38:20Z",
        "updatedAt" : "2019-08-16T16:21:58Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b33a3f8cb2a623ec610271489683b1e2a56b239",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +1014,1018 @@    rootScope._manager = this;\n    RawKeyboard.instance.addListener(_handleRawKeyEvent);\n    RendererBinding.instance.pointerRouter.addGlobalRoute(_handlePointerEvent);\n  }\n"
  },
  {
    "id" : "a45d31a9-34e9-419a-932b-2c7c2e7f20a3",
    "prId" : 38704,
    "prUrl" : "https://github.com/flutter/flutter/pull/38704#pullrequestreview-276150145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "513a8651-ca40-44cf-8c73-e565b3a9b493",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "If I request focus on a decent node that cannot be focus, we will still reparent the node to this. Will that be a issue later on?",
        "createdAt" : "2019-08-16T19:56:19Z",
        "updatedAt" : "2019-08-16T20:18:22Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "afdf9091-375d-4eb5-9070-12968a5f471b",
        "parentId" : "513a8651-ca40-44cf-8c73-e565b3a9b493",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I guess it will be ok as the node is basically the same as skip-traverse and cannot be explicit focus, but it still need to be in the tree to pass on focus to its parent in case of removal.",
        "createdAt" : "2019-08-16T20:12:11Z",
        "updatedAt" : "2019-08-16T20:18:22Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "01b5d693-efbb-43ce-bbe9-762f0f530537",
        "parentId" : "513a8651-ca40-44cf-8c73-e565b3a9b493",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, exactly.",
        "createdAt" : "2019-08-16T20:15:50Z",
        "updatedAt" : "2019-08-16T20:18:22Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "50692689e54347b1fa84b2d7407a858615a7de64",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +789,793 @@  // Note that this is overridden in FocusScopeNode.\n  void _doRequestFocus() {\n    if (!canRequestFocus) {\n      return;\n    }"
  },
  {
    "id" : "0e64d006-832e-4876-b3c7-8537c2b4e96c",
    "prId" : 42683,
    "prUrl" : "https://github.com/flutter/flutter/pull/42683#pullrequestreview-301584578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b94ebeaa-e81e-48f1-b118-387273f2b6ed",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Perhaps a further optimization here would be to surgically remove the descendants instead of just nuking the whole list. Nuking is probably safer and doing the surgical removal might be more expensive than it is worth, but perhaps with a different data structure (may be set?). Anyway this is good, just something you might think about.\r\n",
        "createdAt" : "2019-10-14T22:15:33Z",
        "updatedAt" : "2019-10-14T22:36:57Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "f26adfcd-38c6-4c4d-aca9-8644c7684bd6",
        "parentId" : "b94ebeaa-e81e-48f1-b118-387273f2b6ed",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Thanks, I'll give that a try and see if it's a win.",
        "createdAt" : "2019-10-14T22:37:50Z",
        "updatedAt" : "2019-10-14T22:37:51Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "571e685e-bfc7-469d-b682-3d4b23c0d8b5",
        "parentId" : "b94ebeaa-e81e-48f1-b118-387273f2b6ed",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "For posterity, it's not: I tried switching to a `Set` and actively managing the set, but it was slower.",
        "createdAt" : "2019-10-14T23:17:50Z",
        "updatedAt" : "2019-10-14T23:17:50Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ef7556d9b6def8f78c87663b0cde3041cf19ed2",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +725,729 @@    _children.remove(node);\n    for (FocusNode ancestor in ancestors) {\n      ancestor._descendants = null;\n    }\n    _descendants = null;"
  },
  {
    "id" : "ba281842-7e6b-4764-8798-5d8625179bb4",
    "prId" : 48589,
    "prUrl" : "https://github.com/flutter/flutter/pull/48589#pullrequestreview-342033024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bba16e6d-65fe-4f0a-ba08-fd161c0deed2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe add a comment here explaining what we do here and why we do it?",
        "createdAt" : "2020-01-13T17:27:42Z",
        "updatedAt" : "2020-01-13T18:03:53Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "29f4b198-892c-4210-b767-ce05e0db558c",
        "parentId" : "bba16e6d-65fe-4f0a-ba08-fd161c0deed2",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2020-01-13T18:03:22Z",
        "updatedAt" : "2020-01-13T19:56:24Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d654cc189f922f6af71a7e5f993bcbd4bd952220",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +862,866 @@    // until the next time it is reparented, so that it's possible to focus\n    // newly added widgets.\n    if (_parent == null) {\n      _requestFocusWhenReparented = true;\n      return;"
  },
  {
    "id" : "7ef1c883-3bb0-4590-8703-541b725901da",
    "prId" : 48589,
    "prUrl" : "https://github.com/flutter/flutter/pull/48589#pullrequestreview-342033024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6fdbe91-5d58-44f3-9b76-e0ab9749b72a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can you also update the doc comment on requestFocus to document this behavior?",
        "createdAt" : "2020-01-13T17:30:01Z",
        "updatedAt" : "2020-01-13T18:03:53Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "98ed8306-7ad3-41d9-8575-96c62e3577d8",
        "parentId" : "e6fdbe91-5d58-44f3-9b76-e0ab9749b72a",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2020-01-13T18:03:26Z",
        "updatedAt" : "2020-01-13T19:56:24Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d654cc189f922f6af71a7e5f993bcbd4bd952220",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +862,866 @@    // until the next time it is reparented, so that it's possible to focus\n    // newly added widgets.\n    if (_parent == null) {\n      _requestFocusWhenReparented = true;\n      return;"
  },
  {
    "id" : "88fa83d4-429c-43a2-a6ad-1d1eef089bf5",
    "prId" : 50319,
    "prUrl" : "https://github.com/flutter/flutter/pull/50319#pullrequestreview-357850646",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3351e8d-23b6-40a7-96ba-4211125bd094",
        "parentId" : null,
        "authorId" : "3f99295b-72d9-4364-a092-b32436309da2",
        "body" : "Maybe not entirely related to this issue, but why is `_manager?.primaryFocus?.unfocus(focusPrevious: focusPrevious);` called when `hasFocus` is `true` and `hasPrimaryFocus` is `false`? The doc of `unfocus` states:\r\n> Has no effect on nodes that return true from [hasFocus], but false from [hasPrimaryFocus].\r\n\r\nEither the doc or the implementation seems to be wrong.",
        "createdAt" : "2020-02-12T13:38:43Z",
        "updatedAt" : "2020-02-12T23:28:18Z",
        "lastEditedBy" : "3f99295b-72d9-4364-a092-b32436309da2",
        "tags" : [
        ]
      },
      {
        "id" : "a070972a-00b1-4f3d-9b37-f8f8c8a4bc93",
        "parentId" : "f3351e8d-23b6-40a7-96ba-4211125bd094",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Looks like the docs are wrong.  Thanks for pointing this out!",
        "createdAt" : "2020-02-12T22:59:22Z",
        "updatedAt" : "2020-02-12T23:28:18Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c775be9357e328296e36e1bfbb96b1709c1ffdc",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +672,676 @@      // the primary instead.\n      _manager?.primaryFocus?.unfocus(focusPrevious: focusPrevious);\n    }\n    _manager?._markUnfocused(this);\n    final FocusScopeNode scope = enclosingScope;"
  },
  {
    "id" : "7177741a-930a-4f54-b379-5712610aa4a7",
    "prId" : 50392,
    "prUrl" : "https://github.com/flutter/flutter/pull/50392#pullrequestreview-356243068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7d789ba-84a3-425e-8c4a-efdb743bb629",
        "parentId" : null,
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "Can you explain why it's necessary to declare `implements Diagnosticable` here? I suspect this is related to an issue we have in our own code.",
        "createdAt" : "2020-02-08T01:15:49Z",
        "updatedAt" : "2020-02-10T21:05:49Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      },
      {
        "id" : "692ace1e-2104-476f-a813-97b1cbeee4d1",
        "parentId" : "b7d789ba-84a3-425e-8c4a-efdb743bb629",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yeah, the short answer is that it's just something I missed doing in a previous PR, and it's temporary.\r\n\r\nThere are some places (now only inside Google: I fixed all the ones in Flutter) that cast the results of calling `toDiagnosticsNode` to a `Diagnosticable`, and if the class only implements `DiagnosticableMixin`, then that cast throws. This is a workaround for that case. See https://github.com/flutter/flutter/pull/49726 for more detail.\r\n\r\nOnce `Diagnosticable` is removed in favor of `DiagnosticableMixin`, this will go away too.",
        "createdAt" : "2020-02-08T01:49:41Z",
        "updatedAt" : "2020-02-10T21:05:49Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "a40dde53-806d-4c3d-af81-beca55264052",
        "parentId" : "b7d789ba-84a3-425e-8c4a-efdb743bb629",
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "Ah, OK, that's a different issue than I thought then. (If you're curious ping me offline, it's not relevant to this change.)",
        "createdAt" : "2020-02-10T20:34:27Z",
        "updatedAt" : "2020-02-10T21:05:49Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      }
    ],
    "commit" : "55c98181d94b438295dbebeb5b40dba3525d2ef9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1187,1191 @@///  * The [focusManager] and [primaryFocus] global accessors, for convenient\n///    access from anywhere to the current focus manager state.\nclass FocusManager with DiagnosticableTreeMixin, ChangeNotifier implements Diagnosticable {\n  /// Creates an object that manages the focus tree.\n  ///"
  },
  {
    "id" : "765d50d0-93e5-4c2f-b0ac-a8b4cea87a38",
    "prId" : 50831,
    "prUrl" : "https://github.com/flutter/flutter/pull/50831#pullrequestreview-363724310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b34842c-7354-4a6b-92c5-0eb38ac48118",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "What does this paragraph mean? Also, it seems contradictory to the previous one. If the value gets cleared, how can it be used to determine the next focus?",
        "createdAt" : "2020-02-24T18:32:50Z",
        "updatedAt" : "2020-02-26T01:30:24Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "94ce89fb-4899-466d-9c24-0c3cd5f85d9d",
        "parentId" : "6b34842c-7354-4a6b-92c5-0eb38ac48118",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I reworded this.  Hopefully it makes more sense?",
        "createdAt" : "2020-02-24T21:46:22Z",
        "updatedAt" : "2020-02-26T01:30:24Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "01d5ebdcf7996a69d7b51129cd3fccf3990b1109",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +142,146 @@  /// [previouslyFocusedChild] does.\n  ///\n  /// Focusing the scope in this way clears the [FocusScopeNode.focusedChild]\n  /// history for the enclosing scope when it receives focus. Because of this,\n  /// calling a traversal method like [FocusNode.nextFocus] after unfocusing"
  },
  {
    "id" : "df8b21df-89a3-42fc-a0d2-d778486fd19e",
    "prId" : 50831,
    "prUrl" : "https://github.com/flutter/flutter/pull/50831#pullrequestreview-364567104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d884232-8302-4dce-bb98-db58db0fca16",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Can you explain to me why we dont want to clear the focusedChildren if the scope can not request focus?\r\nThe behavior I am expecting is when a scope become focusable again it should start without any prefocused children?",
        "createdAt" : "2020-02-25T22:57:51Z",
        "updatedAt" : "2020-02-26T01:30:24Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "0d794651-bb07-4ce3-89de-e03dab5e9994",
        "parentId" : "2d884232-8302-4dce-bb98-db58db0fca16",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I will expect this at least removing itself from the scope's focusedchildren same as line 822?",
        "createdAt" : "2020-02-25T22:58:46Z",
        "updatedAt" : "2020-02-26T01:30:24Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "a4f06ed9-1d8d-4baa-97c2-fe28e31d781a",
        "parentId" : "2d884232-8302-4dce-bb98-db58db0fca16",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I didn't want to do it because an entire subtree can be made unfocusable by setting the scope's `canRequestFocus` to false, and I didn't want to clear all the state when that happens. Imagine an app, where you make the editing part of the window unfocusable while in some state (e.g. read-only mode). You don't want to lose the focus history and not return to the current focus in that window just because you made it unfocusable temporarily.\r\n\r\nFor the other disposition, we have to remove the current one from the list, since we're planning on focusing the previous one, so it's a different case from this one.",
        "createdAt" : "2020-02-26T00:58:50Z",
        "updatedAt" : "2020-02-26T01:30:24Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "05c3c99e-c87a-4cce-808c-e4b1a7f90f3c",
        "parentId" : "2d884232-8302-4dce-bb98-db58db0fca16",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I am on the fence about clearing anything though: it might make more sense to just focus the scope, and not touch the `_focusedChildren` here. It would mean that as soon as you hit \"next\", you get back to the thing you just unfocused, but I'm not sure that's wrong.",
        "createdAt" : "2020-02-26T01:01:28Z",
        "updatedAt" : "2020-02-26T01:30:24Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "b19769e6-157d-40fe-8250-3ee16bb3c9af",
        "parentId" : "2d884232-8302-4dce-bb98-db58db0fca16",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "thanks for explaining. I think there might not be a correct answer, it is down to different use cases. I am ok with keep what we have now and maybe tweak it later if needed",
        "createdAt" : "2020-02-26T01:11:53Z",
        "updatedAt" : "2020-02-26T01:30:24Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "b398d6be-e2ec-46f6-8c81-f39d3ebdac0e",
        "parentId" : "2d884232-8302-4dce-bb98-db58db0fca16",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, part of why I made this into an enum is so we can add other modes later without breaking things. And we can tweak it if it turns out to just be wrong.",
        "createdAt" : "2020-02-26T01:24:30Z",
        "updatedAt" : "2020-02-26T01:30:24Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "01d5ebdcf7996a69d7b51129cd3fccf3990b1109",
    "line" : 262,
    "diffHunk" : "@@ -1,1 +809,813 @@\n        while (!scope.canRequestFocus) {\n          scope = scope.enclosingScope ?? _manager?.rootScope;\n        }\n        scope?._doRequestFocus(findFirstFocus: false);"
  },
  {
    "id" : "54e7258d-d95b-41dd-8d08-b8b833dd1025",
    "prId" : 52990,
    "prUrl" : "https://github.com/flutter/flutter/pull/52990#pullrequestreview-380619593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f57732e1-4024-427b-9c90-05d540de6af0",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Where are we checking if there's a mouse connected?",
        "createdAt" : "2020-03-21T03:05:59Z",
        "updatedAt" : "2020-04-02T22:01:57Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "9aa76d51-5959-422c-9ad5-2f3a855c3fea",
        "parentId" : "f57732e1-4024-427b-9c90-05d540de6af0",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Good point. I had removed it here because in the absence of any events, there's no way to know if the mouse is actually connected until an event occurs.  I think I'll add it back in for mobile, though, because by default (before any events), `mouseIsConnected` returns false, but if an event occurs before _lastInteractionWasTouch is accessed it could improve accuracy.\r\n\r\nI don't want to make the default for desktop platforms depend on `mouseIsConnected`, however, because then the default will almost always start off as touch, which is probably wrong, and the moment it gets any pointer event it will be updated to be correct anyhow.\r\n\r\nMainly, this change is just trying to make a good educated guess before there's any information available, and for most apps, it's kind of academic: as soon as the user interacts, it will update to the right value anyhow.",
        "createdAt" : "2020-03-24T19:11:33Z",
        "updatedAt" : "2020-04-02T22:01:57Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3a1e6ee84b2197d3ef73da6c5d40fc9daa180ea",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1370,1374 @@  bool get _lastInteractionWasTouch {\n    // Assume that if we're on one of these mobile platforms, or if there's no\n    // mouse connected, that the initial interaction will be touch-based, and\n    // that it's traditional mouse and keyboard on all others.\n    //"
  },
  {
    "id" : "c81ea155-c56d-4231-a224-68d4ec9155dc",
    "prId" : 54306,
    "prUrl" : "https://github.com/flutter/flutter/pull/54306#pullrequestreview-390350532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a1cf11b-fd77-4f8c-81d0-4348575eb490",
        "parentId" : null,
        "authorId" : "6cff55ea-5671-4703-a864-79795e21a275",
        "body" : "Can the logic that determines to call notifyHighlightModeListeners() be in the setter for highlightMode?",
        "createdAt" : "2020-04-08T20:47:15Z",
        "updatedAt" : "2020-04-10T19:38:32Z",
        "lastEditedBy" : "6cff55ea-5671-4703-a864-79795e21a275",
        "tags" : [
        ]
      },
      {
        "id" : "f2b50d72-e7ee-4e90-890b-6df0188111f1",
        "parentId" : "2a1cf11b-fd77-4f8c-81d0-4348575eb490",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I don't want there to be a public setter for `highlightMode`, but I can make a private one, sure.",
        "createdAt" : "2020-04-08T21:19:26Z",
        "updatedAt" : "2020-04-10T19:38:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "3f3397a4-a46a-4d3a-aae7-45edc6bb8125",
        "parentId" : "2a1cf11b-fd77-4f8c-81d0-4348575eb490",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Actually, adding a private setter overly complicates things, in my opinion, since it introduces yet another level of getters and setters (have to now have a `__highlightMode` or some such). Nothing else sets the private `_highlightMode` value, so it's not like there is duplication of logic.\r\n\r\nI did add a comment to help explain it.",
        "createdAt" : "2020-04-08T21:37:37Z",
        "updatedAt" : "2020-04-10T19:38:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a18eb81069602a83fb83c745bfd10ddf04099d7b",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +1472,1476 @@    // _highlightMode could be null, so we want to compare with the return value\n    // for the getter, since that's what clients will be looking at.\n    final FocusHighlightMode oldMode = highlightMode;\n    _highlightMode = newMode;\n    if (highlightMode != oldMode) {"
  }
]