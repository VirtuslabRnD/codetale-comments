[
  {
    "id" : "efe63da7-0a67-4bc6-9adb-ba81eee2ea40",
    "prId" : 33298,
    "prUrl" : "https://github.com/flutter/flutter/pull/33298#pullrequestreview-245576452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd9bd8a8-c0e7-47ae-97b2-c4a502487071",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "What is the purpose of having this as a class? It doesn't look like it is dispatching so much as just a small wrapper around `action.invoke`.  Could this just a be function? Or are you anticipating subclasses of `ActionDispatcher`?",
        "createdAt" : "2019-06-04T16:32:32Z",
        "updatedAt" : "2019-06-04T16:48:37Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "cbd5cfb9-6c29-4ffd-b64f-9d4ff82662e1",
        "parentId" : "fd9bd8a8-c0e7-47ae-97b2-c4a502487071",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, I'm anticipating having subclasses. Take a look at `dev/manual_tests/lib/actions.dart` and you'll see an example of this.  Having the ability to subclass and replace your own `ActionDispatcher` means you can have complete control over the dispatch.  I could have this be just a single \"invoke\" function that you supply, but it feels more like a class because there could be other operations we want to add in the future (mayby `canInvoke`, or something), and this gives us a place to put it.",
        "createdAt" : "2019-06-04T16:56:59Z",
        "updatedAt" : "2019-06-04T16:56:59Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e6f7874df466b96626655339f2187fcdbc0485b",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +131,135 @@\n/// An action manager that simply invokes the actions given to it.\nclass ActionDispatcher extends Diagnosticable {\n  /// Const constructor so that subclasses can be const.\n  const ActionDispatcher();"
  },
  {
    "id" : "fc0946e7-ed99-4fb8-b344-c9d75e47fe19",
    "prId" : 41245,
    "prUrl" : "https://github.com/flutter/flutter/pull/41245#pullrequestreview-293927197",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffe16206-efe1-49dc-ae9a-5caa230b0883",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "It would be good to have a test for this (unless I missed it below).\r\n",
        "createdAt" : "2019-09-26T18:44:30Z",
        "updatedAt" : "2019-09-26T18:45:05Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eee062581d5d1f8ad4799a0910c2c2b6b6bd3ff9",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +293,297 @@    Action action;\n\n    if (identical(intent, Intent.doNothing)) {\n      return false;\n    }"
  },
  {
    "id" : "ce94670b-5623-4910-b74d-891778bcc0b3",
    "prId" : 42940,
    "prUrl" : "https://github.com/flutter/flutter/pull/42940#pullrequestreview-385133429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f1fdd92-1057-49a8-b3e2-fb4d29273ef0",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Should this be documented that the context of the primary focus may be used if no context is provided?",
        "createdAt" : "2020-03-26T20:08:50Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "77061ee8-8d04-40fd-8e6f-1ec1a4cac3f8",
        "parentId" : "1f1fdd92-1057-49a8-b3e2-fb4d29273ef0",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2020-03-31T22:23:00Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bc3b796a17c25612a6204aadd9cd3d592423dbe",
    "line" : 428,
    "diffHunk" : "@@ -1,1 +379,383 @@    assert(action != null);\n    assert(intent != null);\n    context ??= primaryFocus?.context;\n    if (action.enabled) {\n      if (action is ContextAction) {"
  },
  {
    "id" : "be57066e-81cb-4c46-bf86-0034b0e58280",
    "prId" : 42940,
    "prUrl" : "https://github.com/flutter/flutter/pull/42940#pullrequestreview-385133429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76344ca1-2638-4d96-840b-da2422aa7ef0",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This paragraph may benefit from an actual code sample?",
        "createdAt" : "2020-03-26T20:33:36Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "6cdef225-0940-4363-af25-049f8a725cb2",
        "parentId" : "76344ca1-2638-4d96-840b-da2422aa7ef0",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, definitely. I'll see what I can come up with.",
        "createdAt" : "2020-03-31T22:29:05Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bc3b796a17c25612a6204aadd9cd3d592423dbe",
    "line" : 538,
    "diffHunk" : "@@ -1,1 +478,482 @@  /// not enabled.\n  ///\n  /// This is intended to be used in widgets which have something similar to an\n  /// `onTap` handler, which takes a `VoidCallback`, and can be set to the\n  /// result of calling this function."
  },
  {
    "id" : "093f894a-0216-43b4-9e83-5fd59688dc64",
    "prId" : 42940,
    "prUrl" : "https://github.com/flutter/flutter/pull/42940#pullrequestreview-385133429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3aeaada2-a43a-4688-be29-b0e3874bc319",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "My understanding is that in order to use this correctly, you're not allowed to cache the returned handler between builds. When the context's dependencies change, you are required to call this again in case the action is disabled now. Maybe this should be part of the documentation? ",
        "createdAt" : "2020-03-26T20:38:03Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "62c5f1d8-c6e8-40c3-b341-8be04f933248",
        "parentId" : "3aeaada2-a43a-4688-be29-b0e3874bc319",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "e.g. somehow mention that this creates a dependency similarly to how it's explained on the find method.",
        "createdAt" : "2020-03-26T20:38:53Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "e71cb5c7-e3ee-466f-8b7b-e294a493a56d",
        "parentId" : "3aeaada2-a43a-4688-be29-b0e3874bc319",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Explained, and clarified below too.",
        "createdAt" : "2020-03-31T22:29:17Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bc3b796a17c25612a6204aadd9cd3d592423dbe",
    "line" : 545,
    "diffHunk" : "@@ -1,1 +485,489 @@  /// that if the actions change, the context will be rebuilt and find the\n  /// updated action.\n  static VoidCallback handler<T extends Intent>(BuildContext context, T intent, {bool nullOk = false}) {\n    final Action<T> action = Actions.find<T>(context, nullOk: nullOk);\n    if (action != null && action.enabled) {"
  },
  {
    "id" : "edd03b02-4a71-4216-868f-f952f9bf76b6",
    "prId" : 42940,
    "prUrl" : "https://github.com/flutter/flutter/pull/42940#pullrequestreview-386709436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "767c62f0-2b02-459a-9e8e-dc4752eb7f81",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Could you just remove found actions from enabledState in the for loop above to avoid this extra check? (and also the extra foundAction set could be removed then).",
        "createdAt" : "2020-03-26T20:47:50Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "89ea5275-fea0-49d0-9b4c-08ae60022735",
        "parentId" : "767c62f0-2b02-459a-9e8e-dc4752eb7f81",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "No, they're looping over different things.  One is looping over the set of actions in the widget, and the other is looping over the old actions in the enabled state that is about to be replaced.\r\n\r\nThe second loop unregisters from any actions that weren't preserved in the first loop. I added some docs.\r\n\r\nOr maybe I'm just not seeing what you're talking about...",
        "createdAt" : "2020-03-31T22:44:59Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "1cf8e460-bd95-4a1d-9da7-86f9812d7ae0",
        "parentId" : "767c62f0-2b02-459a-9e8e-dc4752eb7f81",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "lines 637/638 effectively iterate over all actions in enabledState that were not added to foundActions. So in line 625 could you just do `enabledActions.removeKey(action)` instead of `foundActions.add(action)`? At the end of the first loop, `enabledActions` would only contain the actions that were not preserved, and in the second loop you could just iterate over enabledState.keys and remove their listeners unconditionally. That's what I meant. But if that sounds more complicated, I am also ok with keeping this as-is.\r\n\r\nThis of course only works if widget.actions.values doesn't include the same action twice....\r\n\r\n",
        "createdAt" : "2020-04-02T18:52:21Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "79c73705-a5fd-4fb7-893e-50155fda820c",
        "parentId" : "767c62f0-2b02-459a-9e8e-dc4752eb7f81",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Actually, your current implementation is a little more resilient to duplicated actions, so maybe just leave this as-is.",
        "createdAt" : "2020-04-02T18:56:36Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bc3b796a17c25612a6204aadd9cd3d592423dbe",
    "line" : 786,
    "diffHunk" : "@@ -1,1 +682,686 @@    // going to be transferred to the new one.\n    for (final Action<Intent> action in enabledState.keys) {\n      if (!foundActions.contains(action)) {\n        action.removeActionListener(_handleActionChanged);\n      }"
  },
  {
    "id" : "5df68478-6e4b-4782-a70c-e6c129e3599e",
    "prId" : 42940,
    "prUrl" : "https://github.com/flutter/flutter/pull/42940#pullrequestreview-386911993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fef99e6a-225d-4c46-85af-389d1bb746c9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: Can the docs above say something about the return type: If I implement my own action, what should I return here?",
        "createdAt" : "2020-04-02T18:20:29Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ef8b351c-fd31-4505-8e51-49d1d2a7958a",
        "parentId" : "fef99e6a-225d-4c46-85af-389d1bb746c9",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, I added a comment, and a small code sample.",
        "createdAt" : "2020-04-03T03:16:09Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bc3b796a17c25612a6204aadd9cd3d592423dbe",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +116,120 @@  /// ```\n  @protected\n  Object invoke(covariant T intent);\n\n  /// Register a callback to listen for changes to the state of this action."
  },
  {
    "id" : "0d87882f-fb2a-4f65-bca3-a636c4a27ead",
    "prId" : 42940,
    "prUrl" : "https://github.com/flutter/flutter/pull/42940#pullrequestreview-386912059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3e57c1d-143c-46f1-b558-fdec3e5973d9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same here: maybe say something about the return type in the doc.",
        "createdAt" : "2020-04-02T18:25:36Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "5d15f290-7b60-4149-8025-21296ab93928",
        "parentId" : "f3e57c1d-143c-46f1-b558-fdec3e5973d9",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2020-04-03T03:16:23Z",
        "updatedAt" : "2020-04-06T20:51:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bc3b796a17c25612a6204aadd9cd3d592423dbe",
    "line" : 348,
    "diffHunk" : "@@ -1,1 +320,324 @@  @protected\n  @override\n  Object invoke(covariant T intent, [BuildContext context]);\n}\n"
  },
  {
    "id" : "60d5e3b4-65f2-4f8b-900d-e176df910bcd",
    "prId" : 44631,
    "prUrl" : "https://github.com/flutter/flutter/pull/44631#pullrequestreview-322635418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78927de7-2a37-45a5-9163-a0db9dc2781d",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I think `task` here can just be a positional argument.",
        "createdAt" : "2019-11-25T22:41:32Z",
        "updatedAt" : "2019-12-02T18:10:26Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "af9bbad1-dfa3-4016-916a-255370144131",
        "parentId" : "78927de7-2a37-45a5-9163-a0db9dc2781d",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "The `_mayTriggerCallback` called in `didUpdateWidget` does not have a task, but an `oldWidget` instead.",
        "createdAt" : "2019-11-25T23:02:20Z",
        "updatedAt" : "2019-12-02T18:10:26Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "73b7b75f76f65e55f3d0da5b31c262553b00a3ca",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +651,655 @@  // current widget (before doing `task`) otherwise. The new states are always\n  // collected from the current widget.\n  void _mayTriggerCallback({VoidCallback task, FocusableActionDetector oldWidget}) {\n    bool shouldShowHoverHighlight(FocusableActionDetector target) {\n      return _hovering && target.enabled && _canShowHighlight;"
  },
  {
    "id" : "d2103187-95ff-433e-92fa-cec11e8291fd",
    "prId" : 44631,
    "prUrl" : "https://github.com/flutter/flutter/pull/44631#pullrequestreview-322634705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "527ef48c-aa27-4136-8a4c-6a93ca1112bf",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "If the task is calling `setState`, isn't it possible that it won't actually execute the contents of the `setState` function arg right away? Although, I'm not sure anything needs to call `setState` in the task anymore, so it may be moot.",
        "createdAt" : "2019-11-25T22:49:35Z",
        "updatedAt" : "2019-12-02T18:10:26Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "e04d47be-88c8-45ed-af2a-fa7142f74c09",
        "parentId" : "527ef48c-aa27-4136-8a4c-6a93ca1112bf",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "I think according to the doc of `setState` the content is run synchronously.",
        "createdAt" : "2019-11-25T23:00:29Z",
        "updatedAt" : "2019-12-02T18:10:26Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "73b7b75f76f65e55f3d0da5b31c262553b00a3ca",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +664,668 @@    final bool didShowFocusHighlight = shouldShowFocusHighlight(oldTarget);\n    if (task != null)\n      task();\n    final bool doShowHoverHighlight = shouldShowHoverHighlight(widget);\n    final bool doShowFocusHighlight = shouldShowFocusHighlight(widget);"
  },
  {
    "id" : "40705372-a0ce-42f4-9627-7f5cb613e19b",
    "prId" : 44867,
    "prUrl" : "https://github.com/flutter/flutter/pull/44867#pullrequestreview-317128283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74201b6c-3bf2-40d1-8e65-93ed202bc6fd",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "I like the concept, but don't love the name `FocusableActionDetector`. However, as all the suggestions I could come up with are worse, perhaps I should just keep this to myself :).\r\n",
        "createdAt" : "2019-11-14T06:05:51Z",
        "updatedAt" : "2019-11-19T00:18:06Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "54fa519e-00d6-4774-8f8c-dabb8b6b9a9c",
        "parentId" : "74201b6c-3bf2-40d1-8e65-93ed202bc6fd",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yeah, I don't love the name either.  It's the best I could come up with, though: it has to do with focus, actions, shortcuts, and hover, and it doesn't have a visual representation. `FocusableShortcutActionsAndHoverDetector` seemed like a mouthful. :-)",
        "createdAt" : "2019-11-14T17:22:47Z",
        "updatedAt" : "2019-11-19T00:18:06Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "64ade3f5eea5323b0ba4bc260b85b7d3f262cfbc",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +510,514 @@///\n/// It hosts its own [FocusNode] or uses [focusNode], if given.\nclass FocusableActionDetector extends StatefulWidget {\n  /// Create a const [FocusableActionDetector].\n  ///"
  },
  {
    "id" : "0394e3b7-72d4-40c0-a854-c76d80d00f00",
    "prId" : 44867,
    "prUrl" : "https://github.com/flutter/flutter/pull/44867#pullrequestreview-318523255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a631752e-23fe-4b03-aef5-5baf66c482a8",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "\"... can be used to give a control the required ...\"\r\n\r\nSomething seems to be missing here...",
        "createdAt" : "2019-11-18T18:02:51Z",
        "updatedAt" : "2019-11-19T00:18:06Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "64ade3f5eea5323b0ba4bc260b85b7d3f262cfbc",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +368,372 @@/// highlights.\n///\n/// This widget can be used to give a control the required detection modes for\n/// focus and hover handling. It is most often used when authoring a new control\n/// widget, and the new control should be enabled for keyboard traversal and"
  },
  {
    "id" : "f3f06a36-3707-4c32-a5d9-9cd2b5d8ef14",
    "prId" : 44867,
    "prUrl" : "https://github.com/flutter/flutter/pull/44867#pullrequestreview-318523255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79e4cc84-85c8-4bd5-9e3c-3fd4aa185a12",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: I believe we usually say \"Whether this widget is enabled or not\"",
        "createdAt" : "2019-11-18T18:04:13Z",
        "updatedAt" : "2019-11-19T00:18:06Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "64ade3f5eea5323b0ba4bc260b85b7d3f262cfbc",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +530,534 @@        super(key: key);\n\n  /// Is this widget enabled or not.\n  ///\n  /// If disabled, will not send any notifications needed to update highlight or"
  },
  {
    "id" : "0ca2edd1-b35c-40c4-8f11-d52d3585b965",
    "prId" : 44867,
    "prUrl" : "https://github.com/flutter/flutter/pull/44867#pullrequestreview-318523255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5ee6911-bde9-4964-b489-7266f5ab05a9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This sentence may miss one or two \"it\" to be a complete sentence?",
        "createdAt" : "2019-11-18T18:04:45Z",
        "updatedAt" : "2019-11-19T00:18:06Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "fe7c50a1-0a9e-40cb-ba37-bb10d320be5b",
        "parentId" : "b5ee6911-bde9-4964-b489-7266f5ab05a9",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same in the next paragraph? ",
        "createdAt" : "2019-11-18T18:05:09Z",
        "updatedAt" : "2019-11-19T00:18:06Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "64ade3f5eea5323b0ba4bc260b85b7d3f262cfbc",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +532,536 @@  /// Is this widget enabled or not.\n  ///\n  /// If disabled, will not send any notifications needed to update highlight or\n  /// focus state, and will not define or respond to any actions or shortcuts.\n  ///"
  },
  {
    "id" : "03bb17f1-218b-43da-95e9-83861bde830b",
    "prId" : 44867,
    "prUrl" : "https://github.com/flutter/flutter/pull/44867#pullrequestreview-318523255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b8af3bf-66b4-4536-b698-0b9755249b73",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: maybe format this in multiple lines to make it more readable? Same below.",
        "createdAt" : "2019-11-18T18:10:08Z",
        "updatedAt" : "2019-11-19T00:18:06Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "64ade3f5eea5323b0ba4bc260b85b7d3f262cfbc",
    "line" : 289,
    "diffHunk" : "@@ -1,1 +616,620 @@    if (!_hovering) {\n      // TODO(gspencergoog): remove scheduleMicrotask once MouseRegion event timing has changed.\n      scheduleMicrotask(() { setState(() { _hovering = true; _handleShowHoverHighlight(); }); });\n    }\n  }"
  },
  {
    "id" : "feedd233-f6b7-44f6-9eb6-813fd3c92d1c",
    "prId" : 44867,
    "prUrl" : "https://github.com/flutter/flutter/pull/44867#pullrequestreview-318523255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dd3f9f2-b264-42b8-89a6-040319d5f515",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Changing the shape of the widget tree (e.g. adding/removing a widget in the middle) is somewhat expansive. Is there a way to always include the Actions and Shortcuts widget, but have it \"disabled\" if its functionality is not required? ",
        "createdAt" : "2019-11-18T18:13:48Z",
        "updatedAt" : "2019-11-19T00:18:06Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "64ade3f5eea5323b0ba4bc260b85b7d3f262cfbc",
    "line" : 333,
    "diffHunk" : "@@ -1,1 +660,664 @@      ),\n    );\n    if (widget.enabled && widget.actions != null && widget.actions.isNotEmpty) {\n      child = Actions(actions: widget.actions, child: child);\n    }"
  },
  {
    "id" : "369f3b52-1557-45d5-b6ca-049b8e52fc1a",
    "prId" : 44867,
    "prUrl" : "https://github.com/flutter/flutter/pull/44867#pullrequestreview-318523255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fd78595-6075-4d61-922f-d679859923b7",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can this link to something that explains what \"primary focus\" is?",
        "createdAt" : "2019-11-18T18:19:06Z",
        "updatedAt" : "2019-11-19T00:18:06Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "64ade3f5eea5323b0ba4bc260b85b7d3f262cfbc",
    "line" : 232,
    "diffHunk" : "@@ -1,1 +559,563 @@  /// A function that will be called when the focus changes.\n  ///\n  /// Called with true if the [focusNode] has primary focus.\n  final ValueChanged<bool> onFocusChange;\n"
  },
  {
    "id" : "9670e888-2e80-4dd7-ae5c-6229be1f6452",
    "prId" : 67359,
    "prUrl" : "https://github.com/flutter/flutter/pull/67359#pullrequestreview-506935864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7577ea2d-145d-4038-839f-71588ec15ad0",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "We should probably document the special use case of a doNothingIntent here where you can use it to disable a shortcut and instead have the shortcut key be inserted into a textfield?\r\n\r\nOr maybe this needs to be documented on the DoNothingAction or both?",
        "createdAt" : "2020-10-12T17:48:54Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "b3ec72eb-d478-4d4a-a18a-72cd9b5285c2",
        "parentId" : "7577ea2d-145d-4038-839f-71588ec15ad0",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yeah, I added some docs to `DoNothingAction.shouldHandleKey`, but it should be documented here too.",
        "createdAt" : "2020-10-12T21:48:54Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a7b56760946cea0c1c4d752a1b3d94e93f9bedb",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +46,50 @@  const Intent();\n\n  /// An intent that is mapped to a [DoNothingAction], which, as the name\n  /// implies, does nothing.\n  ///"
  },
  {
    "id" : "b645f47f-21b8-42c1-aba5-b7f2ab2c9e48",
    "prId" : 67359,
    "prUrl" : "https://github.com/flutter/flutter/pull/67359#pullrequestreview-509804917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe828654-97da-4579-8201-4df1c74b519c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Wondering whether we should assert here that type is not  equal to `Intent`. If it is Intent, I think somebody didn't specify either T or `intent` and that's probably an error given that you can't have an Intent intent?",
        "createdAt" : "2020-10-15T20:20:10Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "3a3f1dea-5036-4943-9424-b96cf77e1477",
        "parentId" : "fe828654-97da-4579-8201-4df1c74b519c",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "On the other hand, it seems you can instantiate `Intent`, it's not abstract. But maybe it should be abstract?",
        "createdAt" : "2020-10-15T20:20:36Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "4a996d1b-e5c0-40a1-91a9-01e46177aa9e",
        "parentId" : "fe828654-97da-4579-8201-4df1c74b519c",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "No, we definitely shouldn't assert.  The reason is that it will almost certainly not be equal to `Intent` if we don't know the type a compile time.\r\n\r\nConsider the use case where I use that `intent` argument:\r\n```dart\r\n      final Action<Intent>? action = Actions.find<Intent>(\r\n        primaryContext,\r\n        intent: matchedIntent,\r\n        nullOk: true,\r\n      );\r\n```\r\n\r\n`matchedIntent` almost certainly does not have a runtime type of `Intent`, and that's why we have to supply it, so that we can get at the runtime type.\r\n\r\nAlso, if we could assert that the type was equal to `Intent`, we wouldn't need to have this argument at all, since the author would know the type to pass to the generic: `Intent`.\r\n\r\nI'll look at making `Intent` abstract though, that might make sense.",
        "createdAt" : "2020-10-15T20:40:59Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "1780df3c-d74d-4199-8b95-60fa2e1987c9",
        "parentId" : "fe828654-97da-4579-8201-4df1c74b519c",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Aaaaand I missed the \"not\" in \"not equal to Intent\" of your comment. :-)  OK, looking at that as a possibility.",
        "createdAt" : "2020-10-15T20:49:43Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "3a99e887-a18e-4474-bdea-747fcc0093e7",
        "parentId" : "fe828654-97da-4579-8201-4df1c74b519c",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Wait, I meant, can we assert that it is **not equal** to Intent. Your explanation seems to support that assert because:\r\n\r\n>  The reason is that it will almost certainly not be equal to Intent\r\n\r\nWhat I am saying is, that it 100% should not be equal to Intent.",
        "createdAt" : "2020-10-15T20:50:17Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "2cbdea84-26ac-455f-9727-6fcdd96e6105",
        "parentId" : "fe828654-97da-4579-8201-4df1c74b519c",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yeah. Reading carefully: I should try it sometime. :-)\r\n\r\nOK, I added the assert, good suggestion.",
        "createdAt" : "2020-10-15T21:00:08Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a7b56760946cea0c1c4d752a1b3d94e93f9bedb",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +541,545 @@    // This allows this function to be called by code that doesn't know the\n    // concrete type of the intent at compile time.\n    final Type type = intent?.runtimeType ?? T;\n    assert(type != Intent,\n      'The type passed to \"find\" resolved to \"Intent\": either a non-Intent'"
  },
  {
    "id" : "e736704b-edca-450b-81db-28750691a926",
    "prId" : 69717,
    "prUrl" : "https://github.com/flutter/flutter/pull/69717#pullrequestreview-526455044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a694c9dc-e253-4959-ba41-fc241d125b2a",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I'm not 100% sure, but you might need to wrap this in a Center widget.  When I tried running this locally, it aligned itself to the top when there were two children. It depends on what `--template=stateful_widget_material` does I guess.\r\n\r\n<img width=\"436\" alt=\"Screen Shot 2020-11-06 at 9 05 42 AM\" src=\"https://user-images.githubusercontent.com/389558/98394292-5e158900-200f-11eb-9a50-1e2c3893b712.png\">\r\n",
        "createdAt" : "2020-11-06T17:07:27Z",
        "updatedAt" : "2021-01-07T19:47:06Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "41fd7b22-fc4a-480a-b250-3065db9a8e77",
        "parentId" : "a694c9dc-e253-4959-ba41-fc241d125b2a",
        "authorId" : "a71f1f37-b595-4ea2-b154-4686b53b6099",
        "body" : "It seems that you were missing the scaffold on 338 - 345. It has a Center there.",
        "createdAt" : "2020-11-08T19:56:41Z",
        "updatedAt" : "2021-01-07T19:47:06Z",
        "lastEditedBy" : "a71f1f37-b595-4ea2-b154-4686b53b6099",
        "tags" : [
        ]
      },
      {
        "id" : "f67d0994-4b98-4b26-8258-9d09f7cd9f34",
        "parentId" : "a694c9dc-e253-4959-ba41-fc241d125b2a",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Ah ok thanks, this is fine as-is then 👍 ",
        "createdAt" : "2020-11-09T16:51:46Z",
        "updatedAt" : "2021-01-07T19:47:06Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4a4f36770859d46f6431d8cb19dfa0ad328dd1e",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +271,275 @@///   @override\n///   Widget build(BuildContext context) {\n///     return Row(\n///       crossAxisAlignment: CrossAxisAlignment.center,\n///       mainAxisAlignment: MainAxisAlignment.center,"
  },
  {
    "id" : "2d39d321-9e5b-4836-8b0c-7aa410beba5f",
    "prId" : 69717,
    "prUrl" : "https://github.com/flutter/flutter/pull/69717#pullrequestreview-525338677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e6a9033-9f0a-4e24-9f28-e6d389c20444",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "What do you think of doing `if (_on)` and `if (!_on)` instead?  I guess neither option is super pretty.",
        "createdAt" : "2020-11-06T17:08:04Z",
        "updatedAt" : "2021-01-07T19:47:06Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4a4f36770859d46f6431d8cb19dfa0ad328dd1e",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +282,286 @@///           ),\n///         ),\n///         _on\n///             ? Padding(\n///                 padding: const EdgeInsets.all(8.0),"
  },
  {
    "id" : "3a17572c-93a1-4782-ad7b-3af881107d35",
    "prId" : 69717,
    "prUrl" : "https://github.com/flutter/flutter/pull/69717#pullrequestreview-525839673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4341f83-17fc-4c79-9493-d44f0ba5973d",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Nit: Maybe early return here if you think it's better:\r\n\r\n```dart\r\nif (action.intentType != MyIntent) {\r\n  return;\r\n}\r\n...\r\n```",
        "createdAt" : "2020-11-06T17:27:24Z",
        "updatedAt" : "2021-01-07T19:47:06Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "c0bdcdec-61dd-4490-bc1d-0c0861c8de3d",
        "parentId" : "a4341f83-17fc-4c79-9493-d44f0ba5973d",
        "authorId" : "a71f1f37-b595-4ea2-b154-4686b53b6099",
        "body" : "I would think that's better to showcase filtering by intent in case we're expecting more than one intent type.",
        "createdAt" : "2020-11-08T19:57:27Z",
        "updatedAt" : "2021-01-07T19:47:06Z",
        "lastEditedBy" : "a71f1f37-b595-4ea2-b154-4686b53b6099",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4a4f36770859d46f6431d8cb19dfa0ad328dd1e",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +287,291 @@///                 child: ActionListener(\n///                   listener: (Action<Intent> action) {\n///                     if (action.intentType == MyIntent) {\n///                       ScaffoldMessenger.of(context).showSnackBar(SnackBar(\n///                           content: const Text('Action Listener Called'),"
  },
  {
    "id" : "423734f0-bd4d-47c9-9a16-e838b15fc0d7",
    "prId" : 72163,
    "prUrl" : "https://github.com/flutter/flutter/pull/72163#pullrequestreview-552037546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adf8f983-3b3f-45a0-8741-5718b93180c0",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I suppose you could save a line here and move the print statement so that the developer sees the effect of the dirty bit:\r\n\r\n```dart\r\n///   int save() {\r\n///     if (isDirty.value) {\r\n///       print('Saved Data: ${data.value}');\r\n///       isDirty.value = false;\r\n///     }\r\n///     return data.value;\r\n///   }\r\n```",
        "createdAt" : "2020-12-15T01:31:47Z",
        "updatedAt" : "2021-01-08T02:13:44Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "076492f536488bd6422e511ee4910d236138d793",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +547,551 @@///   ValueNotifier<int> data = ValueNotifier<int>(0);\n///\n///   int save() {\n///     if (isDirty.value) {\n///       print('Saved Data: ${data.value}');"
  },
  {
    "id" : "17a2ca93-e323-42a2-89e7-cd9614c1a188",
    "prId" : 72560,
    "prUrl" : "https://github.com/flutter/flutter/pull/72560#pullrequestreview-562105294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12656c06-a740-4736-804b-67972daf6762",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "tiny nit: perhaps add blank lines before and after the methods?",
        "createdAt" : "2021-01-05T20:23:16Z",
        "updatedAt" : "2021-01-05T21:00:52Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9394a3fa430220156ddfbdc33d45faa198f6eff6",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1344,1348 @@\n  @override\n  bool isEnabled(PrioritizedIntents intent) {\n    final FocusNode? focus = primaryFocus;\n    if  (focus == null || focus.context == null)"
  },
  {
    "id" : "ccd22ad0-7cd4-4839-9710-e045a9753047",
    "prId" : 72560,
    "prUrl" : "https://github.com/flutter/flutter/pull/72560#pullrequestreview-562128008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e009bb56-9651-4a3c-a9a1-045ac4838e5d",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "```suggestion\r\n\r\n  @override\r\n```",
        "createdAt" : "2021-01-05T21:00:14Z",
        "updatedAt" : "2021-01-05T21:00:52Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "9394a3fa430220156ddfbdc33d45faa198f6eff6",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1343,1347 @@  late Intent _selectedIntent;\n\n  @override\n  bool isEnabled(PrioritizedIntents intent) {\n    final FocusNode? focus = primaryFocus;"
  },
  {
    "id" : "b8ddfe1c-7a54-4e53-8e6a-fd1444fe741a",
    "prId" : 72560,
    "prUrl" : "https://github.com/flutter/flutter/pull/72560#pullrequestreview-562128008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5a2729d-4448-4459-801c-a817a2acc852",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "```suggestion\r\n\r\n  @override\r\n```",
        "createdAt" : "2021-01-05T21:00:28Z",
        "updatedAt" : "2021-01-05T21:00:52Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "9394a3fa430220156ddfbdc33d45faa198f6eff6",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1362,1366 @@  }\n\n  @override\n  Object? invoke(PrioritizedIntents intent) {\n    assert(_selectedAction != null);"
  },
  {
    "id" : "78c0a78f-61f5-4670-b74c-e8b253ad2296",
    "prId" : 74680,
    "prUrl" : "https://github.com/flutter/flutter/pull/74680#pullrequestreview-575885623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e228848-1b7c-4d61-826c-fcd340b8798b",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: remove extra blank line.",
        "createdAt" : "2021-01-25T23:14:46Z",
        "updatedAt" : "2021-01-26T01:26:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcc1004e4b743b65d9f0a8096f455f945f562ae3",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +984,988 @@    return _findDispatcher(actionElement!).invokeAction(action!, intent, context);\n  }\n\n  @override\n  State<Actions> createState() => _ActionsState();"
  },
  {
    "id" : "fdd5440b-a685-4c81-bf99-ed75d34e0957",
    "prId" : 85743,
    "prUrl" : "https://github.com/flutter/flutter/pull/85743#pullrequestreview-705639049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37b1dc99-b463-448c-b618-c7002bceffcb",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I think you meant to use triple slash here.",
        "createdAt" : "2021-07-12T22:39:43Z",
        "updatedAt" : "2021-07-13T18:24:17Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "cc31e914-1269-4329-917d-683b507bb479",
        "parentId" : "37b1dc99-b463-448c-b618-c7002bceffcb",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Changed all of them to double slash since the mixin is private.",
        "createdAt" : "2021-07-13T20:56:04Z",
        "updatedAt" : "2021-07-13T20:56:04Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "77dac535f93e72a0d2ea86a5a92bfc412e8def75",
    "line" : 550,
    "diffHunk" : "@@ -1,1 +1999,2003 @@  BuildContext get lookupContext;\n\n  // How to invoke [defaultAction], given the caller [fromAction].\n  Object? invokeDefaultAction(T intent, Action<T>? fromAction, BuildContext? context);\n"
  },
  {
    "id" : "21894d90-2052-42a0-b96d-43fcb2470f9b",
    "prId" : 85743,
    "prUrl" : "https://github.com/flutter/flutter/pull/85743#pullrequestreview-703387525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c4fb0db-22e3-48ed-82ed-28cecf93b3c1",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Nit: This is up to you, I don't want to overly complicate this example, but would it help users to understand this by showing an additional Actions widget higher in the tree overriding this overridable action?",
        "createdAt" : "2021-07-12T23:31:58Z",
        "updatedAt" : "2021-07-13T18:24:17Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "900e6bab-cc30-4b32-906d-f9ce3e9f965d",
        "parentId" : "3c4fb0db-22e3-48ed-82ed-28cecf93b3c1",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Or maybe once we have implemented overridable actions in our text editing work, maybe that is where we can put a more comprehensive example.  It would be easy to show how to override say the triple click behavior in a TextField using this pattern.",
        "createdAt" : "2021-07-13T17:31:39Z",
        "updatedAt" : "2021-07-13T18:24:17Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "77dac535f93e72a0d2ea86a5a92bfc412e8def75",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +279,283 @@  /// }\n  /// ```\n  /// {@end-tool}\n  factory Action.overridable({\n    required Action<T> defaultAction,"
  },
  {
    "id" : "5be8beb6-49c2-46b0-a1a2-292d9cd07a7a",
    "prId" : 85743,
    "prUrl" : "https://github.com/flutter/flutter/pull/85743#pullrequestreview-707897165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf56f1d6-0d0a-413a-b173-0ea71f05cbe7",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Dart does not have nested classes so I had to manually pass the `State` object to the override. This isn't ideal. To implement an override that makes use of `callingAction` you can't use a `CallbackAction` either, since both `invoke` and `callingAction` are protected.",
        "createdAt" : "2021-07-15T23:35:25Z",
        "updatedAt" : "2021-07-15T23:35:26Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "77dac535f93e72a0d2ea86a5a92bfc412e8def75",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +226,230 @@  /// }\n  ///\n  /// class _DeleteDigit extends Action<DeleteTextIntent> {\n  ///   _DeleteDigit(this.state);\n  ///"
  },
  {
    "id" : "36a83c7b-de72-432d-9378-1b3a64c3acfe",
    "prId" : 85743,
    "prUrl" : "https://github.com/flutter/flutter/pull/85743#pullrequestreview-720634292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad66ba78-363c-4b13-9bd7-43f5b085bc52",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Unfortunately it's not that easy to implement an `Action` for `DeleteTextIntent` or `SelectAllTextIntent` right now so I had to use  this.",
        "createdAt" : "2021-07-16T21:51:54Z",
        "updatedAt" : "2021-07-16T21:51:54Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "6598e44d-02ac-4e5d-9d3a-91b34fd4636f",
        "parentId" : "ad66ba78-363c-4b13-9bd7-43f5b085bc52",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Maybe it'll be easier with https://github.com/flutter/flutter/pull/86736, then we'll have `widget.controller.value.deleteTo`.",
        "createdAt" : "2021-08-02T22:26:29Z",
        "updatedAt" : "2021-08-02T23:28:24Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "77dac535f93e72a0d2ea86a5a92bfc412e8def75",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +191,195 @@  ///     onInvoke: (DeleteTextIntent intent) {\n  ///       // For simplicity we delete everything in the section.\n  ///       widget.controller.clear();\n  ///     },\n  ///   );"
  },
  {
    "id" : "596b3276-c36a-4077-b4c3-6709f2721d9e",
    "prId" : 85743,
    "prUrl" : "https://github.com/flutter/flutter/pull/85743#pullrequestreview-720634292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "636fefe4-33bb-4238-81fb-9f98b870b7d3",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I think that's a pretty good, realistic example of this 👍 ",
        "createdAt" : "2021-08-02T22:38:05Z",
        "updatedAt" : "2021-08-02T23:28:24Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "77dac535f93e72a0d2ea86a5a92bfc412e8def75",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +147,151 @@  /// number. When the backspace key is pressed, the phone number input widget\n  /// sends the focus to the preceding text field when the currently focused\n  /// field becomes empty.\n  ///\n  /// ```dart imports"
  }
]