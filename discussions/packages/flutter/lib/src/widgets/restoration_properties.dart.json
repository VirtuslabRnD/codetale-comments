[
  {
    "id" : "aa4a9854-8404-451f-ae79-9a9c1f2dfa90",
    "prId" : 60375,
    "prUrl" : "https://github.com/flutter/flutter/pull/60375#pullrequestreview-450052177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a16bf75-53f5-4075-a71b-0ead72ff0151",
        "parentId" : null,
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "Should this implement ValueNotifier<T>? As it fully matches the prototype",
        "createdAt" : "2020-07-16T17:02:20Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      },
      {
        "id" : "5928fae3-d428-4ee3-820d-1ecd412570fb",
        "parentId" : "4a16bf75-53f5-4075-a71b-0ead72ff0151",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The semantics are slightly different, though. `ValueNotifier` notifies when `value` changes. This one notifies when `toPrimitives` or `enabled` changes. And you can construct cases where `value` changes, but `toPrimitives` or `enabled` doesn't.",
        "createdAt" : "2020-07-16T17:14:43Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2e1d5f405a3fa8a561802dd464d96fc2c3d47c0",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@///  * [RestorationManager], which provides an overview of how state restoration\n///    works in Flutter.\nabstract class RestorableValue<T> extends RestorableProperty<T> {\n  /// The current value stored in this property.\n  ///"
  },
  {
    "id" : "0923a046-e02a-4dc6-9f70-c37c4101bbe1",
    "prId" : 60375,
    "prUrl" : "https://github.com/flutter/flutter/pull/60375#pullrequestreview-453748950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "parentId" : null,
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "Instead of:\r\n\r\n\r\n```dart\r\n  RestorableNum<int> _counter = RestorableNum<int>(0);\r\n  RestorableTextEditingController _textController = \r\n      RestorableTextEditingController();\r\n\r\n  @override\r\n  void restoreState() {\r\n    registerForRestoration(_counter, RestorationId('counter'));\r\n    registerForRestoration(_textController, RestorationId('name'));\r\n  }\r\n```\r\n\r\nWould it make sense to have:\r\n\r\n\r\n```dart\r\n  RestorableNum<int> _counter = RestorableNum<int>(0, id: 'counter');\r\n  RestorableTextEditingController _textController = \r\n      RestorableTextEditingController(id: 'name');\r\n\r\n  @override\r\n  void restoreState() {\r\n    registerForRestoration(_counter);\r\n    registerForRestoration(_textController);\r\n  }\r\n```\r\n\r\n",
        "createdAt" : "2020-07-16T17:38:33Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      },
      {
        "id" : "67595614-1c9f-49c5-b68a-24e1f72fdb0f",
        "parentId" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "That's possible. But I figured that keeping the line with the instantiation free of the ID clutter makes the code a little easier to read. In your IDE when you click through to go to the definition of the `_counter ` variable you're most likely not interested in its restorationId. Furthermore, it keeps all IDs neatly in one place (the restoreState method) making it easier to see with one glance what IDs are in use. ",
        "createdAt" : "2020-07-16T18:56:41Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "9b48f600-b67f-41c9-a369-d8d4a26d9dfe",
        "parentId" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "But the current syntax could complexify custom APIs built on the top of the native syntax.\r\n\r\nSay we want to make a function that returns a `RestorableProperty`, then we would need a tuple to return both the property and its ID:\r\n\r\n```dart\r\nTuple<RestorableProperty, RestorableId> example() {\r\n  return Tuple(MyProperty(), RestorableId('example'));\r\n}\r\n```\r\n\r\nvs\r\n\r\n```dart\r\nRestorableProperty example() {\r\n  return MyProperty(id: 'example');\r\n}\r\n```\r\n",
        "createdAt" : "2020-07-16T19:13:46Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      },
      {
        "id" : "c0da3b53-74da-4fec-8dfa-9e40943a3888",
        "parentId" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why would you need to return the RestorationID? Either you return an un-registered property and whoever receives the property is in charge of registering it (under an ID of their choosing to ensure it doesn't clash with anything else in their namespace) or you return a registered property in which cause whoever receives the property doesn't need to care about its ID.",
        "createdAt" : "2020-07-16T19:37:17Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d622ec5b-fbe7-4236-a04a-a65c86ed975d",
        "parentId" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "I had state-management libraries in mind â€“ which will have to implement a way to interact with the restoration API outside of a `State`/the widget tree.\r\n\r\nProvider will definitely want to expose a way for users to define restorable properties, where they would define both the ID and the property from outside a `State`.\r\n\r\nIt may not be too bad, as we can use `Map<Id, Property>` instead of a tuple. I need to play around it.",
        "createdAt" : "2020-07-16T19:55:28Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      },
      {
        "id" : "5a5307a5-82d9-48f1-95c8-0db60e84711f",
        "parentId" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The code registering the property (i.e. the code with the bucket) must be the one to come up with the IDs, otherwise it can't properly avoid name clashes.",
        "createdAt" : "2020-07-22T23:19:56Z",
        "updatedAt" : "2020-07-28T16:22:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2e1d5f405a3fa8a561802dd464d96fc2c3d47c0",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@///  * [RestorationManager], which provides an overview of how state restoration\n///    works in Flutter.\nabstract class RestorableValue<T> extends RestorableProperty<T> {\n  /// The current value stored in this property.\n  ///"
  },
  {
    "id" : "8434f4d4-e38f-4dcc-a371-e0f2e5874bf1",
    "prId" : 63438,
    "prUrl" : "https://github.com/flutter/flutter/pull/63438#pullrequestreview-465217984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc15ae38-a0f2-4012-84c8-5240e27ffa4f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "For completeness, the RestorableInt needs to be disposed in `dispose`. See also https://github.com/flutter/flutter/pull/63497.",
        "createdAt" : "2020-08-11T16:09:30Z",
        "updatedAt" : "2020-08-20T19:27:22Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "de65917911e760aa74924e80caabd9cc36379d54",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +47,51 @@///     });\n///   }\n///\n///   @override\n///   void dispose() {"
  },
  {
    "id" : "9ce76eaa-3b9f-4554-82ba-51cc420a9068",
    "prId" : 67770,
    "prUrl" : "https://github.com/flutter/flutter/pull/67770#pullrequestreview-506802481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76ab06ac-c4d7-4d29-b349-71198a7a67a0",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I had never heard of scheduleMicrotask before, good to know.",
        "createdAt" : "2020-10-12T17:51:41Z",
        "updatedAt" : "2020-10-12T18:53:00Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a6a5ebd9f2f9a5c617967a25625ee88c26d7495",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +325,329 @@      // Scheduling a microtask for dispose to give other entities a chance\n      // to remove their listeners first.\n      scheduleMicrotask(_value!.dispose);\n    }\n  }"
  },
  {
    "id" : "086e897f-5415-468f-ab99-a775397144eb",
    "prId" : 71653,
    "prUrl" : "https://github.com/flutter/flutter/pull/71653#pullrequestreview-552721192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "721eaca6-304c-4b29-8229-20a3225d202b",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Just for my own understanding, the only reason with it is `<T extends Object>` here instead of just `<T>` is because `toPrimitives` returns an `Object` and the generic property `value` has to be at least a subclass of `Object`?",
        "createdAt" : "2020-12-15T06:52:10Z",
        "updatedAt" : "2020-12-16T00:21:37Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "2fe8f004-53e2-4c69-8c2d-60d47bc8f26d",
        "parentId" : "721eaca6-304c-4b29-8229-20a3225d202b",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I think this just makes it explicit that T may be nullable.",
        "createdAt" : "2020-12-15T18:03:26Z",
        "updatedAt" : "2020-12-16T00:21:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f28b0ea9873b07460d58218312f80d3a226b130",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +146,150 @@// _RestorablePrimitiveValueN and its subclasses allows for null values.\n// See [_RestorablePrimitiveValue] for the non-nullable version of this class.\nclass _RestorablePrimitiveValueN<T extends Object?> extends RestorableValue<T> {\n  _RestorablePrimitiveValueN(this._defaultValue)\n    : assert(debugIsSerializableForRestoration(_defaultValue)),"
  },
  {
    "id" : "99aff6d5-860f-4f23-8af4-7328b6165eec",
    "prId" : 71653,
    "prUrl" : "https://github.com/flutter/flutter/pull/71653#pullrequestreview-552721192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9eb4f3a-a692-4bed-8fc3-06f58412cdff",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Are the asserts here necessary, since non-nullability is baked into the subclass? One wouldn't be able to instantiate a `_RestorablePrimitiveValue` with null passed in to begin with. Then, the class would simply be:\r\n```dart\r\n// _RestorablePrimitiveValue and its subclasses do not allow null values in\r\n// anticipation of NNBD (non-nullability by default).\r\nclass _RestorablePrimitiveValue<T extends Object> extends _RestorablePrimitiveValueN<T> {\r\n  _RestorablePrimitiveValue(T _defaultValue) : super(_defaultValue);\r\n}\r\n```",
        "createdAt" : "2020-12-15T07:06:21Z",
        "updatedAt" : "2020-12-16T00:21:37Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "cd618dca-b12a-4c28-95f3-b140df82c093",
        "parentId" : "d9eb4f3a-a692-4bed-8fc3-06f58412cdff",
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Hm, I guess I can't think of a way to write a test for this to prevent a regression if someone were to make it nullable by accident, so the asserts act as sort of a line of defense?",
        "createdAt" : "2020-12-15T07:24:30Z",
        "updatedAt" : "2020-12-16T00:21:37Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "197c76f2-fd16-4fa1-b52c-e0f260e5ca49",
        "parentId" : "d9eb4f3a-a692-4bed-8fc3-06f58412cdff",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Eventually, we can remove these asserts. For now we are keeping them for people who are not running their app with null-safety enabled.",
        "createdAt" : "2020-12-15T18:02:23Z",
        "updatedAt" : "2020-12-16T00:21:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f28b0ea9873b07460d58218312f80d3a226b130",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +173,177 @@class _RestorablePrimitiveValue<T extends Object> extends _RestorablePrimitiveValueN<T> {\n  _RestorablePrimitiveValue(T _defaultValue)\n    : assert(_defaultValue != null),\n      assert(debugIsSerializableForRestoration(_defaultValue)),\n      super(_defaultValue);"
  },
  {
    "id" : "4523e7cf-447c-4274-aabf-5a08c4d7013f",
    "prId" : 71653,
    "prUrl" : "https://github.com/flutter/flutter/pull/71653#pullrequestreview-552721192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d589d2c4-e669-49a0-ad69-027b25aaa145",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "replace the line below this one with `return super. fromPrimitives(serialized)`?",
        "createdAt" : "2020-12-15T17:56:51Z",
        "updatedAt" : "2020-12-16T00:21:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "5d31023e-7a41-4363-8b97-2c3b1ba4eb05",
        "parentId" : "d589d2c4-e669-49a0-ad69-027b25aaa145",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same in toPrimitives: just call super.toPrimitives after the assert?",
        "createdAt" : "2020-12-15T17:57:10Z",
        "updatedAt" : "2020-12-16T00:21:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f28b0ea9873b07460d58218312f80d3a226b130",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +185,189 @@  @override\n  T fromPrimitives(Object? serialized) {\n    assert(serialized != null);\n    return super.fromPrimitives(serialized);\n  }"
  },
  {
    "id" : "8d71c79b-9273-46aa-bde5-535967474a14",
    "prId" : 71653,
    "prUrl" : "https://github.com/flutter/flutter/pull/71653#pullrequestreview-552721192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "799abc66-20e0-4e00-9bf6-0961e72a4c4a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Add a \"see also\" section linking to the non-nullable version?\r\n\r\nSimilarly, add the same section to RestorableBool to link to this one?",
        "createdAt" : "2020-12-15T17:58:10Z",
        "updatedAt" : "2020-12-16T00:21:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f28b0ea9873b07460d58218312f80d3a226b130",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +267,271 @@/// nullable.\n///\n/// {@macro flutter.widgets.RestorableNum}\nclass RestorableBoolN extends _RestorablePrimitiveValueN<bool?> {\n  /// Creates a [RestorableBoolN]."
  },
  {
    "id" : "fe802c02-e42b-45b3-b414-73ebbec9a813",
    "prId" : 72862,
    "prUrl" : "https://github.com/flutter/flutter/pull/72862#pullrequestreview-560241969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab947c7f-2c24-4297-866b-f4e971530da5",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "So this `T` should be only a num, int, or double right?  It's not possible to check that with an assertion is it?  I know Dart doesn't have union types.",
        "createdAt" : "2020-12-30T17:42:05Z",
        "updatedAt" : "2020-12-31T01:15:16Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "d1154d7c-14dc-4ba4-9712-cf9bfbd2311a",
        "parentId" : "ab947c7f-2c24-4297-866b-f4e971530da5",
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Yeah, I'm not sure if we can check it with an assertion. The way I've been enforcing the types is through the definition of T in the class, like `RestorableNumN<T extends num?>`",
        "createdAt" : "2020-12-31T00:57:48Z",
        "updatedAt" : "2020-12-31T01:15:16Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "a0611b40-a476-48d6-a190-3d81616c9efd",
        "parentId" : "ab947c7f-2c24-4297-866b-f4e971530da5",
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Plus, I don't think we'll have to worry about T being something other than num, int or double. According the num documentation:\r\n * It is a compile-time error for any type other than [int] or [double] to attempt to extend or implement num.",
        "createdAt" : "2020-12-31T01:16:47Z",
        "updatedAt" : "2020-12-31T01:16:48Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6022a83a84848cf35b42b66806b76b1a3cabf964",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +311,315 @@  ///\n  /// {@macro flutter.widgets.RestorableNum.constructor}\n  RestorableNumN(T defaultValue) : super(defaultValue);\n}\n"
  }
]