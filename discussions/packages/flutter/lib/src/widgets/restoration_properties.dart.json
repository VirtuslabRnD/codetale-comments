[
  {
    "id" : "aa4a9854-8404-451f-ae79-9a9c1f2dfa90",
    "prId" : 60375,
    "prUrl" : "https://github.com/flutter/flutter/pull/60375#pullrequestreview-450052177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a16bf75-53f5-4075-a71b-0ead72ff0151",
        "parentId" : null,
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "Should this implement ValueNotifier<T>? As it fully matches the prototype",
        "createdAt" : "2020-07-16T17:02:20Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      },
      {
        "id" : "5928fae3-d428-4ee3-820d-1ecd412570fb",
        "parentId" : "4a16bf75-53f5-4075-a71b-0ead72ff0151",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The semantics are slightly different, though. `ValueNotifier` notifies when `value` changes. This one notifies when `toPrimitives` or `enabled` changes. And you can construct cases where `value` changes, but `toPrimitives` or `enabled` doesn't.",
        "createdAt" : "2020-07-16T17:14:43Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2e1d5f405a3fa8a561802dd464d96fc2c3d47c0",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@///  * [RestorationManager], which provides an overview of how state restoration\n///    works in Flutter.\nabstract class RestorableValue<T> extends RestorableProperty<T> {\n  /// The current value stored in this property.\n  ///"
  },
  {
    "id" : "0923a046-e02a-4dc6-9f70-c37c4101bbe1",
    "prId" : 60375,
    "prUrl" : "https://github.com/flutter/flutter/pull/60375#pullrequestreview-453748950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "parentId" : null,
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "Instead of:\r\n\r\n\r\n```dart\r\n  RestorableNum<int> _counter = RestorableNum<int>(0);\r\n  RestorableTextEditingController _textController = \r\n      RestorableTextEditingController();\r\n\r\n  @override\r\n  void restoreState() {\r\n    registerForRestoration(_counter, RestorationId('counter'));\r\n    registerForRestoration(_textController, RestorationId('name'));\r\n  }\r\n```\r\n\r\nWould it make sense to have:\r\n\r\n\r\n```dart\r\n  RestorableNum<int> _counter = RestorableNum<int>(0, id: 'counter');\r\n  RestorableTextEditingController _textController = \r\n      RestorableTextEditingController(id: 'name');\r\n\r\n  @override\r\n  void restoreState() {\r\n    registerForRestoration(_counter);\r\n    registerForRestoration(_textController);\r\n  }\r\n```\r\n\r\n",
        "createdAt" : "2020-07-16T17:38:33Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      },
      {
        "id" : "67595614-1c9f-49c5-b68a-24e1f72fdb0f",
        "parentId" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "That's possible. But I figured that keeping the line with the instantiation free of the ID clutter makes the code a little easier to read. In your IDE when you click through to go to the definition of the `_counter ` variable you're most likely not interested in its restorationId. Furthermore, it keeps all IDs neatly in one place (the restoreState method) making it easier to see with one glance what IDs are in use. ",
        "createdAt" : "2020-07-16T18:56:41Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "9b48f600-b67f-41c9-a369-d8d4a26d9dfe",
        "parentId" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "But the current syntax could complexify custom APIs built on the top of the native syntax.\r\n\r\nSay we want to make a function that returns a `RestorableProperty`, then we would need a tuple to return both the property and its ID:\r\n\r\n```dart\r\nTuple<RestorableProperty, RestorableId> example() {\r\n  return Tuple(MyProperty(), RestorableId('example'));\r\n}\r\n```\r\n\r\nvs\r\n\r\n```dart\r\nRestorableProperty example() {\r\n  return MyProperty(id: 'example');\r\n}\r\n```\r\n",
        "createdAt" : "2020-07-16T19:13:46Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      },
      {
        "id" : "c0da3b53-74da-4fec-8dfa-9e40943a3888",
        "parentId" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why would you need to return the RestorationID? Either you return an un-registered property and whoever receives the property is in charge of registering it (under an ID of their choosing to ensure it doesn't clash with anything else in their namespace) or you return a registered property in which cause whoever receives the property doesn't need to care about its ID.",
        "createdAt" : "2020-07-16T19:37:17Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d622ec5b-fbe7-4236-a04a-a65c86ed975d",
        "parentId" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "I had state-management libraries in mind â€“ which will have to implement a way to interact with the restoration API outside of a `State`/the widget tree.\r\n\r\nProvider will definitely want to expose a way for users to define restorable properties, where they would define both the ID and the property from outside a `State`.\r\n\r\nIt may not be too bad, as we can use `Map<Id, Property>` instead of a tuple. I need to play around it.",
        "createdAt" : "2020-07-16T19:55:28Z",
        "updatedAt" : "2020-07-28T16:22:07Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      },
      {
        "id" : "5a5307a5-82d9-48f1-95c8-0db60e84711f",
        "parentId" : "f03b145d-07fc-4c04-95ae-7d5108c9193a",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The code registering the property (i.e. the code with the bucket) must be the one to come up with the IDs, otherwise it can't properly avoid name clashes.",
        "createdAt" : "2020-07-22T23:19:56Z",
        "updatedAt" : "2020-07-28T16:22:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2e1d5f405a3fa8a561802dd464d96fc2c3d47c0",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@///  * [RestorationManager], which provides an overview of how state restoration\n///    works in Flutter.\nabstract class RestorableValue<T> extends RestorableProperty<T> {\n  /// The current value stored in this property.\n  ///"
  }
]