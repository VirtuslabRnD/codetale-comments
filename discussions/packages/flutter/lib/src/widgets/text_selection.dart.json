[
  {
    "id" : "0ea51d3b-fdb9-4db9-a83a-9c81a7fec251",
    "prId" : 3223,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24306e9e-94f8-44ee-9b27-07da0882c8b8",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I'd probably use base/extent for these enum values because they map down to baseOffset and extentOffset, respectively, in TextSelection, but what you've got is also fine.\n",
        "createdAt" : "2016-04-15T05:09:30Z",
        "updatedAt" : "2016-04-21T17:32:49Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "1db66982-73cc-4404-af3e-3e52c3758440",
        "parentId" : "24306e9e-94f8-44ee-9b27-07da0882c8b8",
        "authorId" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "body" : "I went back and forth between the two. I settled on start/end because it conveys the intention that `start` will always be logically before `end` (in terms of offset into the text).\n",
        "createdAt" : "2016-04-15T19:21:08Z",
        "updatedAt" : "2016-04-21T17:32:49Z",
        "lastEditedBy" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "tags" : [
        ]
      }
    ],
    "commit" : "2927db3426d24dab2edc7a084488837a8144f760",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +131,135 @@    TextSelection newSelection;\n    switch (config.position) {\n      case _TextSelectionHandlePosition.start:\n        newSelection = new TextSelection(\n          baseOffset: position.offset,"
  },
  {
    "id" : "0ea8b738-b538-45c9-919b-a1cd69a464c6",
    "prId" : 3223,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d086576a-65a1-464f-9846-0ae3c4db40fa",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "This might be slightly more readable at the call site if you used named arguments here.\n",
        "createdAt" : "2016-04-15T05:12:28Z",
        "updatedAt" : "2016-04-21T17:32:49Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "2927db3426d24dab2edc7a084488837a8144f760",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +190,194 @@    TextSelectionHandleType ltrType,\n    TextSelectionHandleType rtlType\n  ) {\n    // [direction] is null when it doesn't matter.\n    switch (endpoint.direction ?? TextDirection.ltr) {"
  },
  {
    "id" : "d3cc465d-1297-47e2-bba1-983bc6d4c81b",
    "prId" : 3698,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed51d297-13b1-4f58-8ba1-8e7c113a3ab6",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "This should return a `Future<String>` because  reading the platform clipboard might be asynchronous.\n",
        "createdAt" : "2016-05-03T20:11:33Z",
        "updatedAt" : "2016-05-04T19:21:34Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "01c1af21-8c3f-4e6a-912d-7450bb956ba5",
        "parentId" : "ed51d297-13b1-4f58-8ba1-8e7c113a3ab6",
        "authorId" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "body" : "I'm working on the clipboard now, and I suspect there may be bigger changes here. Can I leave this for the next patch?\n",
        "createdAt" : "2016-05-03T20:44:06Z",
        "updatedAt" : "2016-05-04T19:21:34Z",
        "lastEditedBy" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "tags" : [
        ]
      },
      {
        "id" : "78bce9e2-a4fc-4310-a932-0ad4fd12da57",
        "parentId" : "ed51d297-13b1-4f58-8ba1-8e7c113a3ab6",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Sure.\n",
        "createdAt" : "2016-05-03T20:44:46Z",
        "updatedAt" : "2016-05-04T19:21:34Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa36ca495f60ab9a2e24a9dc2379edb52555bebd",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +44,48 @@\n  /// The copy/paste buffer. Application-wide.\n  String get pasteBuffer;\n\n  /// Sets the copy/paste buffer."
  },
  {
    "id" : "03805a60-3e57-464b-bbe6-9734e4a93bc8",
    "prId" : 5902,
    "prUrl" : "https://github.com/flutter/flutter/pull/5902#pullrequestreview-809586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9c0708a-01c1-413c-8721-e04fd79a1613",
        "parentId" : null,
        "authorId" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "body" : "Same here.\n",
        "createdAt" : "2016-09-20T23:03:18Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "57b9f88bf58da56769af22de167f61deb943ec3c",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +166,170 @@  /// synchronously. This means that it is safe to call during builds, but also\n  /// that if you do call this during a build, the UI will not update until the\n  /// next frame (i.e. many milliseconds later).\n  void update(InputValue newInput) {\n    if (_input == newInput)"
  },
  {
    "id" : "4eddfd77-3e92-4b23-8504-6554348594ec",
    "prId" : 11224,
    "prUrl" : "https://github.com/flutter/flutter/pull/11224#pullrequestreview-51677321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f32a040-1988-4706-9604-efc360580051",
        "parentId" : null,
        "authorId" : "9ce8a245-ea73-4b45-9d05-8272eed5d76b",
        "body" : "Hi,\r\nSeems this changes cause exception in case when TextField was created with unlimited lines `new TextField(maxLines: null)`. \r\nSteps:\r\n* Create TextField with maxLines = null\r\n* Enter some text, tap Done button\r\n* Tap on TextField again\r\n\r\n![200w_d](https://user-images.githubusercontent.com/3447934/28492534-bef717be-6f2f-11e7-8ad3-3e3fd23fe70f.gif)\r\n\r\n```\r\n➜  mobileapp git:(develop) ✗ flutter --version\r\n\r\nFlutter • channel master • https://github.com/flutter/flutter.git\r\nFramework • revision a92a62706c (16 hours ago) • 2017-07-21 16:57:33 -0700\r\nEngine • revision 5fcfb995bb\r\nTools • Dart 1.25.0-dev.7.0\r\n```\r\n\r\n```\r\nThe following NoSuchMethodError was thrown building _TextSelectionHandleOverlay(dirty; state:\r\n_TextSelectionHandleOverlayState#201d1()):\r\nThe method 'toDouble' was called on null.\r\nReceiver: null\r\nTried calling: toDouble()\r\n\r\nWhen the exception was thrown, this was the stack:\r\n#0      Object._noSuchMethod (dart:core-patch/object_patch.dart:42)\r\n#1      Object.noSuchMethod (dart:core-patch/object_patch.dart:46)\r\n#2      double./ (dart:core-patch/double.dart:39)\r\n#3      _TextSelectionHandleOverlayState.build (package:flutter/src/widgets/text_selection.dart:482:49)\r\n#4      StatefulElement.build (package:flutter/src/widgets/framework.dart:3632:27)\r\n#5      ComponentElement.performRebuild (package:flutter/src/widgets/framework.dart:3542:15)\r\n#6      Element.rebuild (package:flutter/src/widgets/framework.dart:3443:5)\r\n#7      ComponentElement._firstBuild (package:flutter/src/widgets/framework.dart:3522:5)\r\n#8      StatefulElement._firstBuild (package:flutter/src/widgets/framework.dart:3660:22)\r\n#9      ComponentElement.mount (package:flutter/src/widgets/framework.dart:3517:5)\r\n#10     Element.inflateWidget (package:flutter/src/widgets/framework.dart:2901:14)\r\n#11     Element.updateChild (package:flutter/src/widgets/framework.dart:2704:12)\r\n#12     SingleChildRenderObjectElement.mount (package:flutter/src/widgets/framework.dart:4526:14)\r\n#13     Element.inflateWidget (package:flutter/src/widgets/framework.dart:2901:14)\r\n#14     Element.updateChild (package:flutter/src/widgets/framework.dart:2704:12)\r\n#15     ComponentElement.performRebuild (package:flutter/src/widgets/framework.dart:3554:16)\r\n#16     Element.rebuild (package:flutter/src/widgets/framework.dart:3443:5)\r\n#17     ComponentElement._firstBuild (package:flutter/src/widgets/framework.dart:3522:5)\r\n#18     StatefulElement._firstBuild (package:flutter/src/widgets/framework.dart:3660:22)\r\n#19     ComponentElement.mount (package:flutter/src/widgets/framework.dart:3517:5)\r\n#20     Element.inflateWidget (package:flutter/src/widgets/framework.dart:2901:14)\r\n#21     Element.updateChild (package:flutter/src/widgets/framework.dart:2704:12)\r\n#22     ComponentElement.performRebuild (package:flutter/src/widgets/framework.dart:3554:16)\r\n#23     Element.rebuild (package:flutter/src/widgets/framework.dart:3443:5)\r\n#24     ComponentElement._firstBuild (package:flutter/src/widgets/framework.dart:3522:5)\r\n#25     StatefulElement._firstBuild (package:flutter/src/widgets/framework.dart:3660:22)\r\n#26     ComponentElement.mount (package:flutter/src/widgets/framework.dart:3517:5)\r\n#27     Element.inflateWidget (package:flutter/src/widgets/framework.dart:2901:14)\r\n#28     Element.updateChild (package:flutter/src/widgets/framework.dart:2704:12)\r\n#29     RenderObjectElement.updateChildren (package:flutter/src/widgets/framework.dart:4317:32)\r\n#30     MultiChildRenderObjectElement.update (package:flutter/src/widgets/framework.dart:4641:17)\r\n#31     Element.updateChild (package:flutter/src/widgets/framework.dart:2693:15)\r\n#32     _TheatreElement.update (package:flutter/src/widgets/overlay.dart:505:16)\r\n#33     Element.updateChild (package:flutter/src/widgets/framework.dart:2693:15)\r\n#34     ComponentElement.performRebuild (package:flutter/src/widgets/framework.dart:3554:16)\r\n#35     Element.rebuild (package:flutter/src/widgets/framework.dart:3443:5)\r\n#36     BuildOwner.buildScope (package:flutter/src/widgets/framework.dart:2279:33)\r\n#37     BindingBase&SchedulerBinding&GestureBinding&ServicesBinding&RendererBinding&WidgetsBinding.drawFrame (package:flutter/src/widgets/binding.dart:503:20)\r\n#38     BindingBase&SchedulerBinding&GestureBinding&ServicesBinding&RendererBinding._handlePersistentFrameCallback (package:flutter/src/rendering/binding.dart:189:5)\r\n#39     BindingBase&SchedulerBinding._invokeFrameCallback (package:flutter/src/scheduler/binding.dart:688:15)\r\n#40     BindingBase&SchedulerBinding.handleDrawFrame (package:flutter/src/scheduler/binding.dart:636:9)\r\n#41     _invoke (file:///Users/herman/Projects/github/flutter/bin/cache/pkg/sky_engine/lib/ui/hooks.dart:86)\r\n#42     _drawFrame (file:///Users/herman/Projects/github/flutter/bin/cache/pkg/sky_engine/lib/ui/hooks.dart:75)\r\n```",
        "createdAt" : "2017-07-22T15:53:12Z",
        "updatedAt" : "2017-07-22T15:53:12Z",
        "lastEditedBy" : "9ce8a245-ea73-4b45-9d05-8272eed5d76b",
        "tags" : [
        ]
      },
      {
        "id" : "0591992a-16a8-457b-9258-62bcb6b739bf",
        "parentId" : "7f32a040-1988-4706-9604-efc360580051",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Thanks so much for tracking this down. Got a patch in #11353",
        "createdAt" : "2017-07-24T05:48:24Z",
        "updatedAt" : "2017-07-24T05:48:24Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "c49582832e3c8b2c50c7fe0d7d95e5b8b184ba9b",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +480,484 @@                context,\n                type,\n                widget.renderObject.size.height / widget.renderObject.maxLines,\n              ),\n            ),"
  },
  {
    "id" : "03a662bb-73ee-494f-b750-0ba0810bddb1",
    "prId" : 11419,
    "prUrl" : "https://github.com/flutter/flutter/pull/11419#pullrequestreview-52779636",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a7d2f93-81b7-4377-853c-f6299108cd1c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Is there an open issue about the race condition?",
        "createdAt" : "2017-07-27T19:02:51Z",
        "updatedAt" : "2017-07-27T20:41:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "7b19d684-7f91-4262-ac19-8d6680bdd324",
        "parentId" : "7a7d2f93-81b7-4377-853c-f6299108cd1c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "filed and linked to from the comment",
        "createdAt" : "2017-07-27T20:40:07Z",
        "updatedAt" : "2017-07-27T20:41:12Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "409e7168d1c9d7fdaeb0e0745a3264d4cf7d8d77",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +134,138 @@  /// This function is asynchronous since interacting with the clipboard is\n  /// asynchronous. Race conditions may exist with this API as currently\n  /// implemented.\n  // TODO(ianh): https://github.com/flutter/flutter/issues/11427\n  Future<Null> handlePaste(TextSelectionDelegate delegate) async {"
  },
  {
    "id" : "fe7f8b65-cd66-45a8-b4d1-32692cc854e4",
    "prId" : 12833,
    "prUrl" : "https://github.com/flutter/flutter/pull/12833#pullrequestreview-73917403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5ed1b93-ef48-43fd-93d8-1457ece0bdcd",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Let's use this in line 347 too. (The material toolbar is a little buggy too on multi-line text fields)",
        "createdAt" : "2017-11-02T07:56:45Z",
        "updatedAt" : "2017-11-02T19:47:14Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "2f383877-3c39-4cd5-8b36-b49a1296d66a",
        "parentId" : "d5ed1b93-ef48-43fd-93d8-1457ece0bdcd",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "done",
        "createdAt" : "2017-11-02T19:47:17Z",
        "updatedAt" : "2017-11-02T19:47:17Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e91c064d10a06f1c993b3a3eaa6ef3c505d7bfe5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +510,514 @@                context,\n                type,\n                widget.renderObject.preferredLineHeight,\n              ),\n            ),"
  },
  {
    "id" : "4377206e-8a18-421d-a03a-ddb4b2465e71",
    "prId" : 23424,
    "prUrl" : "https://github.com/flutter/flutter/pull/23424#pullrequestreview-189174424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed6ad9c0-efc0-4704-97d4-e11fd214d02d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "handle frag behavior?",
        "createdAt" : "2018-11-14T21:38:45Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "0e3d3667-9c7f-48be-86fe-78e30d119151",
        "parentId" : "ed6ad9c0-efc0-4704-97d4-e11fd214d02d",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "?",
        "createdAt" : "2019-01-03T20:41:16Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f463e9f73d8a7eb59f05588877bc12fec02d40",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +268,272 @@  /// Determines the way that drag start behavior is handled.\n  ///\n  /// If set to [DragStartBehavior.start], handle drag behavior will\n  /// begin upon the detection of a drag gesture. If set to\n  /// [DragStartBehavior.down] it will begin when a down event is first detected."
  },
  {
    "id" : "d1f06e3f-126b-4ef7-a42e-47780ec82c4a",
    "prId" : 24457,
    "prUrl" : "https://github.com/flutter/flutter/pull/24457#pullrequestreview-184047102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11ccd448-15cb-4711-86f7-4c60b433a1d9",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "`Key key, ` and pass the key along via a super call",
        "createdAt" : "2018-12-01T01:07:06Z",
        "updatedAt" : "2018-12-20T22:33:47Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "136a8c69-4585-4093-a396-506d81e44c83",
        "parentId" : "11ccd448-15cb-4711-86f7-4c60b433a1d9",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ah thanks, I always forget it",
        "createdAt" : "2018-12-12T07:54:42Z",
        "updatedAt" : "2018-12-20T22:33:47Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "486f232b0a9e319b7b53f284a63c5ea79da84f6f",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +590,594 @@  const TextSelectionGestureDetector({\n    Key key,\n    this.onTapDown,\n    this.onSingleTapUp,\n    this.onSingleTapCancel,"
  },
  {
    "id" : "96f8b020-4647-4733-bf6e-83e10fa72b93",
    "prId" : 24457,
    "prUrl" : "https://github.com/flutter/flutter/pull/24457#pullrequestreview-184047853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d57b79f9-d69c-416b-8500-3aa1a39d432c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If the double tap timer is running, then upon seeing the second tap down, I think it should always be reset.  Otherwise we could recognize an arbitrarily long sequence of taps as a double tap, so long as the intermediate ones were outside kDoubleTapSlop.\r\n\r\n```\r\nif (_doubleTapTimer != null) {\r\n  if (widget.onDoubleTapDown != null && _isWithinDoubleTapTolerance(details.globalPosition)) {\r\n     widget.onDoubleTapDown(details);\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\nAlso: this logic seems like it would map a sequence of 4 quick taps to a 3 double taps? Doesn't seem right.\r\n",
        "createdAt" : "2018-12-01T01:32:41Z",
        "updatedAt" : "2018-12-20T22:33:47Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "df92ed5f-6f28-40b1-aa92-0230e896c899",
        "parentId" : "d57b79f9-d69c-416b-8500-3aa1a39d432c",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "We talked about this offline. Also added test",
        "createdAt" : "2018-12-12T07:57:39Z",
        "updatedAt" : "2018-12-20T22:33:47Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "486f232b0a9e319b7b53f284a63c5ea79da84f6f",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +661,665 @@    // on whether it's a single tap, the first tap of a double tap, the second\n    // tap held down, a clean double tap etc.\n    if (_doubleTapTimer != null && _isWithinDoubleTapTolerance(details.globalPosition)) {\n      // If there was already a previous tap, the second down hold/tap is a\n      // double tap down."
  },
  {
    "id" : "900398ff-1f78-44c1-b7c1-e2f2745bd61f",
    "prId" : 24457,
    "prUrl" : "https://github.com/flutter/flutter/pull/24457#pullrequestreview-185891395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f919fe5-13a9-4a77-ab6f-88caad4d2651",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This isn't completely clear. I would have though it was called after a tap down, if the touch moves more than kSomethingOrOtherDistance. And that once cancel was called the tap down would not contribute to a double tap or a long press. The current doc implies that it's called after a tap down and just before a double tap that includes the tap down?",
        "createdAt" : "2018-12-14T02:05:18Z",
        "updatedAt" : "2018-12-20T22:33:47Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "7d91d35c-a906-4912-9aeb-90a337147cbd",
        "parentId" : "7f919fe5-13a9-4a77-ab6f-88caad4d2651",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "It's can be called before a tap down actually.",
        "createdAt" : "2018-12-18T03:07:07Z",
        "updatedAt" : "2018-12-20T22:33:47Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "486f232b0a9e319b7b53f284a63c5ea79da84f6f",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +611,615 @@  final GestureTapUpCallback onSingleTapUp;\n\n  /// Called for each touch that becomes recognized as a gesture that is not a\n  /// short tap, such as a long tap or drag. It is called at the moment when\n  /// another gesture from the touch is recognized."
  },
  {
    "id" : "1c83cf5b-0c93-41fa-8a2f-f4f04d60bf73",
    "prId" : 24457,
    "prUrl" : "https://github.com/flutter/flutter/pull/24457#pullrequestreview-185891839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "932e992a-b4c5-46a2-bee2-1b2a86909008",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Called when a second tap down follows the first in less than kSomethingOrOther without moving more than kSomethingOrOtherDistance.",
        "createdAt" : "2018-12-14T02:08:05Z",
        "updatedAt" : "2018-12-20T22:33:47Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "7796629f-fc76-4e70-9ccf-79432d17956c",
        "parentId" : "932e992a-b4c5-46a2-bee2-1b2a86909008",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "added reference to kDoubleTapTimeout",
        "createdAt" : "2018-12-18T03:09:56Z",
        "updatedAt" : "2018-12-20T22:33:47Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "486f232b0a9e319b7b53f284a63c5ea79da84f6f",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +621,625 @@  final GestureLongPressCallback onSingleLongTapDown;\n\n  /// Called after a momentary hold or a short tap that is close in space and\n  /// time (within [kDoubleTapTimeout]) to a previous short tap.\n  final GestureTapDownCallback onDoubleTapDown;"
  },
  {
    "id" : "88200b77-94a2-4019-a62a-e2418e10303f",
    "prId" : 24476,
    "prUrl" : "https://github.com/flutter/flutter/pull/24476#pullrequestreview-213401655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2eb74e9e-0a94-4d09-95c2-cf453fc6529a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: flutter style would be to add a trailing comma and indent by just two spaces:\r\n\r\n```dart\r\npoint = Offset(\r\n  point.dx.clamp(0.0, viewport.width),\r\n  point.dy.clamp(0.0, viewport.height),\r\n);\r\n```",
        "createdAt" : "2019-03-11T21:02:32Z",
        "updatedAt" : "2019-03-12T13:53:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8ee42bcc-ef75-49e5-8327-590cd7a46e95",
        "parentId" : "2eb74e9e-0a94-4d09-95c2-cf453fc6529a",
        "authorId" : "1bcfb382-657a-4d7d-879b-85c84363148f",
        "body" : "Done.",
        "createdAt" : "2019-03-12T13:52:59Z",
        "updatedAt" : "2019-03-12T13:53:31Z",
        "lastEditedBy" : "1bcfb382-657a-4d7d-879b-85c84363148f",
        "tags" : [
        ]
      }
    ],
    "commit" : "21077df01a4bbbb19ba4a61b41ab18ce16a334fe",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +605,609 @@\n    final Size viewport = widget.renderObject.size;\n    point = Offset(\n      point.dx.clamp(0.0, viewport.width),\n      point.dy.clamp(0.0, viewport.height),"
  },
  {
    "id" : "9e23e9fe-1f4a-4b4f-bd5d-c6460b353969",
    "prId" : 25683,
    "prUrl" : "https://github.com/flutter/flutter/pull/25683#pullrequestreview-187568043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a922724-0b74-41ad-ac40-f3f29f707ddf",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Doesn't the long press recognizer and the force touch recognizer cancel each other out? Or was the original issue incorrect and it's just force touch not long press + force touch?",
        "createdAt" : "2018-12-21T23:35:12Z",
        "updatedAt" : "2019-01-12T02:11:28Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "1f4e30c0-f025-41d9-b094-c165b5a09087",
        "parentId" : "6a922724-0b74-41ad-ac40-f3f29f707ddf",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "For this functionality, it's just a force press. Long press + force touch does the whole moving the text thing, which was the other issue I linked to you. ",
        "createdAt" : "2018-12-21T23:58:13Z",
        "updatedAt" : "2019-01-12T02:11:28Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bef0607b52e8025966831ceb2654e9b5593010e",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +762,766 @@      onTapDown: _handleTapDown,\n      onTapUp: _handleTapUp,\n      onForcePressStart: _forcePressStarted,\n      onForcePressEnd: _forcePressEnded,\n      onTapCancel: _handleTapCancel,"
  },
  {
    "id" : "06689c3a-134c-4542-82d3-141d7d806f73",
    "prId" : 25683,
    "prUrl" : "https://github.com/flutter/flutter/pull/25683#pullrequestreview-189238234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b6c11cd-7c22-4bf0-a2d7-b80e0555c667",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "This is probably already ok but add a test that a quick force-press+tap can't possibly be a double tap. And a quick tap+force-press should do what iOS should do.",
        "createdAt" : "2019-01-04T00:58:00Z",
        "updatedAt" : "2019-01-12T02:11:28Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bef0607b52e8025966831ceb2654e9b5593010e",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +728,732 @@   if (widget.onForcePressStart != null)\n     widget.onForcePressStart(details);\n  }\n\n  void _forcePressEnded(ForcePressDetails details) {"
  },
  {
    "id" : "093aaa5d-f559-49cb-92fe-f76e71fed191",
    "prId" : 26629,
    "prUrl" : "https://github.com/flutter/flutter/pull/26629#pullrequestreview-193427235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a2e4839-3cf0-402f-9f49-a58b6f07bf04",
        "parentId" : null,
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "revert this",
        "createdAt" : "2019-01-17T01:23:27Z",
        "updatedAt" : "2019-01-17T01:25:28Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "5580d31253e8aee9b4fe8a4ae77fe310d7305749",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +727,731 @@    _doubleTapTimer = null;\n    if (widget.onForcePressStart != null)\n      widget.onForcePressStart(details);\n  }\n"
  },
  {
    "id" : "3abfe386-7a54-43d8-83dd-258886886b45",
    "prId" : 28290,
    "prUrl" : "https://github.com/flutter/flutter/pull/28290#pullrequestreview-208848474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebb3c466-aad3-4400-b56b-4529db009956",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "add comment for what this is for",
        "createdAt" : "2019-02-28T01:07:58Z",
        "updatedAt" : "2019-03-01T21:18:27Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d39a81a281f10dd9b4fba6d3884058c0a7448d9e",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +20,24 @@\nexport 'package:flutter/services.dart' show TextSelectionDelegate;\n\n/// A duration that controls how often the drag selection update callback is\n/// called."
  },
  {
    "id" : "954c90dd-2963-4ba3-aa06-723fc27d6e6e",
    "prId" : 28290,
    "prUrl" : "https://github.com/flutter/flutter/pull/28290#pullrequestreview-209245888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6deac74d-8a1d-440b-9ff7-337aba26bcbd",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "ummm this one is unfortunate. I don't have a better solution to suggest. I would document why this one exists (i.e. DragUpdateDetails only give momentary deltas).",
        "createdAt" : "2019-02-28T01:13:25Z",
        "updatedAt" : "2019-03-01T21:18:27Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "02b0b0a8-52e0-43a7-8d59-9590784274eb",
        "parentId" : "6deac74d-8a1d-440b-9ff7-337aba26bcbd",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "This way it's easier for text fields since they don't have to store the start position. I'll update the comment to explain the \"why\".",
        "createdAt" : "2019-02-28T18:49:06Z",
        "updatedAt" : "2019-03-01T21:18:28Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d39a81a281f10dd9b4fba6d3884058c0a7448d9e",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +75,79 @@///\n/// The second argument [updateDetails] contains the details of the current\n/// pointer movement. It's the same as the one passed to [DragGestureRecognizer.onUpdate].\n///\n/// This signature is different from [GestureDragUpdateCallback] to make it"
  },
  {
    "id" : "e5332c59-dd71-42b3-b7c3-18a77af96219",
    "prId" : 28290,
    "prUrl" : "https://github.com/flutter/flutter/pull/28290#pullrequestreview-209253917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "499b3843-e138-4cfc-94e5-e86e2ebf5e10",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "check that the State is still in the tree when this happens. ",
        "createdAt" : "2019-02-28T01:19:14Z",
        "updatedAt" : "2019-03-01T21:18:27Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "082271da-9c1c-4c4e-9df8-3fc4c4b3e9c0",
        "parentId" : "499b3843-e138-4cfc-94e5-e86e2ebf5e10",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Good catch. I'll override the `dispose` method and cancel the timer there instead. Does that sound good?",
        "createdAt" : "2019-02-28T19:04:48Z",
        "updatedAt" : "2019-03-01T21:18:28Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d39a81a281f10dd9b4fba6d3884058c0a7448d9e",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +791,795 @@  void _handleDragUpdateThrottled() {\n    assert(_lastDragStartDetails != null);\n    assert(_lastDragUpdateDetails != null);\n    if (widget.onDragSelectionUpdate != null) {\n      widget.onDragSelectionUpdate(_lastDragStartDetails, _lastDragUpdateDetails);"
  },
  {
    "id" : "d701db33-cbfa-47e7-89f6-eb54a6975772",
    "prId" : 28290,
    "prUrl" : "https://github.com/flutter/flutter/pull/28290#pullrequestreview-208851521",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5708605a-fb61-47b6-bc17-0037495b0e45",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "thanks",
        "createdAt" : "2019-02-28T01:21:10Z",
        "updatedAt" : "2019-03-01T21:18:27Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d39a81a281f10dd9b4fba6d3884058c0a7448d9e",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +839,843 @@  }\n\n  void _handleLongPressEnd(LongPressEndDetails details) {\n    if (!_isDoubleTap && widget.onSingleLongTapEnd != null) {\n      widget.onSingleLongTapEnd(details);"
  },
  {
    "id" : "0606fdec-fdb0-47d5-80f5-1c5611cddbe8",
    "prId" : 28290,
    "prUrl" : "https://github.com/flutter/flutter/pull/28290#pullrequestreview-209300329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e45eed70-8921-492d-8214-6d6074654f75",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I wonder what this means adding this support for CupertinoTextField since iOS doesn't support mice.",
        "createdAt" : "2019-02-28T01:24:00Z",
        "updatedAt" : "2019-03-01T21:18:27Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "840ec738-141b-40fb-a654-e740e7bbc28e",
        "parentId" : "e45eed70-8921-492d-8214-6d6074654f75",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "All this does is it tracks mouse-generated events to recognize the drag gesture. If there are no mice in iOS, it means this recognizer will never recognize any drags.",
        "createdAt" : "2019-02-28T20:44:42Z",
        "updatedAt" : "2019-03-01T21:18:28Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d39a81a281f10dd9b4fba6d3884058c0a7448d9e",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +895,899 @@      // https://github.com/flutter/flutter/issues/28676\n      gestures[HorizontalDragGestureRecognizer] = GestureRecognizerFactoryWithHandlers<HorizontalDragGestureRecognizer>(\n            () => HorizontalDragGestureRecognizer(debugOwner: this, kind: PointerDeviceKind.mouse),\n            (HorizontalDragGestureRecognizer instance) {\n          instance"
  },
  {
    "id" : "e581eabe-bf2c-4664-9cda-3c487b72e91b",
    "prId" : 28290,
    "prUrl" : "https://github.com/flutter/flutter/pull/28290#pullrequestreview-208862846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "354eb955-00de-4f10-bf23-88880467f256",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Sounds like this should be a github issue. Something like this is important enough that we should prioritize using the normal prioritization channels.",
        "createdAt" : "2019-02-28T18:38:36Z",
        "updatedAt" : "2019-03-01T21:18:28Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d39a81a281f10dd9b4fba6d3884058c0a7448d9e",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +892,896 @@        widget.onDragSelectionUpdate != null ||\n        widget.onDragSelectionEnd != null) {\n      // TODO(mdebbar): Support dragging in any direction (for multiline text).\n      // https://github.com/flutter/flutter/issues/28676\n      gestures[HorizontalDragGestureRecognizer] = GestureRecognizerFactoryWithHandlers<HorizontalDragGestureRecognizer>("
  },
  {
    "id" : "2dee7887-ca09-4840-b9e0-94f550007144",
    "prId" : 28290,
    "prUrl" : "https://github.com/flutter/flutter/pull/28290#pullrequestreview-209435588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83552fbc-6696-41be-98e4-f0aaeb3694ae",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Mention the buffering",
        "createdAt" : "2019-03-01T05:58:45Z",
        "updatedAt" : "2019-03-01T21:18:28Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d39a81a281f10dd9b4fba6d3884058c0a7448d9e",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +688,692 @@  final GestureDragStartCallback onDragSelectionStart;\n\n  /// Called repeatedly as a mouse moves while dragging.\n  ///\n  /// The frequency of calls is throttled to avoid excessive text layout"
  },
  {
    "id" : "fa2c3f45-66dd-437f-a342-ae108eb10041",
    "prId" : 29329,
    "prUrl" : "https://github.com/flutter/flutter/pull/29329#pullrequestreview-214617512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "496ca839-6366-49ff-872d-8325b509b227",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This looks good, is there anything we can suggest for a fix here?  Nothing good is coming to mind for me though.",
        "createdAt" : "2019-03-14T07:45:53Z",
        "updatedAt" : "2019-03-14T07:45:53Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "76253f54-2729-4e2b-95ff-c72fa1603c74",
        "parentId" : "496ca839-6366-49ff-872d-8325b509b227",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Developers seem to occasionally and incorrectly use the WidgetsApp And MaterialApp `builder` parameter. It's generic name and the fact that it appears first in the docs probably don't help matters. I was hoping that the error message would encourage developers to look for this failure mode. The \"fix\" for the problem depends on if they're using the builder parameter intentionally or not. ",
        "createdAt" : "2019-03-14T16:19:04Z",
        "updatedAt" : "2019-03-14T16:19:05Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "2974e23afc8df6e33d71efe17afbd4152e7876e5",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +258,262 @@      'No Overlay widget exists above $context.\\n'\n      'Usually the Navigator created by WidgetsApp provides the overlay. Perhaps your '\n      'app content was created above the Navigator with the WidgetsApp builder parameter.');\n    _toolbarController = AnimationController(duration: fadeDuration, vsync: overlay);\n  }"
  },
  {
    "id" : "cf1225f8-b94b-47ed-80c5-11919041f8a7",
    "prId" : 29683,
    "prUrl" : "https://github.com/flutter/flutter/pull/29683#pullrequestreview-222516767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a96a84b-fec8-46e5-b2cb-0a91fab462b2",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Is this called if I dragged and moved the handle? Describe a bit more.",
        "createdAt" : "2019-04-04T00:56:45Z",
        "updatedAt" : "2019-05-13T18:37:47Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "e569fef46da2993e5f48803f89ed8d7357829f21",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +319,323 @@\n  /// {@template flutter.widgets.textSelection.onSelectionHandleTapped}\n  /// A callback that's invoked when a selection handle is tapped.\n  ///\n  /// Both regular taps and long presses invoke this callback, but a drag"
  },
  {
    "id" : "809a97e3-562b-4176-b743-fcf04555c73e",
    "prId" : 29809,
    "prUrl" : "https://github.com/flutter/flutter/pull/29809#pullrequestreview-227553583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "331e2d31-0588-4c2f-8cb2-297e2f0a3012",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I know the existing doc is already insufficient but can you add some doc for what each of the arguments should be?",
        "createdAt" : "2019-04-17T05:41:30Z",
        "updatedAt" : "2019-05-01T02:57:13Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "75a1415b85ffe792656477a34dede6140eeaee07",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +97,101 @@  /// Builds a toolbar near a text selection.\n  ///\n  /// Typically displays buttons for copying and pasting text.\n  ///\n  /// [globalEditableRegion] is the TextField size of the global coordinate system"
  },
  {
    "id" : "46e4e787-daea-484a-bccc-b0b53f2358a6",
    "prId" : 29809,
    "prUrl" : "https://github.com/flutter/flutter/pull/29809#pullrequestreview-231962342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2ef8d2e-0c1c-4eaa-94a6-8ae046775a07",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Awesome thanks!",
        "createdAt" : "2019-04-30T00:51:16Z",
        "updatedAt" : "2019-05-01T02:57:13Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "75a1415b85ffe792656477a34dede6140eeaee07",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +102,106 @@  /// in logical pixels.\n  ///\n  /// The [position] is a general calculation midpoint parameter of the toolbar.\n  /// If you want more detailed position information, can use [endpoints]\n  /// to calculate it."
  },
  {
    "id" : "c3f5d590-7f26-4dc1-b39b-dd35ad4a4cc6",
    "prId" : 31852,
    "prUrl" : "https://github.com/flutter/flutter/pull/31852#pullrequestreview-243868791",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f35520b-6d58-4cb0-b2e5-33dcf5ae7b6b",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I suppose we shouldn't link to the Material library here, https://api.flutter.dev/flutter/material/MaterialTapTargetSize-class.html",
        "createdAt" : "2019-05-29T20:03:47Z",
        "updatedAt" : "2019-05-30T17:42:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "28d9f594-4cec-4599-8977-538cfd93c488",
        "parentId" : "0f35520b-6d58-4cb0-b2e5-33dcf5ae7b6b",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Is there any way to actually get the value 48 from that?",
        "createdAt" : "2019-05-30T15:31:21Z",
        "updatedAt" : "2019-05-30T17:42:57Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "64da1df9-a432-46f5-b3ac-2183cd01f353",
        "parentId" : "0f35520b-6d58-4cb0-b2e5-33dcf5ae7b6b",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "HA! It looks like _no_. It doesn't really help anyway, since we shouldn't be introducing a material library connection in the widgets library. ",
        "createdAt" : "2019-05-30T15:40:04Z",
        "updatedAt" : "2019-05-30T17:42:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d33ea31549d861bc4a1c8433e9b0434d6918db0",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +543,547 @@/// with by the user.\n@visibleForTesting\nconst double kMinInteractiveSize = 48.0;\n\nclass _TextSelectionHandleOverlayState"
  },
  {
    "id" : "3e55611f-1f20-443d-a2e4-36941bb701f6",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-235317408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b407006-a12c-427e-81d9-dd209ba9dd27",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I have to expose this for testing.",
        "createdAt" : "2019-05-08T22:11:51Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +344,348 @@  /// Retrieve current value.\n  @visibleForTesting\n  TextEditingValue get value => _value;\n\n  TextEditingValue _value;"
  },
  {
    "id" : "50ab3b98-eae8-4246-96d6-02adf5fe55e4",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-243480625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34d1ab0f-7d8a-4ab2-bae2-db31882d39f4",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "unfortunately, i still have to do this post frame trick to support setState during handleSelectionChange.",
        "createdAt" : "2019-05-29T19:50:26Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +380,384 @@    // If we are in build state, it will be too late to update visibility.\n    // We will need to schedule the build in next frame.\n    if (SchedulerBinding.instance.schedulerPhase == SchedulerPhase.persistentCallbacks) {\n      SchedulerBinding.instance.addPostFrameCallback(_markNeedsBuild);\n    } else {"
  },
  {
    "id" : "a5b21b9a-10a1-48bc-a47e-ceb1c21f74d3",
    "prId" : 35207,
    "prUrl" : "https://github.com/flutter/flutter/pull/35207#pullrequestreview-256572333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6ee42aa-3857-44b4-8b36-970dfa3ae5bb",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "You could mayyybe hardcode the behavior to translucent...  I think there is no reason for Cupertino and Material to have different HitTestBehaviors.  Up to you though, either way is fine.",
        "createdAt" : "2019-06-28T22:31:13Z",
        "updatedAt" : "2019-07-12T16:48:37Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "d08785aa-ddbc-4c1e-ac40-8a6faa2b1b3a",
        "parentId" : "b6ee42aa-3857-44b4-8b36-970dfa3ae5bb",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I will probably keep it as is. Thanks for point out tho.",
        "createdAt" : "2019-07-01T21:32:59Z",
        "updatedAt" : "2019-07-12T16:48:37Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d64cb61c87f544b0da95ecf31a04d10ed7aa344",
    "line" : 293,
    "diffHunk" : "@@ -1,1 +1103,1107 @@  Widget buildGestureDetector({\n    Key key,\n    HitTestBehavior behavior,\n    Widget child\n  }) {"
  },
  {
    "id" : "8be40a9a-ad04-4d04-b556-000a1d6fabbe",
    "prId" : 35207,
    "prUrl" : "https://github.com/flutter/flutter/pull/35207#pullrequestreview-257642461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b46c34f-52c3-4242-8f5a-26f496ac853b",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Could assert client.forcePressEnabled here, to remind the reader, that it's guaranteed.",
        "createdAt" : "2019-07-03T18:07:52Z",
        "updatedAt" : "2019-07-12T16:48:37Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d64cb61c87f544b0da95ecf31a04d10ed7aa344",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +947,951 @@  ///    callback.\n  @protected\n  void onForcePressEnd(ForcePressDetails details) {\n    assert(delegate.forcePressEnabled);\n    renderEditable.selectWordsInRange("
  },
  {
    "id" : "a56bbf04-8390-4cc6-b98a-005edd6d2422",
    "prId" : 35207,
    "prUrl" : "https://github.com/flutter/flutter/pull/35207#pullrequestreview-260420364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "203668df-bc29-4873-b5be-bd9eb63cee5f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This one needs a better doc. When is the toolbar shown? How does this become true?",
        "createdAt" : "2019-07-11T01:06:44Z",
        "updatedAt" : "2019-07-12T16:48:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d64cb61c87f544b0da95ecf31a04d10ed7aa344",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +873,877 @@  final TextSelectionGestureDetectorBuilderDelegate delegate;\n\n  /// Whether to show the selection tool bar.\n  ///\n  /// It is based on the signal source when a [onTapDown] is called. This getter"
  },
  {
    "id" : "78063648-0b77-450f-bc4e-35f48bf41ce8",
    "prId" : 35207,
    "prUrl" : "https://github.com/flutter/flutter/pull/35207#pullrequestreview-260954075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cef2557b-5038-4793-ae38-508286e4ce9e",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why does this default to true, BTW?",
        "createdAt" : "2019-07-11T01:07:07Z",
        "updatedAt" : "2019-07-12T16:48:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "c80e0ecd-f5f2-4213-9264-f225a3e046c3",
        "parentId" : "cef2557b-5038-4793-ae38-508286e4ce9e",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "@justinmc might know more, but I think the default value does not really matter as event touch should start with on tap down that will initialize it.",
        "createdAt" : "2019-07-11T18:10:44Z",
        "updatedAt" : "2019-07-12T16:48:37Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "51122a8c-0b40-4eb9-b3b5-b4444b2846ff",
        "parentId" : "cef2557b-5038-4793-ae38-508286e4ce9e",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Chun Heng is right but I can't add much more to that.  I was just looking into an issue about the selection menu showing and hiding and I really need to understand that logic better.  The default is definitely true elsewhere too, though.",
        "createdAt" : "2019-07-11T18:27:34Z",
        "updatedAt" : "2019-07-12T16:48:37Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "5b13fb11-c0f0-46b5-8db5-62a5018babea",
        "parentId" : "cef2557b-5038-4793-ae38-508286e4ce9e",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "If the default doesn't matter, should it be uninitialized? And then we assert before the first read that somebody initialized it? ",
        "createdAt" : "2019-07-11T20:42:18Z",
        "updatedAt" : "2019-07-12T16:48:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "0506fe4a-d805-4d35-abac-e2ebd9186981",
        "parentId" : "cef2557b-5038-4793-ae38-508286e4ce9e",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Now i think of it, force press might not call ontapup, that might be why there is a default value?",
        "createdAt" : "2019-07-11T21:05:08Z",
        "updatedAt" : "2019-07-12T16:48:37Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d64cb61c87f544b0da95ecf31a04d10ed7aa344",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +879,883 @@  /// a stylus.\n  bool get shouldShowSelectionToolbar => _shouldShowSelectionToolbar;\n  bool _shouldShowSelectionToolbar = true;\n\n  /// The [State] of the [EditableText] for which the builder will provide a"
  },
  {
    "id" : "b8584be1-b6e9-45d7-a493-f7efb8f5eb77",
    "prId" : 54902,
    "prUrl" : "https://github.com/flutter/flutter/pull/54902#pullrequestreview-403745447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98f0e48b-2a2b-48f3-85f3-17da7f924850",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This should document what \"null\" means.",
        "createdAt" : "2020-04-30T17:49:13Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "b8ab8269-2335-4e47-99d4-50198cf846f7",
        "parentId" : "98f0e48b-2a2b-48f3-85f3-17da7f924850",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Also: It is kinda odd to have a nullable boolean. Maybe a three-value enum would be a better choice?",
        "createdAt" : "2020-04-30T17:51:57Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "722ad5adde3d77633618e0d10f9a0707c9056dfb",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +1508,1512 @@/// The contents of the clipboard can only be read asynchronously, via\n/// [Clipboard.getData], so this maintains a value that can be used\n/// synchronously. Call [update] to asynchronously update value if needed.\nclass ClipboardStatusNotifier extends ValueNotifier<ClipboardStatus> with WidgetsBindingObserver {\n  /// Create a new ClipboardStatusNotifier."
  },
  {
    "id" : "2c77941a-85d8-4c86-aff7-3832cf4e37a5",
    "prId" : 69101,
    "prUrl" : "https://github.com/flutter/flutter/pull/69101#pullrequestreview-517963969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00ae2ccb-2267-4b2a-a0b4-7047314e5b9d",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "This code comes from `onTapDown`",
        "createdAt" : "2020-10-27T12:00:45Z",
        "updatedAt" : "2020-10-28T03:07:09Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "6e081ea1-d17c-498a-b5af-ec71b136aeab",
        "parentId" : "00ae2ccb-2267-4b2a-a0b4-7047314e5b9d",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I tried connecting a mouse to an Android phone, and it does show the text selection menu and selection handles in a native app.  However, I realize that you got this from onTapDown and it's how Flutter was already working, so I think it's ok for now.  I will open a separate issue.",
        "createdAt" : "2020-10-27T17:58:02Z",
        "updatedAt" : "2020-10-28T03:07:09Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "dacaa7a1-18dc-4c48-9877-86067e65e5fc",
        "parentId" : "00ae2ccb-2267-4b2a-a0b4-7047314e5b9d",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Issue: https://github.com/flutter/flutter/issues/69127",
        "createdAt" : "2020-10-27T18:01:33Z",
        "updatedAt" : "2020-10-28T03:07:09Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "147b7559a14f093a7f0b99ba7dc1104a16dc9eb8",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1082,1086 @@      || kind == PointerDeviceKind.touch\n      || kind == PointerDeviceKind.stylus;\n\n    renderEditable.selectPositionAt(\n      from: details.globalPosition,"
  }
]