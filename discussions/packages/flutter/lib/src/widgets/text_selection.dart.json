[
  {
    "id" : "0ea51d3b-fdb9-4db9-a83a-9c81a7fec251",
    "prId" : 3223,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24306e9e-94f8-44ee-9b27-07da0882c8b8",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I'd probably use base/extent for these enum values because they map down to baseOffset and extentOffset, respectively, in TextSelection, but what you've got is also fine.\n",
        "createdAt" : "2016-04-15T05:09:30Z",
        "updatedAt" : "2016-04-21T17:32:49Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "1db66982-73cc-4404-af3e-3e52c3758440",
        "parentId" : "24306e9e-94f8-44ee-9b27-07da0882c8b8",
        "authorId" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "body" : "I went back and forth between the two. I settled on start/end because it conveys the intention that `start` will always be logically before `end` (in terms of offset into the text).\n",
        "createdAt" : "2016-04-15T19:21:08Z",
        "updatedAt" : "2016-04-21T17:32:49Z",
        "lastEditedBy" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "tags" : [
        ]
      }
    ],
    "commit" : "2927db3426d24dab2edc7a084488837a8144f760",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +131,135 @@    TextSelection newSelection;\n    switch (config.position) {\n      case _TextSelectionHandlePosition.start:\n        newSelection = new TextSelection(\n          baseOffset: position.offset,"
  },
  {
    "id" : "0ea8b738-b538-45c9-919b-a1cd69a464c6",
    "prId" : 3223,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d086576a-65a1-464f-9846-0ae3c4db40fa",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "This might be slightly more readable at the call site if you used named arguments here.\n",
        "createdAt" : "2016-04-15T05:12:28Z",
        "updatedAt" : "2016-04-21T17:32:49Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "2927db3426d24dab2edc7a084488837a8144f760",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +190,194 @@    TextSelectionHandleType ltrType,\n    TextSelectionHandleType rtlType\n  ) {\n    // [direction] is null when it doesn't matter.\n    switch (endpoint.direction ?? TextDirection.ltr) {"
  },
  {
    "id" : "d3cc465d-1297-47e2-bba1-983bc6d4c81b",
    "prId" : 3698,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed51d297-13b1-4f58-8ba1-8e7c113a3ab6",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "This should return a `Future<String>` because  reading the platform clipboard might be asynchronous.\n",
        "createdAt" : "2016-05-03T20:11:33Z",
        "updatedAt" : "2016-05-04T19:21:34Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "01c1af21-8c3f-4e6a-912d-7450bb956ba5",
        "parentId" : "ed51d297-13b1-4f58-8ba1-8e7c113a3ab6",
        "authorId" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "body" : "I'm working on the clipboard now, and I suspect there may be bigger changes here. Can I leave this for the next patch?\n",
        "createdAt" : "2016-05-03T20:44:06Z",
        "updatedAt" : "2016-05-04T19:21:34Z",
        "lastEditedBy" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "tags" : [
        ]
      },
      {
        "id" : "78bce9e2-a4fc-4310-a932-0ad4fd12da57",
        "parentId" : "ed51d297-13b1-4f58-8ba1-8e7c113a3ab6",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Sure.\n",
        "createdAt" : "2016-05-03T20:44:46Z",
        "updatedAt" : "2016-05-04T19:21:34Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa36ca495f60ab9a2e24a9dc2379edb52555bebd",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +44,48 @@\n  /// The copy/paste buffer. Application-wide.\n  String get pasteBuffer;\n\n  /// Sets the copy/paste buffer."
  },
  {
    "id" : "03805a60-3e57-464b-bbe6-9734e4a93bc8",
    "prId" : 5902,
    "prUrl" : "https://github.com/flutter/flutter/pull/5902#pullrequestreview-809586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9c0708a-01c1-413c-8721-e04fd79a1613",
        "parentId" : null,
        "authorId" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "body" : "Same here.\n",
        "createdAt" : "2016-09-20T23:03:18Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "57b9f88bf58da56769af22de167f61deb943ec3c",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +166,170 @@  /// synchronously. This means that it is safe to call during builds, but also\n  /// that if you do call this during a build, the UI will not update until the\n  /// next frame (i.e. many milliseconds later).\n  void update(InputValue newInput) {\n    if (_input == newInput)"
  }
]