[
  {
    "id" : "e766f406-a922-4ad0-8a86-f3576daccee7",
    "prId" : 8547,
    "prUrl" : "https://github.com/flutter/flutter/pull/8547#pullrequestreview-25081342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17f8fca9-dc5d-42cc-b129-fc093f8adf7b",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Technically you should write a test for this new feature.  You can just take a list view and jump to way out of range and check that it stays there.",
        "createdAt" : "2017-03-03T18:35:00Z",
        "updatedAt" : "2017-03-03T19:29:18Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "4919f4ac-e39e-40cc-8ad6-b3dc0880d66f",
        "parentId" : "17f8fca9-dc5d-42cc-b129-fc093f8adf7b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This feature is scary. It's unstable. Many, many things in the ScrollPosition logic automatically start ballistic activities.\r\n\r\nI don't think we should have a way to explicitly enter this kind of non-stable state. It will lead to very brittle UIs.\r\n\r\nCan you elaborate on the use case for this? Maybe there's a better solution.",
        "createdAt" : "2017-03-03T18:40:51Z",
        "updatedAt" : "2017-03-03T19:29:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6a5d65df-7fa5-44b5-8423-43b8af67ded8",
        "parentId" : "17f8fca9-dc5d-42cc-b129-fc093f8adf7b",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This was added to make the current ScrollNotification approach to synchronized scrolling work. The offset of the scroller that's following the leader is updated with jumpTo() each time the leader scrolls. In this case, because both scrollers have the same geometry, you want the follower to just mimic the leader's ballistic scroll.\r\n\r\nThis is all just a stopgap. When https://github.com/flutter/flutter/pull/8535 is sorted, I'll use that instead.\r\n\r\n",
        "createdAt" : "2017-03-03T19:04:59Z",
        "updatedAt" : "2017-03-03T19:29:18Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "569aa5f7-aa7f-4c2a-99e5-00cab83623d9",
        "parentId" : "17f8fca9-dc5d-42cc-b129-fc093f8adf7b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Ok. Please add a clear TODO here saying that this API is temporary and describe it as such in the dartdocs. Maybe even use a different method name and mark that method @deprecated, with an `//ignore` where you use it?\r\n\r\nThe point is that this is clear technical debt, and we should label it as such.",
        "createdAt" : "2017-03-03T22:09:25Z",
        "updatedAt" : "2017-03-03T22:09:25Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec308e66cb4c5f29951e1e6da230f58798d6edea",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +218,222 @@  /// If settle is true then, immediately after the jump, a ballistic activity\n  /// is started, in case the value was out of range.\n  void jumpTo(double value, { bool settle: true }) {\n    beginIdleActivity();\n    if (_pixels != value) {"
  },
  {
    "id" : "4869d715-5122-4a74-86dd-79cff0bd3c61",
    "prId" : 9156,
    "prUrl" : "https://github.com/flutter/flutter/pull/9156#pullrequestreview-30937581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be18a3c6-0506-47c6-94c2-3532e92d811c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "honestly i'd rather we moved towards making activity private, i don't really remember why it's public...",
        "createdAt" : "2017-04-04T03:40:20Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "eacfe218-fa0a-4568-acf2-36c5abb99c2d",
        "parentId" : "be18a3c6-0506-47c6-94c2-3532e92d811c",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I'm no longer using it, I've added an isScrolling getter to ScrollPosition, as well as listeners.",
        "createdAt" : "2017-04-05T00:54:37Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "08531c3b1713d41e827bdc7afbddcdf96f17c81c",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +464,468 @@  // SCROLL ACTIVITIES\n\n  ScrollActivity get activity => _activity;\n  ScrollActivity _activity;\n"
  },
  {
    "id" : "de613689-60ba-40b4-8c9b-226f5e4ce0e8",
    "prId" : 9156,
    "prUrl" : "https://github.com/flutter/flutter/pull/9156#pullrequestreview-32477971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fa5139c-67b4-4d76-b0b6-7e840b1ae9d8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "no need for all the elvis, activity can't be null by here (because this function early-returns on null)",
        "createdAt" : "2017-04-12T19:57:50Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1355b162-4fc2-48de-b954-95ca64feb45a",
        "parentId" : "8fa5139c-67b4-4d76-b0b6-7e840b1ae9d8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "also use activity instead of _activity when reading",
        "createdAt" : "2017-04-12T19:57:59Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "08531c3b1713d41e827bdc7afbddcdf96f17c81c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +498,502 @@    if (oldIgnorePointer != shouldIgnorePointer)\n      state.setIgnorePointer(shouldIgnorePointer);\n    isScrollingNotifier.value = _activity?.isScrolling ?? false;\n    if (!activity.isScrolling)\n      updateUserScrollDirection(ScrollDirection.idle);"
  },
  {
    "id" : "9c397dab-c7c3-40ca-a764-e28f8738e7c7",
    "prId" : 9731,
    "prUrl" : "https://github.com/flutter/flutter/pull/9731#pullrequestreview-35910826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0e57d6d-d6e8-40ba-9b51-fcc82ab75b0d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should the see also be above the subsection header?",
        "createdAt" : "2017-05-02T22:37:24Z",
        "updatedAt" : "2017-05-03T00:25:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "222aa74c-82d0-4375-a8f8-e2ea0deac8ab",
        "parentId" : "d0e57d6d-d6e8-40ba-9b51-fcc82ab75b0d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(what did we do for RenderObject?)",
        "createdAt" : "2017-05-02T22:37:31Z",
        "updatedAt" : "2017-05-03T00:25:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2fbade2a-aeca-44ad-b95b-3b291a82dd1c",
        "parentId" : "d0e57d6d-d6e8-40ba-9b51-fcc82ab75b0d",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "RenderObject has no \"See also\" section apparently.",
        "createdAt" : "2017-05-02T22:38:41Z",
        "updatedAt" : "2017-05-03T00:25:23Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "96e57d9c-229b-4fbe-9010-7ed81c901323",
        "parentId" : "d0e57d6d-d6e8-40ba-9b51-fcc82ab75b0d",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Left as-is.",
        "createdAt" : "2017-05-02T22:53:11Z",
        "updatedAt" : "2017-05-03T00:25:23Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "15219917859ac1fc546b86906de0404163244764",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +50,54 @@/// [userScrollDirection] changes values.\n///\n/// See also:\n///\n///  * [Scrollable], which uses a [ScrollPosition] to determine which portion of"
  },
  {
    "id" : "9623089a-5251-4523-9198-9ba91fdde314",
    "prId" : 9740,
    "prUrl" : "https://github.com/flutter/flutter/pull/9740#pullrequestreview-35915614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8f9bbb9-2b82-4ed7-b2d4-1d06d91bd946",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Please test that the restored scroll offset wins over the initial scroll offset.",
        "createdAt" : "2017-05-02T22:55:52Z",
        "updatedAt" : "2017-05-03T16:27:23Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "54ef6320-8a3e-4be0-a7ee-7fb38b44af3d",
        "parentId" : "e8f9bbb9-2b82-4ed7-b2d4-1d06d91bd946",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I adjusted the test to have a scroll controller set to initial position 110.0.",
        "createdAt" : "2017-05-02T23:28:19Z",
        "updatedAt" : "2017-05-03T16:27:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "667cf585cd7142a91d6119a6e7c4e4cfd1a4c5cf",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +303,307 @@  @protected\n  void restoreScrollOffset() {\n    if (pixels == null) {\n      final double value = PageStorage.of(context.storageContext)?.readState(context.storageContext);\n      if (value != null)"
  },
  {
    "id" : "34ae8306-a2ef-4619-91a2-56552f9074a1",
    "prId" : 10517,
    "prUrl" : "https://github.com/flutter/flutter/pull/10517#pullrequestreview-42191723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "353c9c18-9f94-4c38-890c-c65028e1943d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "docs should list the things that shouldn't be null",
        "createdAt" : "2017-06-06T01:13:36Z",
        "updatedAt" : "2017-06-06T18:48:25Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c47c3a0ea36c035cb49b347e0bbafa895eee7bb9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +64,68 @@  ///\n  /// The [physics], [context], and [keepScrollOffset] parameters must not be null.\n  ScrollPosition({\n    @required this.physics,\n    @required this.context,"
  },
  {
    "id" : "e7323381-ed92-42c5-be92-e182e3279b77",
    "prId" : 24015,
    "prUrl" : "https://github.com/flutter/flutter/pull/24015#pullrequestreview-172637524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07d288fd-666d-4d77-a160-d1d84c1a97cf",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "We should probably provide a new doc comment for this method, otherwise dartdocs will show the dartdoc of the superclass, which would incorrectly claim that `clamp` is ignored? ",
        "createdAt" : "2018-11-07T18:10:23Z",
        "updatedAt" : "2018-11-07T20:54:22Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "dddb8ab5-8a3e-4c82-b5e2-fa8af92535ba",
        "parentId" : "07d288fd-666d-4d77-a160-d1d84c1a97cf",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The super class does say\r\n>  .. but subclasses like [ScrollPosition] handle it by adjusting [to] to prevent over or under scrolling\r\n\r\nBut you're right, it would clearer if there was new doc here.",
        "createdAt" : "2018-11-07T18:36:55Z",
        "updatedAt" : "2018-11-07T20:54:22Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc49508a7f9dfa0d82e761ea6b07da46b55b463c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +571,575 @@  /// If [animateTo] is called then [curve] defaults to [Curves.ease].\n  @override\n  Future<void> moveTo(double to, {\n    Duration duration,\n    Curve curve,"
  },
  {
    "id" : "b3a67117-c245-4859-bd7c-bb77ded615e6",
    "prId" : 31763,
    "prUrl" : "https://github.com/flutter/flutter/pull/31763#pullrequestreview-231964718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2c13704-0398-445b-92a9-ce5b264d4c3d",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I assume this makes it a breaking change?",
        "createdAt" : "2019-04-29T00:46:00Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "7b36774e-3182-4b13-a9d9-728c73d14442",
        "parentId" : "f2c13704-0398-445b-92a9-ce5b264d4c3d",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I think it's ok. Our existing API documentation is already stricter than what these asserts enforce.",
        "createdAt" : "2019-04-30T01:00:16Z",
        "updatedAt" : "2019-05-29T22:28:34Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff9f755d80bb1063423e540599bc190e6a8f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +453,457 @@      assert(minScrollExtent != null);\n      assert(maxScrollExtent != null);\n      assert(minScrollExtent <= maxScrollExtent);\n      _minScrollExtent = minScrollExtent;\n      _maxScrollExtent = maxScrollExtent;"
  },
  {
    "id" : "d29291cb-9192-4d0d-b970-aa539c09c0cb",
    "prId" : 56521,
    "prUrl" : "https://github.com/flutter/flutter/pull/56521#pullrequestreview-408489110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11eab586-b6ba-465a-91ac-2ae8b81c79ac",
        "parentId" : null,
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "Is this truly the \"old position\"?  For example what's the value of `pixels`?  It's not the value it was previously, it is what the value is currently.  Do you think it would be more clear to pass the old extents into the function instead of a ScrollMetric?  There is extra baggage with a ScrollMetric that might be weird referring to this as \"oldPosition\" since it is the current position modulo minScrollExtent and  maxScrollExtent?",
        "createdAt" : "2020-05-07T20:20:51Z",
        "updatedAt" : "2020-05-07T21:32:47Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "0c76708e-ee97-4747-9e08-77a4ba92b8a7",
        "parentId" : "11eab586-b6ba-465a-91ac-2ae8b81c79ac",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "It also includes useful information like the axisDirection and the viewportDimension, but you're right that only the min/max scroll extents can be different between the two arguments.\r\n\r\nI'm loathe to make `adjustPositionForNewDimensions` take 9 arguments or whatever it would be to pass all the useful information along, though. I guess I could do 5 arguments (oldMinScrollExtent, oldMaxScrollExtent, metrics, isScrolling, velocity) but then the code looks weird because it's doing things like \"oldMinScrollExtent < metrics.pixels\" and comparing that to \"metrics.minScrollExtent < metrics.pixels\" or whatever, which is asymmetric and makes the code harder to read...\r\n\r\nI called it \"old\" and \"new\" \"position\" because it's literally copied from the ScrollPosition. Would it help to document the weirdness here?",
        "createdAt" : "2020-05-07T20:50:19Z",
        "updatedAt" : "2020-05-07T21:32:47Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1a43b787-6f5d-4e33-a25b-755466324989",
        "parentId" : "11eab586-b6ba-465a-91ac-2ae8b81c79ac",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "You can keep the same number of arguments if you send in a Range datatype.\r\n`adjustPositionForNewExtents(this, Range(oldMinExtents, oldMaxExtents), isScrolling,  velocity)`\r\n\r\nYou could even compress it smaller if you made an immutable view for ScrollActivity and passed the current activity instead of the isScrolling and velocity (I'm not sure if it is  immutable already): `adjustPositionForNewExtents(this, Range(oldMinExtents, oldMaxExtents), activity)`\r\n",
        "createdAt" : "2020-05-07T20:55:53Z",
        "updatedAt" : "2020-05-07T21:32:47Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "9a76a214-bf60-4ee7-9e9b-49b4017315ae",
        "parentId" : "11eab586-b6ba-465a-91ac-2ae8b81c79ac",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "that would require introducing a whole lot more API surface, though. So while we simplify this one API, we do it at the cost of more code size and a more complicated API overall.",
        "createdAt" : "2020-05-07T21:03:54Z",
        "updatedAt" : "2020-05-07T21:32:47Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "cd03c262-12bd-4dfb-86ee-548c9b4fe219",
        "parentId" : "11eab586-b6ba-465a-91ac-2ae8b81c79ac",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "I'm surprised we don't have a Range class already, pretty typical and useful.  I think my suggestion is more clear and I'd error on the side of clear API over code size when we are just adding something like a Range class.  It's not worth a long discussion, if you don't think it's worth doing that's fine.",
        "createdAt" : "2020-05-07T21:16:24Z",
        "updatedAt" : "2020-05-07T21:32:47Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "345175b4-6ea2-4a29-9075-71992febab36",
        "parentId" : "11eab586-b6ba-465a-91ac-2ae8b81c79ac",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I poked at this some more but couldn't come up with something that would improve it enough to outweigh the costs. :-( I'll land this like this for now and if we can come up with something better we can always change it. This is unlikely to be widely used anyway.",
        "createdAt" : "2020-05-08T19:58:58Z",
        "updatedAt" : "2020-05-08T19:58:58Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b26f374706547ca81499381cfa8030d39cb7db2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +490,494 @@      assert(maxScrollExtent != null);\n      assert(minScrollExtent <= maxScrollExtent);\n      final ScrollMetrics oldPosition = haveDimensions ? copyWith() : null;\n      _minScrollExtent = minScrollExtent;\n      _maxScrollExtent = maxScrollExtent;"
  },
  {
    "id" : "3e18a6b3-95e9-45ac-a014-aee69f3f51b9",
    "prId" : 56521,
    "prUrl" : "https://github.com/flutter/flutter/pull/56521#pullrequestreview-479577162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b346e180-0731-43a6-a4e5-c7ca84674a4d",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "should `nearEqual`?",
        "createdAt" : "2020-09-01T09:51:10Z",
        "updatedAt" : "2020-09-01T09:51:16Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b26f374706547ca81499381cfa8030d39cb7db2",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +525,529 @@      velocity: activity.velocity,\n    );\n    if (newPixels != pixels) {\n      correctPixels(newPixels);\n      return false;"
  },
  {
    "id" : "8c57ee8e-2d7d-457d-86f6-2b79e9cf0a4d",
    "prId" : 63146,
    "prUrl" : "https://github.com/flutter/flutter/pull/63146#pullrequestreview-481089639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87a9b88b-31aa-4d09-9bcc-decb4fc09609",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "Nice fixed! \r\nWe can not use the `oldPosition ` above, for example, the `_PagePosition.applyViewportDimension` will correct the pixels due to resizing from zero, and it will cause `RangeMaintainingScrollPhysics.adjustPositionForNewDimensions` mistake. I am currently fix this bug (#65015 ). ",
        "createdAt" : "2020-09-01T02:25:06Z",
        "updatedAt" : "2020-09-01T12:36:10Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "93436b48-79cc-43f1-813d-cbe5970fe9e7",
        "parentId" : "87a9b88b-31aa-4d09-9bcc-decb4fc09609",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'll leave this as-is in my reland and will let you follow up in #65015 (i'll review that shortly, sorry i missed that until now)",
        "createdAt" : "2020-09-02T17:51:06Z",
        "updatedAt" : "2020-09-02T17:51:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "41d27f0d98a885f8b872dc4239aa10a77996d22d",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +463,467 @@    }\n    assert(!_didChangeViewportDimensionOrReceiveCorrection, 'Use correctForNewDimensions() (and return true) to change the scroll offset during applyContentDimensions().');\n    _lastMetrics = copyWith();\n    return true;\n  }"
  },
  {
    "id" : "e8b064c2-2e58-4684-821f-487ab8910608",
    "prId" : 64672,
    "prUrl" : "https://github.com/flutter/flutter/pull/64672#pullrequestreview-484439377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a394a85d-afe7-4bd3-8bca-7deec6501f0c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i think we should try making these getters non-nullable (and maybe even the fields, though they'd have to be late). it might require removing some asserts.",
        "createdAt" : "2020-08-28T23:53:47Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "874539e2-7392-4ea6-9619-bbf033b02510",
        "parentId" : "a394a85d-afe7-4bd3-8bca-7deec6501f0c",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Trying to make them non-nullable I faced several issue (in test) and even with an `bool get has*` method there's still the `ScrollMetrics.copyWith` issue that can not be solved.",
        "createdAt" : "2020-09-02T20:09:38Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "5b82130f-acee-4f1b-818e-8ab94228111f",
        "parentId" : "a394a85d-afe7-4bd3-8bca-7deec6501f0c",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "I found a workaround for `ScrollMetrics.copyWith`. Let me know if the `has*` pattern looks good to you.",
        "createdAt" : "2020-09-02T20:22:40Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "c0a044f9-48a2-40b9-a013-b33872114249",
        "parentId" : "a394a85d-afe7-4bd3-8bca-7deec6501f0c",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "See ed04e18fdc",
        "createdAt" : "2020-09-02T20:31:34Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "4cb282b8-1d44-47b5-847a-9ed10b666365",
        "parentId" : "a394a85d-afe7-4bd3-8bca-7deec6501f0c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "that looks good except i would just call it \"hasScrollExtents\" rather than having both, since they should always be set together",
        "createdAt" : "2020-09-07T16:49:38Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "12dc3511-9cdf-4978-8e74-e7b60d99f90b",
        "parentId" : "a394a85d-afe7-4bd3-8bca-7deec6501f0c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "or hasDimensions since viewportDimensions could maybe also be part of it",
        "createdAt" : "2020-09-07T16:50:40Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "9c13cbe8-f819-417f-96b4-0170486e85f0",
        "parentId" : "a394a85d-afe7-4bd3-8bca-7deec6501f0c",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "As there are 2 methods (`applyViewportDimension` and `applyContentDimensions`) it seems legit to have 2 get `has*`. \r\n\r\nIMHO if we'd like to have a single `hasDimensions` we should try to have a single  `applyDimensions` instead of the 2 `apply*` above. But regarding test failures I faced (trying to have a single `haveDimensions`) it seems to have cases where scrollExtents and viewportDimension are not all null or all non-null.\r\n\r\nBTW should we use `hasContentDimensions` instead of `hasScrollExtents` to have the same naming as `apply*`?",
        "createdAt" : "2020-09-08T09:11:14Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "ea22b896-ef6a-4e4d-a776-4b84b0b97d9c",
        "parentId" : "a394a85d-afe7-4bd3-8bca-7deec6501f0c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Sure, hasContentDimensions and hasViewportDimensions works for me.",
        "createdAt" : "2020-09-08T19:15:01Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c8c31786-87dc-4cf8-bd2c-359ec5a1a140",
        "parentId" : "a394a85d-afe7-4bd3-8bca-7deec6501f0c",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "I changed `hasScrollExtents` to `hasContentDimensions`",
        "createdAt" : "2020-09-08T19:40:20Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "414a28205060a97cc9557b48ed0b677a142009aa",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +142,146 @@  @override\n  double get maxScrollExtent => _maxScrollExtent!;\n  double? _maxScrollExtent;\n\n  @override"
  },
  {
    "id" : "436c5ee8-cc03-43f4-8754-9e7319f26398",
    "prId" : 64672,
    "prUrl" : "https://github.com/flutter/flutter/pull/64672#pullrequestreview-483665365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cae976f3-3566-43f4-98b4-668afa287123",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this should be non-nullable unless there's a really good reason it has to be nullable...",
        "createdAt" : "2020-08-28T23:54:23Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "bae3d724-8170-4fd1-90da-e50c10288c07",
        "parentId" : "cae976f3-3566-43f4-98b4-668afa287123",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "There are some specific handling when pixels is null. (Search `pixels == null`)",
        "createdAt" : "2020-08-31T21:15:15Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "8854ec5f-946e-412a-a61d-6b4891d3ebb9",
        "parentId" : "cae976f3-3566-43f4-98b4-668afa287123",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Those are all about the initial value. At a minimum let's make `pixels` non-nullable and add a `hasPixels` getter that returns whether `_pixels` is non-null. The `pixels` getter itself is almost always assumed to return non-null.",
        "createdAt" : "2020-09-01T01:59:42Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "707535a3-d41f-41a4-98f3-9c7489aaf9c8",
        "parentId" : "cae976f3-3566-43f4-98b4-668afa287123",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "`hasPixels` getter added.",
        "createdAt" : "2020-09-02T15:44:32Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "c0f1d66b-09a0-446e-b5ec-3bea0499a65d",
        "parentId" : "cae976f3-3566-43f4-98b4-668afa287123",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Can we keep hasPixels to ScrollPosition rather than putting it on VIewportOffset itself?",
        "createdAt" : "2020-09-03T00:12:30Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1de65216-25c0-469e-9945-09c5deb9428a",
        "parentId" : "cae976f3-3566-43f4-98b4-668afa287123",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "`pixels` is currently used in `VIewportOffset.debugFillDescription` and we should guard its usage to avoid LazyInitializationError. That why I added `VIewportOffset.hasPixels`.\r\nAlternativelly we could move this `description.add('offset: ${pixels.toStringAsFixed(1)}');` to every child having the concret implementation of `double get pixels`.\r\n\r\n```diff\r\ndiff --git a/packages/flutter/lib/src/rendering/viewport_offset.dart b/packages/flutter/lib/src/rendering/viewport_offset.dart\r\nindex 3e986f8640..435cbfb182 100644\r\n--- a/packages/flutter/lib/src/rendering/viewport_offset.dart\r\n+++ b/packages/flutter/lib/src/rendering/viewport_offset.dart\r\n@@ -94,9 +94,6 @@ abstract class ViewportOffset extends ChangeNotifier {\r\n   /// the value changes due to [correctBy]).\r\n   double get pixels;\r\n \r\n-  /// Whether [pixels] property is available.\r\n-  bool get hasPixels;\r\n-\r\n   /// Called when the viewport's extents are established.\r\n   ///\r\n   /// The argument is the dimension of the [RenderViewport] in the main axis\r\n@@ -247,11 +244,7 @@ abstract class ViewportOffset extends ChangeNotifier {\r\n   /// If you override this, make sure to start your method with a call to\r\n   /// `super.debugFillDescription(description)`.\r\n   @mustCallSuper\r\n-  void debugFillDescription(List<String> description) {\r\n-    if (hasPixels) {\r\n-      description.add('offset: ${pixels.toStringAsFixed(1)}');\r\n-    }\r\n-  }\r\n+  void debugFillDescription(List<String> description) { }\r\n }\r\n \r\n class _FixedViewportOffset extends ViewportOffset {\r\n@@ -263,9 +256,6 @@ class _FixedViewportOffset extends ViewportOffset {\r\n   @override\r\n   double get pixels => _pixels;\r\n \r\n-  @override\r\n-  bool get hasPixels => true;\r\n-\r\n   @override\r\n   bool applyViewportDimension(double viewportDimension) => true;\r\n \r\n@@ -294,4 +284,10 @@ class _FixedViewportOffset extends ViewportOffset {\r\n \r\n   @override\r\n   bool get allowImplicitScrolling => false;\r\n+\r\n+  @override\r\n+  void debugFillDescription(List<String> description) {\r\n+    super.debugFillDescription(description);\r\n+    description.add('offset: ${pixels.toStringAsFixed(1)}');\r\n+  }\r\n }\r\ndiff --git a/packages/flutter/lib/src/widgets/scroll_position.dart b/packages/flutter/lib/src/widgets/scroll_position.dart\r\nindex 2537333b73..25864e3cea 100644\r\n--- a/packages/flutter/lib/src/widgets/scroll_position.dart\r\n+++ b/packages/flutter/lib/src/widgets/scroll_position.dart\r\n@@ -901,6 +901,8 @@ abstract class ScrollPosition extends ViewportOffset with ScrollMetrics {\r\n     if (debugLabel != null)\r\n       description.add(debugLabel!);\r\n     super.debugFillDescription(description);\r\n+    if (hasPixels)\r\n+      description.add('offset: ${pixels.toStringAsFixed(1)}');\r\n     description.add('range: ${_minScrollExtent?.toStringAsFixed(1)}..${_maxScrollExtent?.toStringAsFixed(1)}');\r\n     description.add('viewport: ${_viewportDimension?.toStringAsFixed(1)}');\r\n   }\r\ndiff --git a/packages/flutter/test/rendering/slivers_block_test.dart b/packages/flutter/test/rendering/slivers_block_test.dart\r\nindex cdb61b8add..05bb823a61 100644\r\n--- a/packages/flutter/test/rendering/slivers_block_test.dart\r\n+++ b/packages/flutter/test/rendering/slivers_block_test.dart\r\n@@ -79,9 +79,6 @@ class ViewportOffsetSpy extends ViewportOffset {\r\n   @override\r\n   double get pixels => _pixels;\r\n \r\n-  @override\r\n-  bool get hasPixels => true;\r\n-\r\n   bool corrected = false;\r\n \r\n   @override\r\n```\r\n\r\nWDYT?",
        "createdAt" : "2020-09-03T07:00:22Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "7cdb4f6b-59a6-47eb-af27-6b6bc762db3e",
        "parentId" : "cae976f3-3566-43f4-98b4-668afa287123",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Interesting trade-off. I think you were probably right the first time, ViewportOffset.hasPixels makes sense since I guess we're saying in the fillDescription that it is legitimate that it can sometimes be null.",
        "createdAt" : "2020-09-07T16:52:08Z",
        "updatedAt" : "2020-09-09T06:43:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "414a28205060a97cc9557b48ed0b677a142009aa",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +167,171 @@  @override\n  double get pixels => _pixels!;\n  double? _pixels;\n\n  @override"
  }
]