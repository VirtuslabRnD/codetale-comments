[
  {
    "id" : "c4fa628b-cd77-4db6-8036-9f011b2188f5",
    "prId" : 47489,
    "prUrl" : "https://github.com/flutter/flutter/pull/47489#pullrequestreview-335592243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07abffd5-188d-4514-a86f-310b090c0efa",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Can this field change its value dynamically? What happens if on frame 1 `child == null` and on frame 2 `child != null`? Maybe you want [needsCompositing](https://api.flutter.dev/flutter/rendering/RenderObject/needsCompositing.html)?",
        "createdAt" : "2019-12-20T22:27:43Z",
        "updatedAt" : "2019-12-21T07:05:17Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "2011c086-b28e-4c18-a986-4d87e81fdb1c",
        "parentId" : "07abffd5-188d-4514-a86f-310b090c0efa",
        "authorId" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "body" : "I stole this code from color_filter.dart.  Basically, `sed -s \"s/Color/Image/g\" < color_filter.dart > image_filter.dart` (but by hand).",
        "createdAt" : "2019-12-20T22:39:57Z",
        "updatedAt" : "2019-12-21T07:05:17Z",
        "lastEditedBy" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "tags" : [
        ]
      },
      {
        "id" : "a76a9b2f-4130-4c7b-a8dc-aa47bd0720df",
        "parentId" : "07abffd5-188d-4514-a86f-310b090c0efa",
        "authorId" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "body" : "```\r\n  /// Override this in subclasses to indicate that your paint function always\r\n  /// creates at least one composited layer. For example, videos should return\r\n  /// true if they use hardware decoders.\r\n```\r\n\r\nI think the intention is that if I have a child, then the child may require compositing even if I don't, so as long as I have a child I will always need compositing. Otherwise the ROs only notify to be composited when they have a change.",
        "createdAt" : "2019-12-20T22:47:08Z",
        "updatedAt" : "2019-12-21T07:05:17Z",
        "lastEditedBy" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "tags" : [
        ]
      },
      {
        "id" : "c4567002-13a2-45ef-a8c3-4a1f0383df0a",
        "parentId" : "07abffd5-188d-4514-a86f-310b090c0efa",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "You always need compositing if your paint will push a layer. That's all.",
        "createdAt" : "2019-12-21T06:35:19Z",
        "updatedAt" : "2019-12-21T07:05:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "fef022f0-04ab-488b-be96-0aabd48b1c98",
        "parentId" : "07abffd5-188d-4514-a86f-310b090c0efa",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(and equivalently, you don't \"always need compositing\" if your paint doesn't need to push a layer)\r\n\r\nCompositing is separate from \"markNeedsPaint\", which is what render objects do when they change. Compositing is about whether ancestor render objects need to use layers when they don't need to. For example, if you have an ancestor clip rect render object, then normally it would just clip on the canvas, but if it has a descendant that needs compositing then instead it'll use a layer. The property is called \"always needs compositing\" to indicate that you will not chose to _not_ use a layer.",
        "createdAt" : "2019-12-21T06:38:21Z",
        "updatedAt" : "2019-12-21T07:05:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b70ea64223be898e1cc5a0eb4c9558de163e9e62",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@\n  @override\n  bool get alwaysNeedsCompositing => child != null;\n\n  @override"
  },
  {
    "id" : "6e052939-0d52-486f-be80-7bf823a06cec",
    "prId" : 47489,
    "prUrl" : "https://github.com/flutter/flutter/pull/47489#pullrequestreview-335592099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b4b928f-2335-4299-85f2-db9b4d585d62",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I wonder if this is too restrictive. It means that if you want to change filtering at runtime you have to change your widget hierarchy, which can be quite ceremonious in the code. Maybe instead use the strategy used by `Opacity` and `Transform`? They first check if the widget has any effect at all, and if it doesn't simply does not apply the effect. This does not require users to dynamically change their widget trees, but only values passed to the `Opacity`/`Transform` widgets.",
        "createdAt" : "2019-12-20T22:31:47Z",
        "updatedAt" : "2019-12-21T07:05:17Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "418095fa-87b9-46dc-80e7-39abab751de0",
        "parentId" : "3b4b928f-2335-4299-85f2-db9b4d585d62",
        "authorId" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "body" : "I was thinking that as well, but it seems a common restriction in the code.\r\n\r\nThere are even things like ClipRect asserts that the behavior isn't \"None\"...? Then why do we define the value?\r\n\r\nBDF also asserts a non-null filter as well.\r\n\r\nIs there a reason for not allowing these widgets to have a \"nop\" mode in them?\r\n\r\n@Hixie ?",
        "createdAt" : "2019-12-20T22:45:07Z",
        "updatedAt" : "2019-12-21T07:05:17Z",
        "lastEditedBy" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "tags" : [
        ]
      },
      {
        "id" : "a9412f06-69e6-4432-bdcd-2f2521d86670",
        "parentId" : "3b4b928f-2335-4299-85f2-db9b4d585d62",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "`ClipBehavior.none` is allowed by most widgets, for `ClipRect` specifically it doesn't make sense because the whole point is to clip.\r\n\r\nAsserting non-null here is fine IMHO.",
        "createdAt" : "2019-12-21T06:33:09Z",
        "updatedAt" : "2019-12-21T07:05:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b70ea64223be898e1cc5a0eb4c9558de163e9e62",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@  /// Creates a widget that applies an [ImageFilter] to its child.\n  ///\n  /// The [imageFilter] must not be null.\n  const ImageFiltered({\n    Key key,"
  }
]