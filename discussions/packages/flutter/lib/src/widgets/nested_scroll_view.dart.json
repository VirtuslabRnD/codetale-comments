[
  {
    "id" : "92590923-4adf-4b2e-9ae4-3575a43923b8",
    "prId" : 11242,
    "prUrl" : "https://github.com/flutter/flutter/pull/11242#pullrequestreview-50659965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52206e1f-12d7-4664-bd1b-e1bede5821ee",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why \"parent\"?",
        "createdAt" : "2017-07-17T23:26:18Z",
        "updatedAt" : "2017-07-19T01:05:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2b83bbd1-e79c-462c-adbb-7d2e5af62ab1",
        "parentId" : "52206e1f-12d7-4664-bd1b-e1bede5821ee",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It matches the similarly unqualified \"updateParent()\" method name.\r\n\r\n",
        "createdAt" : "2017-07-18T16:00:44Z",
        "updatedAt" : "2017-07-19T01:05:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad28044cad13191fc30b07e5d6e98a44d7d73bd3",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +171,175 @@\nclass _NestedScrollCoordinator implements ScrollActivityDelegate, ScrollHoldController {\n  _NestedScrollCoordinator(this._context, this._parent) {\n    final double initialScrollOffset = _parent?.initialScrollOffset ?? 0.0;\n    _outerController = new _NestedScrollController(this, initialScrollOffset: initialScrollOffset, debugLabel: 'outer');"
  },
  {
    "id" : "84b71c7b-81ea-48f4-b122-b6ee16186b61",
    "prId" : 11242,
    "prUrl" : "https://github.com/flutter/flutter/pull/11242#pullrequestreview-50776263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c741f64-dbf0-4d8b-986e-8775691ff42c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "what is the purpose of this change?",
        "createdAt" : "2017-07-17T23:27:04Z",
        "updatedAt" : "2017-07-19T01:05:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "73f2edfa-a64a-4827-b52f-56811f47f997",
        "parentId" : "7c741f64-dbf0-4d8b-986e-8775691ff42c",
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "`Future.wait` doesn't return null, so Flutter will throw an error in the logs complaining about a type mismatch.",
        "createdAt" : "2017-07-17T23:55:26Z",
        "updatedAt" : "2017-07-19T01:05:20Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      },
      {
        "id" : "738877be-ea77-4454-ab61-3d67f80ab1b8",
        "parentId" : "7c741f64-dbf0-4d8b-986e-8775691ff42c",
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "See #10925",
        "createdAt" : "2017-07-17T23:56:24Z",
        "updatedAt" : "2017-07-19T01:05:20Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      },
      {
        "id" : "78aaea8e-6058-4791-9c66-d1ea3725bc26",
        "parentId" : "7c741f64-dbf0-4d8b-986e-8775691ff42c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Ah, I see. Is there a test that verifies this particular issue?",
        "createdAt" : "2017-07-18T02:05:28Z",
        "updatedAt" : "2017-07-19T01:05:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ebab1373-e6b1-4c0e-b1d7-232b569b94ae",
        "parentId" : "7c741f64-dbf0-4d8b-986e-8775691ff42c",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The new tests are tripped up by this.\r\n\r\n```\r\n00:01 +3 ~1: - NestedScrollView with a ScrollController\r\n══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\r\nThe following assertion was thrown running a test:\r\ntype '_Future<List>' is not a subtype of type 'Future<Null>' of 'function result' where\r\n  _Future is from dart:async\r\n  List is from dart:core\r\n  Future is from dart:async\r\n  Null is from dart:core\r\n```\r\n",
        "createdAt" : "2017-07-18T15:59:52Z",
        "updatedAt" : "2017-07-19T01:05:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "58cc4878-5c01-4415-9358-087486a994ca",
        "parentId" : "7c741f64-dbf0-4d8b-986e-8775691ff42c",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Just to be clear: if I reintroduce the error, the new tests catch it.\r\n",
        "createdAt" : "2017-07-18T19:45:21Z",
        "updatedAt" : "2017-07-19T01:05:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "c76867c8-13be-4921-a2af-f8f96f32b0ae",
        "parentId" : "7c741f64-dbf0-4d8b-986e-8775691ff42c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "great!",
        "createdAt" : "2017-07-19T00:06:58Z",
        "updatedAt" : "2017-07-19T01:05:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad28044cad13191fc30b07e5d6e98a44d7d73bd3",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +429,433 @@      },\n    );\n    await Future.wait<Null>(resultFutures);\n  }\n"
  },
  {
    "id" : "b6e8f778-6989-4ffa-97ca-bf60b1d6c88a",
    "prId" : 14133,
    "prUrl" : "https://github.com/flutter/flutter/pull/14133#pullrequestreview-89998260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0372d18f-aced-4fa0-80e8-e38b754266fd",
        "parentId" : null,
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "Cascade operator looks kind of weird here if you're only setting one thing.",
        "createdAt" : "2018-01-19T01:20:36Z",
        "updatedAt" : "2018-01-19T02:43:28Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      },
      {
        "id" : "9ac7267b-f78f-4413-845d-398db824f18f",
        "parentId" : "0372d18f-aced-4fa0-80e8-e38b754266fd",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah. This is done for consistence with all the other updateRenderObject methods in the framework.",
        "createdAt" : "2018-01-19T02:35:20Z",
        "updatedAt" : "2018-01-19T02:43:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f206584dc645e4656ae9f002d15d0b94fc292f13",
    "line" : 584,
    "diffHunk" : "@@ -1,1 +1274,1278 @@  void updateRenderObject(BuildContext context, RenderSliverOverlapAbsorber renderObject) {\n    renderObject\n      ..handle = handle;\n  }\n"
  },
  {
    "id" : "96edade7-b763-4340-aa2c-0fb06659a4db",
    "prId" : 14133,
    "prUrl" : "https://github.com/flutter/flutter/pull/14133#pullrequestreview-89998317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "807685ac-213f-4859-97d5-d10ffbc51520",
        "parentId" : null,
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "Cascade operator looks kind of weird here if you're only setting one thing.",
        "createdAt" : "2018-01-19T01:20:44Z",
        "updatedAt" : "2018-01-19T02:43:28Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      },
      {
        "id" : "2e21791c-7524-4d5d-8037-3d11a9548e64",
        "parentId" : "807685ac-213f-4859-97d5-d10ffbc51520",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "as above",
        "createdAt" : "2018-01-19T02:35:42Z",
        "updatedAt" : "2018-01-19T02:43:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f206584dc645e4656ae9f002d15d0b94fc292f13",
    "line" : 729,
    "diffHunk" : "@@ -1,1 +1419,1423 @@  void updateRenderObject(BuildContext context, RenderSliverOverlapInjector renderObject) {\n    renderObject\n      ..handle = handle;\n  }\n"
  },
  {
    "id" : "ec630102-da94-4c77-8648-013e5e4b9f34",
    "prId" : 14279,
    "prUrl" : "https://github.com/flutter/flutter/pull/14279#pullrequestreview-92016289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82a9ffb6-9acc-4a24-aac9-0ae1210dfde5",
        "parentId" : null,
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "Would it make sense to set `_lastHasScrolledBody` here (and call it `_hasScrolledBody`) instead of in the `build` method? Usually we try to mutate private state in `setState` instead of in build methods. If there's a good reason not to, maybe we can document it in a comment.",
        "createdAt" : "2018-01-27T01:28:07Z",
        "updatedAt" : "2018-01-27T04:46:30Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      },
      {
        "id" : "4dbf5f93-5f0d-4005-af67-527bec76d324",
        "parentId" : "82a9ffb6-9acc-4a24-aac9-0ae1210dfde5",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'll add a comment. The problem with setting it only in the setState is that the build method gets called more often than just when we call setState.",
        "createdAt" : "2018-01-27T04:11:11Z",
        "updatedAt" : "2018-01-27T04:46:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4d376b73c8cd6a291131552cabc437c471d7163",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +322,326 @@    if (_lastHasScrolledBody != newHasScrolledBody) {\n      setState(() {\n        // _coordinator.hasScrolledBody changed (we use it in the build method)\n        // (We record _lastHasScrolledBody in the build() method, rather than in\n        // this setState call, because the build() method may be called more"
  },
  {
    "id" : "9ed974b3-045d-4f4d-a5ac-4bff65cf6069",
    "prId" : 14444,
    "prUrl" : "https://github.com/flutter/flutter/pull/14444#pullrequestreview-96317074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9dff5ee0-86c3-473e-a121-e64aa5f23e84",
        "parentId" : null,
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "The first sentence here is not adding providing more information than reading the one line of code.\r\n\r\nWhat I would find useful here is a comment saying, how we get to a state where pixels is out of the min/max scroll extent, and why are we not clamping in this case.",
        "createdAt" : "2018-02-09T22:06:33Z",
        "updatedAt" : "2018-02-13T22:03:20Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      },
      {
        "id" : "571492e3-1b4e-4d1f-bb18-305487adc8e7",
        "parentId" : "9dff5ee0-86c3-473e-a121-e64aa5f23e84",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "added a paragraph that explains that",
        "createdAt" : "2018-02-13T22:01:16Z",
        "updatedAt" : "2018-02-13T22:03:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "769d6abf425da31d1fdf779f1eb6c17148e60017",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +955,959 @@  double applyClampedDragUpdate(double delta) {\n    assert(delta != 0.0);\n    // If we are going towards the maxScrollExtent (negative scroll offset),\n    // then the furthest we can be in the minScrollExtent direction is negative\n    // infinity. For example, if we are already overscrolled, then scrolling to"
  },
  {
    "id" : "c2fa4e4c-8c4c-4445-9293-630887d22b13",
    "prId" : 49004,
    "prUrl" : "https://github.com/flutter/flutter/pull/49004#pullrequestreview-350476712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cbcf813-e629-42a0-b5a9-22341b8e1a65",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "No matter how I manipulate it, it will always push the header sliver(s) out of view? even if I scroll back all the way to the top?",
        "createdAt" : "2020-01-29T18:10:12Z",
        "updatedAt" : "2020-01-29T22:50:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "22e6d1f8-1dca-439f-bc0e-e4d8c4b01e28",
        "parentId" : "6cbcf813-e629-42a0-b5a9-22341b8e1a65",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Yes. The inner controller can only be scrolled once the outer has reached the end of its scrollable. Therefore, if the inner is scrolling/being manipulated, the outer must be at the end its extent.",
        "createdAt" : "2020-01-29T22:42:08Z",
        "updatedAt" : "2020-01-29T22:52:01Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "df88a49650aa39f1222a894d910acd938f6099b2",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +341,345 @@  /// [NestedScrollView.body].\n  ///\n  /// Manipulating the [ScrollPosition] of this controller pushes the outer\n  /// header sliver(s) up and out of view. The position of the [outerController]\n  /// will be set to [ScrollPosition.maxScrollExtent], unless you use"
  },
  {
    "id" : "73ae61ce-5853-4a4a-bfc6-eb650811721d",
    "prId" : 49004,
    "prUrl" : "https://github.com/flutter/flutter/pull/49004#pullrequestreview-350476712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7098da00-8e8b-43ef-8096-169ff828cdf8",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Again, this is true no matter what I set the scroll position to?",
        "createdAt" : "2020-01-29T18:10:52Z",
        "updatedAt" : "2020-01-29T22:50:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "c2f1614a-27de-4d84-be03-2b3479849426",
        "parentId" : "7098da00-8e8b-43ef-8096-169ff828cdf8",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Yes, I believe the tests cover this. The inner should not be scrolled until the outer has reached its end, so if the outer is scrolling, the inner should be at its 0.0 position. \r\n\r\nMaybe I can re-word the docs or the tests to make this a bit clearer? WDYT?",
        "createdAt" : "2020-01-29T22:43:30Z",
        "updatedAt" : "2020-01-29T22:52:01Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "df88a49650aa39f1222a894d910acd938f6099b2",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +357,361 @@  /// This is equivalent to [NestedScrollView.controller], if provided.\n  ///\n  /// Manipulating the [ScrollPosition] of this controller pushes the inner body\n  /// sliver(s) down. The position of the [innerController] will be set to\n  /// [ScrollPosition.minScrollExtent], unless you use"
  }
]