[
  {
    "id" : "1c262dcf-fa79-4058-989d-65bfd81fd415",
    "prId" : 832,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c026f18-34fe-4e13-9752-d9f21db3ba8e",
        "parentId" : null,
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "typo: correspond\n",
        "createdAt" : "2015-12-09T15:43:09Z",
        "updatedAt" : "2015-12-09T15:43:09Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "9174b90b-a32d-4e39-88b6-5b3f7875b649",
        "parentId" : "9c026f18-34fe-4e13-9752-d9f21db3ba8e",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Done.\n",
        "createdAt" : "2015-12-09T17:17:35Z",
        "updatedAt" : "2015-12-09T17:17:35Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55858411fae9f7de2efc75400c6e706dddd5b07",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +30,34 @@/// A widget that detects gestures.\n///\n/// Attempts to recognize gestures that coorespond to its non-null callbacks.\n///\n/// See http://flutter.io/gestures/ for additional information."
  },
  {
    "id" : "8b1e9373-75aa-4802-9a0c-f37ecbcf039a",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b1a3bc6-deb7-4df4-9cde-d20a57c76422",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Looks like you do actually fire the start/end parts.  That seems easier for consumers.\n",
        "createdAt" : "2016-01-26T07:40:08Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +434,438 @@        onVerticalDragUpdate(delta);\n      if (onVerticalDragEnd != null)\n        onVerticalDragEnd(Offset.zero);\n    } else {\n      assert(_watchingPans);"
  },
  {
    "id" : "a6891c2e-1ee9-4e7d-9343-fe496d88e6c7",
    "prId" : 3994,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bc39c15-126b-4bd0-9a70-b93b7e4ea03a",
        "parentId" : null,
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "remove \"begun\"\n",
        "createdAt" : "2016-05-17T23:06:25Z",
        "updatedAt" : "2016-05-17T23:06:25Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4e19751d227e2f994efa6a09794af862e1eaf89",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +179,183 @@  final GesturePanCancelCallback onPanCancel;\n\n  /// The pointers in contact with the screen have begun established a focal\n  /// point and initial scale of 1.0.\n  final GestureScaleStartCallback onScaleStart;"
  },
  {
    "id" : "59009c9b-3415-48db-9944-d45c736d478f",
    "prId" : 11309,
    "prUrl" : "https://github.com/flutter/flutter/pull/11309#pullrequestreview-55007778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6608b40-2ebb-4d0a-9158-1b859b9a7b57",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "!",
        "createdAt" : "2017-08-08T17:17:24Z",
        "updatedAt" : "2017-08-08T17:17:24Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6184d2bdbaf25526b33e825138d433e384a06f8f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +728,732 @@      ..onTap = recognizers.containsKey(TapGestureRecognizer) ? _handleTap : null\n      ..onLongPress = recognizers.containsKey(LongPressGestureRecognizer) ? _handleLongPress : null\n      ..onHorizontalDragUpdate = recognizers.containsKey(HorizontalDragGestureRecognizer) ||\n          recognizers.containsKey(PanGestureRecognizer) ? _handleHorizontalDragUpdate : null\n      ..onVerticalDragUpdate = recognizers.containsKey(VerticalDragGestureRecognizer) ||"
  },
  {
    "id" : "0a7d3091-1d8b-4d81-a8b9-adb1ab91f8dd",
    "prId" : 11909,
    "prUrl" : "https://github.com/flutter/flutter/pull/11909#pullrequestreview-61068906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6caa770-09e3-46a7-bcd6-4612be0e9278",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "send it... to whom?",
        "createdAt" : "2017-09-06T22:28:32Z",
        "updatedAt" : "2017-09-06T23:54:03Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a25d0788592c73c986c415bda28310df4aeb82e6",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +562,566 @@  }\n\n  /// Sends a [SemanticsEvent] in the context of the [SemanticsNode] that is\n  /// annotated with this object's semantics information.\n  ///"
  },
  {
    "id" : "be4c3e65-8862-414d-b98a-1acb631cd979",
    "prId" : 11909,
    "prUrl" : "https://github.com/flutter/flutter/pull/11909#pullrequestreview-61068961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5d2f529-fca5-4929-a6d8-f2e2821ce937",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "the docs should mention how `excludeFromSemantics` affects it",
        "createdAt" : "2017-09-06T22:28:48Z",
        "updatedAt" : "2017-09-06T23:54:03Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a25d0788592c73c986c415bda28310df4aeb82e6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +563,567 @@\n  /// Sends a [SemanticsEvent] in the context of the [SemanticsNode] that is\n  /// annotated with this object's semantics information.\n  ///\n  /// The event can be interpreted by assistive technologies to provide"
  },
  {
    "id" : "be732f9f-d4d9-4000-8832-92d022f6d886",
    "prId" : 12376,
    "prUrl" : "https://github.com/flutter/flutter/pull/12376#pullrequestreview-68720119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12d43893-2585-486c-97d3-656bff8c6e9e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "it doesn't actually filter the actions immediately right? It just provides input for the computation done in the next frame (and schedules a frame if necessary), without requiring the relevant widget to be built.",
        "createdAt" : "2017-10-11T17:36:20Z",
        "updatedAt" : "2017-10-11T19:18:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "02da442b-48f2-45fe-8977-c0118bca6736",
        "parentId" : "12d43893-2585-486c-97d3-656bff8c6e9e",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Yes, clarified. ",
        "createdAt" : "2017-10-11T19:15:16Z",
        "updatedAt" : "2017-10-11T19:18:18Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ada44a8317efcb116c87a76ba09c33c3b07e5bc",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +537,541 @@\n  /// This method can be called outside of the build phase to filter the list of\n  /// available semantic actions.\n  ///\n  /// The actual filtering is happening in the next frame and a frame will be"
  },
  {
    "id" : "7c9c0a5d-95f8-4e17-8a8b-87d6dad3e65b",
    "prId" : 23424,
    "prUrl" : "https://github.com/flutter/flutter/pull/23424#pullrequestreview-175547288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bffc4751-93c0-4911-9cb4-aa7d5fbad255",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "How was the default chosen? It feels like this PR contains many, many places where the behavior is changed...",
        "createdAt" : "2018-11-14T21:00:57Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "3102b403-9427-4637-ac97-2699f47bff20",
        "parentId" : "bffc4751-93c0-4911-9cb4-aa7d5fbad255",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Yah, Ian felt 'start' made sense because animations would be smoother. What do you think would be the best way to choose?",
        "createdAt" : "2018-11-15T18:53:21Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "c8af93ec-a416-4324-95c0-e4be23af06ef",
        "parentId" : "bffc4751-93c0-4911-9cb4-aa7d5fbad255",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "That sounds like a good reason to chose start as the default. I am cool with that.",
        "createdAt" : "2018-11-15T20:44:07Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f463e9f73d8a7eb59f05588877bc12fec02d40",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +186,190 @@    this.behavior,\n    this.excludeFromSemantics = false,\n    this.dragStartBehavior = DragStartBehavior.start,\n  }) : assert(excludeFromSemantics != null),\n       assert(dragStartBehavior != null),"
  },
  {
    "id" : "1e3031b9-1c85-4d0f-8a7e-d5550c038dfc",
    "prId" : 23424,
    "prUrl" : "https://github.com/flutter/flutter/pull/23424#pullrequestreview-190053303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c552181-e10b-402d-bd10-5037b7e3e49f",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "List the affected callbacks somewhere",
        "createdAt" : "2019-01-08T00:41:51Z",
        "updatedAt" : "2019-01-08T00:45:57Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f463e9f73d8a7eb59f05588877bc12fec02d40",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +384,388 @@  ///\n  /// By default, the drag start behavior is [DragStartBehavior.start].\n  ///\n  /// See also:\n  ///"
  },
  {
    "id" : "34f5dec1-f849-4b8e-b0b2-a2bdd282d20a",
    "prId" : 24554,
    "prUrl" : "https://github.com/flutter/flutter/pull/24554#pullrequestreview-178944722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff9adcfd-a283-47b9-8ad8-90ec1e3ad91a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "these should probably mention that only some devices support force presses.",
        "createdAt" : "2018-11-27T18:38:13Z",
        "updatedAt" : "2018-12-20T02:36:24Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3dd465a8ef93da36466af10a084e430518a961b",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +356,360 @@  /// Note that this callback will only be fired on devices with pressure\n  /// detecting screens.\n  final GestureForcePressEndCallback onForcePressEnd;\n\n  /// How this gesture detector should behave during hit testing."
  },
  {
    "id" : "f7153cb4-9b76-46dd-9a69-a6db116de227",
    "prId" : 25683,
    "prUrl" : "https://github.com/flutter/flutter/pull/25683#pullrequestreview-189238234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82dc0af1-76a1-482b-97d5-a3314cdb52b5",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Add the other ones while you're here if there are",
        "createdAt" : "2018-12-21T23:34:24Z",
        "updatedAt" : "2019-01-12T02:11:28Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "f0d965b7-a4cb-4a2a-bc07-e25973453eb8",
        "parentId" : "82dc0af1-76a1-482b-97d5-a3314cdb52b5",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "There aren't actually.",
        "createdAt" : "2018-12-21T23:55:32Z",
        "updatedAt" : "2019-01-12T02:11:28Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "4a0edaa2-3490-48a7-88b4-1d8f9ed1cdf8",
        "parentId" : "82dc0af1-76a1-482b-97d5-a3314cdb52b5",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ah ok. We can't change it now but ideally, each callback could have its own detail interface. Otherwise, the callbacks' details can never diverge anymore. It's probably ok but worth keeping in mind in the future.",
        "createdAt" : "2019-01-04T00:56:04Z",
        "updatedAt" : "2019-01-12T02:11:28Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bef0607b52e8025966831ceb2654e9b5593010e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +37,41 @@  TapDownDetails,\n  TapUpDetails,\n  ForcePressDetails,\n  Velocity;\n"
  },
  {
    "id" : "df25973e-b90c-494d-b78f-6af1278d4d73",
    "prId" : 28242,
    "prUrl" : "https://github.com/flutter/flutter/pull/28242#pullrequestreview-207040384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fad8e71a-b422-4e56-94ef-0abd32f14fd7",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "uber-nit: should we sort the longPress callbacks by lifecycle (like the others)? onLongPress, Start, MoveUpdate, Up, End?",
        "createdAt" : "2019-02-21T21:09:24Z",
        "updatedAt" : "2019-02-22T21:43:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "7dd922b6-beae-4a74-93c6-00f81253d5a2",
        "parentId" : "fad8e71a-b422-4e56-94ef-0abd32f14fd7",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "You didn't like this suggestion? :) ",
        "createdAt" : "2019-02-22T17:57:55Z",
        "updatedAt" : "2019-02-22T21:43:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "019c3cb6-93db-400c-832c-b3e8d0cb16c7",
        "parentId" : "fad8e71a-b422-4e56-94ef-0abd32f14fd7",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "oops, missed this one",
        "createdAt" : "2019-02-22T21:43:12Z",
        "updatedAt" : "2019-02-22T21:43:12Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "70433d1964a629d61c0c33acbe6e87361594c3ac",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +169,173 @@    this.onDoubleTap,\n    this.onLongPress,\n    this.onLongPressStart,\n    this.onLongPressMoveUpdate,\n    this.onLongPressUp,"
  },
  {
    "id" : "cba8de99-6f76-4c78-875f-c28dd361f997",
    "prId" : 28242,
    "prUrl" : "https://github.com/flutter/flutter/pull/28242#pullrequestreview-206526466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bc2afd7-60af-4844-9656-509d8f07c90a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: one sentence summary paragraph",
        "createdAt" : "2019-02-21T21:09:49Z",
        "updatedAt" : "2019-02-22T21:43:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "70433d1964a629d61c0c33acbe6e87361594c3ac",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +291,295 @@  final GestureLongPressMoveUpdateCallback onLongPressMoveUpdate;\n\n  /// A pointer that has triggered a long-press has stopped contacting the screen.\n  ///\n  /// See also:"
  },
  {
    "id" : "93d52160-5b1e-45c8-be75-65b86efa9865",
    "prId" : 33936,
    "prUrl" : "https://github.com/flutter/flutter/pull/33936#pullrequestreview-249032459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ba4d0e7-bf97-4fb2-8943-1268628c5b65",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This looked a little cleaner when an owner was passed in and it would just call the method on that owner...",
        "createdAt" : "2019-06-12T17:57:10Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ef645b36-e0d4-4cf6-ac01-aaac820d37a4",
        "parentId" : "2ba4d0e7-bf97-4fb2-8943-1268628c5b65",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "I'm leaning toward this style because it ensures isolation so that `_GestureSemantics` will not do any thing fishy (such as modifying properties). I know it's private and we have control but I think it makes code cleaner structurally. ",
        "createdAt" : "2019-06-12T21:39:16Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "36352c500890083f6c261587eb9630506d4a5f64",
    "line" : 263,
    "diffHunk" : "@@ -1,1 +1040,1044 @@    Key key,\n    Widget child,\n    @required this.assignSemantics,\n  }) : assert(assignSemantics != null),\n       super(key: key, child: child);"
  },
  {
    "id" : "d4e105c7-3fde-4af5-afa6-13b07617fcda",
    "prId" : 33936,
    "prUrl" : "https://github.com/flutter/flutter/pull/33936#pullrequestreview-254897192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe232b4-3d2c-4550-b310-8a229c5327d7",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This export seems odd. Why does the widget layer need to expose a RenderObject?",
        "createdAt" : "2019-06-14T17:18:16Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8419a952-d3a5-416e-acb1-0f5ecf1dd3dc",
        "parentId" : "0fe232b4-3d2c-4550-b310-8a229c5327d7",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "I added it in because `SemanticsGestureDelegate` has a virtual method `void assignSemantics(RenderSemanticsGestureHandler renderObject);`, so anyone who wants to extend it needs this symbol. Do we export symbols like this?",
        "createdAt" : "2019-06-24T23:15:45Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "afde9a20-0e9a-4db0-ab32-6e74ac35af13",
        "parentId" : "0fe232b4-3d2c-4550-b310-8a229c5327d7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we do. this is probably ok.",
        "createdAt" : "2019-06-26T22:04:43Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "36352c500890083f6c261587eb9630506d4a5f64",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +46,50 @@  ForcePressDetails,\n  Velocity;\nexport 'package:flutter/rendering.dart' show RenderSemanticsGestureHandler;\n\n// Examples can assume:"
  },
  {
    "id" : "77737830-2ce3-4c09-ac54-dcf5ee8f6c70",
    "prId" : 33936,
    "prUrl" : "https://github.com/flutter/flutter/pull/33936#pullrequestreview-253708985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c6c567a-1988-485b-9bc5-a93c6da8572c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: first paragraph of a doc comment should be a single sentence summary.",
        "createdAt" : "2019-06-14T17:28:15Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "43465270-d203-4f2b-adfd-374b45b65c72",
        "parentId" : "0c6c567a-1988-485b-9bc5-a93c6da8572c",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Fixed",
        "createdAt" : "2019-06-24T23:36:29Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "36352c500890083f6c261587eb9630506d4a5f64",
    "line" : 295,
    "diffHunk" : "@@ -1,1 +1059,1063 @@}\n\n/// A base class that describes what semantics notations a [RawGestureDetector]\n/// should add to the render object [RenderSemanticsGestureHandler].\n///"
  },
  {
    "id" : "7a2aa458-0626-4bda-88b7-f0bfe19f22d9",
    "prId" : 33936,
    "prUrl" : "https://github.com/flutter/flutter/pull/33936#pullrequestreview-256467805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2709f77e-ec17-44db-b5e0-0bc19d1cbf9f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Would you only have to do this if no SemanticsGestureDelegate has been set? (in other words: how would changing the gestures change what semantics are available when that's determined by the SemanticsGestureDelegate alone?)",
        "createdAt" : "2019-06-14T17:36:10Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "9a602339-95fd-47ef-8f21-31fc0fcd6272",
        "parentId" : "2709f77e-ec17-44db-b5e0-0bc19d1cbf9f",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "(If I understand your question correctly)\r\nThe semantics notations are also determined by the gestures owned by the detector. It also applies to `_DefaultSemanticsGestureDelegate`, for example, it checks if the detector has `TapGestureRecognizer`, and only assigns \"tap\" notation if true. Since this callback replaces gesture recognizer, it needs to call `_updateSemanticsForRenderObject` no matter what delegate it uses.\r\n",
        "createdAt" : "2019-06-24T23:48:26Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "87430599-4965-4d65-92f4-8fe0011fa861",
        "parentId" : "2709f77e-ec17-44db-b5e0-0bc19d1cbf9f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Let's talk about this in person.",
        "createdAt" : "2019-07-01T17:25:19Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "36352c500890083f6c261587eb9630506d4a5f64",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +927,931 @@    if (!widget.excludeFromSemantics) {\n      final RenderSemanticsGestureHandler semanticsGestureHandler = context.findRenderObject();\n      _updateSemanticsForRenderObject(semanticsGestureHandler);\n    }\n  }"
  },
  {
    "id" : "0f25d1e9-3b14-4c04-af3e-86d9874bd973",
    "prId" : 33936,
    "prUrl" : "https://github.com/flutter/flutter/pull/33936#pullrequestreview-254919150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd99ef31-6606-4bad-9b32-87d29c0539f9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "\"it looks for... and calls...\" makes it sound like it doesn't do anything with the result of looking for it. it just does it and calls the callbacks regardless of the result.",
        "createdAt" : "2019-06-26T22:06:20Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8aab74b1-4c83-4934-9643-899e34bd615c",
        "parentId" : "bd99ef31-6606-4bad-9b32-87d29c0539f9",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Fixed, see https://github.com/flutter/flutter/pull/33936/commits/9111a12eb6d73627c5079371672b1e471dd8a477",
        "createdAt" : "2019-06-26T23:18:28Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "36352c500890083f6c261587eb9630506d4a5f64",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +817,821 @@  ///\n  ///  * During a semantic tap, it calls [TapGestureRecognizer]'s\n  ///    `onTapDown`, `onTapUp`, and `onTap`.\n  ///  * During a semantic long press, it calls [LongPressGestureRecognizer]'s\n  ///    `onLongPressStart`, `onLongPress`, `onLongPressEnd` and `onLongPressUp`."
  },
  {
    "id" : "34f19d71-3e3d-4971-8e4c-6243db18ad3d",
    "prId" : 33936,
    "prUrl" : "https://github.com/flutter/flutter/pull/33936#pullrequestreview-254918855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8351879-9154-4e8c-ae4e-413bbbfd0f07",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe add some sample code to show how to use this?",
        "createdAt" : "2019-06-26T22:06:40Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f8a320ef-e346-4cde-abab-052bff9e2a51",
        "parentId" : "e8351879-9154-4e8c-ae4e-413bbbfd0f07",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Fixed",
        "createdAt" : "2019-06-26T23:17:18Z",
        "updatedAt" : "2019-07-01T19:36:01Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "36352c500890083f6c261587eb9630506d4a5f64",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +871,875 @@  /// ```\n  /// {@end-tool}\n  final SemanticsGestureDelegate semantics;\n\n  @override"
  },
  {
    "id" : "06b6f40d-93e2-495d-b80f-44e2736b2c43",
    "prId" : 57838,
    "prUrl" : "https://github.com/flutter/flutter/pull/57838#pullrequestreview-423459153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e66254a5-d2c5-4ce0-b24a-5d29c83988f9",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Can we specify a size for the Container to make this example a little clearer? Or maybe use a SizedBox?",
        "createdAt" : "2020-06-02T20:09:38Z",
        "updatedAt" : "2020-06-04T03:35:36Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "fce6f47c-dfd5-4d6f-8206-4f8c96f589a4",
        "parentId" : "e66254a5-d2c5-4ce0-b24a-5d29c83988f9",
        "authorId" : "b63a2313-1458-441b-9a8c-2c735e161ca0",
        "body" : "Done",
        "createdAt" : "2020-06-03T11:27:18Z",
        "updatedAt" : "2020-06-04T03:35:36Z",
        "lastEditedBy" : "b63a2313-1458-441b-9a8c-2c735e161ca0",
        "tags" : [
        ]
      }
    ],
    "commit" : "f39bf41c5dbca3a9e45f8a70997d376ebbd4be7c",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +177,181 @@///\n/// ```dart\n/// Container(\n///   color: _color,\n///   height: 200.0,"
  },
  {
    "id" : "d3757483-f0fa-473b-87ec-77cf89d0ff34",
    "prId" : 57838,
    "prUrl" : "https://github.com/flutter/flutter/pull/57838#pullrequestreview-424101221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c72fcb6-88c0-4b07-a628-022144eb9819",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This should probably also have a width if we specify a height.",
        "createdAt" : "2020-06-03T21:39:53Z",
        "updatedAt" : "2020-06-04T03:35:36Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "58b97639-7006-454f-b31b-22a06ec2f818",
        "parentId" : "7c72fcb6-88c0-4b07-a628-022144eb9819",
        "authorId" : "b63a2313-1458-441b-9a8c-2c735e161ca0",
        "body" : "Done✔",
        "createdAt" : "2020-06-04T04:53:56Z",
        "updatedAt" : "2020-06-04T04:53:56Z",
        "lastEditedBy" : "b63a2313-1458-441b-9a8c-2c735e161ca0",
        "tags" : [
        ]
      }
    ],
    "commit" : "f39bf41c5dbca3a9e45f8a70997d376ebbd4be7c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +179,183 @@/// Container(\n///   color: _color,\n///   height: 200.0,\n///   width: 200.0,\n///   child: GestureDetector("
  },
  {
    "id" : "1d2ffd1c-e191-4501-8174-2b217f90a82c",
    "prId" : 64431,
    "prUrl" : "https://github.com/flutter/flutter/pull/64431#pullrequestreview-473735973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d1824cd-008c-4d81-9ee6-f84d703fece2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can you add some more information here about when this will fire? e.g. after the down even of the second tap? May also be helpful to put this in relation to onTapDown (presumably, that one will fire for the first tap down - does it also fire for the second down?)",
        "createdAt" : "2020-08-24T16:57:59Z",
        "updatedAt" : "2020-08-24T18:03:49Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d0965033-1278-421d-bcd3-a22a2b770950",
        "parentId" : "3d1824cd-008c-4d81-9ee6-f84d703fece2",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Done.",
        "createdAt" : "2020-08-24T18:04:11Z",
        "updatedAt" : "2020-08-24T18:04:11Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "72db591af8a257ea3e8cda28ab5a4faa883a5849",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +433,437 @@  /// A pointer that might cause a double tap has contacted the screen at a\n  /// particular location.\n  ///\n  /// Triggered immediately after the down event of the second tap.\n  ///"
  }
]