[
  {
    "id" : "3395cb2c-d304-4035-8372-4443463a4dfe",
    "prId" : 5902,
    "prUrl" : "https://github.com/flutter/flutter/pull/5902#pullrequestreview-664524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fd8ea7f-8189-4fd3-9d8a-30691c0d017e",
        "parentId" : null,
        "authorId" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "body" : "Would 'supply' be a better fit than 'vend'? (I may be missing the nuance here, though.)\n",
        "createdAt" : "2016-09-16T16:53:18Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "tags" : [
        ]
      },
      {
        "id" : "bc04c2bd-3558-46a4-b361-d250c2322541",
        "parentId" : "4fd8ea7f-8189-4fd3-9d8a-30691c0d017e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think both are fine.\n",
        "createdAt" : "2016-09-20T00:42:42Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "57b9f88bf58da56769af22de167f61deb943ec3c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +16,20 @@typedef void TickerCallback(Duration elapsed);\n\n/// An interface implemented by classes that can vend [Ticker] objects.\nabstract class TickerProvider {\n  /// Abstract const constructor. This constructor enables subclasses to provide"
  },
  {
    "id" : "943114f3-796b-45e9-9f74-e8093b91e692",
    "prId" : 5902,
    "prUrl" : "https://github.com/flutter/flutter/pull/5902#pullrequestreview-809586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90d27d4f-27fc-4389-95da-f9172b5e9041",
        "parentId" : null,
        "authorId" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "body" : "Maybe `The type of the provided ticker depends on the implementing class.`?\n",
        "createdAt" : "2016-09-16T16:55:38Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "tags" : [
        ]
      },
      {
        "id" : "284f77f7-b582-46eb-8a9b-0c3ce9fbdb8b",
        "parentId" : "90d27d4f-27fc-4389-95da-f9172b5e9041",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think the text I have now is more grammatically correct. \"implementing class\" is a bit of a weird construction.\n\nBut more to the point, the text here isn't talking about the object type per se, but about the kind of behavior it may have. So for example, you could have a ticker provider return the same type as another, but with different behaviour. Case in point, most of the ticker providers essentially provide Ticker objects, but they don't all act the same.\n",
        "createdAt" : "2016-09-20T00:46:04Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7f191477-500b-48c9-9363-76f61295e66b",
        "parentId" : "90d27d4f-27fc-4389-95da-f9172b5e9041",
        "authorId" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "body" : "Maybe it would be useful to add [some of] this explanation to the docs?\n",
        "createdAt" : "2016-09-20T18:33:16Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "644b5fd7-ddca-4da3-87ca-328ae5467a8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "57b9f88bf58da56769af22de167f61deb943ec3c",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +24,28 @@  /// Creates a ticker with the given callback.\n  ///\n  /// The kind of ticker provided depends on the kind of ticker provider.\n  Ticker createTicker(TickerCallback onTick);\n}"
  },
  {
    "id" : "d7e916f8-1ca4-458c-9853-0b77fa460a0c",
    "prId" : 5902,
    "prUrl" : "https://github.com/flutter/flutter/pull/5902#pullrequestreview-798390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65242658-3e0b-40d0-a60d-db3aa9af602d",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should we null out `_startTime` as well?\n",
        "createdAt" : "2016-09-20T04:54:52Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "93c091b0-31b7-4687-a31a-2af458fac074",
        "parentId" : "65242658-3e0b-40d0-a60d-db3aa9af602d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I intentionally didn't so that the class would end up in a bogus state after dispose(). I can add a comment to that effect.\n",
        "createdAt" : "2016-09-20T17:27:23Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e4b67e9e-3321-4b6d-a5ff-96fd1c60a15c",
        "parentId" : "65242658-3e0b-40d0-a60d-db3aa9af602d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "added:\n\n```\n    // We intentionally don't null out _startTime. This means that if start()                                                                                                                                                                             \n    // was ever called, the object is now in a bogus state. This weakly helps                                                                                                                                                                             \n    // catch cases of use-after-dispose.                                                                                                                                                                                                                  \n```\n",
        "createdAt" : "2016-09-20T17:28:30Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "57b9f88bf58da56769af22de167f61deb943ec3c",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +236,240 @@  @mustCallSuper\n  void dispose() {\n    _completer = null;\n    // We intentionally don't null out _startTime. This means that if start()\n    // was ever called, the object is now in a bogus state. This weakly helps"
  }
]