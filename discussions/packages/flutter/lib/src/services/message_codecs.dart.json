[
  {
    "id" : "5264791c-1b96-43e2-9953-36b8142dbf91",
    "prId" : 8394,
    "prUrl" : "https://github.com/flutter/flutter/pull/8394#pullrequestreview-24417031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d73de9d7-c307-4144-941f-48fe3da2e038",
        "parentId" : null,
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "Document alignment and byte ordering.",
        "createdAt" : "2017-03-01T07:44:50Z",
        "updatedAt" : "2017-03-01T13:20:52Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "62b65f23e327d224c884db32819f9b2cd2b6eb7b",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +158,162 @@  //   of that in bytes is encoded using the expanding format, then follows the\n  //   UTF-8 encoding itself.\n  // * Uint8Lists, Int32Lists, Int64Lists, and Float64Lists are encoded by first\n  //   encoding the list's element count in the expanding format, then the\n  //   smallest number of zero bytes needed to align the position in the full"
  },
  {
    "id" : "79b987e5-9d55-4a21-b623-b058ff6ad694",
    "prId" : 8394,
    "prUrl" : "https://github.com/flutter/flutter/pull/8394#pullrequestreview-24417105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "484ed38a-ffa6-4c74-a775-133eb2919211",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Perfect.  Thank you.",
        "createdAt" : "2017-03-01T07:45:38Z",
        "updatedAt" : "2017-03-01T13:20:52Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "62b65f23e327d224c884db32819f9b2cd2b6eb7b",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +170,174 @@  // * Maps are encoded by first encoding their length in the expanding format,\n  //   then follows the recursive encoding of each key/value pair, including the\n  //   type byte for both (Maps are assumed to be heterogeneous).\n  static const int _kNull = 0;\n  static const int _kTrue = 1;"
  },
  {
    "id" : "81e17338-049d-47b4-82ba-031eed382f4a",
    "prId" : 8394,
    "prUrl" : "https://github.com/flutter/flutter/pull/8394#pullrequestreview-24602677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "433b21e8-cd92-4c4a-97e4-1abc9e8a769e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why not `<= 0xffffffff` ?",
        "createdAt" : "2017-03-01T19:05:01Z",
        "updatedAt" : "2017-03-01T19:05:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8f0c4937-6094-48b8-83dd-c1caa6c195ba",
        "parentId" : "433b21e8-cd92-4c4a-97e4-1abc9e8a769e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I guess it's so that you can expand the format later to store even bigger ints?",
        "createdAt" : "2017-03-01T19:05:53Z",
        "updatedAt" : "2017-03-01T19:05:53Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "36bc103d-a01a-4cf6-91a6-c541dff97775",
        "parentId" : "433b21e8-cd92-4c4a-97e4-1abc9e8a769e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "your decoder just reads 0xffffffff as that, though.",
        "createdAt" : "2017-03-01T19:06:41Z",
        "updatedAt" : "2017-03-01T19:06:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a197fdcb-0622-4280-bc02-680ba404410f",
        "parentId" : "433b21e8-cd92-4c4a-97e4-1abc9e8a769e",
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "Expanding the format further was not the intention. I just had myself confused, that's all. Fix upcoming.",
        "createdAt" : "2017-03-01T22:04:58Z",
        "updatedAt" : "2017-03-01T22:04:58Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "62b65f23e327d224c884db32819f9b2cd2b6eb7b",
    "line" : 211,
    "diffHunk" : "@@ -1,1 +209,213 @@\n  static void _writeSize(WriteBuffer buffer, int value) {\n    assert(0 <= value && value < 0xffffffff);\n    if (value < 254) {\n      buffer.putUint8(value);"
  },
  {
    "id" : "edd14f6e-b2e5-4e0f-809f-1df41c93334e",
    "prId" : 8394,
    "prUrl" : "https://github.com/flutter/flutter/pull/8394#pullrequestreview-24605045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40cf926c-c4e9-45fd-be00-3a701cc557af",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "haha, that escalated fast. :-P",
        "createdAt" : "2017-03-01T19:07:53Z",
        "updatedAt" : "2017-03-01T19:07:53Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7a4378be-1246-4da9-ac49-eb4e4ef52146",
        "parentId" : "40cf926c-c4e9-45fd-be00-3a701cc557af",
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "I agree. It's a temporary solution. Make it work, make it right, make it fast...",
        "createdAt" : "2017-03-01T22:14:54Z",
        "updatedAt" : "2017-03-01T22:14:54Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "62b65f23e327d224c884db32819f9b2cd2b6eb7b",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +243,247 @@        final List<int> hex = UTF8.encoder.convert(value.toRadixString(16));\n        _writeSize(buffer, hex.length);\n        buffer.putUint8List(hex);\n      }\n    } else if (value is double) {"
  },
  {
    "id" : "21de7d34-5020-4325-ba94-3fe1b8c174f1",
    "prId" : 15414,
    "prUrl" : "https://github.com/flutter/flutter/pull/15414#pullrequestreview-103658391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b2163bc-4844-4460-af33-6ba8d7790a1e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe mention that it's ok to call this recursively, e.g. to implement writing a list of values.",
        "createdAt" : "2018-03-14T00:19:18Z",
        "updatedAt" : "2018-03-16T15:29:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e4c9b258d8ba39507fd1f8ce31b99b9133794cc",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +293,297 @@  /// used by extensions must be greater than or equal to 128 in order to avoid\n  /// clashes with any later extensions to the base class.\n  void writeValue(WriteBuffer buffer, dynamic value) {\n    if (value == null) {\n      buffer.putUint8(_kNull);"
  }
]