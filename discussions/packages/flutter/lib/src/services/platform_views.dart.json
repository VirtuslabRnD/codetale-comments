[
  {
    "id" : "b23b0bf9-0183-4e35-b444-1d8d7a4fb6c0",
    "prId" : 19325,
    "prUrl" : "https://github.com/flutter/flutter/pull/19325#pullrequestreview-138420009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "150d2993-660f-4da2-b0ef-be849a11ae55",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Inconsistent pluralization in the names. If this is a service that deals with multiple platform views, I assume the registry also registers multiple platform views. Perhaps keep everything singular.",
        "createdAt" : "2018-07-18T18:56:07Z",
        "updatedAt" : "2018-07-18T20:18:39Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "d2f83af1-6283-4d39-a449-c6bbb87ba34d",
        "parentId" : "150d2993-660f-4da2-b0ef-be849a11ae55",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "Renamed the registry to platformViewsRegistry",
        "createdAt" : "2018-07-18T20:14:40Z",
        "updatedAt" : "2018-07-18T20:18:40Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "684060994e0c0b54d0cd22b900743bd892fa3eab",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@///\n/// See also: [PlatformView].\nclass PlatformViewsService {\n  PlatformViewsService._();\n"
  },
  {
    "id" : "716f2939-59c2-4dc6-a769-44480d099d4a",
    "prId" : 19325,
    "prUrl" : "https://github.com/flutter/flutter/pull/19325#pullrequestreview-138459578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77799548-f7e2-4c70-95b2-a6d06e946862",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Should this return a boolean in case users want to know whether disposing succeeded? (since it'll be hard to change this API after)",
        "createdAt" : "2018-07-18T19:04:49Z",
        "updatedAt" : "2018-07-18T20:18:39Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "162942f4-f5ce-417a-b2e0-9c14ab4a715d",
        "parentId" : "77799548-f7e2-4c70-95b2-a6d06e946862",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "The future will complete with a PlatformException in that case, isn't that enough?",
        "createdAt" : "2018-07-18T20:03:38Z",
        "updatedAt" : "2018-07-18T20:18:40Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      },
      {
        "id" : "11739471-ea6c-4b29-bcc8-d3e6d8fa8baf",
        "parentId" : "77799548-f7e2-4c70-95b2-a6d06e946862",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ah, makes sense.",
        "createdAt" : "2018-07-18T21:34:24Z",
        "updatedAt" : "2018-07-18T21:34:24Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "07e4c78f-c3fe-402a-992c-0a13238efd21",
        "parentId" : "77799548-f7e2-4c70-95b2-a6d06e946862",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "If that is part of the expected API, you should add a doc comment like:\r\n\r\n/// Throws [PlatformException] if ...",
        "createdAt" : "2018-07-18T22:01:00Z",
        "updatedAt" : "2018-07-18T22:01:01Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "7b2300e4-49ac-4f07-8c5a-88578757c0d6",
        "parentId" : "77799548-f7e2-4c70-95b2-a6d06e946862",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "I don't really see it happens, unless something really blows up on the platform side.\r\nI can see that it makes sense to add such comments when there's an obvious failure case.\r\nEverytime we invokeMethod on a method channel we can get a PlatformException... (I guess theoretically you can always get some exception thrown if something really bad happens) randomly sampling a few call sites to invokeMethod in our codebase non of them mentions in dartdoc that an exception might be thrown.",
        "createdAt" : "2018-07-18T22:07:09Z",
        "updatedAt" : "2018-07-18T22:07:09Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      },
      {
        "id" : "b55c9eef-bcda-46fc-a24b-ce747fbbf8a3",
        "parentId" : "77799548-f7e2-4c70-95b2-a6d06e946862",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "If that exception doesn't indicate any useful information besides \"something broke\" then I wouldn't include it",
        "createdAt" : "2018-07-18T22:11:56Z",
        "updatedAt" : "2018-07-18T22:11:56Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "684060994e0c0b54d0cd22b900743bd892fa3eab",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@  /// The identifier of the platform view cannot be reused after the view is\n  /// disposed.\n  Future<void> dispose() async {\n    if (_state == _AndroidViewState.creating || _state == _AndroidViewState.created)\n      await SystemChannels.platform_views.invokeMethod('dispose', id);"
  },
  {
    "id" : "195cf04b-2702-4d9e-882d-3f5c5da411dd",
    "prId" : 19325,
    "prUrl" : "https://github.com/flutter/flutter/pull/19325#pullrequestreview-138416240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ee35def-6940-43ff-8416-bc84a5f6d211",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "ditto for return type",
        "createdAt" : "2018-07-18T19:05:14Z",
        "updatedAt" : "2018-07-18T20:18:39Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "bc03932d-ec58-476e-8d0d-73b6a208a3b9",
        "parentId" : "6ee35def-6940-43ff-8416-bc84a5f6d211",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "ditto",
        "createdAt" : "2018-07-18T20:03:41Z",
        "updatedAt" : "2018-07-18T20:18:40Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "684060994e0c0b54d0cd22b900743bd892fa3eab",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +131,135 @@  ///\n  /// The first time a size is set triggers the creation of the Android view.\n  Future<void> setSize(Size size) async {\n    if (_state == _AndroidViewState.disposed)\n      throw new FlutterError('trying to size a disposed Android View. View id: $id');"
  },
  {
    "id" : "914ba6a5-60b3-42d4-996f-4898285a3942",
    "prId" : 19907,
    "prUrl" : "https://github.com/flutter/flutter/pull/19907#pullrequestreview-142944859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0abc5fd-bb85-4391-9f94-da0ce3edc70a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "if it must, could we just get it from those lists instead of requiring it?",
        "createdAt" : "2018-08-02T19:33:46Z",
        "updatedAt" : "2018-08-02T19:48:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6b2d8d4b-4d00-4ea2-bfa8-0b841fb35263",
        "parentId" : "b0abc5fd-bb85-4391-9f94-da0ce3edc70a",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "I'd rather to keep an exact mirror of the Android API, in case we'll find out in the future some exception when it actually makes sense to pass different numbers. This \"must\" is to my best understanding a of today.",
        "createdAt" : "2018-08-02T19:37:51Z",
        "updatedAt" : "2018-08-02T19:48:28Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "6af7b32cadc1793404cc322dce143c4a3cb62da0",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +241,245 @@\n  /// The number of pointers that are part of this event.\n  /// This must be equivalent to the length of `pointerProperties` and `pointerCoords`.\n  ///\n  /// See Android's [MotionEvent#getPointerCount](https://developer.android.com/reference/android/view/MotionEvent.html#getPointerCount())."
  },
  {
    "id" : "1b57771d-8a6e-4303-9df7-187db65d3944",
    "prId" : 20838,
    "prUrl" : "https://github.com/flutter/flutter/pull/20838#pullrequestreview-148698401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6304cae0-00f3-47c1-a1f9-7f398b1973f1",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "GitHub doesn't let me add comments on the lines above, but doc which params can't be null? Also use `@required`?",
        "createdAt" : "2018-08-22T22:14:26Z",
        "updatedAt" : "2018-08-22T22:41:49Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "b1e5021d-551c-499c-a881-40dc48245d16",
        "parentId" : "6304cae0-00f3-47c1-a1f9-7f398b1973f1",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "We decided to move the `@required` to the public function (the constructor is private), see: https://github.com/flutter/flutter/pull/19325#discussion_r203199063\r\n\r\nAdded null param documentation there.",
        "createdAt" : "2018-08-22T22:29:39Z",
        "updatedAt" : "2018-08-22T22:41:51Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "29d5c4fa08606f8b84d4166a863023eda71f19e5",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +346,350 @@/// Typically created with [PlatformViewsService.initAndroidView].\nclass AndroidViewController {\n  AndroidViewController._(\n    this.id,\n    String viewType,"
  },
  {
    "id" : "67cc3fd5-5818-4dd6-b8cf-929b92c53bd2",
    "prId" : 21067,
    "prUrl" : "https://github.com/flutter/flutter/pull/21067#pullrequestreview-149807414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31fe2998-6e07-4974-acb1-fb65497ad6b0",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This seems like a good place to offer a hint about what a typical value of `createParamsCodec` would be.",
        "createdAt" : "2018-08-27T17:17:04Z",
        "updatedAt" : "2018-08-27T17:34:29Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "743adc5b-ace7-49da-bed6-95e132ed2714",
        "parentId" : "31fe2998-6e07-4974-acb1-fb65497ad6b0",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "done",
        "createdAt" : "2018-08-27T17:34:13Z",
        "updatedAt" : "2018-08-27T17:34:29Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "614303889d85afa72815ef3088dc97b388fe0728",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +63,67 @@  ///\n  /// `creationParamsCodec` is the codec used to encode `creationParams` before sending it to the\n  /// platform side. It should match the codec passed to the constructor of [PlatformViewFactory](/javadoc/io/flutter/plugin/platform/PlatformViewFactory.html#PlatformViewFactory-io.flutter.plugin.common.MessageCodec-).\n  /// This is typically one of: [StandardMessageCodec], [JSONMessageCodec], [StringCodec], or [BinaryCodec].\n  ///"
  },
  {
    "id" : "3e069982-6370-4553-8f7f-1bcbadc5a552",
    "prId" : 23412,
    "prUrl" : "https://github.com/flutter/flutter/pull/23412#pullrequestreview-168006816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "993c180c-793a-4e68-a03c-51acd75d4857",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Do you not need to call it initially for the first time? Or is that your todo above?",
        "createdAt" : "2018-10-24T00:10:16Z",
        "updatedAt" : "2018-10-31T03:03:44Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "4a5d6510-acfc-4396-be67-9ac8aee0882e",
        "parentId" : "993c180c-793a-4e68-a03c-51acd75d4857",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "The layoutDirection will be passed as an argument of the create call (this is not yet implemented in the engine).",
        "createdAt" : "2018-10-24T17:21:44Z",
        "updatedAt" : "2018-10-31T03:03:44Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "377482d8e8105b07b178979c923513d27275da98",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +593,597 @@  ) : assert(id != null),\n      assert(layoutDirection != null),\n      _layoutDirection = layoutDirection;\n\n"
  },
  {
    "id" : "3e2ba7fb-9702-4901-bd96-05d7991a9d11",
    "prId" : 23412,
    "prUrl" : "https://github.com/flutter/flutter/pull/23412#pullrequestreview-168006816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed931334-47d5-4b96-b698-7e513635a9fb",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "cross reference the registry here again?",
        "createdAt" : "2018-10-24T00:11:34Z",
        "updatedAt" : "2018-10-31T03:03:44Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "466d7c20-4397-48e4-8140-81b181a3d511",
        "parentId" : "ed931334-47d5-4b96-b698-7e513635a9fb",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "done",
        "createdAt" : "2018-10-24T17:23:05Z",
        "updatedAt" : "2018-10-31T03:03:44Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "377482d8e8105b07b178979c923513d27275da98",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +596,600 @@\n\n  /// The unique identifier of the iOS view controlled by this controller.\n  ///\n  /// This identifer is typically generated by [PlatformViewsRegistry.getNextPlatformViewId]."
  },
  {
    "id" : "7912afe9-5144-4aa3-baff-9c2333e0a921",
    "prId" : 28953,
    "prUrl" : "https://github.com/flutter/flutter/pull/28953#pullrequestreview-211913634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0370cfc-a0d7-4563-a0d6-2838f4597c6f",
        "parentId" : null,
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "It might be a little confusing that the callback that is passed to the constructor can be removed here.\r\n\r\nWe could remove the onPlatformViewCreated constructor parameter, this will be a breaking change but I highly doubt it will affect anyone at this point.\r\n\r\nAlternatively I guess we can assert here that we are not removing the callback that was passed to the constructor? (I guess this will be equivalent to maintaining the listeners set separately from the one callback that is passed to the constructor)\r\n\r\n",
        "createdAt" : "2019-03-07T16:09:28Z",
        "updatedAt" : "2019-03-12T06:30:53Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      },
      {
        "id" : "99947917-2841-4ec5-873c-ee0c856cfba5",
        "parentId" : "a0370cfc-a0d7-4563-a0d6-2838f4597c6f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Yeah, let's remove the constructor parameter. ",
        "createdAt" : "2019-03-07T17:19:43Z",
        "updatedAt" : "2019-03-12T06:30:53Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "868bde1d82325d4cc3f8e335196b840fff502f1c",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +488,492 @@  }\n\n  /// Removes a callback added with [addOnPlatformViewCreatedListener].\n  void removeOnPlatformViewCreatedListener(PlatformViewCreatedCallback listener) {\n    assert(_state != _AndroidViewState.disposed);"
  },
  {
    "id" : "7ce3110e-9b92-4a2f-9e19-dbd85848fcb7",
    "prId" : 60320,
    "prUrl" : "https://github.com/flutter/flutter/pull/60320#pullrequestreview-438534136",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83c0a43a-d5f4-480d-a0ea-47bac6909b41",
        "parentId" : null,
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "nit: `assert(transformer != null);`",
        "createdAt" : "2020-06-26T19:10:47Z",
        "updatedAt" : "2020-07-03T22:42:31Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      }
    ],
    "commit" : "d821cc24f743b127a6c5014dba64976baa9a95a6",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +496,500 @@  set pointTransformer(Offset Function(Offset position) transformer) {\n    assert(transformer != null);\n    _pointTransformer = transformer;\n  }\n"
  },
  {
    "id" : "f6fdd422-e15d-4bd1-9a1a-26d6fe354599",
    "prId" : 60320,
    "prUrl" : "https://github.com/flutter/flutter/pull/60320#pullrequestreview-441276969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79fe4227-172c-4a96-8633-e8235ee1d61c",
        "parentId" : null,
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "this should be `event.device` + unit test",
        "createdAt" : "2020-07-01T00:56:41Z",
        "updatedAt" : "2020-07-03T22:42:31Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "f3938871-e911-4784-9651-cce009e8b0b2",
        "parentId" : "79fe4227-172c-4a96-8633-e8235ee1d61c",
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "Actually, this isn't `event.device`. We will need to add a `deviceId` to `MotionEvent`, and most likely each of the Android-specific values. \r\n\r\n@goderbauer do you know if there's a recommended pattern for adding platform-specific data to `PointerEvent`? It looks like we will pretty much need to pass each of these constants.\r\n\r\nNone of these values are sent from https://github.com/flutter/engine/blob/712f619737f1323fd2908b397aa8bd64fb2ccbe5/shell/platform/android/io/flutter/embedding/android/AndroidTouchProcessor.java#L171",
        "createdAt" : "2020-07-01T01:32:16Z",
        "updatedAt" : "2020-07-03T22:42:31Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "68cbaaf8-d4c6-4195-931b-ea77c0b3b9f5",
        "parentId" : "79fe4227-172c-4a96-8633-e8235ee1d61c",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can we use a similar approach that @gspencergoog used to add platform-specific stuff to the keyboard events? See `RawKeyEventData` [1] and its platform-specific subclasses.\r\n\r\n[1] https://master-api.flutter.dev/flutter/services/RawKeyEventData-class.html",
        "createdAt" : "2020-07-01T21:07:58Z",
        "updatedAt" : "2020-07-03T22:42:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "6b397f03-34de-4a9b-a5ee-0b01376b83ef",
        "parentId" : "79fe4227-172c-4a96-8633-e8235ee1d61c",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Well, I wouldn't go that route.  That's all there because of legacy that we didn't want to break. We're planning on removing it and moving it all to the platform side now.\r\n\r\nBetter would be to pass that data you need in a platform independent form and add it for all platforms.\r\n\r\nContext: https://flutter.dev/go/platform-based-key-events",
        "createdAt" : "2020-07-01T21:13:11Z",
        "updatedAt" : "2020-07-03T22:42:31Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "f5de7441-b5e3-41bc-a11b-47cb2b1fd215",
        "parentId" : "79fe4227-172c-4a96-8633-e8235ee1d61c",
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "It looks like `RawKeyEventData` is constructed from a system channel message, and the params are passed in a `Map`. \r\n\r\nPerhaps, the equivalent is to add a `Map` to `MotionEvent`, and then populate the `PointerDataPacket` in  the engine. https://github.com/flutter/engine/blob/637a8e7cd0440e5c97706aad89ba3f4decd432ee/lib/ui/hooks.dart#L294. \r\n\r\nDoes this sound resonable?\r\n\r\n",
        "createdAt" : "2020-07-01T22:01:12Z",
        "updatedAt" : "2020-07-03T22:42:31Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "9f8c4b30-c6b2-4f64-90fb-7b176a58b696",
        "parentId" : "79fe4227-172c-4a96-8633-e8235ee1d61c",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "After studying this further, I agree with greg that adding platform-specific stuff to the pointer events like that is not a good idea. ",
        "createdAt" : "2020-07-02T00:27:33Z",
        "updatedAt" : "2020-07-03T22:42:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "47555f4d-b91c-42fd-8fb9-8394347794b6",
        "parentId" : "79fe4227-172c-4a96-8633-e8235ee1d61c",
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "After some offline discussion, the conclusion was to add a unique identifier to `MotionEvent` that can be used to lookup the original motion event in the platform.",
        "createdAt" : "2020-07-02T00:35:19Z",
        "updatedAt" : "2020-07-03T22:42:31Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      }
    ],
    "commit" : "d821cc24f743b127a6c5014dba64976baa9a95a6",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +599,603 @@      xPrecision: 1.0,\n      yPrecision: 1.0,\n      deviceId: 0,\n      edgeFlags: 0,\n      source: 0,"
  },
  {
    "id" : "7c074238-bd81-45d9-9b48-278b576d7db6",
    "prId" : 60320,
    "prUrl" : "https://github.com/flutter/flutter/pull/60320#pullrequestreview-441085909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d62e01c1-f7df-4de4-ac6d-41b71c846e62",
        "parentId" : null,
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "nit: this line can be removed",
        "createdAt" : "2020-07-01T17:59:23Z",
        "updatedAt" : "2020-07-03T22:42:31Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      }
    ],
    "commit" : "d821cc24f743b127a6c5014dba64976baa9a95a6",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +168,172 @@    assert(layoutDirection != null);\n    assert(creationParams == null || creationParamsCodec != null);\n\n    final SurfaceAndroidViewController controller = SurfaceAndroidViewController._(\n      viewId: id,"
  },
  {
    "id" : "8fb0cce4-9298-4bdb-af9e-fc8e0a12b599",
    "prId" : 61668,
    "prUrl" : "https://github.com/flutter/flutter/pull/61668#pullrequestreview-450906329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87599c33-13a8-4b3f-9910-160a30e7cf7a",
        "parentId" : null,
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "qq: how does this ensure that pointer id doesn't reach the limit? As pointed out in https://github.com/flutter/flutter/issues/61421#issuecomment-659715358",
        "createdAt" : "2020-07-17T18:53:41Z",
        "updatedAt" : "2020-07-17T18:53:41Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "44c3cf4e-7122-4e81-a79b-6f9c7e24d92e",
        "parentId" : "87599c33-13a8-4b3f-9910-160a30e7cf7a",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "The `MotionEvent` pointer ID limit is an internal Android implementation detail that AFAICT isn't documented anywhere.\r\n\r\nThis patch ensures that the pointer ID value will be less than the number of active pointers.  The version of Android that I looked at apparently accepts pointer IDs in the range 0 through 31.  So realistically this patch will keep the pointer ID values within a safe range given that a user is unlikely to have >32 pointers active simultaneously.\r\n\r\nGiven that it isn't a defined part of Android's API I didn't want to try to hardcode a limit here.  But we could enforce a maximum number of active pointers on the framework side if this is a concern.\r\n",
        "createdAt" : "2020-07-17T19:27:54Z",
        "updatedAt" : "2020-07-17T19:27:54Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1335009e7686e40b44cd50185488940227058a15",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +512,516 @@    }\n    int androidPointerId = 0;\n    while (usedAndroidPointerIds.contains(androidPointerId)) {\n      androidPointerId++;\n    }"
  },
  {
    "id" : "f1586b33-7ef8-41c7-8ccc-558316ce4b8b",
    "prId" : 62513,
    "prUrl" : "https://github.com/flutter/flutter/pull/62513#pullrequestreview-458813482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b36d580-f455-4354-b302-7445d845ac97",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Should this be `late` to keep the laziness of the original code?",
        "createdAt" : "2020-07-29T20:27:22Z",
        "updatedAt" : "2020-07-31T06:35:16Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "eb6607f5-7172-411c-acd0-52a21ef12468",
        "parentId" : "1b36d580-f455-4354-b302-7445d845ac97",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Static variables and top level variables are already lazy in Dart so I think `static late final` is the same as `static final`.\r\n@leafpetersen or @lrhn is it correct? \r\n\r\nIf yes the analyzer could perhaps have an hint to prefer `static final` over `static late final`",
        "createdAt" : "2020-07-30T06:48:01Z",
        "updatedAt" : "2020-07-31T06:35:16Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "7f8c2a3c-0dde-4f49-81b1-d46b321f10e3",
        "parentId" : "1b36d580-f455-4354-b302-7445d845ac97",
        "authorId" : "6fe75f2e-2c3d-4d6a-800e-03a595a5d5aa",
        "body" : "`static late final` with an initializer is the same as `static final` (and also when non-final).  Without an initializer they are different.  +1 for a hint/lint.  cc @bwilkerson ",
        "createdAt" : "2020-07-30T22:45:00Z",
        "updatedAt" : "2020-07-31T06:35:16Z",
        "lastEditedBy" : "6fe75f2e-2c3d-4d6a-800e-03a595a5d5aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "21fc1d74a6397d8664b6725b87947779006c4725",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +57,61 @@  }\n\n  static final PlatformViewsService _instance = PlatformViewsService._();\n\n  Future<void> _onMethodCall(MethodCall call) {"
  },
  {
    "id" : "23c12355-6384-4e19-8029-51dea63f9e12",
    "prId" : 84257,
    "prUrl" : "https://github.com/flutter/flutter/pull/84257#pullrequestreview-680019893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0675d5a4-75b1-465c-9b0d-cccd9fb4d65e",
        "parentId" : null,
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "a comment would be helpful: \"pointer cancel is handled like pointer up.  Normally, the difference is that pointer cancel doesn't perform any action, but in this case neither up or cancel perform any action\".",
        "createdAt" : "2021-06-09T18:38:55Z",
        "updatedAt" : "2021-06-09T18:38:55Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      }
    ],
    "commit" : "84cded1143ad84e69efcba5631d6098fac81d5b7",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +558,562 @@    // the difference is that pointer cancel doesn't perform any action,\n    // but in this case neither up or cancel perform any action.\n    _remove(event.pointer);\n  }\n"
  }
]