[
  {
    "id" : "5dc73b67-2825-4f66-be84-b5159543b672",
    "prId" : 12648,
    "prUrl" : "https://github.com/flutter/flutter/pull/12648#pullrequestreview-71673009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f1b558c-bfb4-4e8e-b7ca-19777b40bf7e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "List the various test cases I gave in this TODO so that when we fix it we have ready-made things to test it with.",
        "createdAt" : "2017-10-23T17:30:31Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "9e309caa-567c-4d45-becc-44b68469f53e",
        "parentId" : "8f1b558c-bfb4-4e8e-b7ca-19777b40bf7e",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK.  I did already have some of them in the TODO in the test (and I added the rest).  Does it really need to be both places?  I updated the TODO in the test to include the other cases, and documented what they were.  Please take a look and make sure my statements are truthful. :-)",
        "createdAt" : "2017-10-23T18:56:20Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "d4cd05ef-9f94-44f1-a579-552b9380dac9",
        "parentId" : "8f1b558c-bfb4-4e8e-b7ca-19777b40bf7e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, having them in the test looks good.",
        "createdAt" : "2017-10-24T21:07:22Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dc9f3bb644ef3860d1cd6c16636813f58e41cdf",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +185,189 @@      // TODO(gspencer): convert this to count actual characters when Dart\n      // supports that.\n      final RuneIterator iterator = new RuneIterator(newValue.text);\n      if (iterator.moveNext())\n        for (int count = 0; count < maxLength; ++count)"
  },
  {
    "id" : "8b4b17a0-0074-4cb1-be16-01405b9719e8",
    "prId" : 59120,
    "prUrl" : "https://github.com/flutter/flutter/pull/59120#pullrequestreview-432011270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79703c5c-f730-4d64-8ada-e17a1f90e9a2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Nice comprehensive doc comment!",
        "createdAt" : "2020-06-17T02:13:44Z",
        "updatedAt" : "2020-06-18T20:37:11Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "d001fe1883bb6548d3faf66b0fb805b27c626983",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +209,213 @@  ///\n  /// See also [String.splitMapJoin], which is used to implement this\n  /// behavior in both cases.\n  final String replacementString;\n"
  },
  {
    "id" : "de73e7b9-b502-49c9-843e-a23369952078",
    "prId" : 59120,
    "prUrl" : "https://github.com/flutter/flutter/pull/59120#pullrequestreview-433601445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "427c3cd8-85d8-450b-87cb-0a322093f003",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Which samples is this referring to?",
        "createdAt" : "2020-06-17T02:16:11Z",
        "updatedAt" : "2020-06-18T20:37:11Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "27ee0ebd-6e33-4dc4-87f1-8c46e9551c95",
        "parentId" : "427c3cd8-85d8-450b-87cb-0a322093f003",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe add a link?",
        "createdAt" : "2020-06-17T02:17:38Z",
        "updatedAt" : "2020-06-18T20:37:11Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "141f94e6-b3a5-4353-a2cd-dd905eb396c8",
        "parentId" : "427c3cd8-85d8-450b-87cb-0a322093f003",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "gallery in samples. they've said they'll fix it when i land this.",
        "createdAt" : "2020-06-18T19:32:34Z",
        "updatedAt" : "2020-06-18T20:37:11Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "358b51c1-1497-436f-8a5e-7983f14faf10",
        "parentId" : "427c3cd8-85d8-450b-87cb-0a322093f003",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "https://github.com/flutter/gallery/blob/74d9d92883c6ca10742c44df309f065289cf2f55/lib/demos/material/text_field_demo.dart#L225",
        "createdAt" : "2020-06-18T19:54:34Z",
        "updatedAt" : "2020-06-18T20:37:11Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "d001fe1883bb6548d3faf66b0fb805b27c626983",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +269,273 @@\n/// Old name for [FilteringTextInputFormatter.allow].\n// TODO(ianh): Deprecate these once the samples are migrated.\n// at-Deprecated(\n//   'Use FilteringTextInputFormatter.allow instead. '"
  },
  {
    "id" : "6e7005e6-693c-427a-b8df-48e56f0088fd",
    "prId" : 63754,
    "prUrl" : "https://github.com/flutter/flutter/pull/63754#pullrequestreview-472598594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c7d1b34-a74e-49cd-8d14-5b6817d56b0a",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I didn't realize NNBD had been turned on here already 👍 ",
        "createdAt" : "2020-08-21T16:51:31Z",
        "updatedAt" : "2020-08-21T18:06:27Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b412d6ecdb6fece87e0bb6a39b405603f30dda9",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +383,387 @@    // limit or the old value is composing too.\n    if (newValue.composing.isValid) {\n      if (maxLength != null && maxLength! > 0 &&\n          oldValue.text.characters.length == maxLength! &&\n          !oldValue.composing.isValid) {"
  },
  {
    "id" : "bce7be47-2966-4a9e-8e48-63762edce76f",
    "prId" : 66567,
    "prUrl" : "https://github.com/flutter/flutter/pull/66567#pullrequestreview-496536980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62c41ac1-cb94-4ee1-a244-5008a7edf164",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Also @justinmc it appears the docs here talk in length about how we are counting characters in Unicode scalar values. I believe that's no longer true?",
        "createdAt" : "2020-09-24T18:03:49Z",
        "updatedAt" : "2020-09-24T18:22:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "f0523737-ac51-404f-8bd7-77ad3a613db6",
        "parentId" : "62c41ac1-cb94-4ee1-a244-5008a7edf164",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Ah good catch.  Yeah below it incorrectly says it *doesn't* count grapheme clusters correctly.",
        "createdAt" : "2020-09-24T18:24:33Z",
        "updatedAt" : "2020-09-24T18:24:33Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "012e5498-ab5f-4384-8051-a4cdf7b3a39c",
        "parentId" : "62c41ac1-cb94-4ee1-a244-5008a7edf164",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I'll update that in a separate PR right now.",
        "createdAt" : "2020-09-24T18:26:53Z",
        "updatedAt" : "2020-09-24T18:26:53Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "6ce62d8f-0176-411a-a196-a79ad5b8e13e",
        "parentId" : "62c41ac1-cb94-4ee1-a244-5008a7edf164",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "That separate PR is here for the record: https://github.com/flutter/flutter/pull/66582",
        "createdAt" : "2020-09-25T15:41:32Z",
        "updatedAt" : "2020-09-25T15:41:33Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d187c05ac134c8ff52c39219082a7bb37d0c4d5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +320,324 @@  /// will allow.\n  ///\n  /// The value must be null or greater than zero. If it is null or -1, then no\n  /// limit is enforced.\n  ///"
  },
  {
    "id" : "9c98ce5c-536f-40c2-9347-c51cfd12344b",
    "prId" : 66582,
    "prUrl" : "https://github.com/flutter/flutter/pull/66582#pullrequestreview-495923756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d0abf6f-475b-407d-8437-f0c9a273ff4d",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I debated whether to drop these two paragraphs altogether, thinking that they might be more confusing than just removing them, but I decided to keep them.  Let me know if you think they should go.",
        "createdAt" : "2020-09-24T20:07:11Z",
        "updatedAt" : "2020-09-25T15:30:34Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "7297b00c-e70f-46cd-b7c4-14130d410c1c",
        "parentId" : "9d0abf6f-475b-407d-8437-f0c9a273ff4d",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Personally I think it helps clarify what the problem is without involving the terrifying terms. ",
        "createdAt" : "2020-09-24T20:23:53Z",
        "updatedAt" : "2020-09-25T15:30:34Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "a764dd2156d71e58b46e50c449e30f1f14d94626",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +333,337 @@  /// character.\n  ///\n  /// For instance, the character \"ö\" can be represented as '\\u{006F}\\u{0308}',\n  /// which is the letter \"o\" followed by a composed diaeresis \"¨\", or it can\n  /// be represented as '\\u{00F6}', which is the Unicode scalar value \"LATIN"
  },
  {
    "id" : "80a489b1-170a-49a5-9632-153de340177c",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-511179987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71d77f18-6dee-4b50-9deb-e865b9952365",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : ">{@template flutter.services.textFormatter.maxLengthEnforcement}\r\nDetermines how the [maxLength] limit should be enforced.\r\n>\r\n> ### [MaxLengthEnforcement.enforced] versus [MaxLengthEnforcement.composingUnenforced]\r\n> \r\n> Both [MaxLengthEnforcement.enforced] and [MaxLengthEnforcement.composingUnenforced] make sure the\r\n> final length of the text does not exceed the max length specified. The difference is that [MaxLengthEnforcement.enforced]\r\n> truncates the text whenever a new character is inserted into the text field, while\r\n> [MaxLengthEnforcement.composingUnenforced] does not truncate when the user\r\n> has unfinished composing text, allowing the \"placeholder\" text to temporarily exceed the max length limit,\r\n> which provides a better user experience for entering ideographic characters (e.g., CJK characters) \r\n> via composing on phonetic keyboards. \r\n>\r\n> However, some input methods (Gboard for example) initiate text composition even for Latin characters. If the \r\n> text field should only take Latin characters or numbers (e.g., verification code), [MaxLengthEnforcement.composingUnenforced] \r\n> is generally a better fit.\r\n>\r\n> {@endtemplate}\r\n",
        "createdAt" : "2020-10-18T23:05:21Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +12,16 @@import 'text_input.dart';\n\n/// {@template flutter.services.textFormatter.maxLengthEnforcement}\n/// ### [MaxLengthEnforcement.enforced] versus\n/// [MaxLengthEnforcement.truncateAfterCompositionEnds]"
  },
  {
    "id" : "95743706-d98c-4aa8-960f-e265737ad428",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-514011144",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "489f560b-52ef-46ba-8eb7-f5e684ce5443",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "nit: I think without the \"max length specified\" is out of context. \r\n\r\n```\r\nSeealso:\r\n\r\n   * [TextField.maxLengthEnforcement] which is used in conjunction with [TextField.maxLength] to limit the length of user input. [TextField] also provides a character counter to provide visual feedback.\r\n```",
        "createdAt" : "2020-10-21T05:14:16Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "2097c8ae-2645-47a0-96c2-989822a34774",
        "parentId" : "489f560b-52ef-46ba-8eb7-f5e684ce5443",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "I think `[TextField.maxLengthEnforcement]` or `[TextField.maxLength]` will not be able to jump to the definition. Because we haven't import `material.dart` here. Shall we?",
        "createdAt" : "2020-10-21T06:41:06Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "2fae8d65-3c53-4a2a-9281-b7061c7e5c62",
        "parentId" : "489f560b-52ef-46ba-8eb7-f5e684ce5443",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I think it kinda makes sense to reference an out of scope name in a \"see also\" section.",
        "createdAt" : "2020-10-21T08:06:16Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "4c0eeb22-5141-4e56-bd9c-b578da6dbf52",
        "parentId" : "489f560b-52ef-46ba-8eb7-f5e684ce5443",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "@LongCatIsLooong Analyzer saids no, with a loop import error, see https://logs.chromium.org/logs/flutter/buildbucket/cr-buildbucket.appspot.com/8865844988744138048/+/steps/prepare_environment/0/steps/Analyze/0/steps/analyze/0/stdout",
        "createdAt" : "2020-10-21T08:39:14Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "6e93bd20-b8ac-478b-9293-7988829a5f5e",
        "parentId" : "489f560b-52ef-46ba-8eb7-f5e684ce5443",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "You don't have to import those packages, it's fine to reference OOS identifiers in the documentation.",
        "createdAt" : "2020-10-21T17:40:07Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +33,37 @@/// verification code fields, [MaxLengthEnforcement.enforced] may provide the\n/// best experience.\n/// {@endtemplate}\n///\n/// See also:"
  },
  {
    "id" : "e4186e2d-b75c-4707-943c-cd35279e2245",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-513417752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76e8439c-8c51-401c-bbbb-8d72080c3801",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "A test case that may fail: `maxLength` = 5, `value.composing` = (5, 6). The function should return a `TextEditingValue` with a composing range of (-1, -1).",
        "createdAt" : "2020-10-21T05:19:05Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "da5916f1-2823-412d-b16e-3f0c5bb10815",
        "parentId" : "76e8439c-8c51-401c-bbbb-8d72080c3801",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "I'll add a test for it.",
        "createdAt" : "2020-10-21T06:53:27Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "6aada373-363c-4acc-ab7e-3a9210a4291d",
        "parentId" : "76e8439c-8c51-401c-bbbb-8d72080c3801",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Actually it won't, `truncated.length > value.composing.start` is false so it goes to empty.",
        "createdAt" : "2020-10-21T07:34:47Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "a6c7ec97-cdfd-4c22-a9a6-1c4c747c0e70",
        "parentId" : "76e8439c-8c51-401c-bbbb-8d72080c3801",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "oh nice then we don't need the first \"math.min\"?",
        "createdAt" : "2020-10-21T08:15:47Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +474,478 @@            start: value.composing.start,\n            end: math.min(value.composing.end, truncated.length),\n          )\n        : TextRange.empty,\n    );"
  },
  {
    "id" : "76dfd0ae-87ff-4eb4-9edf-46dd91800724",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-516146750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52248577-a193-4e44-ade4-8b9b2b9f4f3a",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "What if the newValue is completely different?  For example, for a maxLength of 5:\r\n\r\noldValue: \"12345\"\r\nnewValue: \"abcdefghi\"\r\n\r\nShould the field display \"abcdef\" or \"12345\"?",
        "createdAt" : "2020-10-22T15:56:45Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "64ecf721-7958-469a-9178-a4e5d665b4d1",
        "parentId" : "52248577-a193-4e44-ade4-8b9b2b9f4f3a",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Currently 12345",
        "createdAt" : "2020-10-22T16:06:56Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "c5bd96d0-13b7-4a48-8bc2-274d9d5548ac",
        "parentId" : "52248577-a193-4e44-ade4-8b9b2b9f4f3a",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "But...yes it's a edging case, with paste maybe. What do you think?",
        "createdAt" : "2020-10-22T16:10:08Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "496fbe55-6be1-4731-b418-4e6d92247cb1",
        "parentId" : "52248577-a193-4e44-ade4-8b9b2b9f4f3a",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "The case is solved with:\r\n* If previous value has selection, new value can comes in with truncation.\r\n* Else keep old value.",
        "createdAt" : "2020-10-23T10:20:55Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "120f2587-b196-4ae3-b2b2-e80b6beda7cb",
        "parentId" : "52248577-a193-4e44-ade4-8b9b2b9f4f3a",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "One more edge case I want to think about: What if the user has set newValue programmatically, so there was never any selection?\r\n\r\nSorry to nitpick these edge cases :). I think it's fine if we keep the same behavior as before, I just want to make sure we think about it in case it has changed.",
        "createdAt" : "2020-10-23T17:26:30Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "e8612dd9-be4d-479c-a028-6fff07b9094b",
        "parentId" : "52248577-a193-4e44-ade4-8b9b2b9f4f3a",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Make sense, but I don't think that we handled this case before this change. Let me revert some commits to see how do we handle this before.",
        "createdAt" : "2020-10-24T01:18:10Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +501,505 @@        // selection, keep the old value.\n        if (oldValue.text.characters.length == maxLength && !oldValue.selection.isValid) {\n          return oldValue;\n        }\n"
  },
  {
    "id" : "dff44495-680c-4d23-b0dd-53a6fe238f87",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-517484219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df28d14c-3f75-4855-ad6d-416d24cb8500",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "What if maxLength is null or -1, but maxLengthEnforcement is enforced?  I think that is ok, just checking...",
        "createdAt" : "2020-10-26T18:43:15Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "1f1d3917-6e41-471b-83f0-79f738f11b79",
        "parentId" : "df28d14c-3f75-4855-ad6d-416d24cb8500",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Then it should be the same as `maxLength: null` since the user use it in an incorrect way.\r\nhttps://github.com/flutter/flutter/blob/95d276f943bdc4b9e007cefc6443e82e01f039ec/packages/flutter/lib/src/services/text_formatter.dart#L451-L455",
        "createdAt" : "2020-10-27T01:44:38Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "681d0e2a-8bc1-42b5-b25b-a2a3aac263f6",
        "parentId" : "df28d14c-3f75-4855-ad6d-416d24cb8500",
        "authorId" : "d6ec2cbd-8ab2-451a-bc39-cdbf88c6612c",
        "body" : "@AlexV525 I think if (maxLength == null || maxLength < 0 || newValue.text.characters.length <= maxLength)",
        "createdAt" : "2020-10-27T06:38:21Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "d6ec2cbd-8ab2-451a-bc39-cdbf88c6612c",
        "tags" : [
        ]
      },
      {
        "id" : "e2fdbe03-8099-4e26-a898-fb26fcba72f2",
        "parentId" : "df28d14c-3f75-4855-ad6d-416d24cb8500",
        "authorId" : "d6ec2cbd-8ab2-451a-bc39-cdbf88c6612c",
        "body" : "why maxLength == -1?",
        "createdAt" : "2020-10-27T06:42:27Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "d6ec2cbd-8ab2-451a-bc39-cdbf88c6612c",
        "tags" : [
        ]
      },
      {
        "id" : "e3184422-6d0c-4665-8ab9-ba2a529fa086",
        "parentId" : "df28d14c-3f75-4855-ad6d-416d24cb8500",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "IMO -1 is same as null and opposite to n(n >= 0). The constructor already has an assertion that make sure maxLength is valid.",
        "createdAt" : "2020-10-27T07:13:03Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "7327c56d-70a7-4c11-a459-9a6c664fd728",
        "parentId" : "df28d14c-3f75-4855-ad6d-416d24cb8500",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "It looks like adding that assert will break the current default (maxLength == null, maxLengthEnforced == true/maxLengthEnforced = .enforced)?",
        "createdAt" : "2020-10-27T08:29:47Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "8a72c403-62f3-4d49-ac6a-82c19010db9e",
        "parentId" : "df28d14c-3f75-4855-ad6d-416d24cb8500",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "@LongCatIsLooong That assert means?",
        "createdAt" : "2020-10-27T09:12:00Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +369,373 @@    this.maxLength, {\n    this.maxLengthEnforcement,\n  }) : assert(maxLength == null || maxLength == -1 || maxLength > 0);\n\n  /// The limit on the number of user-perceived characters that this formatter"
  },
  {
    "id" : "f12841b8-f806-4dda-9f69-261b8a61e302",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-547831743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c596bd6d-0dce-4dbd-b747-bdd787c233a1",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I tried on Windows 10, the built-in IME seems to have the same behavior as the iOS software keyboard. Is there a reason for putting windows in this category?",
        "createdAt" : "2020-12-08T19:20:45Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "abfa1b9d-be95-445a-a24b-ad492ec3636e",
        "parentId" : "c596bd6d-0dce-4dbd-b747-bdd787c233a1",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Calling this the \"native behavior\" or \"platform-specific\" could be misleading. I think we should make it clear that the default values are derived from the behavior of the built-in IME (and it may need overriding based on the use case).",
        "createdAt" : "2020-12-08T19:57:01Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "55fa33f8-6165-41f3-b68b-6977e27ec9d2",
        "parentId" : "c596bd6d-0dce-4dbd-b747-bdd787c233a1",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Can you help me to take a screenshot or a video? I've asked a friend who works on UWP and he saids the Microsoft PinYin IME will act like this.",
        "createdAt" : "2020-12-08T23:02:39Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "0e96eafe-22e4-4483-ba42-4a640f45f46b",
        "parentId" : "c596bd6d-0dce-4dbd-b747-bdd787c233a1",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "This is the behavior in UWP.\r\n\r\n![maxlength](https://user-images.githubusercontent.com/15884415/101555801-5709de00-39f4-11eb-8fc4-69a4ac88e3ab.gif)\r\n",
        "createdAt" : "2020-12-08T23:59:02Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "91e63e4e-58aa-4f23-adc9-7845efa891be",
        "parentId" : "c596bd6d-0dce-4dbd-b747-bdd787c233a1",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Thanks for the gif. I was struggling trying to record my screen. But from the gif it looks like the IME adds \"placeholder\" characters (\"d\" in the gif) to the text field while you're typing pinyin, and the candidates show up in a separate candidate view. Isn't that the same as iOS? ",
        "createdAt" : "2020-12-09T01:07:17Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "6765f19c-771c-4084-a4de-910124335de0",
        "parentId" : "c596bd6d-0dce-4dbd-b747-bdd787c233a1",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "You can try this with the path text field in windows explorer. The built-in IME behaves differently on that field, which held the composition by itself, like the Gboard in Android while typing CJKs. Basically it's enforced on Windows.",
        "createdAt" : "2020-12-09T01:21:22Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "1dda89c9-ee0d-410a-b50f-d1b3748819ef",
        "parentId" : "c596bd6d-0dce-4dbd-b747-bdd787c233a1",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "The result that the GIF doesn't tell is 'd' this the last character before max length limit, and you cannot type any further.",
        "createdAt" : "2020-12-09T01:22:42Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "63d22acf-5f8e-4fac-a0c8-8471bb4abbc7",
        "parentId" : "c596bd6d-0dce-4dbd-b747-bdd787c233a1",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I think the special thing about Android Gboard is that it puts English inputs into a composition too which the windows IME doesn't seem to do. But since \r\n\r\n> The result that the GIF doesn't tell is 'd' this the last character before max length limit, and you cannot type any further.\r\n\r\nsetting the default to `enforced` makes sense to me too. \r\n",
        "createdAt" : "2020-12-09T04:46:36Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +423,427 @@  /// Different platforms follow different behaviors by default, according to\n  /// their native behavior.\n  ///  * Android, Windows: [MaxLengthEnforcement.enforced]. The native behavior\n  ///    of these platforms is enforced. The composing will be handled by the\n  ///    IME while users are entering CJK characters."
  },
  {
    "id" : "90c106ba-b51a-4d6c-b189-23679192bc95",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-548523869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e26de40-2f65-4679-bd64-d3c7eaf83c8b",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "This is a bit tricky. I don't think most websites (or browsers) provide an IME to the user. Most of the time people use the input method provided by the host OS. ",
        "createdAt" : "2020-12-08T19:32:24Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "97e5ac8c-43e2-4b48-9519-c2ff3b376b28",
        "parentId" : "3e26de40-2f65-4679-bd64-d3c7eaf83c8b",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Yes but the composing range will be displayed directly on the input element.",
        "createdAt" : "2020-12-08T23:05:04Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "b2f7ebdf-c392-49f6-9754-3b7344dbdd4b",
        "parentId" : "3e26de40-2f65-4679-bd64-d3c7eaf83c8b",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "It's generally up to the IME to decide what needs to be placed in the input element. I tried this on a web page using chrome, on an Android phone, it has the same behavior as in a native app.",
        "createdAt" : "2020-12-09T01:10:37Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "e65dc31d-2c6f-499e-b20b-a134a9d4a084",
        "parentId" : "3e26de40-2f65-4679-bd64-d3c7eaf83c8b",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Okay so I think we can make it (web) enforced by default. What do you think? FYI @justinmc ",
        "createdAt" : "2020-12-09T01:17:17Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "8197350b-99d2-4f8b-b670-fc0bff9b4d67",
        "parentId" : "3e26de40-2f65-4679-bd64-d3c7eaf83c8b",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Oh wait, I remember that web has events about compositions, like \"compositionStart\" and \"compositionEnd\"? If that's true I think it should still be allow composing since it actually replies on how developer handles event in native web.",
        "createdAt" : "2020-12-09T05:01:17Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "db8f1aad-5b78-4346-a5dc-d5e2fa96dc24",
        "parentId" : "3e26de40-2f65-4679-bd64-d3c7eaf83c8b",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Here is an example we've discussed before, that not only the IME might handles itself, but the input element too. https://github.com/flutter/flutter/issues/67898#issuecomment-726452539\r\nAnd docs https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/isComposing , https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide",
        "createdAt" : "2020-12-09T05:06:41Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "17f856c5-0f8f-4a65-a203-bf94b7bf4372",
        "parentId" : "3e26de40-2f65-4679-bd64-d3c7eaf83c8b",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "![Screenshot_20201209-130845](https://user-images.githubusercontent.com/15884415/101587726-c21cda00-3a1f-11eb-94fa-c49fbf6ecd32.jpg)\r\n\r\nThat's allow composition too.",
        "createdAt" : "2020-12-09T05:09:49Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "cfbbee0a-5fef-4689-a96d-4c42380f5def",
        "parentId" : "3e26de40-2f65-4679-bd64-d3c7eaf83c8b",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Yeah, both iOS and Android on the web seem to allow composition for me (maxLength is 10):\r\n\r\n| iOS Web | Android Web |\r\n| --------- | ------------- |\r\n| <img height=\"500\" src=\"https://user-images.githubusercontent.com/389558/101672801-2c774f80-3a0b-11eb-8ca6-a783d7c3e22f.PNG\" /> | <img height=\"500\" src=\"https://user-images.githubusercontent.com/389558/101673492-15852d00-3a0c-11eb-9011-307ca717ba45.jpg\" /> |\r\n\r\nThe difference is that when typing Chinese on Android, the composition happens on the keyboard and not in the input.  But when composing English on Android, you can see that the composition is able to overflow.",
        "createdAt" : "2020-12-09T18:52:58Z",
        "updatedAt" : "2020-12-09T18:52:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "4a626c21-8ac3-4336-b308-fe3b96cd2dcc",
        "parentId" : "3e26de40-2f65-4679-bd64-d3c7eaf83c8b",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Oh thanks for the clarification. ",
        "createdAt" : "2020-12-09T19:13:01Z",
        "updatedAt" : "2020-12-09T19:13:02Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +435,439 @@  static MaxLengthEnforcement get inferredDefaultMaxLengthEnforcement {\n    if (kIsWeb) {\n      return MaxLengthEnforcement.truncateAfterCompositionEnds;\n    } else {\n      switch (defaultTargetPlatform) {"
  },
  {
    "id" : "992c5fc5-3163-497b-98ba-67d5217f77fc",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-548534526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c51ad916-1e04-4c23-a8d1-95bc13f4f8c2",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "```suggestion\r\n  /// Returns a [MaxLengthEnforcement] that works well with the built-in input method on the specified [platform] in common cases.\r\n```",
        "createdAt" : "2020-12-08T19:35:47Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "c71551ad-7814-4f21-9f8e-d76ee135d814",
        "parentId" : "c51ad916-1e04-4c23-a8d1-95bc13f4f8c2",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "How about `inferredDefaultMaxLengthEnforcement` or `platformPreferredMaxLengthEnforcement`?",
        "createdAt" : "2020-12-08T19:38:04Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "e0c2a41b-6742-4a1e-9dec-1903fdaa70cd",
        "parentId" : "c51ad916-1e04-4c23-a8d1-95bc13f4f8c2",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "inferredDefaultMaxLengthEnforcement sounds good",
        "createdAt" : "2020-12-09T01:33:36Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "3ad5af15-2055-46a5-99be-37c8dbe3b5f3",
        "parentId" : "c51ad916-1e04-4c23-a8d1-95bc13f4f8c2",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Sorry I misunderstood what the default values are for. The original line makes more sense to me now. Maybe `Returns a [MaxLengthEnforcement] that follows the specified [platform]'s convention.`",
        "createdAt" : "2020-12-09T19:27:08Z",
        "updatedAt" : "2020-12-09T19:27:08Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +416,420 @@  final MaxLengthEnforcement? maxLengthEnforcement;\n\n  /// Return an effective [MaxLengthEnforcement] according the target platform.\n  ///\n  /// {@template flutter.services.textFormatter.effectiveMaxLengthEnforcement}"
  }
]