[
  {
    "id" : "7e7fb818-874e-4d8e-a206-bcb8a7a53823",
    "prId" : 1505,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "338e425e-5a56-4b2d-806b-56a8ee381e21",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "~~should the listeners fire when the scale is changed?~~\n~~should the scale not be allowed to change?~~\n\n~~I don't really understand why the scale is mutable. once we support animated GIFs or whatever, surely they'll all have the same scale.~~\n",
        "createdAt" : "2016-02-01T20:23:08Z",
        "updatedAt" : "2016-02-02T20:11:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "40b1a5e6-728a-41dc-9634-83014885f7b5",
        "parentId" : "338e425e-5a56-4b2d-806b-56a8ee381e21",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Ah, I understand now.\n\nHere's one alternative:\n\n``` dart\n   // (make sure the constructor doesn't have a default for scale)\n  double get scale => _scale;\n  double _scale;\n  void set scale(double value) {\n    assert(value != null);\n    assert(_scale == null); // this is the key, it makes it only writable once\n    assert(_image == null); // make sure you set the scale first, otherwise the listener will fire too early\n    // alternatively, fire the listener only when both are set\n    _scale = value;\n  }\n```\n",
        "createdAt" : "2016-02-01T20:32:53Z",
        "updatedAt" : "2016-02-02T20:11:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ecf24ec8-fc76-4f21-b322-a6ba43dc5681",
        "parentId" : "338e425e-5a56-4b2d-806b-56a8ee381e21",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think the idiomatic thing to do, though, is to change the future from one that resolves a ui.Image to one that resolves to an immutable struct with a ui.Image and a scale.\n",
        "createdAt" : "2016-02-01T20:33:36Z",
        "updatedAt" : "2016-02-02T20:11:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "5d87f2be-667e-429b-af88-67b757b9c42a",
        "parentId" : "338e425e-5a56-4b2d-806b-56a8ee381e21",
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "I thought about doing that too, although then I started wondering what the point of ImageResource was.\n",
        "createdAt" : "2016-02-01T20:49:45Z",
        "updatedAt" : "2016-02-02T20:11:19Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      },
      {
        "id" : "0b478338-9597-4d2f-a97c-d71c44c372d3",
        "parentId" : "338e425e-5a56-4b2d-806b-56a8ee381e21",
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "Let me look into this more, it does seem better than having the wonky read/write field (even with asserts).\n",
        "createdAt" : "2016-02-01T20:51:48Z",
        "updatedAt" : "2016-02-02T20:11:19Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      },
      {
        "id" : "6dbea350-e949-4624-a625-2da3e7e4b1c4",
        "parentId" : "338e425e-5a56-4b2d-806b-56a8ee381e21",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Essentially, it's exactly that. a Future around a ui.Image and its scale. What it adds on top of that is the ability to unregister a listener, and the error handling. The unregistering in particular is critical for how the framework works. Eventually we may also extend it to handle animated GIFs or push-JPEGs.\n",
        "createdAt" : "2016-02-01T20:54:34Z",
        "updatedAt" : "2016-02-02T20:11:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5161d12004f484e035e23c62fb2e609eaf71c642",
    "line" : null,
    "diffHunk" : "@@ -1,1 +22,26 @@/// image object might change over time, either because the image is animating\n/// or because the underlying image resource was mutated.\nclass ImageResource {\n  ImageResource(this._futureImage) {\n    _futureImage.then(_handleImageLoaded, onError: (exception, stack) => _handleImageError('Failed to load image:', exception, stack));"
  },
  {
    "id" : "4a34d4e0-c169-4244-8582-1db6a70b6f10",
    "prId" : 1505,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b791727d-6616-47f7-a961-938a37078050",
        "parentId" : null,
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "I'm open to suggestions on this name.\n",
        "createdAt" : "2016-02-01T21:52:14Z",
        "updatedAt" : "2016-02-02T20:11:19Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      }
    ],
    "commit" : "5161d12004f484e035e23c62fb2e609eaf71c642",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +8,12 @@import 'print.dart';\n\nclass ImageInfo {\n  ImageInfo({ this.image, this.scale: 1.0 });\n  final ui.Image image;"
  }
]