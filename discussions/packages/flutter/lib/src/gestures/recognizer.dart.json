[
  {
    "id" : "fa4bad98-67d1-4a2e-a03d-e9dd2328a28d",
    "prId" : 3552,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35f49488-00d7-4fcd-9cfa-a11ea566a40c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "?\n",
        "createdAt" : "2016-04-26T21:07:15Z",
        "updatedAt" : "2016-04-26T21:26:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "b9253c23-9242-4207-87bc-b607684def2b",
        "parentId" : "35f49488-00d7-4fcd-9cfa-a11ea566a40c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this looks like it was accidental?\n",
        "createdAt" : "2016-04-26T21:09:57Z",
        "updatedAt" : "2016-04-26T21:26:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b39065b541aaed392eb92052b80f8ac01fc632bc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +58,62 @@/// simultaneous touches to each result in a separate tap.\nabstract class OneSequenceGestureRecognizer extends GestureRecognizer {\n  final Map<int, GestureArenaEntry> _entries = <int, GestureArenaEntry>{};\n  final Set<int> _trackedPointers = new HashSet<int>();\n"
  },
  {
    "id" : "c5da31a5-f025-429d-becc-5503e2bbee04",
    "prId" : 3994,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4d2a7b8-4d14-4d01-b724-56a628858677",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "it's confusing when looking at this enum that there's no state for \"accepted\". The enum description should discuss why this is.\n",
        "createdAt" : "2016-05-17T22:06:29Z",
        "updatedAt" : "2016-05-17T22:13:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4e19751d227e2f994efa6a09794af862e1eaf89",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +131,135 @@}\n\n/// The possible states of a [PrimaryPointerGestureRecognizer].\n///\n/// The recognizer advances from [ready] to [possible] when starts tracking a"
  },
  {
    "id" : "f5e69efa-125d-4368-bc79-cbe741b79215",
    "prId" : 3994,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98aee7ff-1618-49fc-99bd-871de00f8838",
        "parentId" : null,
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "Typo: plural \"recognizers\" should be singular \"recognizer\"\n",
        "createdAt" : "2016-05-17T23:01:47Z",
        "updatedAt" : "2016-05-17T23:01:47Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4e19751d227e2f994efa6a09794af862e1eaf89",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +69,73 @@  void rejectGesture(int pointer) { }\n\n  /// Called when the number of pointers this recognizers is tracking changes from one to zero.\n  ///\n  /// The given pointer ID is the ID of the last pointer this recognizer was"
  },
  {
    "id" : "fcb7e7a0-e270-4e81-9924-90e86c87fc89",
    "prId" : 7481,
    "prUrl" : "https://github.com/flutter/flutter/pull/7481#pullrequestreview-16654112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "211c925b-9a4f-46fb-8f70-077b2cc46d2b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Another option here that might be cleaner would be to have a single interface implemented by both GestureArena and GestureArenaTeam, and have all gestures always be assigned an \"owner\", which is used here.\r\n\r\nThat would avoid the GestureRecognizer needing to know about GestureArenaTeam. It seems weird for it to know about teams. It would also remove another use of a global static, and would therefore allow you to run multiple arenas at the same time (which might be useful when you have multiple pipelines or something).",
        "createdAt" : "2017-01-13T21:19:38Z",
        "updatedAt" : "2017-01-13T22:30:53Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdbc546d0a17a3c156d20b20c8d93eb30783d3f9",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +154,158 @@    return GestureBinding.instance.gestureArena.add(pointer, this);\n  }\n\n  /// Causes events related to the given pointer ID to be routed to this recognizer.\n  ///"
  },
  {
    "id" : "b11b7696-b076-47a7-a573-b274e94c6d8c",
    "prId" : 11419,
    "prUrl" : "https://github.com/flutter/flutter/pull/11419#pullrequestreview-52753145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "541488e5-8868-4296-abdc-740eb94b78e0",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Can an @required argument be optional?",
        "createdAt" : "2017-07-27T18:54:59Z",
        "updatedAt" : "2017-07-27T20:41:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "28b3c4c4-87d2-4553-be58-8c8e65e1c62a",
        "parentId" : "541488e5-8868-4296-abdc-740eb94b78e0",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Oops, I didn't mean to leave it required.",
        "createdAt" : "2017-07-27T18:57:28Z",
        "updatedAt" : "2017-07-27T20:41:12Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "409e7168d1c9d7fdaeb0e0745a3264d4cf7d8d77",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +39,43 @@  /// Initializes the gesture recognizer.\n  ///\n  /// The argument is optional and is only used for debug purposes (e.g. in the\n  /// [toString] serialization).\n  GestureRecognizer({ this.debugOwner });"
  },
  {
    "id" : "8d04499e-a515-48e1-a181-4b3d312eea78",
    "prId" : 11419,
    "prUrl" : "https://github.com/flutter/flutter/pull/11419#pullrequestreview-52754237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70eae6a5-8740-4c9a-bbd7-d18d66149f28",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "You could explain the debugReport parameter here",
        "createdAt" : "2017-07-27T18:56:52Z",
        "updatedAt" : "2017-07-27T20:41:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "975db31b-fec3-44b4-9234-cc031aa1803a",
        "parentId" : "70eae6a5-8740-4c9a-bbd7-d18d66149f28",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "done",
        "createdAt" : "2017-07-27T19:01:36Z",
        "updatedAt" : "2017-07-27T20:41:12Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "409e7168d1c9d7fdaeb0e0745a3264d4cf7d8d77",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +79,83 @@  /// exceptions.\n  ///\n  /// The `name` argument is ignored except when reporting exceptions.\n  ///\n  /// The `debugReport` argument is optional and is used when"
  },
  {
    "id" : "57970124-2fbe-473e-9910-d678334ed74b",
    "prId" : 23424,
    "prUrl" : "https://github.com/flutter/flutter/pull/23424#pullrequestreview-175071247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f0ac836-fab9-4060-b26b-519e06fed390",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This needs mode information. By just reading this I have no idea what this does.\r\n\r\nMaybe also have a \"See also\" section linking to the example you gave for [DragGestureRecognizer. dragStartBehavior].",
        "createdAt" : "2018-11-14T20:58:31Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f463e9f73d8a7eb59f05588877bc12fec02d40",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +25,29 @@typedef RecognizerCallback<T> = T Function();\n\n/// Configuration of offset passed to [DragStartDetails].\n///\n/// The settings determines when a drag formally starts when the user"
  },
  {
    "id" : "631b5f94-8fce-4ad3-b528-c41342714576",
    "prId" : 26001,
    "prUrl" : "https://github.com/flutter/flutter/pull/26001#pullrequestreview-192921043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06c5cbb3-ed03-4ac8-b38d-04aefd541ae2",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Could we call these constants `preAcceptTolerance` etc? I think \"slop\" was a crude synonym for \"tolerance\".",
        "createdAt" : "2019-01-15T18:33:16Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "8435025a-c30f-475d-904c-2b8c6f45d4a9",
        "parentId" : "06c5cbb3-ed03-4ac8-b38d-04aefd541ae2",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Might be my English fail again. Though I think slop is just the 'spill' or the 'departure'. 'preAcceptSpillTolerance' is still what's intended.",
        "createdAt" : "2019-01-15T23:55:40Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5725a2658d8ec7bee93bbac5b0818122b39d02a3",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +288,292 @@///\n/// Gestures based on this class will reject the gesture if the primary pointer\n/// travels beyond [preAcceptSlopTolerance] pixels from the original contact\n/// point before the gesture is accepted or beyond [postAcceptSlopTolerance]\n/// from where the pointer was after the gesture was accepted."
  },
  {
    "id" : "af1b17ce-f96b-48d9-bc25-67a8cd192e06",
    "prId" : 26001,
    "prUrl" : "https://github.com/flutter/flutter/pull/26001#pullrequestreview-192946437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dee99e4-f7b6-4972-bd3f-a6913707da69",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "or beyond [postAcceptSlopTolerance] from where the pointer was when the gesture was accepted.",
        "createdAt" : "2019-01-15T18:40:09Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "33aa2b66-ffd7-4c1d-8576-814260c3e49a",
        "parentId" : "1dee99e4-f7b6-4972-bd3f-a6913707da69",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "done",
        "createdAt" : "2019-01-16T01:59:02Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5725a2658d8ec7bee93bbac5b0818122b39d02a3",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +289,293 @@/// Gestures based on this class will reject the gesture if the primary pointer\n/// travels beyond [preAcceptSlopTolerance] pixels from the original contact\n/// point before the gesture is accepted or beyond [postAcceptSlopTolerance]\n/// from where the pointer was after the gesture was accepted.\nabstract class PrimaryPointerGestureRecognizer extends OneSequenceGestureRecognizer {"
  },
  {
    "id" : "c4f646f9-76d1-4a0d-89b7-c9c2647a6814",
    "prId" : 26001,
    "prUrl" : "https://github.com/flutter/flutter/pull/26001#pullrequestreview-200920689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5867971-150f-4720-89ea-41d912fa5660",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Rejected or cancelled? It seems like once we've accepted a gesture...",
        "createdAt" : "2019-01-15T18:42:02Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "9e6c645a-aa62-4d8d-ae91-4bd7e7354742",
        "parentId" : "f5867971-150f-4720-89ea-41d912fa5660",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Does 'cancel' have a specific technical meaning? I'm referring to resolve(GestureDisposition.rejected) here which causes all subsequent callbacks to no longer be called.",
        "createdAt" : "2019-01-16T02:01:36Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "9d3c3f57-f2fa-4c3a-8140-608a9be9d2d3",
        "parentId" : "f5867971-150f-4720-89ea-41d912fa5660",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "yes, cancel means the gesture aborted, e.g. because of a pointer cancel event.",
        "createdAt" : "2019-02-07T04:52:05Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5725a2658d8ec7bee93bbac5b0818122b39d02a3",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +321,325 @@  /// after the gesture has been accepted.\n  ///\n  /// Drifting past the allowed slop amount causes the gesture to be rejected,\n  /// even after being accepted.\n  final double postAcceptSlopTolerance;"
  },
  {
    "id" : "3d4e8d65-4b1f-4895-a830-fd151f90a00b",
    "prId" : 26001,
    "prUrl" : "https://github.com/flutter/flutter/pull/26001#pullrequestreview-200920811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8e7f099-ff15-40be-889e-05132d932007",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It looks like the abarth comment about factoring out slop (drag tolerance) handling should survive",
        "createdAt" : "2019-01-15T18:43:20Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "144a571f-7cc0-4f8e-af5f-922349f8a2cb",
        "parentId" : "f8e7f099-ff15-40be-889e-05132d932007",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Umm I did it by accident, but on second thought, I don't think I agree with the premise of the TODO anymore. This class almost doesn't do anything else besides dealing with the slop. I don't think there is another place to refactor this into. ",
        "createdAt" : "2019-01-16T02:03:14Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "e4b32049-a395-4352-9113-49022ca21d50",
        "parentId" : "f8e7f099-ff15-40be-889e-05132d932007",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "feel free to remove the comment. we're eventually going to want to move the slop handling to a render object though, at least for some gestures.",
        "createdAt" : "2019-02-07T04:52:51Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5725a2658d8ec7bee93bbac5b0818122b39d02a3",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +353,357 @@  void handleEvent(PointerEvent event) {\n    assert(state != GestureRecognizerState.ready);\n    if (event.pointer == primaryPointer) {\n      final bool isPreAcceptSlopPastTolerance =\n          state == GestureRecognizerState.possible &&"
  },
  {
    "id" : "feaaec97-2ae8-4219-98fd-4675e8d828a1",
    "prId" : 26001,
    "prUrl" : "https://github.com/flutter/flutter/pull/26001#pullrequestreview-204488738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc984a54-25de-4a20-b5f7-e218ac6359b1",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't understand. If `isPostAcceptSlopPastTolerance` is true, then we know we've already been accepted, so what does it mean to reject it?",
        "createdAt" : "2019-02-07T04:57:49Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "36f7791a-97bc-4dda-b76f-fcb8c5c55c30",
        "parentId" : "dc984a54-25de-4a20-b5f7-e218ac6359b1",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I don't have a strong opinion about this. I'm mostly leaning towards not introducing more API breaks in this PR since it was the existing behaviour (whether the gesture was accepted or not). Rejecting an accepted gesture makes future events not go through, such as the up event.",
        "createdAt" : "2019-02-07T19:17:03Z",
        "updatedAt" : "2019-02-07T19:17:04Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "59980c77-08ca-43a6-aec1-661def4ed546",
        "parentId" : "dc984a54-25de-4a20-b5f7-e218ac6359b1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't understand how your comment corresponds to my question.",
        "createdAt" : "2019-02-15T23:11:29Z",
        "updatedAt" : "2019-02-15T23:11:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7d204ea4-cac3-4b7e-95ff-fa1850cf8cff",
        "parentId" : "dc984a54-25de-4a20-b5f7-e218ac6359b1",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "> If `isPostAcceptSlopPastTolerance` is true, then we know we've already been accepted\r\n\r\nYes\r\n\r\n> so what does it mean to reject it?\r\n\r\nIn the existing implementation, \r\n```dart\r\nif (event is PointerMoveEvent && _getDistance(event) > kTouchSlop) {\r\n  resolve(GestureDisposition.rejected);\r\n```\r\ncauses the recognizer to stop emitting post-accept events such as the up event. I leaned towards not altering that behavior and left it in this PR though we can make that change if we feel that we have a strong reason to.",
        "createdAt" : "2019-02-16T00:21:14Z",
        "updatedAt" : "2019-02-16T00:21:14Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5725a2658d8ec7bee93bbac5b0818122b39d02a3",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +364,368 @@\n      if (event is PointerMoveEvent && (isPreAcceptSlopPastTolerance || isPostAcceptSlopPastTolerance)) {\n        resolve(GestureDisposition.rejected);\n        stopTrackingPointer(primaryPointer);\n      } else {"
  },
  {
    "id" : "c8dff064-3297-416b-bb18-60632b02cb03",
    "prId" : 26001,
    "prUrl" : "https://github.com/flutter/flutter/pull/26001#pullrequestreview-204476666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64489f36-6fc4-43f4-8637-8250ee991d42",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this comment doesn't make much sense to me",
        "createdAt" : "2019-02-15T23:15:08Z",
        "updatedAt" : "2019-02-15T23:15:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5725a2658d8ec7bee93bbac5b0818122b39d02a3",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +388,392 @@  void acceptGesture(int pointer) {\n    // Ignore state 'ready' here because that would happen if this recognizer\n    // won by a sweep.\n    if (pointer == primaryPointer && state == GestureRecognizerState.possible) {\n      state = GestureRecognizerState.accepted;"
  },
  {
    "id" : "5a464659-9483-47ab-b803-15b691980bda",
    "prId" : 26001,
    "prUrl" : "https://github.com/flutter/flutter/pull/26001#pullrequestreview-204489931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60473162-d6f0-42d2-896b-eeb5edf80f0f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i think we should assert that we're not accepted here. it doesn't make sense to reject when you're accepted.",
        "createdAt" : "2019-02-15T23:15:29Z",
        "updatedAt" : "2019-02-15T23:15:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c04e52c9-4343-4a94-b925-051ac7f7ea7b",
        "parentId" : "60473162-d6f0-42d2-896b-eeb5edf80f0f",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "It's the existing behavior since there are no knowledge of acceptance in this class yet. We're moving a step closer in this PR but I haven't changed this behavior. ",
        "createdAt" : "2019-02-16T00:29:32Z",
        "updatedAt" : "2019-02-16T00:29:32Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5725a2658d8ec7bee93bbac5b0818122b39d02a3",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +398,402 @@    if (pointer == primaryPointer\n        && (state == GestureRecognizerState.possible ||\n            state == GestureRecognizerState.accepted)) {\n      _stopTimer();\n      state = GestureRecognizerState.defunct;"
  },
  {
    "id" : "c5d7a2ce-fb50-413e-8f94-05d162d9c2f2",
    "prId" : 26001,
    "prUrl" : "https://github.com/flutter/flutter/pull/26001#pullrequestreview-204477031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c1c3603-985b-4002-8933-bf7385dbbc36",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i am not convinced about adding this. I don't really understand what it gives us.",
        "createdAt" : "2019-02-15T23:16:44Z",
        "updatedAt" : "2019-02-15T23:16:44Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5725a2658d8ec7bee93bbac5b0818122b39d02a3",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +277,281 @@\n  /// The gesture has been definitively accepted by the recognizer.\n  accepted,\n\n  /// Further pointer events cannot cause this recognizer to recognize the"
  },
  {
    "id" : "9aaaabf0-ecae-419e-bdd6-6f4a646e1e68",
    "prId" : 28290,
    "prUrl" : "https://github.com/flutter/flutter/pull/28290#pullrequestreview-209777404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a61a4e4-2608-4b54-ac0e-6e3c21ff3bc9",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Wonder why the reject is in OneSequenceGestureRecognizer and not here.",
        "createdAt" : "2019-03-01T05:55:13Z",
        "updatedAt" : "2019-03-01T21:18:28Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "4e000489-be71-447e-9e11-9bc15769bb35",
        "parentId" : "1a61a4e4-2608-4b54-ac0e-6e3c21ff3bc9",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "My thinking here was that recognizers that track multiple pointers may not want to reject if there's a non-allowed pointer in the middle, they would just ignore it.",
        "createdAt" : "2019-03-01T20:46:38Z",
        "updatedAt" : "2019-03-01T21:18:28Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d39a81a281f10dd9b4fba6d3884058c0a7448d9e",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +117,121 @@  /// - [OneSequenceGestureRecognizer.handleNonAllowedPointer].\n  @protected\n  void handleNonAllowedPointer(PointerDownEvent event) { }\n\n  /// Checks whether or not a pointer is allowed to be tracked by this recognizer."
  },
  {
    "id" : "96044cc2-f8fc-4fc1-bd79-6b2d278f784e",
    "prId" : 29683,
    "prUrl" : "https://github.com/flutter/flutter/pull/29683#pullrequestreview-236318179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cd240df-0259-4562-8392-c676bfdbfc90",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "This isn't ideal. If you have better ideas on how to improve it, I'm all ears :)",
        "createdAt" : "2019-04-25T23:05:38Z",
        "updatedAt" : "2019-05-13T18:37:47Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "2d5fb316-00a6-4b1e-8874-88da0b57ad4b",
        "parentId" : "9cd240df-0259-4562-8392-c676bfdbfc90",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ah, this is unfortunate. Though this event isn't entirely correct either right? Since you're sending something from the past and the past event also has a timeStamp. \r\n\r\nI haven't validated it but I suspect each onLongPressDown is preceded by a onTapDown or something. From the TextSelectionGestureDetector's perspective, it may be enough?",
        "createdAt" : "2019-04-30T00:31:38Z",
        "updatedAt" : "2019-05-13T18:37:47Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "4fee5024-c31b-4d2d-959b-1acf7b49c1bb",
        "parentId" : "9cd240df-0259-4562-8392-c676bfdbfc90",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Unfortunately, this is how the tap recognizer works. It doesn't send the tap down event until either a tap up occurs, or the deadline is exceeded. And in that case, the tap down is always from the past (even before my change). All my change does is it adds the `kind` field to the event.",
        "createdAt" : "2019-05-10T21:22:09Z",
        "updatedAt" : "2019-05-13T18:37:47Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e569fef46da2993e5f48803f89ed8d7357829f21",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +427,431 @@      initialPosition = event.position;\n      if (deadline != null)\n        _timer = Timer(deadline, () => didExceedDeadlineWithEvent(event));\n    }\n  }"
  }
]