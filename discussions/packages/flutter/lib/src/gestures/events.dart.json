[
  {
    "id" : "de25db17-eefa-41a3-a08b-81706689d9cb",
    "prId" : 6884,
    "prUrl" : "https://github.com/flutter/flutter/pull/6884#pullrequestreview-8749307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fd3818d-f3ce-4662-8dda-1119c7c332bc",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "remove distance and down from move events, since they must always be 0.0 and true respectively\n",
        "createdAt" : "2016-11-16T01:53:39Z",
        "updatedAt" : "2016-11-16T04:56:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1d96a257-83de-4bdb-b8f3-417b8f226cc4",
        "parentId" : "3fd3818d-f3ce-4662-8dda-1119c7c332bc",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "done\n",
        "createdAt" : "2016-11-16T04:50:56Z",
        "updatedAt" : "2016-11-16T04:56:59Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "de145f95c08f23521837c71a5174f7ba9e43029d",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +432,436 @@    Point position: Point.origin,\n    Offset delta: Offset.zero,\n    int buttons: 0,\n    bool obscured: false,\n    double pressure: 1.0,"
  },
  {
    "id" : "c2e1fdf1-744b-4665-95a6-b562781ed880",
    "prId" : 22762,
    "prUrl" : "https://github.com/flutter/flutter/pull/22762#pullrequestreview-208268607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d789d2a-207e-428f-a313-e31b3b2d2cb6",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I'd word this differently: e.g. \"A pointer event object that contains information about pointer scroll events.\"",
        "createdAt" : "2019-02-26T19:30:25Z",
        "updatedAt" : "2019-03-09T03:20:45Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "4e962e7d-229d-4610-bd66-0fead8557dd5",
        "parentId" : "0d789d2a-207e-428f-a313-e31b3b2d2cb6",
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "While I agree in theory, that would make it inconsistent with the documentation of all of the other PointerEvent subclasses here; I wrote it this way rather than something like what you're suggesting based on the surrounding code, since consistency in API doc comments seemed important. Do you still want me to change it?",
        "createdAt" : "2019-02-26T20:36:54Z",
        "updatedAt" : "2019-03-09T03:20:45Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      },
      {
        "id" : "1a311b46-cb4f-4be2-8fc2-e20e700a4099",
        "parentId" : "0d789d2a-207e-428f-a313-e31b3b2d2cb6",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Hrm.  I'd actually like to have them all be changed, since it's kind of crappy documentation.\r\n\r\nBut, in the interest of landing this, can you just file an issue to do so?  You can keep this consistent with the rest.",
        "createdAt" : "2019-02-26T23:37:15Z",
        "updatedAt" : "2019-03-09T03:20:45Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "092139733a891104377c1d0256bd6dacfed7942d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +814,818 @@}\n\n/// The pointer issued a scroll event.\n///\n/// Scrolling the scroll wheel on a mouse is an example of an event that"
  },
  {
    "id" : "0e070dc1-7bec-4c39-b847-cb5e6ff50900",
    "prId" : 22762,
    "prUrl" : "https://github.com/flutter/flutter/pull/22762#pullrequestreview-208268607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a057e92e-802f-4012-ab8e-761c6042ee46",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "If this is true, then there should be asserts to enforce it.",
        "createdAt" : "2019-02-26T19:34:01Z",
        "updatedAt" : "2019-03-09T03:20:45Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "93ac4890-d9ac-4959-b21f-e7cd7019353b",
        "parentId" : "a057e92e-802f-4012-ab8e-761c6042ee46",
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "Done. One of the asserts fired after I added it, which made me realize that `pointer` shouldn't actually be a field on a scroll event, since a pointer in the Flutter event system corresponds to a touch, essentially, and scrolls don't have to (and usually don't) come from a pointer that's down, nor does the scroll system need to know what pointer if any it's associated with. Yay for assertions :)\r\n\r\nRelated: all of the pointer event classes say that everything must be non-null, but none of them assert; would you like me to file a bug to track the missing asserts? (I'm not sure if that would be considered breaking, and thus potentially not worth doing.)",
        "createdAt" : "2019-02-26T23:01:30Z",
        "updatedAt" : "2019-03-09T03:20:45Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      },
      {
        "id" : "7f1d574b-28a1-492d-acbc-f91b5e011824",
        "parentId" : "a057e92e-802f-4012-ab8e-761c6042ee46",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, please file the issue.  We should be enforcing contracts about things not being null.  At least until we get non-nullable types. :-)\r\n\r\nBy definition, if we break someone by adding an assert to enforce an existing contract, then we just helped them find an error in their code.",
        "createdAt" : "2019-02-26T23:37:39Z",
        "updatedAt" : "2019-03-09T03:20:45Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "092139733a891104377c1d0256bd6dacfed7942d",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +821,825 @@  /// Creates a pointer scroll event.\n  ///\n  /// All of the arguments must be non-null.\n  const PointerScrollEvent({\n    Duration timeStamp = Duration.zero,"
  },
  {
    "id" : "30596224-4456-4435-ae07-49136d813408",
    "prId" : 24002,
    "prUrl" : "https://github.com/flutter/flutter/pull/24002#pullrequestreview-173557579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cee22379-8487-4a65-9d1f-453c218ad4a2",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "How do we know what the range of detectable values is?",
        "createdAt" : "2018-11-07T21:47:23Z",
        "updatedAt" : "2018-11-09T19:27:23Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "7519b2c2-16ca-48c4-85ec-b8299dcce485",
        "parentId" : "cee22379-8487-4a65-9d1f-453c218ad4a2",
        "authorId" : "cebd9d94-b15e-4cc3-a8fb-3b59bef95c73",
        "body" : "While it's possible to get range for most Android event fields, there doesn't seem to be a way to get range for size. I went ahead and added a note in the comment. Also see this description of the original Android field that explains that: https://developer.android.com/reference/android/view/MotionEvent.html#getSize(int)",
        "createdAt" : "2018-11-09T19:28:55Z",
        "updatedAt" : "2018-11-09T19:30:06Z",
        "lastEditedBy" : "cebd9d94-b15e-4cc3-a8fb-3b59bef95c73",
        "tags" : [
        ]
      }
    ],
    "commit" : "85dd69aa10a705aeb7b5babfa8608e72b636004f",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +204,208 @@  /// This value is scaled to a range between 0 and 1. It can be used to\n  /// determine fat touch events. This value is only set on Android and is\n  /// a device specific approximation within the range of detectable values.\n  /// So, for example, the value of 0.1 could mean a touch with the tip of\n  /// the finger, 0.2 a touch with full finger, and 0.3 the full palm."
  },
  {
    "id" : "0d03dcf3-6126-43ca-a512-e1049395b645",
    "prId" : 24554,
    "prUrl" : "https://github.com/flutter/flutter/pull/24554#pullrequestreview-184897798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d14271c7-cbfc-4c0e-8074-e2f749bac40c",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "How did you decide on 0 here (vs 1 from the super class default)? If there's a reason to make it different, add a code comment here.",
        "createdAt" : "2018-11-20T23:09:46Z",
        "updatedAt" : "2018-12-20T02:36:24Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "4ac0b79d-6b8c-46a9-8fc5-f5ecb257b30c",
        "parentId" : "d14271c7-cbfc-4c0e-8074-e2f749bac40c",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "You didn't respond to this :)\r\n",
        "createdAt" : "2018-12-13T21:55:03Z",
        "updatedAt" : "2018-12-20T02:36:24Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "6e46cda8-7d4c-4897-bde4-0976efd065cc",
        "parentId" : "d14271c7-cbfc-4c0e-8074-e2f749bac40c",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "So Ian told me that added/removed/canceled events should have pressure 0 because there's technically no touch occurring.",
        "createdAt" : "2018-12-13T22:19:05Z",
        "updatedAt" : "2018-12-20T02:36:25Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "82f1caba-3340-4094-9249-b0ab7c1cb561",
        "parentId" : "d14271c7-cbfc-4c0e-8074-e2f749bac40c",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "sg, let's just make sure to announce the change",
        "createdAt" : "2018-12-13T22:26:51Z",
        "updatedAt" : "2018-12-20T02:36:25Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3dd465a8ef93da36466af10a084e430518a961b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +335,339 @@    Offset position = Offset.zero,\n    bool obscured = false,\n    double pressure = 0.0,\n    double pressureMin = 1.0,\n    double pressureMax = 1.0,"
  },
  {
    "id" : "1f88b277-9438-4c0d-8a14-d0f6a0ef408c",
    "prId" : 24554,
    "prUrl" : "https://github.com/flutter/flutter/pull/24554#pullrequestreview-184886736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d7ce275-dafb-4be9-820a-66c120fe5aed",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I assume when canceling the pointer still has a position? It would be consistent to still have a pressure as well in that case.",
        "createdAt" : "2018-11-20T23:11:17Z",
        "updatedAt" : "2018-12-20T02:36:24Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "a6bf009b-ffbd-4af5-b38e-2258d953c605",
        "parentId" : "3d7ce275-dafb-4be9-820a-66c120fe5aed",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "same here",
        "createdAt" : "2018-12-13T21:56:21Z",
        "updatedAt" : "2018-12-20T02:36:25Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3dd465a8ef93da36466af10a084e430518a961b",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +623,627 @@    int buttons = 0,\n    bool obscured = false,\n    double pressure = 0.0,\n    double pressureMin = 1.0,\n    double pressureMax = 1.0,"
  },
  {
    "id" : "3f826ed8-3058-4753-8829-ae4ddc851022",
    "prId" : 24554,
    "prUrl" : "https://github.com/flutter/flutter/pull/24554#pullrequestreview-178931258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebc96d7e-b6cc-466f-ba97-faafb568ef46",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "same comments here",
        "createdAt" : "2018-11-27T18:08:49Z",
        "updatedAt" : "2018-12-20T02:36:24Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3dd465a8ef93da36466af10a084e430518a961b",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +392,396 @@    distanceMax: distanceMax,\n    radiusMin: radiusMin,\n    radiusMax: radiusMax,\n  );\n}"
  },
  {
    "id" : "cb98f2b9-e733-4d7b-9473-ec915e468754",
    "prId" : 24554,
    "prUrl" : "https://github.com/flutter/flutter/pull/24554#pullrequestreview-184886736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cc02bbf-506d-488a-b34c-33ae75bb0403",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i don't understand any of the changes in this file.",
        "createdAt" : "2018-11-27T18:12:05Z",
        "updatedAt" : "2018-12-20T02:36:24Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ced91073-2ea8-45b7-aaf2-bc3c28375835",
        "parentId" : "6cc02bbf-506d-488a-b34c-33ae75bb0403",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Ok, let's talk about it tomorrow!",
        "createdAt" : "2018-11-27T19:13:10Z",
        "updatedAt" : "2018-12-20T02:36:24Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "878a848e-b0ca-46ab-8dc4-9fa9fdad61dc",
        "parentId" : "6cc02bbf-506d-488a-b34c-33ae75bb0403",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Was this resolved?",
        "createdAt" : "2018-12-13T21:56:48Z",
        "updatedAt" : "2018-12-20T02:36:25Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3dd465a8ef93da36466af10a084e430518a961b",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +647,651 @@    pressureMin: pressureMin,\n    pressureMax: pressureMax,\n    distance: distance,\n    distanceMax: distanceMax,\n    size: size,"
  },
  {
    "id" : "2c690a18-6d7f-4a5f-95cb-2115e03140ec",
    "prId" : 24554,
    "prUrl" : "https://github.com/flutter/flutter/pull/24554#pullrequestreview-184895455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6c71fba-18ed-4667-a454-26c044b8ec3d",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "If we make (though minor) breaking changes here and for pointer added, we should announce it in flutter-dev",
        "createdAt" : "2018-12-13T21:56:07Z",
        "updatedAt" : "2018-12-20T02:36:24Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "c9c15065-e831-4ac6-88f4-21a6606efe20",
        "parentId" : "f6c71fba-18ed-4667-a454-26c044b8ec3d",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Ok.",
        "createdAt" : "2018-12-13T22:19:57Z",
        "updatedAt" : "2018-12-20T02:36:25Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3dd465a8ef93da36466af10a084e430518a961b",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +574,578 @@    int buttons = 0,\n    bool obscured = false,\n    double pressure = 0.0,\n    double pressureMin = 1.0,\n    double pressureMax = 1.0,"
  },
  {
    "id" : "4fce4015-5817-40fa-b8cf-78707bf3b8f3",
    "prId" : 30339,
    "prUrl" : "https://github.com/flutter/flutter/pull/30339#pullrequestreview-226428456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3639b04e-2361-4b36-a726-9663f585e360",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "These should be inside a \"```dart\" block.",
        "createdAt" : "2019-04-15T01:42:37Z",
        "updatedAt" : "2019-04-29T16:58:19Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "170e1da789bb025dc4c5b435a8739006e3a922c3",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +141,145 @@///\n/// ```dart\n///   assert(rightmostButton(0x1) == 0x1);\n///   assert(rightmostButton(0x11) == 0x1);\n///   assert(rightmostButton(0) == 0);"
  },
  {
    "id" : "9ffb03a9-b1bf-4489-a7a1-dd231e9e0cd1",
    "prId" : 30339,
    "prUrl" : "https://github.com/flutter/flutter/pull/30339#pullrequestreview-226428456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e282800-7ebd-4eaf-8f9e-b0b8a47e6706",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Should be inside \"```dart\" block.",
        "createdAt" : "2019-04-15T01:43:36Z",
        "updatedAt" : "2019-04-29T16:58:19Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "170e1da789bb025dc4c5b435a8739006e3a922c3",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +161,165 @@///\n/// ```dart\n///   assert(isSingleButton(0x1) == true);\n///   assert(isSingleButton(0x11) == false);\n///   assert(isSingleButton(0) == false);"
  },
  {
    "id" : "b13dcf63-4594-47d5-a883-f4e4f558d2c3",
    "prId" : 30339,
    "prUrl" : "https://github.com/flutter/flutter/pull/30339#pullrequestreview-231238539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b28551f-af38-424b-97bb-f491db406bad",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "It's too bad about all of these global constants.  I wish they were in a class.  Probably that ship has sailed since it would be a massive breaking change, but I thought I'd just put that out there.",
        "createdAt" : "2019-04-26T16:04:52Z",
        "updatedAt" : "2019-04-29T16:58:19Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "170e1da789bb025dc4c5b435a8739006e3a922c3",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +22,26 @@///  * [kSecondaryButton], which describes a cross-device behavior of\n///    \"secondary operation\".\nconst int kPrimaryButton = 0x01;\n\n/// The bit of [PointerEvent.buttons] that corresponds to a cross-device"
  },
  {
    "id" : "15749662-d4bb-489a-b597-1cf4386672f2",
    "prId" : 30874,
    "prUrl" : "https://github.com/flutter/flutter/pull/30874#pullrequestreview-228858664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88581e52-57d4-4e4f-99aa-66d251e01389",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "please add tests that verify the behaviour you change by using `this` instead of `super`",
        "createdAt" : "2019-04-19T23:24:03Z",
        "updatedAt" : "2019-04-25T01:04:41Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "848ec7d0-be00-4a19-b774-714b5285e7ec",
        "parentId" : "88581e52-57d4-4e4f-99aa-66d251e01389",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Added via 1f384d58134bf25fc3ebd203e498e68a8967631a",
        "createdAt" : "2019-04-20T00:47:54Z",
        "updatedAt" : "2019-04-25T01:04:41Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ae6952c0c7c2081c2e847a307bf3fcb0b0844b5",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +648,652 @@  ///\n  /// This is used by the [MouseTracker] to synthesize exit events.\n  PointerExitEvent.fromMouseEvent(PointerEvent event) : this(\n    timeStamp: event?.timeStamp,\n    kind: event?.kind,"
  },
  {
    "id" : "ae264059-bd99-4d13-82c0-73e1f90c7aaf",
    "prId" : 32192,
    "prUrl" : "https://github.com/flutter/flutter/pull/32192#pullrequestreview-241470539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e1b2fad-4892-48ad-8ec1-3e4bfb42658b",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "It's not just assumed to be zero, it's set to zero (or, really, ignored and zero used instead). And why is that?  Wouldn't you want Z to also be preserved if set?",
        "createdAt" : "2019-05-10T14:50:18Z",
        "updatedAt" : "2019-05-31T20:12:18Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "4997701e-7759-4e04-aaa5-2a14f552a38b",
        "parentId" : "7e1b2fad-4892-48ad-8ec1-3e4bfb42658b",
        "authorId" : "4aacccb7-c2f8-4a9b-81c0-714c41049f7e",
        "body" : "If this function is used to convert global to local coordinates, it appears to have the some problem with out of plane rotations as the `Transform` widget which I tried to describe here https://github.com/flutter/flutter/issues/18408#issuecomment-493681361.",
        "createdAt" : "2019-05-18T19:10:13Z",
        "updatedAt" : "2019-05-31T20:12:18Z",
        "lastEditedBy" : "4aacccb7-c2f8-4a9b-81c0-714c41049f7e",
        "tags" : [
        ]
      },
      {
        "id" : "42451337-6a7a-4732-94e9-f6bb74719a98",
        "parentId" : "7e1b2fad-4892-48ad-8ec1-3e4bfb42658b",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "@gspencergoog Offsets only have an x and y value - and the z value is always assumed to be zero. The method is just explicitly documenting that.\r\n\r\n@spkersten The secret is in the transform matrix that's passed into this. We take the paint transform, set the third row and third column to (0,0,1,0) and then invert it to get a transform matrix that ignores z.",
        "createdAt" : "2019-05-23T22:32:05Z",
        "updatedAt" : "2019-05-31T20:12:18Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "2017e9ba6d7e04e47e73a55670b541697bb4049e",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +512,516 @@  /// described by `transform`.\n  ///\n  /// The z-value of `position` is assumed to be 0.0. If `transform` is null,\n  /// `position` is returned as-is.\n  static Offset transformPosition(Matrix4 transform, Offset position) {"
  },
  {
    "id" : "9ce7be6b-6503-4975-bd24-1ec025897863",
    "prId" : 32192,
    "prUrl" : "https://github.com/flutter/flutter/pull/32192#pullrequestreview-242820023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9dfea38d-e6b4-456f-bed0-5b18595c9bc1",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Looking at this, I'm wondering if there should be a `copyWith` constructor for Pointer* events, like we do for ThemeData.  Or maybe `transformPosition` should not be static, and should instead return the same PointerEvent, but with a transformed position.",
        "createdAt" : "2019-05-10T14:58:05Z",
        "updatedAt" : "2019-05-31T20:12:18Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "274cbfd6-5659-488e-aa26-15b954addf52",
        "parentId" : "9dfea38d-e6b4-456f-bed0-5b18595c9bc1",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I do not want to transform the original PointerEvent because a PointerEvent may be delivered to multiple listeners and all listeners needs the event in their local coordinate space.\r\n\r\nNot sure how the copyWith constructor would help? I would just call copyWith from here and then the copyWith constructors would contain this ugliness of copying over the values? ",
        "createdAt" : "2019-05-23T22:36:52Z",
        "updatedAt" : "2019-05-31T20:12:18Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "c6185fe1-7f67-4f88-b84a-2a3c49476731",
        "parentId" : "9dfea38d-e6b4-456f-bed0-5b18595c9bc1",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yeah, OK.",
        "createdAt" : "2019-05-28T17:37:30Z",
        "updatedAt" : "2019-05-31T20:12:18Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2017e9ba6d7e04e47e73a55670b541697bb4049e",
    "line" : 350,
    "diffHunk" : "@@ -1,1 +770,774 @@    }\n    final Offset transformedPosition = PointerEvent.transformPosition(transform, position);\n    return PointerHoverEvent(\n      timeStamp: timeStamp,\n      kind: kind,"
  },
  {
    "id" : "c4eaa3c4-92b7-43d6-a321-48a06b3606ec",
    "prId" : 32192,
    "prUrl" : "https://github.com/flutter/flutter/pull/32192#pullrequestreview-241470539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb970fcd-2dbb-4bac-8659-498dde11d4ef",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "What is this used for? (might want to document).  Also, if the event is transformed multiple times, should it be the version of the event before the first transform, or before the most recent transform?",
        "createdAt" : "2019-05-10T15:01:17Z",
        "updatedAt" : "2019-05-31T20:12:18Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "347c4303-27f5-4800-adfa-653790c47743",
        "parentId" : "bb970fcd-2dbb-4bac-8659-498dde11d4ef",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Clarified and added.",
        "createdAt" : "2019-05-23T22:40:55Z",
        "updatedAt" : "2019-05-31T20:12:18Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "2017e9ba6d7e04e47e73a55670b541697bb4049e",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +457,461 @@  /// space. The [original] property can be used to determine if all those\n  /// transformed events actually originated from the same pointer interaction.\n  final PointerEvent original;\n\n  /// Transforms the event from the global coordinate space into the coordinate"
  },
  {
    "id" : "8fc9841d-87b3-473e-bc1f-748c62fd75bd",
    "prId" : 45977,
    "prUrl" : "https://github.com/flutter/flutter/pull/45977#pullrequestreview-326313623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcd6422e-1cdc-4c45-8c52-ec284bc21a8f",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Does this not have to be `[dart:ui.PointerData]`?",
        "createdAt" : "2019-12-03T16:10:24Z",
        "updatedAt" : "2019-12-03T20:45:06Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "42fcc14c-f440-42af-adf9-82e0316ca195",
        "parentId" : "fcd6422e-1cdc-4c45-8c52-ec284bc21a8f",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I think either one would work - this works because we're importing it in this file.",
        "createdAt" : "2019-12-03T17:19:19Z",
        "updatedAt" : "2019-12-03T20:45:06Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "a38f0b11abd85b63eb6332250e886d8a32ac7fc4",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +420,424 @@  ///\n  /// We occasionally synthesize PointerEvents that aren't exact translations\n  /// of [PointerData] from the engine to cover small cross-OS discrepancies\n  /// in pointer behaviors.\n  ///"
  },
  {
    "id" : "391fec6c-5c5f-4bf2-87b2-453d21e51c47",
    "prId" : 59883,
    "prUrl" : "https://github.com/flutter/flutter/pull/59883#pullrequestreview-441158085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ee37c66-a881-405b-8aa1-1aeb917b9fd4",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why are we forcing this to null now instead of keeping the original event if available?",
        "createdAt" : "2020-06-30T21:14:22Z",
        "updatedAt" : "2020-07-06T20:06:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f08743cd-6959-4e61-afdd-e46ef8ca3697",
        "parentId" : "5ee37c66-a881-405b-8aa1-1aeb917b9fd4",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Short version: In order to prevent the type system complaining, either we set this to null, which satisfies the current definition of `original`, or we change the type of `original` in the constructor, which also changes the definition of `original`.\r\n\r\nLong version: An error will be thrown in this as-cast when converting other event types using `fromMouseEvent` (e.g. from `PointerDownEvent` to `PointerEnterEvent`). This as-cast was not here when this constructor was first created, but is reasonable since the constructor requires `original` to be `PointerEnterEvent`, which also makes sense since `original` was added for the transformed constructor to **transform between coordinate space**. So if we think it this way, this `original` should be null because `original` was not defined to suit in the type converting case.",
        "createdAt" : "2020-07-01T19:58:26Z",
        "updatedAt" : "2020-07-06T20:06:33Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a8ed4afae7a150ba57466a04ad680f20282ebf2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +909,913 @@    synthesized: event?.synthesized,\n    transform: event?.transform,\n    original: null,\n  );\n"
  },
  {
    "id" : "b96ebc1d-f4f6-457f-ba45-dc00dd487b00",
    "prId" : 60930,
    "prUrl" : "https://github.com/flutter/flutter/pull/60930#pullrequestreview-443481615",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17ea7478-f4d5-42d4-8b2d-23f3a494fd7f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe add a section about Android explaining that on Android this is the ID of the underlying MotionEvent.",
        "createdAt" : "2020-07-07T00:14:10Z",
        "updatedAt" : "2020-07-07T16:29:16Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee59f091fc4c82c8162cf8a7720b7d4c79f6738d",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +241,245 @@  ///\n  /// On Android this is ID of the underlying [MotionEvent](https://developer.android.com/reference/android/view/MotionEvent).\n  final int embedderId;\n\n  /// Time of event dispatch, relative to an arbitrary timeline."
  },
  {
    "id" : "a07b01d2-f046-4a12-bb38-1c0cf4447a93",
    "prId" : 64267,
    "prUrl" : "https://github.com/flutter/flutter/pull/64267#pullrequestreview-482215505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f65451f3-c4dd-4a5e-b35f-a90ffff2b13f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Unsure whether styles is more a mouse or touch device...",
        "createdAt" : "2020-08-24T17:54:36Z",
        "updatedAt" : "2020-09-08T20:59:36Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "7b91eac5-980e-4e18-8d0d-bbf3431696a7",
        "parentId" : "f65451f3-c4dd-4a5e-b35f-a90ffff2b13f",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "yeah, I have no idea really. The only stylus I've ever used was the one that came with the Nintendo DS. In that case, it was more of a precision assist for the existing touch screen. I could imagine for a stylus like that it would not be disambiguated from a touch event.",
        "createdAt" : "2020-08-24T17:56:06Z",
        "updatedAt" : "2020-09-08T20:59:36Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "d9020015-ddd8-4059-bb27-e7559c567977",
        "parentId" : "f65451f3-c4dd-4a5e-b35f-a90ffff2b13f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "lol, I see you asked the same question above...",
        "createdAt" : "2020-08-24T17:56:11Z",
        "updatedAt" : "2020-09-08T20:59:36Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "a0606e82-4fbe-4869-9c46-7db371175036",
        "parentId" : "f65451f3-c4dd-4a5e-b35f-a90ffff2b13f",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "And people often use stylii in place of mice when they use it on a drawing surface. I think of stylii as being much more precise than touch, so I'd go with the more precise slop on them.",
        "createdAt" : "2020-09-03T20:52:52Z",
        "updatedAt" : "2020-09-08T20:59:36Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "80194bb6-6015-4a6b-b4e2-9a11a7f8f476",
        "parentId" : "f65451f3-c4dd-4a5e-b35f-a90ffff2b13f",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Good to know!",
        "createdAt" : "2020-09-03T21:28:20Z",
        "updatedAt" : "2020-09-08T20:59:36Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9eb9f869ba1fa2c57428b5947cbbb2e742d58ed",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2229,2233 @@  switch (kind) {\n    case PointerDeviceKind.mouse:\n    case PointerDeviceKind.stylus:\n    case PointerDeviceKind.invertedStylus:\n      return kPrecisePointerHitSlop;"
  },
  {
    "id" : "30b7cd82-6591-4061-b4a4-68b8300ec58c",
    "prId" : 87604,
    "prUrl" : "https://github.com/flutter/flutter/pull/87604#pullrequestreview-725627645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a11eabd3-4f80-4240-8ed5-2bf7dee09fe8",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "What about the scaleSlop below?",
        "createdAt" : "2021-08-06T18:34:58Z",
        "updatedAt" : "2021-08-06T22:46:50Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "621b1cc9-c371-462e-a182-0373afd0050f",
        "parentId" : "a11eabd3-4f80-4240-8ed5-2bf7dee09fe8",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I'm not quite sure what to do with the scale slop right now. ",
        "createdAt" : "2021-08-09T17:19:48Z",
        "updatedAt" : "2021-08-09T17:19:49Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cafdeafb91c483d580106c68d65da618d880dec",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +2125,2129 @@  }\n}\n\n/// Determine the appropriate scale slop pixels based on the [kind] of pointer.\ndouble computeScaleSlop(PointerDeviceKind kind) {"
  }
]