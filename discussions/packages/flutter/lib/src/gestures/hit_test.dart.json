[
  {
    "id" : "7b443c28-cd91-4650-b73d-5ec16fb64911",
    "prId" : 3459,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c89f9ffa-d4cd-42a6-b892-17b5c03f1dfa",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "In Blink, we called this class an EventDispatcher.\n",
        "createdAt" : "2016-04-22T02:15:38Z",
        "updatedAt" : "2016-04-22T02:15:38Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "10b56150-0624-4f14-bad8-e4498199b13c",
        "parentId" : "c89f9ffa-d4cd-42a6-b892-17b5c03f1dfa",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, that was my original name here too. I renamed it to this so that it was more consistent with the other related interfaces. (HitTestTarget would be EventTarget by Web standards too.)\n",
        "createdAt" : "2016-04-22T02:42:25Z",
        "updatedAt" : "2016-04-22T02:42:25Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d87ae9b247ecc38e7de05bdc3116544ab4c3fd2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +11,15 @@\n/// An object that can dispatch events.\nabstract class HitTestDispatcher { // ignore: one_member_abstracts\n  /// Override this function to dispatch events.\n  void dispatchEvent(PointerEvent event, HitTestResult result);"
  },
  {
    "id" : "a5059fde-e657-46fd-b6fd-0d8b49c0ad15",
    "prId" : 4482,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ac80e2b-06d5-48d1-b26d-ee8deffd654f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "is there any reason to expose it at all?\n",
        "createdAt" : "2016-06-09T03:39:40Z",
        "updatedAt" : "2016-06-09T03:39:40Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "cc9b3355-2cff-444e-8024-d4ee0c0b9e44",
        "parentId" : "7ac80e2b-06d5-48d1-b26d-ee8deffd654f",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It's used by the testing harness to do non-trivial things.  We could expose an iterator instead, but there's no reason not to allow random access.\n",
        "createdAt" : "2016-06-09T03:47:54Z",
        "updatedAt" : "2016-06-09T03:47:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfe24877c69726754ad94f9d74dd28309cf1b399",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +55,59 @@  /// the leaf of tree being hit tested. Event propagation starts with the most\n  /// specific (i.e., first) entry and proceeds in order through the path.\n  List<HitTestEntry> get path => new List<HitTestEntry>.unmodifiable(_path);\n  final List<HitTestEntry> _path;\n"
  },
  {
    "id" : "34cf10b6-466d-4dc6-82a1-c29fa2c9f628",
    "prId" : 31894,
    "prUrl" : "https://github.com/flutter/flutter/pull/31894#pullrequestreview-232812840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2fff41f-2e2b-4573-900a-ce238b889ff1",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "`proxy` maybe? Not sure how to make it obvious that the data storage is shared",
        "createdAt" : "2019-05-02T00:37:04Z",
        "updatedAt" : "2019-05-06T08:19:16Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "daca539f-2278-4f54-ba14-31fb6bdd2ba4",
        "parentId" : "f2fff41f-2e2b-4573-900a-ce238b889ff1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "`wrap` is fine",
        "createdAt" : "2019-05-02T00:38:32Z",
        "updatedAt" : "2019-05-06T08:19:16Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a311c0715d9cb2628be5846188a2643e9d1c8379",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +64,68 @@  /// added to the wrapped `result` (both share the same underlying data\n  /// structure to store [HitTestEntry]s).\n  HitTestResult.wrap(HitTestResult result) : _path = result._path;\n\n  /// An unmodifiable list of [HitTestEntry] objects recorded during the hit test."
  },
  {
    "id" : "caef2fcc-f158-419e-8caa-5bcc891a5b0d",
    "prId" : 59883,
    "prUrl" : "https://github.com/flutter/flutter/pull/59883#pullrequestreview-440390735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "375ff5e6-58d4-4013-baac-00d2366ffdcd",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Does this work when using 3D transforms? @goderbauer did some work to make sure that our hit tests worked with surfaces that weren't screen aligned (I'm thinking of https://github.com/flutter/flutter/pull/32192, but there may be others), and I want to make sure this doesn't reintroduce that issue.",
        "createdAt" : "2020-06-27T00:50:43Z",
        "updatedAt" : "2020-07-06T20:06:33Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "b38526f1-fa8b-454f-86a7-9b7e693cb177",
        "parentId" : "375ff5e6-58d4-4013-baac-00d2366ffdcd",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "I would assume these cases have been added to unit tests, which this PR do not break any of. Let me know there is anything else that needs manual testing or needs to be added to unit tests.",
        "createdAt" : "2020-06-29T23:29:08Z",
        "updatedAt" : "2020-07-06T20:06:33Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "4cb9914b-ef16-44e4-a93e-e8e1342397c0",
        "parentId" : "375ff5e6-58d4-4013-baac-00d2366ffdcd",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This should continue to work fine even for 3D transforms, as far as I can tell.",
        "createdAt" : "2020-06-30T21:38:00Z",
        "updatedAt" : "2020-07-06T20:06:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a8ed4afae7a150ba57466a04ad680f20282ebf2",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +252,256 @@  ///    around this function for hit testing on [RenderSliver]s.\n  @protected\n  void pushOffset(Offset offset) {\n    assert(offset != null);\n    _localTransforms.add(_OffsetTransformPart(offset));"
  },
  {
    "id" : "cfb9fdf2-540d-45ad-8742-4a58d6195986",
    "prId" : 59883,
    "prUrl" : "https://github.com/flutter/flutter/pull/59883#pullrequestreview-441246695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19e1e277-3240-469f-a166-02727ae0d7b7",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This assert is a little odd. Why do we assert after removing that there's still something in _transforms? Shouldn't we assert before?",
        "createdAt" : "2020-07-01T22:45:12Z",
        "updatedAt" : "2020-07-06T20:06:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "6aad870d-a3cc-44cd-8be6-4cf8bab326a3",
        "parentId" : "19e1e277-3240-469f-a166-02727ae0d7b7",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "The `_transforms` should never be empty, because there should at least be the pre-seeded identity matrix.\r\n\r\nOf course it shouldn't be empty before the operation either, but that would be detected by `removeLast` anyway.",
        "createdAt" : "2020-07-01T22:58:27Z",
        "updatedAt" : "2020-07-06T20:06:33Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a8ed4afae7a150ba57466a04ad680f20282ebf2",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +276,280 @@    else\n      _transforms.removeLast();\n    assert(_transforms.isNotEmpty);\n  }\n"
  }
]