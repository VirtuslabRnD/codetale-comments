[
  {
    "id" : "8bec2005-8f23-4e11-8eb9-b2f4e7df506f",
    "prId" : 1611,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ff96ecf-23d0-4563-9ff1-fda82dde9d71",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Maybe add a comment explaining why you'd use this rather than CurvedAnimation.\n",
        "createdAt" : "2016-02-04T22:05:35Z",
        "updatedAt" : "2016-02-05T03:51:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "29d1d2eee44f017aebb5716a056406bac8b21418",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +121,125 @@}\n\n/// Transforms the value of the given animation by the given curve.\n///\n/// This class differs from [CurvedAnimation] in that [CurvedAnimation] applies"
  },
  {
    "id" : "c96fe51c-0014-466b-b631-4b1a38b6511e",
    "prId" : 2780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f4441ea-cd1d-4d92-83b6-e77573c292f8",
        "parentId" : null,
        "authorId" : "0247a40a-bc0a-4493-a4c2-035547be3e1b",
        "body" : "This is missing the most important part - initialize the Tween with the desired range.\n\nAlso, it's common to use a specific Tween (like ColorTween) instead of using the unspecialized Tween class.\n",
        "createdAt" : "2016-03-21T23:07:29Z",
        "updatedAt" : "2016-03-21T23:07:29Z",
        "lastEditedBy" : "0247a40a-bc0a-4493-a4c2-035547be3e1b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbd0aa5bd3812ede6b010ecd61915911bf565160",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +59,63 @@/// [Tween] is useful if you want to interpolate across a range.\n///\n/// To use a [Tween] object with an animation, call the [Tween] object's `animate()` method and\n/// pass it the [Animation] object that you want to modify.\n///"
  },
  {
    "id" : "935cdf90-5bc6-43e8-885a-7586ab720fe7",
    "prId" : 2780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef0fd2ac-ab22-4637-9ad4-4df32496ca27",
        "parentId" : null,
        "authorId" : "0247a40a-bc0a-4493-a4c2-035547be3e1b",
        "body" : "I think you took this from my docs, but the paraphrasing is missing the important point. An interpolation of double should (seemingly) always return begin for 0.0 and end for 1.0. However, it's a base 2 floating point operation, which means that some numbers will be approximately calculated. By returning the begin and end variables as a guarantee, it simplifies the contract with the caller.\n",
        "createdAt" : "2016-03-21T23:11:18Z",
        "updatedAt" : "2016-03-21T23:11:18Z",
        "lastEditedBy" : "0247a40a-bc0a-4493-a4c2-035547be3e1b",
        "tags" : [
        ]
      },
      {
        "id" : "ae31490f-590b-45c5-b3d9-41bb3a223f8d",
        "parentId" : "ef0fd2ac-ab22-4637-9ad4-4df32496ca27",
        "authorId" : "0247a40a-bc0a-4493-a4c2-035547be3e1b",
        "body" : "Also, note that 0.0 and 1.0 should be lowerBound and upperBound, respectively (which are, by default, 0.0 and 1.0). I just saw this in the source code and it was incorrect in the original doc.\n",
        "createdAt" : "2016-03-21T23:16:24Z",
        "updatedAt" : "2016-03-21T23:16:24Z",
        "lastEditedBy" : "0247a40a-bc0a-4493-a4c2-035547be3e1b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbd0aa5bd3812ede6b010ecd61915911bf565160",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +80,84 @@  /// Returns the interpolated value for the current value of the given animation.\n  ///\n  /// This method returns `begin` and `end` when the animation values are 0.0 or 1.0, respectively.\n  @override\n  T evaluate(Animation<double> animation) {"
  },
  {
    "id" : "bdd1165e-d3d8-4ea0-be24-ec7a465bb2b3",
    "prId" : 45977,
    "prUrl" : "https://github.com/flutter/flutter/pull/45977#pullrequestreview-326256559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "255c0ca5-0a19-4a16-bdf1-ea9e2cb9619a",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Good catch 🙁 ",
        "createdAt" : "2019-12-03T16:04:23Z",
        "updatedAt" : "2019-12-03T20:45:06Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a38f0b11abd85b63eb6332250e886d8a32ac7fc4",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +402,406 @@\n  @override\n  String toString() => '$runtimeType(value: $begin)';\n}\n"
  },
  {
    "id" : "c3d05033-8b1b-4433-8d7a-76d6f0ec5b34",
    "prId" : 74684,
    "prUrl" : "https://github.com/flutter/flutter/pull/74684#pullrequestreview-576760705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d467c834-6fa3-4b1a-835c-a118605f586c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe `T == Color` ?",
        "createdAt" : "2021-01-26T00:07:32Z",
        "updatedAt" : "2021-01-26T19:32:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "9d967c3d-0dd4-4c91-b5d8-2c5c25ad51b3",
        "parentId" : "d467c834-6fa3-4b1a-835c-a118605f586c",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "we'd have to check `Color`/`MaterialColor` and others, whereas the `is` check will keep working with subtypes.",
        "createdAt" : "2021-01-26T01:16:16Z",
        "updatedAt" : "2021-01-26T19:32:17Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "6ab224b9-2892-4d6c-8fa6-c69161d0548d",
        "parentId" : "d467c834-6fa3-4b1a-835c-a118605f586c",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "also I think the tween could be instantiated as `dynamic` and still used to tween a color.",
        "createdAt" : "2021-01-26T01:48:51Z",
        "updatedAt" : "2021-01-26T19:32:17Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "010ce954-fb66-429c-aad8-0e74faf7a6ce",
        "parentId" : "d467c834-6fa3-4b1a-835c-a118605f586c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ah good call",
        "createdAt" : "2021-01-26T21:05:59Z",
        "updatedAt" : "2021-01-26T21:05:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b9f74693231acb02958595f52617d5ebfc7fce",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +273,277 @@            'for more information.',\n          ),\n          if (begin is Color || end is Color)\n            ErrorHint('To lerp colors, consider ColorTween instead.')\n          else if (begin is Rect || end is Rect)"
  },
  {
    "id" : "217e5351-9290-4c39-b01e-bc2f59902839",
    "prId" : 74684,
    "prUrl" : "https://github.com/flutter/flutter/pull/74684#pullrequestreview-575908197",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83a3244a-1ca4-4564-9166-1718186be6ca",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe `T == int` ?",
        "createdAt" : "2021-01-26T00:07:41Z",
        "updatedAt" : "2021-01-26T19:32:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b9f74693231acb02958595f52617d5ebfc7fce",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +292,296 @@            'for more information.',\n          ),\n          if (begin is int || end is int)\n            ErrorHint('To lerp int values, consider IntTween or StepTween instead.')\n          else"
  },
  {
    "id" : "581b4b13-369d-4128-a618-a62acc1e67c7",
    "prId" : 85412,
    "prUrl" : "https://github.com/flutter/flutter/pull/85412#pullrequestreview-694256422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e4e3fad-3cf4-42fc-aa98-701ec3fab238",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "How would I refer to operator+? Just use `[T.operator+]`? Or is it just not possible in dartdoc, because it doesn't know what T is?",
        "createdAt" : "2021-06-28T17:38:50Z",
        "updatedAt" : "2021-06-28T17:47:06Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "8c716566-4338-4929-89a0-76be4479a940",
        "parentId" : "4e4e3fad-3cf4-42fc-aa98-701ec3fab238",
        "authorId" : "48f1352d-88f2-485f-a06d-eadbf95bd625",
        "body" : "Yes, we don't currently use our knowledge of what T is.  We could add this feature later if we decide we really like it -- dartdoc does have enough data to figure this out.  Though in this case, since T is defined as \"extending Object?\" it won't have an operator+.",
        "createdAt" : "2021-06-28T18:13:05Z",
        "updatedAt" : "2021-06-28T18:20:07Z",
        "lastEditedBy" : "48f1352d-88f2-485f-a06d-eadbf95bd625",
        "tags" : [
        ]
      }
    ],
    "commit" : "399a18b9bebf107e85dfffdfd99d9cb1c65373a9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +247,251 @@  /// Returns the value this variable has at the given animation clock value.\n  ///\n  /// The default implementation of this method uses the `+`, `-`, and `*`\n  /// operators on `T`. The [begin] and [end] properties must therefore be\n  /// non-null by the time this method is called."
  }
]