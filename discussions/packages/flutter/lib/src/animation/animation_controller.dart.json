[
  {
    "id" : "20f200f8-7867-4c15-8ebf-f1367900ad24",
    "prId" : 1611,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "255b5514-4935-4641-9ba3-a0b1fe346dd0",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Maybe include details about what 'value' is, why 'debugLabel' might be useful (it's included in various toStrings), how to use lowerBound and upperBound, whether those have to be ordered (is upper<lower ok?).\n",
        "createdAt" : "2016-02-04T21:43:31Z",
        "updatedAt" : "2016-02-05T03:51:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "29d1d2eee44f017aebb5716a056406bac8b21418",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +23,27 @@  with EagerListenerMixin, LocalListenersMixin, LocalAnimationStatusListenersMixin {\n\n  /// Creates an animation controller.\n  ///\n  /// * value is the initial value of the animation."
  },
  {
    "id" : "d4a6e410-73c6-4b03-bf62-9406d9e4a7ed",
    "prId" : 1611,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dc11f84-7b9b-4857-b006-238e51bfc061",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "on line 62: `Returns a [Animated<double>]` -> an\n",
        "createdAt" : "2016-02-04T21:44:09Z",
        "updatedAt" : "2016-02-05T03:51:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "29d1d2eee44f017aebb5716a056406bac8b21418",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +83,87 @@  AnimationDirection _direction = AnimationDirection.forward;\n\n  Ticker _ticker;\n  Simulation _simulation;\n"
  },
  {
    "id" : "08f7d985-50c7-4f1c-a78c-838f7b8d326a",
    "prId" : 2780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a1b6412-0872-4314-91f5-f621cc5a0843",
        "parentId" : null,
        "authorId" : "0247a40a-bc0a-4493-a4c2-035547be3e1b",
        "body" : "The `lowerBound` and `upperBound` properties are an alternative to creating a Tween. The properties are most commonly used with simulations with the `fling()` function.\n\nIn general, using upperBound and lowerBound shouldn't be mixed with Tweens.\n",
        "createdAt" : "2016-03-21T23:26:42Z",
        "updatedAt" : "2016-03-21T23:26:42Z",
        "lastEditedBy" : "0247a40a-bc0a-4493-a4c2-035547be3e1b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbd0aa5bd3812ede6b010ecd61915911bf565160",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +29,33 @@/// * Play an animation [forward] or in [reverse], or [stop] an animation.\n/// * Set the animation to a specific [value].\n/// * Define the [upperBound] and [lowerBound] values of an animation.\n/// * Create a [fling] animation effect using a physics simulation.\n///"
  },
  {
    "id" : "5198aad6-517e-4821-be1e-7826e7cf27bc",
    "prId" : 5902,
    "prUrl" : "https://github.com/flutter/flutter/pull/5902#pullrequestreview-797619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d82a924-b2a8-4534-9aa3-5700bf355aef",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Does the base class not have `@mustCallSuper`?  If not, should we introduce it here?\n",
        "createdAt" : "2016-09-20T04:44:08Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "717e6da0-d5eb-4e62-9902-dce4d03f9d85",
        "parentId" : "4d82a924-b2a8-4534-9aa3-5700bf355aef",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "It's complicated. The base class is actually a mixin. I tried adding @mustCallSuper the other day but it ends up being a bit of a mess, iirc.\n",
        "createdAt" : "2016-09-20T17:24:09Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "28b5a879-5268-494c-926e-8dce355644b2",
        "parentId" : "4d82a924-b2a8-4534-9aa3-5700bf355aef",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Oh, looks like I cleaned the mess up, too, and we do have it now. La la la.\n",
        "createdAt" : "2016-09-20T17:24:40Z",
        "updatedAt" : "2016-09-26T17:19:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "57b9f88bf58da56769af22de167f61deb943ec3c",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +274,278 @@  void dispose() {\n    _ticker.dispose();\n    super.dispose();\n  }\n"
  },
  {
    "id" : "73f4113b-0234-4e64-bf8c-ad2ed97c0470",
    "prId" : 5947,
    "prUrl" : "https://github.com/flutter/flutter/pull/5947#pullrequestreview-1112829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b79ebdb-cd98-4347-bcac-edf44611f120",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We usually have a blank line between the one-line summary and the details, so:\n\n```\n/// Starts running this animation forwards (towards the end).\n///\n/// Returns a [Future] that completes when the animation is complete.\n```\n",
        "createdAt" : "2016-09-22T03:49:34Z",
        "updatedAt" : "2016-09-22T10:21:24Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "5ead1955-4e8e-4b04-b2e5-683f48d75e93",
        "parentId" : "7b79ebdb-cd98-4347-bcac-edf44611f120",
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "Done.\n",
        "createdAt" : "2016-09-22T10:07:26Z",
        "updatedAt" : "2016-09-22T10:21:24Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "33f20ea629a0b136d54fd6b1edec4830ef92e51e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +156,160 @@  /// Starts running this animation forwards (towards the end).\n  ///\n  /// Returns a [Future] that completes when the animation is complete.\n  Future<Null> forward({ double from }) {\n    _direction = _AnimationDirection.forward;"
  },
  {
    "id" : "9fa05f5b-ada4-4aeb-b594-734a3bc03f69",
    "prId" : 7526,
    "prUrl" : "https://github.com/flutter/flutter/pull/7526#pullrequestreview-17350154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fba8c2b3-9eb6-462b-af32-46de69a0d13b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Can you make the toString resilient against a null _ticker? (e.g. notice that and add DISPOSED to the details, and don't show info about the ticker)",
        "createdAt" : "2017-01-18T23:13:44Z",
        "updatedAt" : "2017-01-19T00:09:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7c1b51f75a2692e8933b27522b9fa64a9c8609",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +359,363 @@    });\n    _ticker.dispose();\n    _ticker = null;\n    super.dispose();\n  }"
  }
]