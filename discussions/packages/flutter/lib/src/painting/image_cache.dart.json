[
  {
    "id" : "d8865a55-a807-4c5c-a6fa-5c784464f87d",
    "prId" : 18135,
    "prUrl" : "https://github.com/flutter/flutter/pull/18135#pullrequestreview-125767875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8af8bea1-4508-463e-b93b-9191356f9d53",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "~~Maybe call this length, for consistency with Map?~~",
        "createdAt" : "2018-06-04T22:43:53Z",
        "updatedAt" : "2018-06-08T01:36:43Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2ae25414-37da-43c0-926d-7225987efd9a",
        "parentId" : "8af8bea1-4508-463e-b93b-9191356f9d53",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "oh but then you lose the symmetry with maximumSize.\r\nSo yeah, I'd keep this as you have it.",
        "createdAt" : "2018-06-04T22:45:17Z",
        "updatedAt" : "2018-06-08T01:36:43Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bb4d981104f41656b0d478c8a13cf1aa1a946c3",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +57,61 @@\n  /// The current number of cached entries.\n  int get currentSize => _cache.length;\n\n  /// Maximum size of entries to store in the cache in bytes."
  },
  {
    "id" : "f76af1ff-6587-4f22-996c-3f75ebb0039e",
    "prId" : 18135,
    "prUrl" : "https://github.com/flutter/flutter/pull/18135#pullrequestreview-125792424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6db185b-dd2e-46eb-a2a2-9a35c3c36e69",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "You don't seem to actually use this map.",
        "createdAt" : "2018-06-04T22:52:15Z",
        "updatedAt" : "2018-06-08T01:36:43Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e342d6eb-0515-49bd-b2d0-867a18e5f699",
        "parentId" : "d6db185b-dd2e-46eb-a2a2-9a35c3c36e69",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Fixed - should be used for de-duping multiple requests for the same image key",
        "createdAt" : "2018-06-05T01:19:44Z",
        "updatedAt" : "2018-06-08T01:36:43Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bb4d981104f41656b0d478c8a13cf1aa1a946c3",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +27,31 @@/// subclasses automatically handle the caching of images.\nclass ImageCache {\n  final Map<Object, ImageStreamCompleter> _pendingImages = <Object, ImageStreamCompleter>{};\n  final Map<Object, _CachedImage> _cache = <Object, _CachedImage>{};\n"
  },
  {
    "id" : "c961a580-4c3f-4560-89db-22c34a3dddec",
    "prId" : 23860,
    "prUrl" : "https://github.com/flutter/flutter/pull/23860#pullrequestreview-172102689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0eae5dca-2800-4fff-9f37-088dacf709a8",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Two questions:\r\n\r\n- Does the returned value still make sense if I evict an image that has failed to load? Currently, evict will return false and the image will not be removed from pending images. With this change, it will be removed at still return false.\r\n\r\n- Removing an image from pending won't prevent it from adding itself to the cache later if it eventually completes. Should this also remove the cache listener to prevent this from happening, or is it a desirable behavior?\r\n",
        "createdAt" : "2018-11-06T07:19:04Z",
        "updatedAt" : "2019-01-07T07:04:57Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "8d89d4cd-7967-4c25-8809-f13fa99102ae",
        "parentId" : "0eae5dca-2800-4fff-9f37-088dacf709a8",
        "authorId" : "b70035f0-e3cc-47e9-8cfa-1e6bed955871",
        "body" : "* I think the behavior of the evict method should be as follows:\r\n  When the image is in the cache the behavior should be as it is now.\r\n  When the image is not in the cache but in the pending images it should be removed from the pending images and `true` should be returned.\r\n  The cache size should only be adjusted when the image is in the cache (because pending images do not have an effect on the cache size).\r\n  I think to return `true` when the image is still pending is completely fine because the user of the cache does maybe not know if the image is already loaded or not, he only wants it to be removed from it.\r\n  \r\n* In my opinion it would not be correct when the image can add itself to the cache after it is evicted from it. This could lead to unexpected behavior.\r\n  So yes, removing the listener would probably be the right choice.\r\n  For that the inner function `listener` must be moved to class-level. But if it would be private I think there should not be any implications.\r\n  \r\nIf you agree I can make the changes.",
        "createdAt" : "2018-11-06T09:39:29Z",
        "updatedAt" : "2019-01-07T07:04:57Z",
        "lastEditedBy" : "b70035f0-e3cc-47e9-8cfa-1e6bed955871",
        "tags" : [
        ]
      },
      {
        "id" : "0bf5827c-9271-41f8-bf01-ef57f97914eb",
        "parentId" : "0eae5dca-2800-4fff-9f37-088dacf709a8",
        "authorId" : "b70035f0-e3cc-47e9-8cfa-1e6bed955871",
        "body" : "Minor addition: It's not possible with moving the `listener` method to class-level. I solved it with another approach: I introduced a _PendingImage class that holds the completer and a reference to the `listener `method (used for later removal in the evict-case).",
        "createdAt" : "2018-11-06T10:36:46Z",
        "updatedAt" : "2019-01-07T07:04:57Z",
        "lastEditedBy" : "b70035f0-e3cc-47e9-8cfa-1e6bed955871",
        "tags" : [
        ]
      },
      {
        "id" : "3053a6dc-d781-4382-b6c2-f11655279669",
        "parentId" : "0eae5dca-2800-4fff-9f37-088dacf709a8",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "That sounds like a reasonable approach",
        "createdAt" : "2018-11-06T16:16:44Z",
        "updatedAt" : "2019-01-07T07:04:57Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f7304b2c4907ccc3c60b04874b1424fe622e35",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +116,120 @@  ///\n  ///  * [ImageProvider], for providing images to the [Image] widget.\n  bool evict(Object key) {\n    final _PendingImage pendingImage = _pendingImages.remove(key);\n    if (pendingImage != null) {"
  },
  {
    "id" : "a2cd822e-7b11-46c7-a3d8-31521025d232",
    "prId" : 32936,
    "prUrl" : "https://github.com/flutter/flutter/pull/32936#pullrequestreview-239178331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cb99979-bca6-45ac-9353-54f1bf0397a6",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "no matching removal?",
        "createdAt" : "2019-05-17T23:40:01Z",
        "updatedAt" : "2019-05-20T23:42:56Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "76166c58-bd21-4393-9c87-4025aed05842",
        "parentId" : "8cb99979-bca6-45ac-9353-54f1bf0397a6",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "The removal is done inside `_PendingImage`.",
        "createdAt" : "2019-05-18T01:17:25Z",
        "updatedAt" : "2019-05-20T23:42:56Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "40da9f5f31b1ea8e7a712429141be617d9eba13d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +187,191 @@      _pendingImages[key] = _PendingImage(result, streamListener);\n      // Listener is removed in [_PendingImage.removeListener].\n      result.addListener(streamListener);\n    }\n    return result;"
  },
  {
    "id" : "0138872a-6741-4c77-a88a-e72ef1d7f4ba",
    "prId" : 46010,
    "prUrl" : "https://github.com/flutter/flutter/pull/46010#pullrequestreview-326494343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ace0d228-f06f-489f-8d01-c570c9eba123",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This needs a docstring.\r\n\r\nI'm not sure if this is entirely clear on how it will be used. Do we normally expect this to mutate the cache parameters (e.g. raise the `maxSizeBytes`)?  Are there gotchas that we need to guard against here (e.g. someone calls `putIfAbsent` in this callback until a `StackOverflowError` occurs, or mutates state in some other unexpected way)?\r\n\r\nI wonder if this could return a type instead of just mutating the cache.  Someone could get a hold of the cache in this method, but we could document it as saying you should avoid doing that and instead just fill out the information on the type (such as `newMaxSizeInBytes`).  Or at the very least, if there's just some way we can steer users towards the correct/performant behavior.",
        "createdAt" : "2019-12-03T21:03:35Z",
        "updatedAt" : "2019-12-05T00:25:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "0b5a7638-b319-4c2f-8e25-74fcd00a821d",
        "parentId" : "ace0d228-f06f-489f-8d01-c570c9eba123",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "> This needs a docstring.\r\n> \r\nDocstrings aren't required on typedefs.  I think the questions you raise are better suited on the documentation for the field.\r\n\r\n> I'm not sure if this is entirely clear on how it will be used. Do we normally expect this to mutate the cache parameters (e.g. raise the `maxSizeBytes`)?\r\n\r\nI've reworded the docstring to address this.\r\n\r\n> Are there gotchas that we need to guard against here (e.g. someone calls `putIfAbsent` in this callback until a `StackOverflowError` occurs, or mutates state in some other unexpected way)?\r\n\r\nAll callbacks have the potential for infinite recursion but we don't document them like that.\r\n\r\n> I wonder if this could return a type instead of just mutating the cache. Someone could get a hold of the cache in this method, but we could document it as saying you should avoid doing that and instead just fill out the information on the type (such as `newMaxSizeInBytes`). Or at the very least, if there's just some way we can steer users towards the correct/performant behavior.\r\n\r\nWe could make the function return a new maximumByteSize.  I wonder if that nudges users to think they should resize it.",
        "createdAt" : "2019-12-03T21:58:11Z",
        "updatedAt" : "2019-12-05T00:25:33Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "edc3e9f4-f7c9-441b-8182-f372df7fe7ef",
        "parentId" : "ace0d228-f06f-489f-8d01-c570c9eba123",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "If it's a public type it really should have a docstring - it doesn't have to be complicated (see e.g. https://api.flutter.dev/flutter/dart-ui/VoidCallback.html or https://api.flutter.dev/flutter/dart-ui/FrameCallback.html). \r\n\r\nI'm not sure returning an int would be enough if the user wants to resize and try with the resized image though.  I'm thinking something that gives them enough info to say how many bytes are left in the cache, which they could then use to calculate a reasonable size of the image to resize to - or maybe some combination of increasing cache size + downsizing image",
        "createdAt" : "2019-12-03T22:02:55Z",
        "updatedAt" : "2019-12-05T00:25:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "ce7ac929-ab9d-49fa-9020-92f3db02c76d",
        "parentId" : "ace0d228-f06f-489f-8d01-c570c9eba123",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "> If it's a public type it really should have a docstring\r\n\r\nDone.",
        "createdAt" : "2019-12-03T22:13:39Z",
        "updatedAt" : "2019-12-05T00:25:33Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "26bccf89-c8dd-4b97-a2c3-4c3a48fcd345",
        "parentId" : "ace0d228-f06f-489f-8d01-c570c9eba123",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "> I'm not sure returning an int would be enough if the user wants to resize and try with the resized image though. I'm thinking something that gives them enough info to say how many bytes are left in the cache, which they could then use to calculate a reasonable size of the image to resize to - or maybe some combination of increasing cache size + downsizing image\r\n\r\nThat's not going to be possible to retry with another image the way this whole thing is plumbed.  The caching of images is hooked onto the successful loading of images, we can't stop or change the loading of the successful image.  I think it's a good idea but it is non-trivial and not one of the 2 use cases we had to accommodate.\r\n",
        "createdAt" : "2019-12-03T22:32:02Z",
        "updatedAt" : "2019-12-05T00:25:33Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcac3018aaf5f42d483185fb07f93e97a04fa431",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +9,13 @@\n/// Function used by [ImageCache.largeImageHandler].\ntypedef LargeImageHandler = void Function(ImageCache, int);\n\n/// Class for caching images."
  },
  {
    "id" : "6d08a800-8f21-4b0e-b3e1-be9ba3b8038f",
    "prId" : 46010,
    "prUrl" : "https://github.com/flutter/flutter/pull/46010#pullrequestreview-326477839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20631556-8981-4f8c-9fcd-d03b2adce14e",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I think this should throw - but I also wonder if we could just restructure the signature of `handler` so that we never get here.\r\n\r\nIOW, if we can make the Handler responsible for returning the thing we cache, we could give people the opportunity to either bump up the cache size or to resize the image to something that can be more reasonably cached.",
        "createdAt" : "2019-12-03T21:16:39Z",
        "updatedAt" : "2019-12-05T00:25:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "c54cc192-1694-4c04-b61f-8cf6cc93b909",
        "parentId" : "20631556-8981-4f8c-9fcd-d03b2adce14e",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "This isn't an exception.  If you hit this, it is the user's choice to disallow the caching of the image.",
        "createdAt" : "2019-12-03T22:00:09Z",
        "updatedAt" : "2019-12-05T00:25:33Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcac3018aaf5f42d483185fb07f93e97a04fa431",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +202,206 @@        if (_isImageTooLarge(imageSize)) {\n          // Abort insertion of image, it doesn't fit.\n          return;\n        }\n      }"
  },
  {
    "id" : "0c548f48-ceab-466f-a0ac-498b0a0c3b1d",
    "prId" : 47467,
    "prUrl" : "https://github.com/flutter/flutter/pull/47467#pullrequestreview-334923352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff022831-7b1e-4b8b-a8d9-719488a10f85",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: Maybe instead of having an example method with a strange print just have a comment in this class stating that this is were you implement your custom cache?",
        "createdAt" : "2019-12-19T18:06:36Z",
        "updatedAt" : "2019-12-20T00:06:27Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f0ea26da-0f14-428e-aace-bf76a342b7d3",
        "parentId" : "ff022831-7b1e-4b8b-a8d9-719488a10f85",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "I placed an example override at the request of Dan.  His point was that it makes MyImageCache more noticeable and the overriding of behavior explicit.",
        "createdAt" : "2019-12-19T18:56:45Z",
        "updatedAt" : "2019-12-20T00:06:27Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "f90caa4a-29a7-48c9-8d4e-5ee6a654b19f",
        "parentId" : "ff022831-7b1e-4b8b-a8d9-719488a10f85",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I see. It may make sense to still have a comment in this class telling people that this is the place where they can do their custom image caching.",
        "createdAt" : "2019-12-19T20:51:20Z",
        "updatedAt" : "2019-12-20T00:06:27Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "0069bd204161666ee7d68ae12d1fff4eeca8fe6d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +41,45 @@///   @override\n///   void clear() {\n///     print(\"Clearing cache!\");\n///     super.clear();\n///   }"
  }
]