[
  {
    "id" : "dbea16ce-5ecd-4f1c-9686-e6aaf3aa18b3",
    "prId" : 451,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89edfc5a-87b3-4424-8d9b-36b36a6d6dfe",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Ditto spreadRadius\n",
        "createdAt" : "2015-11-18T00:33:31Z",
        "updatedAt" : "2015-11-18T16:00:23Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9153a13c6a2e1015e03b51172c5e11685cd951e",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +343,347 @@    value = 37 * value + color.hashCode;\n    value = 37 * value + offset.hashCode;\n    value = 37 * value + blurRadius.hashCode;\n    value = 37 * value + spreadRadius.hashCode;\n    return value;"
  },
  {
    "id" : "47f11bea-1f64-4f98-a5c0-4b25dc3b72d9",
    "prId" : 451,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cabff66-8af6-49bb-ae58-82e23b63f1b8",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It would be slightly cheaper to cache these mask filters somewhere static (e.g., in shadows.dart), but this is fine for now.\n",
        "createdAt" : "2015-11-18T00:34:57Z",
        "updatedAt" : "2015-11-18T16:00:23Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "3a605539-1d83-4bfa-b368-6027cfffb17b",
        "parentId" : "5cabff66-8af6-49bb-ae58-82e23b63f1b8",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I tried a simple approach to caching Paint values. The cache grows and grows because of the interpolated offset, blurRadius etc values that come from animating the shadows. I think the same thing would occur if I just cached the MaskFilter values, since the floating point blur radius is part of the problem.\n\n```\n  static Map<BoxShadow, Paint> _boxShadowToPaintCache = new Map<BoxShadow, Paint>();\n  Paint _boxShadowToPaint(BoxShadow boxShadow) {\n    return _boxShadowToPaintCache.putIfAbsent(boxShadow, () {\n      print(\"_boxShadowToPaintCache.length = ${_boxShadowToPaintCache.length} boxShadow=${boxShadow}\");\n      return new Paint()\n        ..color = boxShadow.color\n        ..maskFilter = new ui.MaskFilter.blur(ui.BlurStyle.normal, boxShadow._blurSigma);\n    });\n  }\n```\n\nI suppose we could avoid the cache misses by quantizing the boxShadow properties however it might be best to do some rasterization benchmarks first.\n",
        "createdAt" : "2015-11-18T16:39:23Z",
        "updatedAt" : "2015-11-18T16:39:23Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "f2cb12ab-0341-4711-9624-d4676cb6b701",
        "parentId" : "5cabff66-8af6-49bb-ae58-82e23b63f1b8",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Let's not worry about the cache then.  We can come back to it if necessary.\n",
        "createdAt" : "2015-11-18T17:05:41Z",
        "updatedAt" : "2015-11-18T17:05:41Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9153a13c6a2e1015e03b51172c5e11685cd951e",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +966,970 @@      final Paint paint = new Paint()\n        ..color = boxShadow.color\n        ..maskFilter = new ui.MaskFilter.blur(ui.BlurStyle.normal, boxShadow._blurSigma);\n      final Rect bounds = rect.shift(boxShadow.offset).inflate(boxShadow.spreadRadius);\n      _paintBox(canvas, bounds, paint);"
  },
  {
    "id" : "bf94f6b8-26fa-47b4-aa8b-9d694064bdee",
    "prId" : 597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ea7b267-4ed2-4e22-9f3c-4cd5f32aecd7",
        "parentId" : null,
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "`other.x` and `other.y` ?\n",
        "createdAt" : "2015-11-26T13:12:43Z",
        "updatedAt" : "2015-11-26T13:12:43Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "4e3e61f0-c4e3-4a67-82f9-177cf66e5218",
        "parentId" : "5ea7b267-4ed2-4e22-9f3c-4cd5f32aecd7",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Oops, I have been misled by the parameter name. I thought it was an _other_ `FractionalOffset` . Sorry.\n",
        "createdAt" : "2015-11-26T17:28:15Z",
        "updatedAt" : "2015-11-26T17:28:15Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a03757e443de97c8a08174a1d50bc0186244cde6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1118,1122 @@  }\n  FractionalOffset operator *(double other) {\n    return new FractionalOffset(x * other, y * other);\n  }\n  bool operator ==(dynamic other) {"
  }
]