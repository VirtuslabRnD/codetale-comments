[
  {
    "id" : "df0d7f71-d38d-4dff-840f-d4e164adbb24",
    "prId" : 27953,
    "prUrl" : "https://github.com/flutter/flutter/pull/27953#pullrequestreview-203962279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4858d7d-9c55-4183-aa3d-7c46cd7eb777",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Instead of wrapping everything in a try-catch, just wrap the invocation of obtainKey.\r\n\r\n```\r\nFuture<T> obtainedKey;\r\ntry {\r\n  obtainedKey = obtainKey(configuration);\r\n}\r\n```",
        "createdAt" : "2019-02-14T20:25:44Z",
        "updatedAt" : "2019-02-14T21:25:47Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "f78ff4bd-d86c-43e2-9bef-92c83a8f7f93",
        "parentId" : "d4858d7d-9c55-4183-aa3d-7c46cd7eb777",
        "authorId" : "9d0a4821-6e3a-4276-827f-88b855cd3ae1",
        "body" : "There was a variable `obtainedKey` already in the scope, so i used `key` instead.",
        "createdAt" : "2019-02-14T20:47:28Z",
        "updatedAt" : "2019-02-14T21:25:47Z",
        "lastEditedBy" : "9d0a4821-6e3a-4276-827f-88b855cd3ae1",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a58bd9af3f2d635220582916650224720aac348",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +287,291 @@    // `onError` callback on [ImageCache] handles the cases where `obtainKey` is a sync future and `load` throws.\n    Future<T> key;\n    try {\n      key = obtainKey(configuration);\n    } catch (error, stackTrace) {"
  },
  {
    "id" : "f9b713bb-c160-42fb-951b-a1008f4c563b",
    "prId" : 27953,
    "prUrl" : "https://github.com/flutter/flutter/pull/27953#pullrequestreview-203974333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea9e2d9b-dfe4-454f-9a26-b4eeff147c0d",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "If you catch an error here `key` will be null, right?",
        "createdAt" : "2019-02-14T20:55:17Z",
        "updatedAt" : "2019-02-14T21:25:47Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "a6a5e262-3553-4535-83ea-f9cef947a0cf",
        "parentId" : "ea9e2d9b-dfe4-454f-9a26-b4eeff147c0d",
        "authorId" : "9d0a4821-6e3a-4276-827f-88b855cd3ae1",
        "body" : "ðŸ¤• yeah, sorry will fix this",
        "createdAt" : "2019-02-14T21:07:32Z",
        "updatedAt" : "2019-02-14T21:25:47Z",
        "lastEditedBy" : "9d0a4821-6e3a-4276-827f-88b855cd3ae1",
        "tags" : [
        ]
      },
      {
        "id" : "6a515e19-cb98-4ced-a1a4-885770ec8475",
        "parentId" : "ea9e2d9b-dfe4-454f-9a26-b4eeff147c0d",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Please add a test case which exercises this new code",
        "createdAt" : "2019-02-14T21:16:14Z",
        "updatedAt" : "2019-02-14T21:25:47Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a58bd9af3f2d635220582916650224720aac348",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +290,294 @@      key = obtainKey(configuration);\n    } catch (error, stackTrace) {\n      handleError(error, stackTrace);\n      return stream;\n    }"
  },
  {
    "id" : "f8782e0b-9026-4371-af2c-46a3d77d8f9b",
    "prId" : 33092,
    "prUrl" : "https://github.com/flutter/flutter/pull/33092#pullrequestreview-240244331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e004f8f-bdf9-4bbb-96a7-5623747ec566",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Probably would be better if `consolidateHttpClientResponseBytes` calls `onBytesReceived` with null instead of -1 as well. Sorry, I missed that in the other PR...",
        "createdAt" : "2019-05-21T18:28:05Z",
        "updatedAt" : "2019-05-21T19:08:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "30eb246c-be1b-458a-aa68-f6f27186855e",
        "parentId" : "6e004f8f-bdf9-4bbb-96a7-5623747ec566",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Done",
        "createdAt" : "2019-05-21T19:08:18Z",
        "updatedAt" : "2019-05-21T19:08:18Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "979d163712fb7ee17a5b9e19678bad2ae5cd1f0e",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +554,558 @@        response,\n        client: _httpClient,\n        onBytesReceived: (int cumulative, int total) {\n          chunkEvents.add(ImageChunkEvent(\n            cumulativeBytesLoaded: cumulative,"
  },
  {
    "id" : "984b3a1b-bdfd-40de-8655-3002861e49aa",
    "prId" : 34112,
    "prUrl" : "https://github.com/flutter/flutter/pull/34112#pullrequestreview-250043148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d33a54b-beab-4120-beff-11d2d65d53d0",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "(comment meant for two lines above... github Â¯\\_(ãƒ„)_/Â¯)\r\n\r\nI see, the original also had double ui imports....",
        "createdAt" : "2019-06-14T16:59:07Z",
        "updatedAt" : "2019-06-14T17:54:56Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "00a5e0ca-2259-430c-bf59-19d30adc412f",
        "parentId" : "3d33a54b-beab-4120-beff-11d2d65d53d0",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Still, cleaned it up",
        "createdAt" : "2019-06-14T17:55:37Z",
        "updatedAt" : "2019-06-14T17:55:37Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62c2f355d62be4458c920dd7d272cfdab7a9a32",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +9,13 @@import 'dart:ui' show Size, Locale, TextDirection, hashValues;\n\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/services.dart';\n"
  },
  {
    "id" : "0e686ac5-7901-4d7d-832a-89a048be61e9",
    "prId" : 41415,
    "prUrl" : "https://github.com/flutter/flutter/pull/41415#pullrequestreview-297716487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f039905-ee0d-400e-a2c8-cb46d65387f6",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Let's make width and height named arguments.",
        "createdAt" : "2019-10-04T21:02:11Z",
        "updatedAt" : "2019-10-15T00:14:54Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "db075f3b795792d92f1bd17eeba76c5325fddcc6",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +528,532 @@  const ResizeImage(\n    this.imageProvider, {\n    this.width,\n    this.height,\n  }) : assert(width != null || height != null);"
  },
  {
    "id" : "273f8f92-c0aa-42d1-8ac2-5119c804f69f",
    "prId" : 41415,
    "prUrl" : "https://github.com/flutter/flutter/pull/41415#pullrequestreview-298430988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2848e46c-aa9c-4f8c-ba6c-71b7d4a1b43e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this is where you need to document NetworkImage doesn't support ResizeImage when used with Flutter for Web.",
        "createdAt" : "2019-10-07T21:47:54Z",
        "updatedAt" : "2019-10-15T00:14:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "db075f3b795792d92f1bd17eeba76c5325fddcc6",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +559,563 @@  }\n}\n\n/// Fetches the given URL from the network, associating it with the given scale.\n///"
  },
  {
    "id" : "6eb4ced4-a38f-45de-88e2-64498f9c650c",
    "prId" : 41415,
    "prUrl" : "https://github.com/flutter/flutter/pull/41415#pullrequestreview-298432021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e65614a7-3c26-4117-907f-69b6bcf087b7",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe add\r\n```\r\n///\r\n/// See also:\r\n///\r\n///  * [ResizeImage], which uses this to override the `cacheWidth` and `cacheHeight` parameters.\r\n```",
        "createdAt" : "2019-10-07T21:50:17Z",
        "updatedAt" : "2019-10-15T00:14:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "db075f3b795792d92f1bd17eeba76c5325fddcc6",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +161,165 @@///\n///  * [ResizeImage], which uses this to override the `cacheWidth` and `cacheHeight` parameters.\ntypedef DecoderCallback = Future<ui.Codec> Function(Uint8List bytes, {int cacheWidth, int cacheHeight});\n\n/// Identifies an image without committing to the precise final asset. This"
  },
  {
    "id" : "d58690e0-a730-47f4-9366-9efa11e59090",
    "prId" : 49389,
    "prUrl" : "https://github.com/flutter/flutter/pull/49389#pullrequestreview-347732260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b69308fc-0966-4583-9183-d7d19c66ff45",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This is a break.",
        "createdAt" : "2020-01-23T23:46:02Z",
        "updatedAt" : "2020-01-29T22:58:15Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "f3897e3b-79bb-4fec-a441-a3473cdfbe93",
        "parentId" : "b69308fc-0966-4583-9183-d7d19c66ff45",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why must it be nonVirtual? I mean, I get that it's useful for catching people who are using the API the old way, but is it strictly necessary? What if someone wants to take an entirely different approach?",
        "createdAt" : "2020-01-24T01:05:31Z",
        "updatedAt" : "2020-01-29T22:58:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2bd5dbdf-6bf2-448e-a6fc-657ee34211da",
        "parentId" : "b69308fc-0966-4583-9183-d7d19c66ff45",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Because if some other provider overrides it, its new logic will never get called by the new kind of provider I'm making that would wrap it.\r\n\r\nI imagine other providers would have this problem. Plus the logic in it is very complicated.\r\n\r\nAlternatively, we could update docs to say \"if you override this, composed providers may not work and you should consider overriding useKey instead\" - but I'm inclined to think people are more likely to see an analyzer warning than a doc comment.",
        "createdAt" : "2020-01-24T03:06:34Z",
        "updatedAt" : "2020-01-29T22:58:15Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "15cc44c5625d0625c45f067bdc10bcea1606d0c4",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +313,317 @@  ///\n  /// See the Lifecycle documentation on [ImageProvider] for more information.\n  @nonVirtual\n  ImageStream resolve(ImageConfiguration configuration) {\n    assert(configuration != null);"
  },
  {
    "id" : "b278e806-8030-420d-acfb-c8666eb36949",
    "prId" : 49389,
    "prUrl" : "https://github.com/flutter/flutter/pull/49389#pullrequestreview-348137658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d8aea8e-c92c-43e6-a52b-963e9d132461",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "please add a section to the class docs (`## foo`) that discusses the lifecycle of this class and the order in which the various methods are called, by whom, when, and so on. The class is complicated enough now that an overview is necessary.",
        "createdAt" : "2020-01-24T01:06:52Z",
        "updatedAt" : "2020-01-29T22:58:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "b08cbe24-7eaa-4efa-a721-7eb5358695cc",
        "parentId" : "1d8aea8e-c92c-43e6-a52b-963e9d132461",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "+1",
        "createdAt" : "2020-01-24T18:22:28Z",
        "updatedAt" : "2020-01-29T22:58:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "15cc44c5625d0625c45f067bdc10bcea1606d0c4",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +305,309 @@  /// an [ImageStream].\n  ///\n  /// This is the public entry-point of the [ImageProvider] class hierarchy.\n  ///\n  /// Subclasses should implement [obtainKey] and [load], which are used by this"
  },
  {
    "id" : "b2a169b6-9dbd-4d4b-abae-de3bfbfa9f63",
    "prId" : 49389,
    "prUrl" : "https://github.com/flutter/flutter/pull/49389#pullrequestreview-350479389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b5cb1b7-961b-4c35-a990-cd776b6437ae",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe add a link to the lifecycle explanation of this method in the class comment?",
        "createdAt" : "2020-01-29T20:07:48Z",
        "updatedAt" : "2020-01-29T22:58:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "74c8eed3-ea8d-411a-9297-d4429227867e",
        "parentId" : "3b5cb1b7-961b-4c35-a990-cd776b6437ae",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Done - I think.  ",
        "createdAt" : "2020-01-29T23:02:48Z",
        "updatedAt" : "2020-01-29T23:03:11Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "15cc44c5625d0625c45f067bdc10bcea1606d0c4",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +310,314 @@  /// method. If they need to change the implementation of [ImageStream] used,\n  /// they should override [createStream]. If they need to manage the actual\n  /// resolution of the image, they should override [resolveStreamForKey].\n  ///\n  /// See the Lifecycle documentation on [ImageProvider] for more information."
  },
  {
    "id" : "382c2130-61b1-4303-bebd-650653b1faf0",
    "prId" : 50318,
    "prUrl" : "https://github.com/flutter/flutter/pull/50318#pullrequestreview-357130730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f48ab8a0-5761-41a6-b30a-a410f0d2ebec",
        "parentId" : null,
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "Why not use the Future's error reporting mechanism?",
        "createdAt" : "2020-02-11T23:15:49Z",
        "updatedAt" : "2020-02-14T21:26:46Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "b8366bed-223a-4004-96e3-aa5fd2f14f26",
        "parentId" : "f48ab8a0-5761-41a6-b30a-a410f0d2ebec",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Because the error can be thrown synchronously and won't get captured that way. This has to handle both synchronous and async errors.",
        "createdAt" : "2020-02-12T00:01:11Z",
        "updatedAt" : "2020-02-14T21:26:46Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "ce913d7c-7f9c-4858-8c18-f3b0dbeb7382",
        "parentId" : "f48ab8a0-5761-41a6-b30a-a410f0d2ebec",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "I might not be understanding what you are saying, but errors can be handled synchronously from futures:\r\n```dart\r\nimport 'dart:async';\r\n\r\nFuture<void> doit() {\r\n  Completer<void> completer = Completer<void>();\r\n  completer.completeError('test');\r\n  return completer.future;\r\n}\r\n\r\nvoid main() {\r\n  Future<void> result = doit();\r\n  result.catchError((err) => print(err));\r\n}\r\n```\r\nprints: 'test'",
        "createdAt" : "2020-02-12T00:58:08Z",
        "updatedAt" : "2020-02-14T21:26:46Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "af1c51ff-4e79-450a-ab11-9f65c35cb710",
        "parentId" : "f48ab8a0-5761-41a6-b30a-a410f0d2ebec",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "We use a special class that can behave like a synchronous call instead of a future that doesn't behave that way",
        "createdAt" : "2020-02-12T01:13:04Z",
        "updatedAt" : "2020-02-14T21:26:46Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "01e4b258d6cab3ad4316fe13173dbc152e77e1fa",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +372,376 @@  Future<ImageCacheStatus> obtainCacheStatus({\n    @required ImageConfiguration configuration,\n    ImageErrorListener handleError,\n  }) {\n    assert(configuration != null);"
  },
  {
    "id" : "1cbbfa16-fd64-4561-975b-f75140ebebd2",
    "prId" : 62951,
    "prUrl" : "https://github.com/flutter/flutter/pull/62951#pullrequestreview-461889338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83c6522c-da89-4186-b194-2a8cb90bf045",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "For my understanding: why this change?",
        "createdAt" : "2020-08-05T16:59:26Z",
        "updatedAt" : "2020-08-11T13:05:55Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "626c5d3b-68e1-4415-aace-f7af765bc9d9",
        "parentId" : "83c6522c-da89-4186-b194-2a8cb90bf045",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "This prevent usage of nullable type as type parameter and T is treated as non-nullable.",
        "createdAt" : "2020-08-05T17:46:39Z",
        "updatedAt" : "2020-08-11T13:05:55Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbce05f7ed9985e33ea4ef848fa2a6b8bf3c1d1d",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +306,310 @@/// {@end-tool}\n@optionalTypeArgs\nabstract class ImageProvider<T extends Object> {\n  /// Abstract const constructor. This constructor enables subclasses to provide\n  /// const constructors so that they can be used in const expressions."
  },
  {
    "id" : "18b3e401-c747-4716-85e1-c80903ea5d88",
    "prId" : 62951,
    "prUrl" : "https://github.com/flutter/flutter/pull/62951#pullrequestreview-464572986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d9162c3-d901-40fd-8f05-036121eb2458",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "More of a question: is `FlutterError.onError?(....)` allowed?",
        "createdAt" : "2020-08-10T04:27:51Z",
        "updatedAt" : "2020-08-11T13:05:55Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "39e9e348-cede-4919-9676-fd9d4cfd3918",
        "parentId" : "6d9162c3-d901-40fd-8f05-036121eb2458",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "No but you can use `FlutterError.onError?.call(....)`",
        "createdAt" : "2020-08-10T20:42:10Z",
        "updatedAt" : "2020-08-11T13:05:55Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbce05f7ed9985e33ea4ef848fa2a6b8bf3c1d1d",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +403,407 @@          }());\n          if (FlutterError.onError != null) {\n            FlutterError.onError!(FlutterErrorDetails(\n              context: ErrorDescription('while checking the cache location of an image'),\n              informationCollector: collector,"
  },
  {
    "id" : "86fee1ad-dd57-4e67-90a9-61a2e542a893",
    "prId" : 63602,
    "prUrl" : "https://github.com/flutter/flutter/pull/63602#pullrequestreview-467066663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0380dfd5-a33e-4927-8385-edaba31ddd04",
        "parentId" : null,
        "authorId" : "621f7b96-9114-4a1e-8f40-96ef1d15c812",
        "body" : "Note: I'm not 100% sure this is the right approach.  Is it possible for the user to provide their own implementation of `AssetBundle.load`?  If not, maybe it would be better to change the type of `data` to a `ByteData` (removing the `?` on line 666) and just remove this check.\r\n\r\nActually, that might be a reasonable approach anyhow, even if it is user-overridable, since the user will still get an exception when `data` gets dereferenced on line 682; the only difference will be that the exception will be marginally less comprehensible, and the key won't be evicted from the image cache.  But maybe that's ok.\r\n\r\nAnyhow, I'm open to suggestions.",
        "createdAt" : "2020-08-12T19:24:34Z",
        "updatedAt" : "2020-08-13T16:30:05Z",
        "lastEditedBy" : "621f7b96-9114-4a1e-8f40-96ef1d15c812",
        "tags" : [
        ]
      },
      {
        "id" : "3438c21b-58e8-4e02-a9ed-d44e05dca895",
        "parentId" : "0380dfd5-a33e-4927-8385-edaba31ddd04",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "yes `?` could be removed. But for now I would keep the `if (data==null)` for now.",
        "createdAt" : "2020-08-12T19:35:44Z",
        "updatedAt" : "2020-08-13T16:30:05Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "f5c02533-a91c-49c8-9e57-8eb4fe95ae2d",
        "parentId" : "0380dfd5-a33e-4927-8385-edaba31ddd04",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I think we can probably just drop this. If the method is not supposed to return null, we can assume it's handled by throwing an exception.\r\n\r\nI'm not quite clear though on when weak checking would be used. Could you explain a bit more about how that would happen?",
        "createdAt" : "2020-08-13T16:43:35Z",
        "updatedAt" : "2020-08-13T16:43:35Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "7181d778-973c-4fd4-856c-5b44ed4bd8ef",
        "parentId" : "0380dfd5-a33e-4927-8385-edaba31ddd04",
        "authorId" : "621f7b96-9114-4a1e-8f40-96ef1d15c812",
        "body" : "@dnfield \r\nWeak checking is when the user's app contains some files that are opted in to null safety (e.g. flutter) and others that aren't (e.g. their app and packages).  It does all the static checks for null safety, but the type system is fundamentally unsound at the boundary between opted in and opted out code.  For example, if you invoke an abstract method in an opted-in class that has a return type of `int`, that's supposed to guarantee that you'll never receive `null` as a result.  But if the concrete implementation of that abstract method is in opted-out code, it could return `null` without causing a compile time errors.  That's the sense in which it's unsound: your opted-in code can have a variable of type non-nullable `int` that contains a `null` value.  Effectively, non-nullable types can't be completely trusted if there is some opted-out code somewhere in the program.  Once the entire program has been migrated to null safety, the unsoundness goes away and `int`s are really `int`s.\r\n\r\nBecause of this, we have code in Flutter that looks to be dead code, but we want to keep it around until most users have upgraded their apps to null safety, so that we can continue reporting useful exceptions to them if they pass `null` to us where they shouldn't.  The type system thinks that code is dead but the reality is it's not, so we have to add the `// ignore:` comment.  The reason I'm having to make this CL now is because fixing a bug in the analyzer that was preventing some of the \"supposedly dead\" code from being recognized.\r\n\r\nDoes that help?  If not, I'm happy to discuss over VC.",
        "createdAt" : "2020-08-13T18:29:31Z",
        "updatedAt" : "2020-08-13T18:29:31Z",
        "lastEditedBy" : "621f7b96-9114-4a1e-8f40-96ef1d15c812",
        "tags" : [
        ]
      },
      {
        "id" : "38b9c078-3bd4-4b13-9de1-93bbb049c9fb",
        "parentId" : "0380dfd5-a33e-4927-8385-edaba31ddd04",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Ahhh ok that makes sense.  Yeah we should leave this then.",
        "createdAt" : "2020-08-13T19:27:16Z",
        "updatedAt" : "2020-08-13T19:27:16Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c64c4fb0ef2391fab63297f7ad085c1b23727b1",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +676,680 @@    // running with weak checking, so we need to null check it anyway (and\n    // ignore the warning that the null-handling logic is dead code).\n    if (data == null) { // ignore: dead_code\n      PaintingBinding.instance!.imageCache!.evict(key);\n      throw StateError('Unable to read data');"
  }
]