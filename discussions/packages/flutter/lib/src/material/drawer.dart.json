[
  {
    "id" : "8136bfb7-b39f-4833-884c-7a18a5f4a1e8",
    "prId" : 3018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "178d6d2a-9023-4965-bbd6-3eea29e57f91",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "blank line\n",
        "createdAt" : "2016-03-31T22:34:40Z",
        "updatedAt" : "2016-03-31T22:34:40Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bc08720e48a8063b50875281726fbe3b2768994",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +35,39 @@///\n/// See also:\n///  * [Scaffold.drawer]\n///  * [DrawerItem]\n///  * [DrawerHeader]"
  },
  {
    "id" : "e384edb4-140b-4b53-8bf9-59f2b1208c45",
    "prId" : 3018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e217bc55-1387-4c84-9998-2867fbea36e0",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "add a paragraph here suggesting putting the contents of the drawer in a Block to enable it to scroll?\n",
        "createdAt" : "2016-03-31T22:35:06Z",
        "updatedAt" : "2016-03-31T22:35:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bc08720e48a8063b50875281726fbe3b2768994",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +32,36 @@/// the side of the screen and displays a list of items that the user can\n/// interact with. The top-most item in a drawer is typically a [DrawerHeader]\n/// that displays status information about the current user.\n///\n/// See also:"
  },
  {
    "id" : "e2e69421-2ff6-410a-8737-6139ff0e72c7",
    "prId" : 3018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7330a9d-d434-434e-b900-9825fda4a349",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "blank line\n",
        "createdAt" : "2016-03-31T22:35:17Z",
        "updatedAt" : "2016-03-31T22:35:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bc08720e48a8063b50875281726fbe3b2768994",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +70,74 @@///\n/// See also:\n/// * [Drawer]\n/// * [Scaffold.drawer]\nclass DrawerController extends StatefulWidget {"
  },
  {
    "id" : "1a1eec2e-aed7-469a-b51c-32dfd85d92af",
    "prId" : 3709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b549b541-a53f-4d50-b3d2-e7ea59d01537",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "is this the expected entry-point for programmatically opening drawers? Or is there some method on Scaffold or something to do it?\n",
        "createdAt" : "2016-05-03T23:17:03Z",
        "updatedAt" : "2016-05-04T00:24:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "192ce949f96130200a5dc768fbe2d594b08a5715",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +212,216 @@  }\n\n  /// Starts an animation to open the drawer.\n  ///\n  /// Typically called by [Scaffold.openDrawer]."
  },
  {
    "id" : "23c5ff31-f431-4809-9de6-cd2f757614c2",
    "prId" : 3709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03ea43ee-512c-452c-b2d7-d26cba1ceabd",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ditto\n",
        "createdAt" : "2016-05-03T23:17:06Z",
        "updatedAt" : "2016-05-04T00:24:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "192ce949f96130200a5dc768fbe2d594b08a5715",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +219,223 @@  }\n\n  /// Starts an animation to close the drawer.\n  void close() {\n    _controller.fling(velocity: -1.0);"
  },
  {
    "id" : "9ccd69ac-f7d6-4711-a45e-ce219fe88590",
    "prId" : 5157,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79a77d1b-b740-460b-9fde-856938ab8ac1",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "A side effect of this is that _handleHistoryEntryRemoved starts the close animation (calls close()). Since the controller is stopped by the next statement, that's probably harmless. \n",
        "createdAt" : "2016-07-29T22:09:56Z",
        "updatedAt" : "2016-07-29T22:09:56Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa0bf94ab33742b5d9d2b12f66187a93874f78af",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +123,127 @@  @override\n  void dispose() {\n    _historyEntry?.remove();\n    _controller\n      ..removeListener(_animationChanged)"
  },
  {
    "id" : "8a8434cc-cad7-4655-b107-4970639650ff",
    "prId" : 8992,
    "prUrl" : "https://github.com/flutter/flutter/pull/8992#pullrequestreview-29003751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28f0370a-5787-496a-ae1f-553003b88177",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I would inline the _buildDrawer method unless it's called anywhere else, saves a jump and doesn't really make the code any less readable.",
        "createdAt" : "2017-03-24T00:33:56Z",
        "updatedAt" : "2017-03-24T21:58:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "61827216-3431-41e4-b1d7-0759835138d3",
        "parentId" : "28f0370a-5787-496a-ae1f-553003b88177",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(i'm fine with it this way as well if you feel strongly)",
        "createdAt" : "2017-03-24T00:34:08Z",
        "updatedAt" : "2017-03-24T21:58:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6fe83bae-b14b-41d3-806a-d3c1b6f74070",
        "parentId" : "28f0370a-5787-496a-ae1f-553003b88177",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I did this because _buildDrawer(), the original build method body, has two very different returns, depending on if the drawer is dismissed. I was avoiding  duplicating the new ListTileTheme expression in both branches, to make it clear that it was the same for either drawer variation.",
        "createdAt" : "2017-03-24T15:14:51Z",
        "updatedAt" : "2017-03-24T21:58:01Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "bd1c8176-c5fe-4e5f-a512-9bb1e0943ede",
        "parentId" : "28f0370a-5787-496a-ae1f-553003b88177",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Sounds good.",
        "createdAt" : "2017-03-24T20:31:53Z",
        "updatedAt" : "2017-03-24T21:58:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "67ea716ba1ce5cf8b0b4ed8a42f929037ef28288",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +303,307 @@    return new ListTileTheme(\n      style: ListTileStyle.drawer,\n      child: _buildDrawer(context),\n    );\n  }"
  },
  {
    "id" : "ab637198-578f-41af-9380-eab3a61fa360",
    "prId" : 20015,
    "prUrl" : "https://github.com/flutter/flutter/pull/20015#pullrequestreview-143315935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de74dfaf-79d0-4e6b-9dea-b3fc7e8205d1",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this should be called `onFoo`, not `fooCallback`",
        "createdAt" : "2018-08-03T19:59:51Z",
        "updatedAt" : "2018-08-03T19:59:52Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "033ee4a1711707e3d9ca150d1dbb6e9875385bab",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +170,174 @@    @required this.child,\n    @required this.alignment,\n    this.drawerCallback,\n  }) : assert(child != null),\n       assert(alignment != null),"
  },
  {
    "id" : "b571d0e9-89d0-4f32-b45e-647b44b98f9e",
    "prId" : 20015,
    "prUrl" : "https://github.com/flutter/flutter/pull/20015#pullrequestreview-143316133",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eef111b4-b7f8-4afd-95e2-14a4bb0bf276",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe `onDrawerChange` or some such.\r\n\r\nOr maybe even better, have two callbacks, `onOpen` and `onClose`.",
        "createdAt" : "2018-08-03T20:00:32Z",
        "updatedAt" : "2018-08-03T20:00:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "033ee4a1711707e3d9ca150d1dbb6e9875385bab",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +187,191 @@\n  /// Optional callback that is called when a [Drawer] is opened or closed.\n  final DrawerCallback drawerCallback;\n\n  @override"
  },
  {
    "id" : "e920a5f5-d0a3-4125-8ef7-bdf8f4be159f",
    "prId" : 23424,
    "prUrl" : "https://github.com/flutter/flutter/pull/23424#pullrequestreview-175547045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e47a22cc-21a2-4633-af7d-9886e8cf98b0",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "It's a little strange that you have so many templates that basically describe the same thing. Could you just have one general template by restructuring the text a little? At each place where you use the template you could have one very specific sentence (e.g. this controls the drag behavior for opening the drawer) followed by the inserted template that describes the difference in drag behavior in general terms?",
        "createdAt" : "2018-11-14T21:34:32Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8166a057-20f6-4912-8f92-c151c480932f",
        "parentId" : "e47a22cc-21a2-4633-af7d-9886e8cf98b0",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "That's what I originally had, but Ian wanted me to be specific about how the drag behavior affects each widget. Do you feel like that specification isn't necessary?",
        "createdAt" : "2018-11-15T18:54:45Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "2efddf1c-4548-4ef4-b2ec-56d8259fcbd5",
        "parentId" : "e47a22cc-21a2-4633-af7d-9886e8cf98b0",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "No, I do feel the specification is necessary. I would just split it up in two: have one or two very specific sentences on each property that describe specifically what drag behavior is modified by this property (e.g. the drag gesture to ope the drawer). Then follow that up by inserting a generic template that describes the difference between the two behaviors. ",
        "createdAt" : "2018-11-15T20:43:26Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f463e9f73d8a7eb59f05588877bc12fec02d40",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +202,206 @@\n  /// {@template flutter.material.drawer.dragStartBehavior}\n  /// Determines the way that drag start behavior is handled.\n  ///\n  /// If set to [DragStartBehavior.start], the drag behavior used for opening"
  },
  {
    "id" : "ce224a1a-12de-4f01-8561-67ee742e4f71",
    "prId" : 23424,
    "prUrl" : "https://github.com/flutter/flutter/pull/23424#pullrequestreview-189449990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb5fbb22-3815-4903-870a-fecffdf11915",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Here and everywhere else a similar block of text is used: we should add a “see also” to link to the example given elsewhere that explains in detail what the difference between the two. ",
        "createdAt" : "2019-01-04T17:26:52Z",
        "updatedAt" : "2019-01-07T19:36:26Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f463e9f73d8a7eb59f05588877bc12fec02d40",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +204,208 @@  /// Determines the way that drag start behavior is handled.\n  ///\n  /// If set to [DragStartBehavior.start], the drag behavior used for opening\n  /// and closing a drawer will begin upon the detection of a drag gesture. If\n  /// set to [DragStartBehavior.down] it will begin when a down event is first"
  },
  {
    "id" : "cc079145-f553-4848-8b23-a3800785aa9b",
    "prId" : 31025,
    "prUrl" : "https://github.com/flutter/flutter/pull/31025#pullrequestreview-231301029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76de4711-d3c1-4dd2-ac77-ba15ae3b6bf0",
        "parentId" : null,
        "authorId" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "body" : "Being nitpicky but traditionally there is a line break between the opening sentence and the rest of the comment.",
        "createdAt" : "2019-04-26T18:26:55Z",
        "updatedAt" : "2019-05-01T19:51:49Z",
        "lastEditedBy" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "tags" : [
        ]
      },
      {
        "id" : "028ee7c0-5e62-477f-9be1-b1f41d13d195",
        "parentId" : "76de4711-d3c1-4dd2-ac77-ba15ae3b6bf0",
        "authorId" : "75aa2938-23a3-4db7-a013-d205cf976b60",
        "body" : "done",
        "createdAt" : "2019-04-26T18:30:22Z",
        "updatedAt" : "2019-05-01T19:51:49Z",
        "lastEditedBy" : "75aa2938-23a3-4db7-a013-d205cf976b60",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c7f90c61e84d1cc40b822ddd47b1bdcc133a1d9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +224,228 @@  /// The color to use for the scrim that obscures primary content while a drawer is open.\n  ///\n  /// By default, the color is [Colors.black54]\n  final Color scrimColor;\n"
  },
  {
    "id" : "33d94735-9859-4378-b982-ebb2d5c62448",
    "prId" : 31025,
    "prUrl" : "https://github.com/flutter/flutter/pull/31025#pullrequestreview-231786981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f635b30c-f577-453c-bf46-21878a83ae8e",
        "parentId" : null,
        "authorId" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "body" : "I believe you still want to keep a default color for widget.scrimColor, since the tween expects both arguments to not be null.",
        "createdAt" : "2019-04-29T16:47:36Z",
        "updatedAt" : "2019-05-01T19:51:49Z",
        "lastEditedBy" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "tags" : [
        ]
      },
      {
        "id" : "2f03eb9c-e76a-4d19-ab8e-69e114420949",
        "parentId" : "f635b30c-f577-453c-bf46-21878a83ae8e",
        "authorId" : "75aa2938-23a3-4db7-a013-d205cf976b60",
        "body" : "you are right, done!",
        "createdAt" : "2019-04-29T16:53:02Z",
        "updatedAt" : "2019-05-01T19:51:49Z",
        "lastEditedBy" : "75aa2938-23a3-4db7-a013-d205cf976b60",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c7f90c61e84d1cc40b822ddd47b1bdcc133a1d9",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +238,242 @@  void initState() {\n    super.initState();\n    _color = ColorTween(begin: Colors.transparent, end: widget.scrimColor);\n    _controller = AnimationController(duration: _kBaseSettleDuration, vsync: this)\n      ..addListener(_animationChanged)"
  },
  {
    "id" : "6ebc81ec-789b-4cb2-a017-6d6c2894e1cd",
    "prId" : 37492,
    "prUrl" : "https://github.com/flutter/flutter/pull/37492#pullrequestreview-273844962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5461b9aa-6554-4646-8ca3-56592210628c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2019-08-12T17:43:03Z",
        "updatedAt" : "2019-08-12T17:56:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d217181359dc47093397985611bff1aaf7f2ce",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +231,235 @@  /// drawer.\n  ///\n  /// By default, the value used is 20.0 added to the padding edge of\n  /// `MediaQuery.of(context).padding` that corresponds to [alignment].\n  /// This ensures that the drag area for notched devices is not obscured. For"
  }
]