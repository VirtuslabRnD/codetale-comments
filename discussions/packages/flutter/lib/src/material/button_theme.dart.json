[
  {
    "id" : "01f2bc94-d6c7-4bab-b84f-f78278eb54df",
    "prId" : 14410,
    "prUrl" : "https://github.com/flutter/flutter/pull/14410#pullrequestreview-94846453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab1e3f21-9dfa-4dc2-b4e4-b4ad757c7dc9",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "This used to be a const constructor.  Is it intentional that it's not anymore?  (the change broke some clients inside Google because they were calling `const ButtonTheme(...)`)",
        "createdAt" : "2018-02-07T14:53:51Z",
        "updatedAt" : "2018-02-07T14:53:51Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "44d6816b-d75c-4043-813f-6d86c2f6e421",
        "parentId" : "ab1e3f21-9dfa-4dc2-b4e4-b4ad757c7dc9",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Looks like it's the construction of `data` that necessitated this.  The same thing happened in `ButtonTheme.bar`.  @Hixie I'm thinking it's not worth sending out a breaking change notification since the fix is so obvious.  You agree?",
        "createdAt" : "2018-02-07T14:59:49Z",
        "updatedAt" : "2018-02-07T14:59:50Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "c0da214b-ab37-434a-b86c-503e62d8ccbb",
        "parentId" : "ab1e3f21-9dfa-4dc2-b4e4-b4ad757c7dc9",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "FYI, I updated the changelog to call out these changes.\r\n\r\nhttps://github.com/flutter/flutter/wiki/Changelog#api-changes-to-buttontheme",
        "createdAt" : "2018-02-07T18:05:27Z",
        "updatedAt" : "2018-02-07T18:05:27Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "4f78c32f-70ec-4e2a-b00b-6084a39e45fe",
        "parentId" : "ab1e3f21-9dfa-4dc2-b4e4-b4ad757c7dc9",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I've sent out a breaking change notification.\r\n",
        "createdAt" : "2018-02-07T19:49:48Z",
        "updatedAt" : "2018-02-07T19:49:48Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3a10a351c0cfc3a6af54e47a9ca3e8b3765ae5a",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@  ///\n  /// The [textTheme], [minWidth], and [height] arguments must not be null.\n  ButtonTheme({\n    Key key,\n    ButtonTextTheme textTheme: ButtonTextTheme.normal,"
  },
  {
    "id" : "98def713-6d23-4ef9-9266-f0aeb487209a",
    "prId" : 22013,
    "prUrl" : "https://github.com/flutter/flutter/pull/22013#pullrequestreview-158319487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddef1948-9f3c-4a71-91f5-eda89c3bb60c",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Each of these properties should probably have extensive documentation on how they are computed - possibly for each button type.",
        "createdAt" : "2018-09-24T22:28:38Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d71f5ffa1aeac701bb22623b8defe49d5678649d",
    "line" : 313,
    "diffHunk" : "@@ -1,1 +427,431 @@  /// Otherwise the color scheme's [ColorScheme.onSurface] color is returned\n  /// with its opacity set to 0.30 if [getBrightness] is dark, 0.38 otherwise.\n  Color getDisabledTextColor(MaterialButton button) {\n    if (button.disabledTextColor != null)\n      return button.disabledTextColor;"
  },
  {
    "id" : "b46a6461-8027-47de-a837-fb9d3102d05c",
    "prId" : 22013,
    "prUrl" : "https://github.com/flutter/flutter/pull/22013#pullrequestreview-159524506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9459952-4a5b-43c6-8af1-afe7ad7fc432",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "As long as button is exactly a FlatButton, I think it is faster to check the runtimeType than use an `is` check.  Since the latter has to verify the full type hierarchy.\r\n\r\nYou could also pass the type as method generic:\r\n\r\n```\r\ndouble getElevation<T extends materialButton>(T button) {\r\n  if (T == FlatButton) { ... }\r\n}\r\n```",
        "createdAt" : "2018-09-26T19:30:06Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "cf51a96b-3147-481b-82f4-82599ba36ae8",
        "parentId" : "d9459952-4a5b-43c6-8af1-afe7ad7fc432",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I guess the above wouldn't work if you wanted to delegate to MaterialButton, and it might not be obvious but inference could mess up users here:\r\n\r\nclass MyButton extends MaterialButton {\r\n\r\n   Widget build(_) => RawMaterialButton(foo: theme.getFoo(this)) // <- T is inferred as MyButton instead of MaterialButton\r\n}",
        "createdAt" : "2018-09-26T19:42:08Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "5721d100-3194-45af-9190-73be366f93e4",
        "parentId" : "d9459952-4a5b-43c6-8af1-afe7ad7fc432",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If someone wants to write a button that's configured like a FlatButton but builds a little differently, they could subclass FlatButton and override its build method. FlatButtonWithIcon is essentially that.\r\n\r\nThe generic approach would be a little cheaper, and it would obviate creating classes like FlatButtonWithIcon. It's similar to an earlier approach I'd taken, where a value that represented the button's type was passed along as a MaterialButton property. It makes using the API a bit clunkier, although it also clarifies the meaning of each getFoo(button) method: getElevation<FlatButton>(myFlatButton) is a little clearer that we want the FlatButton elevation.\r\n\r\nI don't think this would be practical problem with the type parameter approach:\r\n```\r\nclass MyButton extends MaterialButton {\r\n\r\n  Widget build(_) => RawMaterialButton(foo: theme.getFoo(this)) // <- T is inferred as MyButton instead of MaterialButton\r\n}\r\n```\r\nOnly because `ButtonThemeData` doesn't discriminate based on `is MaterialButton`. The same scenario with a subclass of a type that is part of the rules, say `FlatButton`, would have to use `theme.getFoo<FlatButton>()`, to get the \"right\" answer. I don't know if that qualifies as a footgun or not. ",
        "createdAt" : "2018-09-26T19:43:03Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "80dd487f-149b-4ce7-8ba6-d3fc8c6f3f54",
        "parentId" : "d9459952-4a5b-43c6-8af1-afe7ad7fc432",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I think the advantage of the is checks is that they will just work.  If it's slow we can always revisit",
        "createdAt" : "2018-09-27T16:07:28Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d71f5ffa1aeac701bb22623b8defe49d5678649d",
    "line" : 499,
    "diffHunk" : "@@ -1,1 +613,617 @@    if (button.elevation != null)\n      return button.elevation;\n    if (button is FlatButton)\n      return 0.0;\n    return 2.0;"
  },
  {
    "id" : "4006bc16-94b7-497d-83b6-132f4679da8a",
    "prId" : 22013,
    "prUrl" : "https://github.com/flutter/flutter/pull/22013#pullrequestreview-159162767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a77f6d5-ac56-4713-95a3-079ba042147b",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Since this is almost a one-liner I would use `??` instead.",
        "createdAt" : "2018-09-26T19:31:54Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d71f5ffa1aeac701bb22623b8defe49d5678649d",
    "line" : 528,
    "diffHunk" : "@@ -1,1 +642,646 @@  /// Otheriwse the disabled elevation is 0.0.\n  double getDisabledElevation(MaterialButton button) {\n    if (button.disabledElevation != null)\n      return button.disabledElevation;\n    return 0.0;"
  },
  {
    "id" : "5a6e8fc8-85f7-4b8e-bb9a-3ed637b1287f",
    "prId" : 22013,
    "prUrl" : "https://github.com/flutter/flutter/pull/22013#pullrequestreview-160823548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecce0712-2dd3-4c1d-acf8-1d405b061ffa",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "For clarity, I would place the \"If\" first and drop the otherwise.",
        "createdAt" : "2018-09-28T00:11:19Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "4a712e7e-ac8f-4458-91fb-435383b7a0d8",
        "parentId" : "ecce0712-2dd3-4c1d-acf8-1d405b061ffa",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I tried various permutations of this doc. It needs to convey the fact that the first non-null production is returned (I used \"otherwise\").  I agree that it's a little clunky as presented, and I wish the derivation of fillColor wasn't so complicated, but I haven't been able to improve it.",
        "createdAt" : "2018-10-02T16:58:04Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d71f5ffa1aeac701bb22623b8defe49d5678649d",
    "line" : 343,
    "diffHunk" : "@@ -1,1 +457,461 @@  /// is enabled.\n  ///\n  /// Otherwise, returns [MaterialButton.disabledColor] if it is non-null and\n  /// the button is disabled.\n  ///"
  },
  {
    "id" : "43e6e514-788c-4bc4-846e-4f544eb423e2",
    "prId" : 22013,
    "prUrl" : "https://github.com/flutter/flutter/pull/22013#pullrequestreview-160827158",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ff5b844-0635-4379-a340-e2d38d35d6e5",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I think we should just leave this as part of the regular theme. While it needs to exist for backwards compatibility, ideally we don't want new apps to find it easy to set to anything besides padded.",
        "createdAt" : "2018-09-28T18:45:20Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "3cdabfe1-7208-4032-a858-44edc26a8467",
        "parentId" : "5ff5b844-0635-4379-a340-e2d38d35d6e5",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It's already a property of the button classes and it needs to be funneled through ButtonTheme so that buttons can (just) depend on ButtonThemeData and not on the overall Theme.\r\n\r\nI've made the ButtonThemeData.materialTapTargetSize property private. It's initialized by the constructor, which will usually be called by ThemeData, and returned by getMaterialTapTargetSize() as before. \r\n\r\nIt seemed like a good idea to similarly not expose the new (color) ButtonThemeData color parameters as properties, since they're available via the getFoo(button) methods. I've made them private as well.",
        "createdAt" : "2018-10-02T17:07:14Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d71f5ffa1aeac701bb22623b8defe49d5678649d",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +82,86 @@    Color splashColor,\n    ColorScheme colorScheme = const ColorScheme.light(),\n    MaterialTapTargetSize materialTapTargetSize,\n    Widget child,\n  }) : assert(textTheme != null),"
  },
  {
    "id" : "cae91b58-a6a4-4043-a1aa-489de3016b58",
    "prId" : 22013,
    "prUrl" : "https://github.com/flutter/flutter/pull/22013#pullrequestreview-160852192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77bda694-a0f1-44a6-835f-197d7762a609",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Is there a way we could detect a new material theme and switch to the constrained layout behavior?",
        "createdAt" : "2018-10-02T17:54:24Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "1adeed5c-169a-4b24-8696-19accb3237a8",
        "parentId" : "77bda694-a0f1-44a6-835f-197d7762a609",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "New themes can specify constrained layout behavior. ",
        "createdAt" : "2018-10-02T18:06:00Z",
        "updatedAt" : "2018-10-02T19:56:43Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d71f5ffa1aeac701bb22623b8defe49d5678649d",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +252,256 @@  ///\n  /// Defaults to [ButtonBarLayoutBehavior.padded].\n  final ButtonBarLayoutBehavior layoutBehavior;\n\n  /// Simply a convenience that returns [minWidth] and [height] as a"
  }
]