[
  {
    "id" : "cfabfe84-75f3-4e88-b83f-cef31a6ac6aa",
    "prId" : 3018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8848d497-2791-4a56-aa42-939e528e5d3b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "need blank line here\n",
        "createdAt" : "2016-03-31T22:25:20Z",
        "updatedAt" : "2016-03-31T22:25:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bc08720e48a8063b50875281726fbe3b2768994",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +32,36 @@///\n/// See also:\n///  * [CircleAvatar]\n///  * https://www.google.com/design/spec/components/chips.html\nclass Chip extends StatelessWidget {"
  },
  {
    "id" : "bba99f59-0d2b-49eb-9856-bb677ccd9487",
    "prId" : 3018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34c88328-2708-40f2-95f3-6b0dbd7fcdac",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The chip set sail and become a ship!\n",
        "createdAt" : "2016-03-31T22:25:44Z",
        "updatedAt" : "2016-03-31T22:25:44Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bc08720e48a8063b50875281726fbe3b2768994",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +54,58 @@  /// Called when the user deletes the chip, e.g., by tapping the delete button.\n  ///\n  /// The delete button is included in the ship only if this callback is non-null.\n  final VoidCallback onDeleted;\n"
  },
  {
    "id" : "c2a6f788-4141-4f98-a493-8fa44aa71c26",
    "prId" : 12533,
    "prUrl" : "https://github.com/flutter/flutter/pull/12533#pullrequestreview-71720522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27b83477-a28d-4f92-89a5-f712398039db",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "cc @HansMuller \r\nlink to https://github.com/flutter/flutter/issues/12378",
        "createdAt" : "2017-10-13T18:38:47Z",
        "updatedAt" : "2017-11-02T01:24:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "039c5dc0-86c2-46dc-8c54-ee6ba7c301ce",
        "parentId" : "27b83477-a28d-4f92-89a5-f712398039db",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done",
        "createdAt" : "2017-10-25T01:30:04Z",
        "updatedAt" : "2017-11-02T01:24:01Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5790d46791517368ff48b69fe211510151aa087d",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +147,151 @@        onTap: Feedback.wrapForTap(onDeleted, context),\n        child: new Tooltip(\n          // TODO(gspencer): Internationalize this text.\n          // https://github.com/flutter/flutter/issues/12378\n          message: deleteButtonTooltipMessage ?? 'Delete \"$label\"',"
  },
  {
    "id" : "1bfb4a79-56f0-4bd4-a337-210284cad4f6",
    "prId" : 15596,
    "prUrl" : "https://github.com/flutter/flutter/pull/15596#pullrequestreview-105568130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31fa31c5-d7a0-4c2f-99d5-934b1544a2d2",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Thank you for this comment!",
        "createdAt" : "2018-03-21T00:16:41Z",
        "updatedAt" : "2018-03-22T01:13:37Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "944076ae7100a03827bd62ea79b79fa9e25c571c",
    "line" : 618,
    "diffHunk" : "@@ -1,1 +552,556 @@  @override\n  double computeMinIntrinsicWidth(double height) {\n    // The overall padding isn't affected by missing avatar or delete icon\n    // because we add the padding regardless to give extra padding for the label\n    // when they're missing."
  },
  {
    "id" : "e48008a3-eabf-464b-9d80-e693d126eb8c",
    "prId" : 15596,
    "prUrl" : "https://github.com/flutter/flutter/pull/15596#pullrequestreview-106200721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73478e64-0ceb-43cd-9379-bea5c1317e63",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "missing a period...",
        "createdAt" : "2018-03-22T16:34:33Z",
        "updatedAt" : "2018-03-22T16:34:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "944076ae7100a03827bd62ea79b79fa9e25c571c",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +54,58 @@///  * <https://material.google.com/components/chips.html>\nclass Chip extends StatelessWidget {\n  /// Creates a material design chip\n  ///\n  /// The [label] and [border] arguments may not be null."
  },
  {
    "id" : "e5093cbf-ff3a-455a-8d4e-128c16372e6c",
    "prId" : 15596,
    "prUrl" : "https://github.com/flutter/flutter/pull/15596#pullrequestreview-106202701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae5be984-0a43-4b8f-a78a-fb77795b82e9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "use debugPaintSizeEnabled and the debugPaint method on render objects for this kind of logic.",
        "createdAt" : "2018-03-22T16:39:18Z",
        "updatedAt" : "2018-03-22T16:39:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "944076ae7100a03827bd62ea79b79fa9e25c571c",
    "line" : 394,
    "diffHunk" : "@@ -1,1 +379,383 @@  // Set this to true to have outlines of the tap targets drawn over\n  // the chip.  This should never be checked in while set to 'true'.\n  static const bool _debugShowTapTargetOutlines = false;\n  static const EdgeInsets _iconPadding = const EdgeInsets.all(_kEdgePadding);\n"
  },
  {
    "id" : "70186cf3-0bbc-4353-aac5-ac071b8ef2fa",
    "prId" : 16039,
    "prUrl" : "https://github.com/flutter/flutter/pull/16039#pullrequestreview-108483583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf7fccc3-67e1-46a8-966b-cdc1b03e57ad",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I think you're going to want to litter all of the chip widget \"see also\" sections with pointers to all of the other chip types.",
        "createdAt" : "2018-03-29T16:35:53Z",
        "updatedAt" : "2018-04-04T01:11:18Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "1c5a8145-b23f-4a18-8de5-f9df2ec332ec",
        "parentId" : "cf7fccc3-67e1-46a8-966b-cdc1b03e57ad",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2018-03-31T04:08:28Z",
        "updatedAt" : "2018-04-04T01:11:19Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0fc3827ef0a4efdd5fca9a80c35a01e2b6dae93",
    "line" : 386,
    "diffHunk" : "@@ -1,1 +669,673 @@///\n/// See also:\n///\n///  * [Chip], a chip that displays information and can be deleted.\n///  * [InputChip], a chip that represents a complex piece of information, such"
  },
  {
    "id" : "19afc0be-bf31-4169-80cd-81cfea477324",
    "prId" : 16039,
    "prUrl" : "https://github.com/flutter/flutter/pull/16039#pullrequestreview-108098824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "311307e4-1a6d-4904-8979-16b7b99680d9",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Same comment as before per callback samples.",
        "createdAt" : "2018-03-29T16:52:00Z",
        "updatedAt" : "2018-04-04T01:11:18Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0fc3827ef0a4efdd5fca9a80c35a01e2b6dae93",
    "line" : 338,
    "diffHunk" : "@@ -1,1 +340,344 @@  /// then the chip will be disabled.\n  ///\n  /// ## Sample code\n  ///\n  /// ```dart"
  },
  {
    "id" : "0a0f5630-a932-4e94-9231-3dcb661c9e9b",
    "prId" : 16039,
    "prUrl" : "https://github.com/flutter/flutter/pull/16039#pullrequestreview-108426544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cb4ee79-c364-4123-8bd7-73e198b4cfd3",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2018-03-29T17:10:11Z",
        "updatedAt" : "2018-04-04T01:11:18Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "98a6da02-7bd4-46f2-ac4e-cc4d164bd5e0",
        "parentId" : "4cb4ee79-c364-4123-8bd7-73e198b4cfd3",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Dart FTW.",
        "createdAt" : "2018-03-31T00:16:07Z",
        "updatedAt" : "2018-04-04T01:11:19Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0fc3827ef0a4efdd5fca9a80c35a01e2b6dae93",
    "line" : 1355,
    "diffHunk" : "@@ -1,1 +1296,1300 @@      _isTapping = false;\n    });\n    // Only one of these can be set, so only one will be called.\n    widget.onSelected?.call(!widget.selected);\n    widget.onPressed?.call();"
  },
  {
    "id" : "b1f8489b-4337-4db2-955b-072ffb0f000d",
    "prId" : 16039,
    "prUrl" : "https://github.com/flutter/flutter/pull/16039#pullrequestreview-109068056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d5fa3bc-dd4e-44b7-8d62-d7bb0450660e",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This is a nice example and the get sync* yield stuff is pretty slick.",
        "createdAt" : "2018-04-03T17:30:20Z",
        "updatedAt" : "2018-04-04T01:11:19Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "6b270618-7bbf-4a1e-8a76-851de7ee99ca",
        "parentId" : "3d5fa3bc-dd4e-44b7-8d62-d7bb0450660e",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yeah, I liked that too.",
        "createdAt" : "2018-04-03T18:35:39Z",
        "updatedAt" : "2018-04-04T01:11:19Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0fc3827ef0a4efdd5fca9a80c35a01e2b6dae93",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +157,161 @@  ///   ];\n  ///\n  ///   Iterable<Widget> get actorWidgets sync* {\n  ///     for (Actor actor in _cast) {\n  ///       yield new Padding("
  },
  {
    "id" : "f183c5d9-0816-4780-b0e4-019c8b2dbb42",
    "prId" : 16039,
    "prUrl" : "https://github.com/flutter/flutter/pull/16039#pullrequestreview-109474397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5da4a95d-0b56-4d52-abb3-c68948c1cd18",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It's helpful that the defaults for all of the FooAttribute classes are listed however the implementations don't honor them.  Maybe the class doc should have a blanket statement about the defaults being what implementing classes typically do or something? Ideally the getters would just return their default values of course.",
        "createdAt" : "2018-04-03T17:45:01Z",
        "updatedAt" : "2018-04-04T01:11:19Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "4484499a-32f5-411a-b597-ac3062c0c469",
        "parentId" : "5da4a95d-0b56-4d52-abb3-c68948c1cd18",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "You're right, they don't *have* to honor them, but I set them up so they would be what was documented.  I see what you mean though.  Too bad dartdoc doesn't let us *add* to the inherited docs: then I wouldn't need to duplicate, but I could customize it for each overload.",
        "createdAt" : "2018-04-03T18:39:59Z",
        "updatedAt" : "2018-04-04T01:11:19Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "2c0e98ce-3fc1-497b-a66c-1ed2f6780f40",
        "parentId" : "5da4a95d-0b56-4d52-abb3-c68948c1cd18",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "[Discusssed with @gspencergoog  and @zanderso] There's no simple tidy way for the properties in the abstract classes to define a default value. So each abstract class will have to include a note about what \"default value\" means vis the read-only properties.",
        "createdAt" : "2018-04-03T20:27:25Z",
        "updatedAt" : "2018-04-04T01:11:19Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "c2fc43a4-7045-4ecf-a6e7-97701c5df1e9",
        "parentId" : "5da4a95d-0b56-4d52-abb3-c68948c1cd18",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "See also this approach which you can use for sharing docs while having per-instance details:\r\nhttps://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/widgets/navigator.dart#L606\r\nhttps://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/widgets/navigator.dart#L1346",
        "createdAt" : "2018-04-04T19:49:51Z",
        "updatedAt" : "2018-04-04T19:49:51Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0fc3827ef0a4efdd5fca9a80c35a01e2b6dae93",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +83,87 @@  /// The border to draw around the chip.\n  ///\n  /// Defaults to a [StadiumBorder]. Must not be null.\n  ShapeBorder get border;\n"
  },
  {
    "id" : "8590909c-401d-41af-8dbb-2783ea1540e1",
    "prId" : 16039,
    "prUrl" : "https://github.com/flutter/flutter/pull/16039#pullrequestreview-109069594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e64f4389-7208-4887-9ef5-1cdc9dd79aee",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This doesn't look like a FilterChip example",
        "createdAt" : "2018-04-03T18:07:59Z",
        "updatedAt" : "2018-04-04T01:11:19Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "9e970dd6-71f6-4184-a366-7d69fa7d809d",
        "parentId" : "e64f4389-7208-4887-9ef5-1cdc9dd79aee",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "That's because it isn't. Fixed.",
        "createdAt" : "2018-04-03T20:10:50Z",
        "updatedAt" : "2018-04-04T01:11:19Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0fc3827ef0a4efdd5fca9a80c35a01e2b6dae93",
    "line" : 768,
    "diffHunk" : "@@ -1,1 +770,774 @@/// and [border] arguments must not be null.\n///\n/// ## Sample code\n///\n/// ```dart"
  },
  {
    "id" : "e94a0f80-f7b9-4b92-958c-1cc3dff49cb1",
    "prId" : 16039,
    "prUrl" : "https://github.com/flutter/flutter/pull/16039#pullrequestreview-109476328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18203b1f-6109-4e1c-baa8-8eae78bfa8a9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "for classes you don't want people to extend (i.e. mixins and interfaces), include the following boilerplate code:\r\n```dart\r\n  // This class is intended to be used as an interface, and should not be\r\n  // extended directly.\r\n  factory ChipAttributes._() => null;\r\n```",
        "createdAt" : "2018-04-04T19:51:52Z",
        "updatedAt" : "2018-04-04T19:51:52Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "19f94f07-5d80-4b19-8eb5-3c39a2741c10",
        "parentId" : "18203b1f-6109-4e1c-baa8-8eae78bfa8a9",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i'll submit a patch for this",
        "createdAt" : "2018-04-04T19:55:48Z",
        "updatedAt" : "2018-04-04T19:55:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0fc3827ef0a4efdd5fca9a80c35a01e2b6dae93",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +64,68 @@///  * [ActionChip], represents an action related to primary content.\n///  * <https://material.google.com/components/chips.html>\nabstract class ChipAttributes {\n  /// The primary content of the chip.\n  ///"
  },
  {
    "id" : "5d81ab9f-fad9-4d4e-9b00-8a9bd176fac9",
    "prId" : 16039,
    "prUrl" : "https://github.com/flutter/flutter/pull/16039#pullrequestreview-109775973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be2bd768-9232-4b48-bba0-6f44faa662da",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "normally we call this `shape`, not `border`; was this an intentional choice?",
        "createdAt" : "2018-04-04T19:57:08Z",
        "updatedAt" : "2018-04-04T19:57:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "136dd152-2617-4a89-af20-d930abbbb0ca",
        "parentId" : "be2bd768-9232-4b48-bba0-6f44faa662da",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Well... yes?  It was what I originally named it when I created the StadiumBorder, and so it's in the Chip API, so I didn't want to change it for this.  If you're OK with breaking the few people who may have discovered this feature, I'm happy doing that too.",
        "createdAt" : "2018-04-05T15:34:43Z",
        "updatedAt" : "2018-04-05T15:34:43Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "1b962ca3-cdd2-4222-9834-a12ee514a57e",
        "parentId" : "be2bd768-9232-4b48-bba0-6f44faa662da",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Ah, makes sense.\r\n\r\nSure, let's change it. We probably have like 3 people using it right now. Long term benefit of being consistent everywhere probably outweighs that.",
        "createdAt" : "2018-04-05T16:06:40Z",
        "updatedAt" : "2018-04-05T16:06:40Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0fc3827ef0a4efdd5fca9a80c35a01e2b6dae93",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +84,88 @@  ///\n  /// Defaults to a [StadiumBorder]. Must not be null.\n  ShapeBorder get border;\n\n  /// Color to be used for the unselected, enabled chip's background."
  },
  {
    "id" : "05378dda-5202-4923-b6eb-df5b7fde6b85",
    "prId" : 16420,
    "prUrl" : "https://github.com/flutter/flutter/pull/16420#pullrequestreview-114066308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec4f1031-06ef-4a89-bca2-ea3374e110a6",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "You don't want copyWith here, since you are literally overriding every value. :-) Just call the constructor.",
        "createdAt" : "2018-04-20T17:40:30Z",
        "updatedAt" : "2018-04-20T17:40:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a65a6191267dafd0fdc3dcf82ff90215d8e7b9b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1898,1902 @@    if (constraints.maxWidth.isFinite) {\n      label.layout(\n        constraints.copyWith(\n          minWidth: 0.0,\n          maxWidth: math.max("
  },
  {
    "id" : "062110be-6ed8-426d-8915-4321d3f3049e",
    "prId" : 16420,
    "prUrl" : "https://github.com/flutter/flutter/pull/16420#pullrequestreview-114066365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "971c142c-75c7-40aa-8260-6363420ae010",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "just like you do here",
        "createdAt" : "2018-04-20T17:40:39Z",
        "updatedAt" : "2018-04-20T17:40:39Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a65a6191267dafd0fdc3dcf82ff90215d8e7b9b",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1912,1916 @@      label.layout(\n        new BoxConstraints(\n          minHeight: rawSize.height,\n          maxHeight: size.height,\n          minWidth: 0.0,"
  },
  {
    "id" : "68439a07-d1b5-4952-9c7b-da3ee842c669",
    "prId" : 16447,
    "prUrl" : "https://github.com/flutter/flutter/pull/16447#pullrequestreview-111442034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c636282-b3e3-4cea-890c-9bc910402cb8",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I don't really understand the logic of verifying that Material and MediaQuery ancestors exist but not Theme or ChipTheme or Directionality.  There are similar asserts, and lack of asserts, in many material widgets; it's not just the Chips.",
        "createdAt" : "2018-04-11T21:31:55Z",
        "updatedAt" : "2018-04-12T15:57:18Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "13993c64-f57c-4fda-a1ce-521c53a18a1c",
        "parentId" : "4c636282-b3e3-4cea-890c-9bc910402cb8",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK, good point.  I guess part of it is not knowing what all of the available `debugCheck*` functions are.\r\n\r\nI think the logic is that Theme.of(context) will assert if there isn't one in the tree, and since ChipTheme.of(context) falls back to Theme.of(context) if it doesn't find one of itself, then it'll already assert if there isn't a a Theme or a ChipTheme.  I added one here for Directionality.",
        "createdAt" : "2018-04-11T23:57:06Z",
        "updatedAt" : "2018-04-12T15:57:47Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2527f4f09bc1893f2c4ca1c8e56906393b2231d2",
    "line" : 449,
    "diffHunk" : "@@ -1,1 +1362,1366 @@  Widget build(BuildContext context) {\n    assert(debugCheckHasMaterial(context));\n    assert(debugCheckHasMediaQuery(context));\n    assert(debugCheckHasDirectionality(context));\n"
  },
  {
    "id" : "73316bcb-0772-4bf2-9b91-a7ffec652af7",
    "prId" : 21231,
    "prUrl" : "https://github.com/flutter/flutter/pull/21231#pullrequestreview-151196033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13d03597-b2d3-4eca-a7fd-965ae5e61e8d",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Looks like you need an `assert(clipBehavior != nll)`",
        "createdAt" : "2018-08-30T20:00:10Z",
        "updatedAt" : "2018-08-30T21:53:47Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "4588be0c-d6f2-4e67-b462-78eb55c03c65",
        "parentId" : "13d03597-b2d3-4eca-a7fd-965ae5e61e8d",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Done.",
        "createdAt" : "2018-08-30T21:52:00Z",
        "updatedAt" : "2018-08-30T21:53:47Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "be59ec90fc946673730b3b33c15a199a6f0de500",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +550,554 @@  ///\n  /// The [label], [isEnabled], [selected], and [clipBehavior] arguments must\n  /// not be null.\n  const InputChip({\n    Key key,"
  },
  {
    "id" : "f021cf5d-c9be-4118-a37f-c9b6beb1f5c2",
    "prId" : 28163,
    "prUrl" : "https://github.com/flutter/flutter/pull/28163#pullrequestreview-205976211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7396f5f8-2185-40d6-b1ba-a1354dab62c3",
        "parentId" : null,
        "authorId" : "209f805a-621a-40dd-b493-fb897c4b0bcb",
        "body" : "Get another opinion on whether 'normalShadowColor' would be better.",
        "createdAt" : "2019-02-20T00:52:09Z",
        "updatedAt" : "2019-02-20T21:11:13Z",
        "lastEditedBy" : "209f805a-621a-40dd-b493-fb897c4b0bcb",
        "tags" : [
        ]
      },
      {
        "id" : "2d2392e7-c3ce-4b21-b8dc-04ddf51f3d4a",
        "parentId" : "7396f5f8-2185-40d6-b1ba-a1354dab62c3",
        "authorId" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "body" : "I'm leaning towards just `shadowColor` but will see what @HansMuller thinks.",
        "createdAt" : "2019-02-20T14:24:00Z",
        "updatedAt" : "2019-02-20T21:11:13Z",
        "lastEditedBy" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "tags" : [
        ]
      },
      {
        "id" : "9bb26eb3-ca7f-4570-b07e-53e91fe7b6c4",
        "parentId" : "7396f5f8-2185-40d6-b1ba-a1354dab62c3",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "In the recent BottomNavigationBar change and in the TabBar theme we used selectedFoo and unselectedFoo but we haven't been consistent about the naming convention. Using shadowColor and selectedShadowColor is OK with me.",
        "createdAt" : "2019-02-20T20:12:17Z",
        "updatedAt" : "2019-02-20T21:11:13Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fff5b50a34bf91c8e8a9dda68281f8ba89c67",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +123,127 @@  ///\n  /// The default is [Colors.black].\n  Color get shadowColor;\n}\n"
  },
  {
    "id" : "dc045d48-9aa7-40e2-b5be-807cc2e5de10",
    "prId" : 31861,
    "prUrl" : "https://github.com/flutter/flutter/pull/31861#pullrequestreview-232721192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30b13d5f-37b9-4e3b-a86c-526599c2f124",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Is the labelPadding applied unconditionally, or only if there's an avatar and a deleteIcon (in that case would it be applied twice?",
        "createdAt" : "2019-05-01T19:00:03Z",
        "updatedAt" : "2019-05-01T19:46:21Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "c1a00d33-4245-40d1-82db-00aa2c8e3817",
        "parentId" : "30b13d5f-37b9-4e3b-a86c-526599c2f124",
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "It should be applied unconditionally according to https://material.io/design/components/chips.html#specs",
        "createdAt" : "2019-05-01T19:37:07Z",
        "updatedAt" : "2019-05-01T19:46:21Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3002a44c4d761e2233f8d7e5fe70734443a0d99c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2193,2197 @@        constraints.maxWidth\n        - iconSizes\n        - theme.labelPadding.horizontal\n        - theme.padding.horizontal,\n      );"
  },
  {
    "id" : "701d1379-b6eb-47ff-a3bd-b1d01c81b0a7",
    "prId" : 37809,
    "prUrl" : "https://github.com/flutter/flutter/pull/37809#pullrequestreview-274606254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00f90ff2-ffc4-4835-a92f-2560e0c757ef",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Here and elsewhere.\r\n\r\nIs a focusNode always created? What happens if autofocus is true and focusNode is null? What if I don't want this widget to take the focus? The https://master-api.flutter.dev/flutter/widgets/Focus/focusNode.html doc doesn't mention this stuff.",
        "createdAt" : "2019-08-13T18:26:32Z",
        "updatedAt" : "2019-08-14T22:22:35Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "996ff933-ca3f-4eae-a5d7-f1ad81bd5c7d",
        "parentId" : "00f90ff2-ffc4-4835-a92f-2560e0c757ef",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "It says `If one is not supplied, then one will be allocated and owned by this widget.`, so it means that one is only created if you don't supply one. I added \"The widget will be focusable even if a [focusNode] is not supplied\", so it should be obvious that autofocus still works then. Your point about not wanting to take focus is a good one, but I think I'll address that (as we discussed) in another PR.",
        "createdAt" : "2019-08-13T23:28:48Z",
        "updatedAt" : "2019-08-14T22:22:35Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4c510d74a3d619605cbecf6357d51a756b0c110",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +100,104 @@\n  /// {@macro flutter.widgets.Focus.focusNode}\n  FocusNode get focusNode;\n\n  /// {@macro flutter.widgets.Focus.autofocus}"
  },
  {
    "id" : "cbc2f612-285e-4139-b70d-06f38a5540cf",
    "prId" : 38568,
    "prUrl" : "https://github.com/flutter/flutter/pull/38568#pullrequestreview-276158765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e764149d-fd5a-4e23-b47d-268e40252509",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This and similar is a breaking change. I think we should do it, but we should announce it first.",
        "createdAt" : "2019-08-16T20:37:17Z",
        "updatedAt" : "2019-08-19T22:42:10Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "db067916ab5d8a0525febc76faf01aad1904fc9d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1230,1234 @@    this.shadowColor,\n  }) : assert(label != null),\n       assert(clipBehavior != null),\n       assert(autofocus != null),\n       assert("
  },
  {
    "id" : "8434715e-085b-4df3-bf86-17f8314e001d",
    "prId" : 40608,
    "prUrl" : "https://github.com/flutter/flutter/pull/40608#pullrequestreview-288843223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a2d134e-f3be-4ea9-a539-f96bbdd0ba7b",
        "parentId" : null,
        "authorId" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "body" : "I know there's already a pattern of `FooChipAttributes`, but my personal preference would be to just add these parameters individually on any \"CheckMarkable\" chip. Then the chip types can pipe the params to `RawMaterialChip`. \r\n\r\nI guess there isn't really a con to having this though. Let's see what others think! ",
        "createdAt" : "2019-09-16T18:13:42Z",
        "updatedAt" : "2019-09-17T14:16:19Z",
        "lastEditedBy" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "tags" : [
        ]
      },
      {
        "id" : "15fd8241-00a4-4717-a306-589047ecc897",
        "parentId" : "9a2d134e-f3be-4ea9-a539-f96bbdd0ba7b",
        "authorId" : "6cff55ea-5671-4703-a864-79795e21a275",
        "body" : "I did this mainly for consistency.  A new interface had to be added because although ChoiceChip, InputChip, and FilterChip are all selectable, ChoiceChip is not checkmarkable.\r\n\r\nIt is nice to use the interfaces because the documentation for each filed is inherently centralized (of course macros could do this too)",
        "createdAt" : "2019-09-16T19:16:14Z",
        "updatedAt" : "2019-09-17T14:16:19Z",
        "lastEditedBy" : "6cff55ea-5671-4703-a864-79795e21a275",
        "tags" : [
        ]
      }
    ],
    "commit" : "22c3fc7097cbfe2583a593a68f7b8db95b99f5da",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +259,263 @@///  * [FilterChip], uses tags or descriptive words as a way to filter content.\n///  * <https://material.io/design/components/chips.html>\nabstract class CheckmarkableChipAttributes {\n  // This class is intended to be used as an interface, and should not be\n  // extended directly."
  },
  {
    "id" : "ba25a639-acb1-4136-988b-bece851f845e",
    "prId" : 40608,
    "prUrl" : "https://github.com/flutter/flutter/pull/40608#pullrequestreview-288835101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be6f9fb5-7101-43f2-9e82-cc5a765f46fe",
        "parentId" : null,
        "authorId" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "body" : "Was the implicit behavior before that the checkmark would show if not specified? I feel like I would expect `showCheckmark` to default to false.",
        "createdAt" : "2019-09-16T18:21:26Z",
        "updatedAt" : "2019-09-17T14:16:19Z",
        "lastEditedBy" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "tags" : [
        ]
      },
      {
        "id" : "c0e95d55-bb29-4d80-9448-fadaa37fd677",
        "parentId" : "be6f9fb5-7101-43f2-9e82-cc5a765f46fe",
        "authorId" : "6cff55ea-5671-4703-a864-79795e21a275",
        "body" : "The default behavior is to show the check mark when the chip is selected",
        "createdAt" : "2019-09-16T19:00:34Z",
        "updatedAt" : "2019-09-17T14:16:19Z",
        "lastEditedBy" : "6cff55ea-5671-4703-a864-79795e21a275",
        "tags" : [
        ]
      }
    ],
    "commit" : "22c3fc7097cbfe2583a593a68f7b8db95b99f5da",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +1769,1773 @@    final Color selectedShadowColor = widget.selectedShadowColor ?? chipTheme.selectedShadowColor ?? _defaultShadowColor;\n    final Color checkmarkColor = widget.checkmarkColor ?? chipTheme.checkmarkColor;\n    final bool showCheckmark = widget.showCheckmark ?? chipTheme.showCheckmark ?? true;\n\n    final TextStyle effectiveLabelStyle = widget.labelStyle ?? chipTheme.labelStyle;"
  },
  {
    "id" : "ac101324-c625-47be-ade6-1530f16abdf7",
    "prId" : 41463,
    "prUrl" : "https://github.com/flutter/flutter/pull/41463#pullrequestreview-304861693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "526d295c-0daf-46b2-b929-c040ff948c55",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "In the before/after pictures the splash doesn't appear to be clipped by the Chip's shape (noticeable on the chip's right side). Presumably this is a pre-existing condition. If that's the case, please file a new issue.",
        "createdAt" : "2019-10-21T20:20:08Z",
        "updatedAt" : "2019-10-23T17:41:55Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "18ba8466-fbc8-4ef1-8c2d-c60a51a424f1",
        "parentId" : "526d295c-0daf-46b2-b929-c040ff948c55",
        "authorId" : "d48930d9-61da-495f-bdf6-e0405429cfbb",
        "body" : "That is a pre-existing condition, I filed the issue: \r\nhttps://github.com/flutter/flutter/issues/43215",
        "createdAt" : "2019-10-21T21:27:32Z",
        "updatedAt" : "2019-10-23T17:41:55Z",
        "lastEditedBy" : "d48930d9-61da-495f-bdf6-e0405429cfbb",
        "tags" : [
        ]
      }
    ],
    "commit" : "669c3d980d0840c0c046af0dc56f83585f047953",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1797,1801 @@            return Ink(\n              decoration: ShapeDecoration(\n                shape: shape,\n                color: getBackgroundColor(chipTheme),\n              ),"
  },
  {
    "id" : "f820adef-4ffe-472e-9fdd-893b2c4d3179",
    "prId" : 42779,
    "prUrl" : "https://github.com/flutter/flutter/pull/42779#pullrequestreview-303972859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc69ed16-5fee-45a2-b1ab-6045a27c47b5",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Will this PR also fix https://github.com/flutter/flutter/issues/42455, then?",
        "createdAt" : "2019-10-15T21:17:07Z",
        "updatedAt" : "2019-10-21T22:08:52Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "5c374bad-4164-46dc-ab45-fa7ae4096d12",
        "parentId" : "bc69ed16-5fee-45a2-b1ab-6045a27c47b5",
        "authorId" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "body" : "Probably not.\r\nThis PR only fixes the issue of having two ripples instead of one. It follows the same logic as the previous code: Tapping rightmost 1/3 or leftmost 1/3 (depending on text direction) of a chip with a delete button calls `onDeleted`.\r\n`_tapIsOnDeleteIcon` is the function that uses this logic to test if `onDeleted` should be called.\r\n\r\nWe can probably fix #42455 later in a separate PR.",
        "createdAt" : "2019-10-15T21:42:12Z",
        "updatedAt" : "2019-10-21T22:08:52Z",
        "lastEditedBy" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "tags" : [
        ]
      },
      {
        "id" : "ebcf3ada-afd0-46ec-b756-5b368fa9275b",
        "parentId" : "bc69ed16-5fee-45a2-b1ab-6045a27c47b5",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK.",
        "createdAt" : "2019-10-18T15:35:42Z",
        "updatedAt" : "2019-10-21T22:08:52Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5155c55467b86d9b88398613a926c8fe1994aab8",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +2875,2879 @@}\n\nbool _tapIsOnDeleteIcon({\n  bool hasDeleteButton,\n  Offset tapPosition,"
  },
  {
    "id" : "2afaaac2-9cc4-48e8-84b8-a4356975b53c",
    "prId" : 42779,
    "prUrl" : "https://github.com/flutter/flutter/pull/42779#pullrequestreview-306052138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60437f10-2819-4dd2-807d-891c32a13107",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This function is called after the delete icon has been laid out. Why aren't we using the delete icon RenderBox's [hitTest](https://api.flutter.dev/flutter/rendering/RenderBox/hitTest.html) to decide if it has been hit?",
        "createdAt" : "2019-10-21T20:05:07Z",
        "updatedAt" : "2019-10-21T22:08:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "b4fbdae4-086d-4fac-b09c-fb2f82966ecc",
        "parentId" : "60437f10-2819-4dd2-807d-891c32a13107",
        "authorId" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "body" : "@HansMuller \r\n\r\nThank you for your message!\r\n\r\nThis is the same logic used by the previous version. Since I am only fixing the \"double ripple\" issue in this PR, I will keep it unchanged here. I can definitely file a separate issue regarding this, and we can fix it in a separate PR.\r\n\r\n",
        "createdAt" : "2019-10-21T20:32:35Z",
        "updatedAt" : "2019-10-21T22:08:52Z",
        "lastEditedBy" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "tags" : [
        ]
      },
      {
        "id" : "88b920de-24f2-4680-bb2d-cd1ce73bd68c",
        "parentId" : "60437f10-2819-4dd2-807d-891c32a13107",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Sounds good; please file an issue. We should be assuming that the delete icon has been hit if the icon itself is hit per hitTest(), or - assuming that the icon is smaller than 48x48 - the tap occurs within a 48x48 area centered on the icon.",
        "createdAt" : "2019-10-21T20:53:36Z",
        "updatedAt" : "2019-10-21T22:08:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "e0f5c13a-517b-4316-ae02-30fba237910d",
        "parentId" : "60437f10-2819-4dd2-807d-891c32a13107",
        "authorId" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "body" : "Issue filed — Chip delete button tap target is always 1/3 the width of the whole chip. #43291",
        "createdAt" : "2019-10-23T17:10:55Z",
        "updatedAt" : "2019-10-23T17:10:55Z",
        "lastEditedBy" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "tags" : [
        ]
      }
    ],
    "commit" : "5155c55467b86d9b88398613a926c8fe1994aab8",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +2875,2879 @@}\n\nbool _tapIsOnDeleteIcon({\n  bool hasDeleteButton,\n  Offset tapPosition,"
  },
  {
    "id" : "e989d046-e71c-45c0-8c43-67b4e7fa2bea",
    "prId" : 46091,
    "prUrl" : "https://github.com/flutter/flutter/pull/46091#pullrequestreview-327238692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65421e35-9154-4927-8237-20b73090599d",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "It might be worth noting that this affects/impacts only the height of the chip, since I originally expected a width change, but looking at the code, it seems that this is not expected.",
        "createdAt" : "2019-12-04T22:23:41Z",
        "updatedAt" : "2019-12-05T21:44:29Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "da8f7c42-dfc0-4099-b1c1-46b0864aac9b",
        "parentId" : "65421e35-9154-4927-8237-20b73090599d",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, that's correct, chips only expand/contract vertically in response to density changes.",
        "createdAt" : "2019-12-05T00:23:37Z",
        "updatedAt" : "2019-12-05T21:44:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "69087f7b89829fca3da0d5a18f7eb8c8c35e902e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +118,122 @@  EdgeInsetsGeometry get padding;\n\n  /// Defines how compact the chip's layout will be.\n  ///\n  /// Chips are unaffected by horizontal density changes."
  },
  {
    "id" : "e5bc5719-6e46-465a-bd48-874ed8ac86ae",
    "prId" : 48740,
    "prUrl" : "https://github.com/flutter/flutter/pull/48740#pullrequestreview-342141059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebb92106-f9cd-44e2-86ce-20cdd0f005f9",
        "parentId" : null,
        "authorId" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "body" : "I wonder if this change should be moved inside the `_wrapWithTooltip` helper",
        "createdAt" : "2020-01-13T20:44:21Z",
        "updatedAt" : "2020-01-15T16:25:02Z",
        "lastEditedBy" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "tags" : [
        ]
      },
      {
        "id" : "b504d03d-4699-43e6-8e71-508f5f5b9ce3",
        "parentId" : "ebb92106-f9cd-44e2-86ce-20cdd0f005f9",
        "authorId" : "6cff55ea-5671-4703-a864-79795e21a275",
        "body" : "Good question. I chose not to because there is already a top level Semantics node for the whole chip, and the only other use case of _wrapTooltip is for the onPressed, and that tooltip message gets read from the top level Semantics node",
        "createdAt" : "2020-01-13T21:11:06Z",
        "updatedAt" : "2020-01-15T16:25:02Z",
        "lastEditedBy" : "6cff55ea-5671-4703-a864-79795e21a275",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cc4599994d258967ae49f4fe43786f4e9cfe343",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1785,1789 @@      return null;\n    }\n    return Semantics(\n      container: true,\n      button: true,"
  },
  {
    "id" : "a74eaeaf-7475-48df-9804-430a985364d7",
    "prId" : 48740,
    "prUrl" : "https://github.com/flutter/flutter/pull/48740#pullrequestreview-343348259",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8519be2-a3dd-4a17-ad40-825c6cbb5694",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Shouldn't this also specify `button: true`?",
        "createdAt" : "2020-01-15T01:20:19Z",
        "updatedAt" : "2020-01-15T16:25:02Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "84b80505-2c9c-47af-b21b-816e61d14761",
        "parentId" : "f8519be2-a3dd-4a17-ad40-825c6cbb5694",
        "authorId" : "6cff55ea-5671-4703-a864-79795e21a275",
        "body" : "Done",
        "createdAt" : "2020-01-15T16:25:02Z",
        "updatedAt" : "2020-01-15T16:25:03Z",
        "lastEditedBy" : "6cff55ea-5671-4703-a864-79795e21a275",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cc4599994d258967ae49f4fe43786f4e9cfe343",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1786,1790 @@    }\n    return Semantics(\n      container: true,\n      button: true,\n      child: _wrapWithTooltip("
  }
]