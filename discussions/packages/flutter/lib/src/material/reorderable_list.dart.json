[
  {
    "id" : "7f7ee607-c2ba-473a-8523-e77876762f20",
    "prId" : 18374,
    "prUrl" : "https://github.com/flutter/flutter/pull/18374#pullrequestreview-128615780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdda81e4-38b4-40aa-8e9d-d9907c5d474a",
        "parentId" : null,
        "authorId" : "ca9efae2-2bf8-426e-9b8e-d11f86f60cb9",
        "body" : "Please consider this method closely, it contains most of the complicated logic.",
        "createdAt" : "2018-06-14T02:00:15Z",
        "updatedAt" : "2018-07-27T21:53:36Z",
        "lastEditedBy" : "ca9efae2-2bf8-426e-9b8e-d11f86f60cb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b7da79f94c3608f17f7d697d06fe07e887a9fad",
    "line" : 311,
    "diffHunk" : "@@ -1,1 +309,313 @@  // Wraps one of the widget's children in a DragTarget and Draggable.\n  // Handles up the logic for dragging and reordering items in the list.\n  Widget _wrap(Widget toWrap, int index, BoxConstraints constraints) {\n    assert(toWrap.key != null);\n    // We create a global key based on both the child key and index"
  },
  {
    "id" : "742918ab-5756-41a6-bae9-107f15759cf4",
    "prId" : 18374,
    "prUrl" : "https://github.com/flutter/flutter/pull/18374#pullrequestreview-136420903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9689ca21-ab82-4d0c-8274-fa2a4accb694",
        "parentId" : null,
        "authorId" : "a22e8790-c78b-40dc-b6b3-071d940ec0a2",
        "body" : "mulligan also needs support for a header widget that goes at the top of the scrollable view. I can ping you a CL where I added this if you'd like to see how we did it on the forked copy. ",
        "createdAt" : "2018-07-10T18:36:38Z",
        "updatedAt" : "2018-07-27T21:53:36Z",
        "lastEditedBy" : "a22e8790-c78b-40dc-b6b3-071d940ec0a2",
        "tags" : [
        ]
      },
      {
        "id" : "98bd501b-6dd1-4596-b72f-2dc1dd8e576d",
        "parentId" : "9689ca21-ab82-4d0c-8274-fa2a4accb694",
        "authorId" : "ca9efae2-2bf8-426e-9b8e-d11f86f60cb9",
        "body" : "Done.",
        "createdAt" : "2018-07-11T21:03:34Z",
        "updatedAt" : "2018-07-27T21:53:36Z",
        "lastEditedBy" : "ca9efae2-2bf8-426e-9b8e-d11f86f60cb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b7da79f94c3608f17f7d697d06fe07e887a9fad",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@\n  /// Creates a reorderable list.\n  ReorderableListView({\n    this.header,\n    @required this.children,"
  },
  {
    "id" : "0d4102cb-d68a-4e99-afd2-608b36cdfb73",
    "prId" : 21542,
    "prUrl" : "https://github.com/flutter/flutter/pull/21542#pullrequestreview-153453404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d4462e5-1134-49ae-95a9-7c5b6ef00993",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The analyzer rightfully complains that `MyDataObject` is not a thing.",
        "createdAt" : "2018-09-07T18:22:48Z",
        "updatedAt" : "2018-09-20T19:44:42Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "26b558a0bdf3c8e5e5186635aa197c9d3b13246b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +31,35 @@///\n/// ```dart\n/// final List<MyDataObject> backingList = <MyDataObject>[/* ... */];\n///\n/// void handleReorder(int oldIndex, int newIndex) {"
  },
  {
    "id" : "ddcda80e-e8b4-4378-8f9b-27e212961c75",
    "prId" : 64855,
    "prUrl" : "https://github.com/flutter/flutter/pull/64855#pullrequestreview-483646217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The problem with this approach is it'll fail if there's _two_ `ReorderableListView`s with items that have the same local keys. I think the solution is that `_GlobalObjectValueKey` should have two values, one is the key we're proxying to, and the other is the _ReorderableListContentState to which they belong. We can probably rename it to `_ReorderableListChildGlobalKey` or something, with arguments `final Key subkey` and `final _ReorderableListContentState state` or something like that, to make it clearer what is going on.",
        "createdAt" : "2020-08-29T18:06:48Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "30b7001c-2a5f-4fc9-8ef8-30f08016c15e",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "cabb37d6-f870-4dcb-9a86-bf99c1476a0a",
        "body" : "@Hixie \r\nThat's a great idea! Thanks for your comment. I will apply it immediately.",
        "createdAt" : "2020-08-30T05:28:42Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "cabb37d6-f870-4dcb-9a86-bf99c1476a0a",
        "tags" : [
        ]
      },
      {
        "id" : "f57b187c-68ce-4793-a436-534dd48acb46",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "@Hixie Add `_ReorderableListContentState` as a value of the key can not solve the situation where multiple items use the same local key, they have the same `_ReorderableListContentState`, which will lead to Multiple widgets used the same GlobalKey, such as:\r\n```\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ReorderableListView(\r\n      children: <Widget>[ InnerTest(key: ValueKey(0)), InnerTest(key: ValueKey(0)) ],\r\n      onReorder: (_, __) {},\r\n    );\r\n  }\r\n```\r\nThe reason why there is no problem here is its wrong implementation of `int get hashCode => identityHashCode(subKey);`\r\n\r\nProbably we could add the index into the values together to solve this problem.\r\n\r\nI think we should add this to the unit test case.\r\n",
        "createdAt" : "2020-09-07T09:32:02Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "37bdc93e-5a9b-4924-b0e6-b9882fba6332",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "body" : "@xu-baolin Two children can never have the same key, so the current behavior is correct",
        "createdAt" : "2020-09-07T12:46:59Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "tags" : [
        ]
      },
      {
        "id" : "608ce20c-cdc3-4d1d-acf2-fbc2e1bcd3ea",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "body" : "See: https://api.flutter.dev/flutter/foundation/Key-class.html\r\n\r\n\"Keys must be unique amongst the Elements with the same parent.\"",
        "createdAt" : "2020-09-07T12:47:38Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "tags" : [
        ]
      },
      {
        "id" : "50d7b038-f13a-4272-9f41-66473cefc792",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "I see, thank you. ",
        "createdAt" : "2020-09-07T14:15:39Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "e2de9784-6990-4e14-a35d-d44a4984e237",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "@PixelToast However, this change not an equivalent modification, and change the behavior of fault tolerance.\r\nCan we consider producing globalkey only through state and indexï¼Œso that we don't have to force developers to provide the widget with a key.",
        "createdAt" : "2020-09-07T14:43:09Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "d898e4a5-0697-4d5b-b405-b8e331b219a4",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "body" : "@xu-baolin No problem!\r\n\r\nThis PR is for fixing a specific bug and not extending functionality though, you are welcome to open a new issue to discuss any changes to functionality that would be nice to have.",
        "createdAt" : "2020-09-07T15:56:58Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f8b8ccb246ba786488ee75de21e16124471f2cb",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +623,627 @@  @override\n  int get hashCode => hashValues(subKey, state);\n}"
  },
  {
    "id" : "423f411f-b146-4a92-aacb-09c3b6556078",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574625833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa43dba7-681c-4d1c-878c-10271f4c0af2",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The overlay entry depends on on a ton of widget properties, so OK to do this unconditionally. Maybe a comment explaining as much..",
        "createdAt" : "2021-01-22T21:23:41Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 244,
    "diffHunk" : "@@ -1,1 +250,254 @@    // As this depends on pretty much everything, it\n    // is ok to mark this as dirty unconditionally.\n    _listOverlayEntry.markNeedsBuild();\n  }\n"
  },
  {
    "id" : "06bd4f03-245b-4867-8ef2-1d76de4e4963",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574698801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b515eac-636e-4aac-8db7-d23740d54d2f",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "These actions are OK if the list is reversed? I think they're OK, not sure.",
        "createdAt" : "2021-01-22T21:25:14Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "01522415-ed86-4f64-a493-dd7eab0ec072",
        "parentId" : "1b515eac-636e-4aac-8db7-d23740d54d2f",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Good question. I think so, as the indices all work the same in reverse, just the display is inverted. So moving to 0 is still moving to the start of the list, but the start of the list is displayed at the bottom instead of the top.\r\n",
        "createdAt" : "2021-01-22T23:49:29Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 388,
    "diffHunk" : "@@ -1,1 +302,306 @@\n    // Create the appropriate semantics actions.\n    void moveToStart() => reorder(index, 0);\n    void moveToEnd() => reorder(index, widget.children.length);\n    void moveBefore() => reorder(index, index - 1);"
  },
  {
    "id" : "345d6958-3c15-4a55-987f-b69624261c72",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f1db03f-babd-4987-9e41-4f734c034352",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: assert(buildDefaultDragHandles != null)",
        "createdAt" : "2021-01-22T22:44:11Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +77,81 @@    this.buildDefaultDragHandles = true,\n    this.proxyDecorator,\n  }) : assert(scrollDirection != null),\n       assert(onReorder != null),\n       assert(children != null),"
  },
  {
    "id" : "18531da5-e10f-41ae-addf-d5a77a9f6095",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574713655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c2342c0-a51c-41c5-9322-f122c99841be",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The semantics stuff should move to a lower level. If I bypass material's ReorderableListView and use the stuff from the widget layer directly, I should still get an a11y experience out of the box.",
        "createdAt" : "2021-01-22T22:48:24Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "447709da-6d1c-479e-b473-0da9ef36dffe",
        "parentId" : "5c2342c0-a51c-41c5-9322-f122c99841be",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "I agree, but that can come in a future PR.",
        "createdAt" : "2021-01-23T00:51:11Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 349,
    "diffHunk" : "@@ -1,1 +292,296 @@\nclass _ReorderableListContentState extends State<_ReorderableListContent> {\n  Widget _wrapWithSemantics(Widget child, int index) {\n    void reorder(int startIndex, int endIndex) {\n      if (startIndex != endIndex)"
  },
  {
    "id" : "8b05100e-f576-4434-8ea3-6cb0ed354fc1",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574714338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf95007f-3b8a-472c-90a7-25b3a310fac2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "MergeSemantics here is ... surprising. What if my re-orderable list is a bunch of Cards with multiple buttons on it? You wouldn't be able to activate those buttons via a11y anymore.",
        "createdAt" : "2021-01-22T22:54:27Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "0e3eb828-65b8-4bc0-9c84-040ca9f3c43c",
        "parentId" : "bf95007f-3b8a-472c-90a7-25b3a310fac2",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Yeah, that was a left over from the previous code. I will remove it.\r\n",
        "createdAt" : "2021-01-23T00:54:48Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 457,
    "diffHunk" : "@@ -1,1 +341,345 @@    // We also apply the relevant custom accessibility actions for moving the item\n    // up, down, to the start, and to the end of the list.\n    return MergeSemantics(\n      child: Semantics(\n        customSemanticsActions: semanticsActions,"
  },
  {
    "id" : "1d8cff2b-0249-4792-b9ca-240468a892a1",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574674914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a71451bc-47cb-4178-92e0-0e3d72f2fc63",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "What's this global key for?",
        "createdAt" : "2021-01-22T22:57:15Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 560,
    "diffHunk" : "@@ -1,1 +355,359 @@    //   _ReorderableItem so the widget versions can have them as well.\n    final Widget itemWithSemantics = _wrapWithSemantics(item, index);\n    final Key itemGlobalKey = _ReorderableListViewChildGlobalKey(item.key!, this);\n\n    if (widget.buildDefaultDragHandles) {"
  },
  {
    "id" : "8b0b2d2c-9350-4913-bbed-e2285884123e",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574714959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79cb4fc8-1509-4b9c-bec6-8292a6f70235",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "not necessarily in this PR, but now that the list is lazy, it would be nice to have a `ReorderableListView.builder` constructor, which takes a builder callback instead of a prebuild list of children.",
        "createdAt" : "2021-01-22T23:01:23Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "e5efe72d-9cac-4bcf-9174-6cf459c8da5b",
        "parentId" : "79cb4fc8-1509-4b9c-bec6-8292a6f70235",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Yup, I was talking about that with Hans. It is a little tricky as the `children` parameter to the main constructor is a public field that can't be null. I am thinking of ways to make this happen, but probably not for this PR.",
        "createdAt" : "2021-01-23T00:57:57Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +66,70 @@class ReorderableListView extends StatefulWidget {\n  /// Creates a reorderable list.\n  ReorderableListView({\n    Key? key,\n    this.header,"
  },
  {
    "id" : "2d537b0b-ea72-43a8-ad60-b9c2476e3a02",
    "prId" : 74299,
    "prUrl" : "https://github.com/flutter/flutter/pull/74299#pullrequestreview-574652548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58198f79-406c-4721-97c3-b806d9046dd1",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Can we add more docs here? - usually about the required params and defaults. ",
        "createdAt" : "2021-01-23T00:52:35Z",
        "updatedAt" : "2021-01-23T03:08:08Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bab1bc8eac089100109135782ea128782d39353",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +65,69 @@///{@end-tool}\nclass ReorderableListView extends StatefulWidget {\n  /// Creates a reorderable list.\n  ReorderableListView({\n    Key? key,"
  }
]