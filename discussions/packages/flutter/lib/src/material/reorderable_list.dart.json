[
  {
    "id" : "7f7ee607-c2ba-473a-8523-e77876762f20",
    "prId" : 18374,
    "prUrl" : "https://github.com/flutter/flutter/pull/18374#pullrequestreview-128615780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdda81e4-38b4-40aa-8e9d-d9907c5d474a",
        "parentId" : null,
        "authorId" : "ca9efae2-2bf8-426e-9b8e-d11f86f60cb9",
        "body" : "Please consider this method closely, it contains most of the complicated logic.",
        "createdAt" : "2018-06-14T02:00:15Z",
        "updatedAt" : "2018-07-27T21:53:36Z",
        "lastEditedBy" : "ca9efae2-2bf8-426e-9b8e-d11f86f60cb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b7da79f94c3608f17f7d697d06fe07e887a9fad",
    "line" : 311,
    "diffHunk" : "@@ -1,1 +309,313 @@  // Wraps one of the widget's children in a DragTarget and Draggable.\n  // Handles up the logic for dragging and reordering items in the list.\n  Widget _wrap(Widget toWrap, int index, BoxConstraints constraints) {\n    assert(toWrap.key != null);\n    // We create a global key based on both the child key and index"
  },
  {
    "id" : "742918ab-5756-41a6-bae9-107f15759cf4",
    "prId" : 18374,
    "prUrl" : "https://github.com/flutter/flutter/pull/18374#pullrequestreview-136420903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9689ca21-ab82-4d0c-8274-fa2a4accb694",
        "parentId" : null,
        "authorId" : "a22e8790-c78b-40dc-b6b3-071d940ec0a2",
        "body" : "mulligan also needs support for a header widget that goes at the top of the scrollable view. I can ping you a CL where I added this if you'd like to see how we did it on the forked copy. ",
        "createdAt" : "2018-07-10T18:36:38Z",
        "updatedAt" : "2018-07-27T21:53:36Z",
        "lastEditedBy" : "a22e8790-c78b-40dc-b6b3-071d940ec0a2",
        "tags" : [
        ]
      },
      {
        "id" : "98bd501b-6dd1-4596-b72f-2dc1dd8e576d",
        "parentId" : "9689ca21-ab82-4d0c-8274-fa2a4accb694",
        "authorId" : "ca9efae2-2bf8-426e-9b8e-d11f86f60cb9",
        "body" : "Done.",
        "createdAt" : "2018-07-11T21:03:34Z",
        "updatedAt" : "2018-07-27T21:53:36Z",
        "lastEditedBy" : "ca9efae2-2bf8-426e-9b8e-d11f86f60cb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b7da79f94c3608f17f7d697d06fe07e887a9fad",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@\n  /// Creates a reorderable list.\n  ReorderableListView({\n    this.header,\n    @required this.children,"
  },
  {
    "id" : "0d4102cb-d68a-4e99-afd2-608b36cdfb73",
    "prId" : 21542,
    "prUrl" : "https://github.com/flutter/flutter/pull/21542#pullrequestreview-153453404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d4462e5-1134-49ae-95a9-7c5b6ef00993",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The analyzer rightfully complains that `MyDataObject` is not a thing.",
        "createdAt" : "2018-09-07T18:22:48Z",
        "updatedAt" : "2018-09-20T19:44:42Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "26b558a0bdf3c8e5e5186635aa197c9d3b13246b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +31,35 @@///\n/// ```dart\n/// final List<MyDataObject> backingList = <MyDataObject>[/* ... */];\n///\n/// void handleReorder(int oldIndex, int newIndex) {"
  },
  {
    "id" : "ddcda80e-e8b4-4378-8f9b-27e212961c75",
    "prId" : 64855,
    "prUrl" : "https://github.com/flutter/flutter/pull/64855#pullrequestreview-483646217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The problem with this approach is it'll fail if there's _two_ `ReorderableListView`s with items that have the same local keys. I think the solution is that `_GlobalObjectValueKey` should have two values, one is the key we're proxying to, and the other is the _ReorderableListContentState to which they belong. We can probably rename it to `_ReorderableListChildGlobalKey` or something, with arguments `final Key subkey` and `final _ReorderableListContentState state` or something like that, to make it clearer what is going on.",
        "createdAt" : "2020-08-29T18:06:48Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "30b7001c-2a5f-4fc9-8ef8-30f08016c15e",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "cabb37d6-f870-4dcb-9a86-bf99c1476a0a",
        "body" : "@Hixie \r\nThat's a great idea! Thanks for your comment. I will apply it immediately.",
        "createdAt" : "2020-08-30T05:28:42Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "cabb37d6-f870-4dcb-9a86-bf99c1476a0a",
        "tags" : [
        ]
      },
      {
        "id" : "f57b187c-68ce-4793-a436-534dd48acb46",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "@Hixie Add `_ReorderableListContentState` as a value of the key can not solve the situation where multiple items use the same local key, they have the same `_ReorderableListContentState`, which will lead to Multiple widgets used the same GlobalKey, such as:\r\n```\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ReorderableListView(\r\n      children: <Widget>[ InnerTest(key: ValueKey(0)), InnerTest(key: ValueKey(0)) ],\r\n      onReorder: (_, __) {},\r\n    );\r\n  }\r\n```\r\nThe reason why there is no problem here is its wrong implementation of `int get hashCode => identityHashCode(subKey);`\r\n\r\nProbably we could add the index into the values together to solve this problem.\r\n\r\nI think we should add this to the unit test case.\r\n",
        "createdAt" : "2020-09-07T09:32:02Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "37bdc93e-5a9b-4924-b0e6-b9882fba6332",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "body" : "@xu-baolin Two children can never have the same key, so the current behavior is correct",
        "createdAt" : "2020-09-07T12:46:59Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "tags" : [
        ]
      },
      {
        "id" : "608ce20c-cdc3-4d1d-acf2-fbc2e1bcd3ea",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "body" : "See: https://api.flutter.dev/flutter/foundation/Key-class.html\r\n\r\n\"Keys must be unique amongst the Elements with the same parent.\"",
        "createdAt" : "2020-09-07T12:47:38Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "tags" : [
        ]
      },
      {
        "id" : "50d7b038-f13a-4272-9f41-66473cefc792",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "I see, thank you. ",
        "createdAt" : "2020-09-07T14:15:39Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "e2de9784-6990-4e14-a35d-d44a4984e237",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "@PixelToast However, this change not an equivalent modification, and change the behavior of fault tolerance.\r\nCan we consider producing globalkey only through state and indexï¼Œso that we don't have to force developers to provide the widget with a key.",
        "createdAt" : "2020-09-07T14:43:09Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "d898e4a5-0697-4d5b-b405-b8e331b219a4",
        "parentId" : "b3ef6f62-6572-41f4-8cdf-a7093328a68d",
        "authorId" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "body" : "@xu-baolin No problem!\r\n\r\nThis PR is for fixing a specific bug and not extending functionality though, you are welcome to open a new issue to discuss any changes to functionality that would be nice to have.",
        "createdAt" : "2020-09-07T15:56:58Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "a69f95d0-37c1-4c65-a70c-3a85344387a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f8b8ccb246ba786488ee75de21e16124471f2cb",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +623,627 @@  @override\n  int get hashCode => hashValues(subKey, state);\n}"
  }
]