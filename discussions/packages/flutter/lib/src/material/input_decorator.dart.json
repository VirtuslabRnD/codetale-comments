[
  {
    "id" : "9dca1ea5-b24d-4fdf-be63-09d980de0ed1",
    "prId" : 9119,
    "prUrl" : "https://github.com/flutter/flutter/pull/9119#pullrequestreview-30365284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb83561e-4b37-47a5-9094-f74c84c16636",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "if we factored this out into the InputDecoration class itself, then you could pass in entirely novel decorations, much as we do with DecoratedBox.\r\n\r\nActually that kind of seems like a primitive we should have. `build(BuildContext context, Widget child)`. AnimatedBuilder does something like that, though it passes in a Listenable as well IIRC.",
        "createdAt" : "2017-03-31T17:35:56Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d18d8b58-596e-452b-80c9-658a13c76b47",
        "parentId" : "cb83561e-4b37-47a5-9094-f74c84c16636",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Actually AnimatedBuilder's builder does have exactly that signature. The listenable is passed in out of band.",
        "createdAt" : "2017-03-31T17:37:30Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e9af38c9-2089-4536-9da5-69af93e16f25",
        "parentId" : "cb83561e-4b37-47a5-9094-f74c84c16636",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Maybe AnimatedBuilder is exactly what we should use here, with InputDecoration just being a class that extends Listenable and exposes a method with that signature, and you pass in both the Decoration and the method, or something...",
        "createdAt" : "2017-03-31T17:38:51Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "3ce4ee42-6f2e-4a95-b3b2-f3273b248fc1",
        "parentId" : "cb83561e-4b37-47a5-9094-f74c84c16636",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It's not quite so clean because there's some interaction between the InputDecoration data and the other parameters to the widget.  For example, the baseStyle and the isFocused bit.\r\n\r\nAlso, you don't gain a ton by doing that because you can always pass null to TextField to remove the decoration and just wrap it yourself with whatever you want.",
        "createdAt" : "2017-03-31T23:43:47Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "abd6da3d1ab5c0a5221dd9d1c2ab3f320cdde802",
    "line" : 328,
    "diffHunk" : "@@ -1,1 +326,330 @@\n  @override\n  Widget build(BuildContext context) {\n    assert(debugCheckHasMaterial(context));\n    final ThemeData themeData = Theme.of(context);"
  },
  {
    "id" : "e9b56b3c-89be-429e-8135-6c118464cce4",
    "prId" : 10852,
    "prUrl" : "https://github.com/flutter/flutter/pull/10852#pullrequestreview-45190091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6410899-a3b2-4d3e-83af-ceb70b2551ca",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Should we be animating this stuff?",
        "createdAt" : "2017-06-20T05:54:43Z",
        "updatedAt" : "2017-06-20T16:18:27Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "4f11050d-ce82-43bb-862f-ae0261a24210",
        "parentId" : "c6410899-a3b2-4d3e-83af-ceb70b2551ca",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "We could cross fade between the error and helper text, and animate the divider's color change. I'll file an issue.",
        "createdAt" : "2017-06-20T16:17:43Z",
        "updatedAt" : "2017-06-20T16:18:27Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "175a40b86682af87afd42d47aa757e111fcb3bf1",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +525,529 @@        child: new Text(\n          errorText ?? helperText,\n          style: subtextStyle,\n          textAlign: textAlign,\n          overflow: TextOverflow.ellipsis,"
  },
  {
    "id" : "516d7e77-3334-49a4-a6b5-d88d400b249a",
    "prId" : 12595,
    "prUrl" : "https://github.com/flutter/flutter/pull/12595#pullrequestreview-70367850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c356b7-6d4f-43aa-9222-05c0d7463788",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2017-10-18T22:08:10Z",
        "updatedAt" : "2017-10-19T01:44:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b136c936e3890600ae6b8c1de3394da8d18b7ef",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +561,565 @@            style: subtextStyle,\n            textAlign: textAlign,\n            overflow: TextOverflow.ellipsis,\n          ),\n        ),"
  },
  {
    "id" : "144554fb-615d-4236-be08-2260c16f442f",
    "prId" : 12648,
    "prUrl" : "https://github.com/flutter/flutter/pull/12648#pullrequestreview-71264141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f98f1e65-028f-40df-b6ee-ec89c2572b4a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "at some point soon we're really going to have to turn this into a Diagnosticable",
        "createdAt" : "2017-10-23T17:23:42Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dc9f3bb644ef3860d1cd6c16636813f58e41cdf",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +332,336 @@      description.add('counterStyle: $counterStyle');\n    return 'InputDecoration(${description.join(', ')})';\n  }\n}\n"
  },
  {
    "id" : "7c93c840-8891-4b29-8876-7bdac7c6ae67",
    "prId" : 13734,
    "prUrl" : "https://github.com/flutter/flutter/pull/13734#pullrequestreview-85206901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99ad21d2-cdce-4e9d-9d80-869ae957055d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should we just fill if fillColor is non-null, and not fill if it's null?",
        "createdAt" : "2017-12-21T22:35:49Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ba38bf0b-9fd0-41dc-bae5-0dc48bdd4c6d",
        "parentId" : "99ad21d2-cdce-4e9d-9d80-869ae957055d",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Most apps will not want to actually specify a fill color, they'll just the default one that's based on the theme's brightness.",
        "createdAt" : "2017-12-21T22:38:42Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "f93df3a6-ae70-46c9-a1f1-9773d9440dcc",
        "parentId" : "99ad21d2-cdce-4e9d-9d80-869ae957055d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(that would work better in a world where there's a way to configure the fill color in the theme explicitly)",
        "createdAt" : "2017-12-21T22:53:57Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "53a7fa97-26b8-42d0-a2d7-e72cd0d74be9",
        "parentId" : "99ad21d2-cdce-4e9d-9d80-869ae957055d",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I agree.  What might work best here is an InputDecoratorTheme which would be part of ThemeData like IconTheme and textTheme. I will add that in a follow-up PR.",
        "createdAt" : "2017-12-21T23:09:03Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "da570e6006bd7c56f5b45a7867290de2b86a60fa",
    "line" : 1908,
    "diffHunk" : "@@ -1,1 +1903,1907 @@  ///\n  /// This property is false by default.\n  final bool filled;\n\n  /// The color to fill the decoration's container with, if [filled] is true."
  },
  {
    "id" : "3873016d-a208-4d4f-9dfc-85064c5a7d5d",
    "prId" : 13734,
    "prUrl" : "https://github.com/flutter/flutter/pull/13734#pullrequestreview-86512744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3b38d9c-87b1-4c36-9ead-8cffd1f895e5",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this only seems to be used in tests?",
        "createdAt" : "2018-01-03T21:40:09Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "93212b66-8d3c-4c54-a4a6-c2f3d2f51754",
        "parentId" : "f3b38d9c-87b1-4c36-9ead-8cffd1f895e5",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It was also used by the ripple (splash) code, since the ripple is clipped to the container's boundary. I took the ripple changes out of this PR to keep it smaller; I'm going to try and land the splash=>ripple changes next.",
        "createdAt" : "2018-01-03T22:38:41Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "da570e6006bd7c56f5b45a7867290de2b86a60fa",
    "line" : 1309,
    "diffHunk" : "@@ -1,1 +1305,1309 @@  ///\n  /// [TextField] renders ink splashes within the container.\n  static RenderBox containerOf(BuildContext context) {\n    final _RenderDecoration result = context.ancestorRenderObjectOfType(const TypeMatcher<_RenderDecoration>());\n    return result?.container;"
  },
  {
    "id" : "27766285-9d2b-4aa5-9e36-26df1e3c9ad6",
    "prId" : 13734,
    "prUrl" : "https://github.com/flutter/flutter/pull/13734#pullrequestreview-89882016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "091ff244-856a-4a08-a41c-b9704f1236c3",
        "parentId" : null,
        "authorId" : "0a7b5caf-08df-4bec-be56-11ced29e020b",
        "body" : "this line throws an exception if border: null and a labelText is used",
        "createdAt" : "2018-01-09T17:54:09Z",
        "updatedAt" : "2018-01-09T17:54:10Z",
        "lastEditedBy" : "0a7b5caf-08df-4bec-be56-11ced29e020b",
        "tags" : [
        ]
      },
      {
        "id" : "95f33d9d-476d-4e77-bfdb-351f3e41bd8c",
        "parentId" : "091ff244-856a-4a08-a41c-b9704f1236c3",
        "authorId" : "b844a9ac-6d5a-4e67-85c6-f6a3bf31e506",
        "body" : "jup, can confirm.\r\nhttps://gist.github.com/BenSower/e4bda931033a0fa306722e3da3b02fc9",
        "createdAt" : "2018-01-10T10:20:07Z",
        "updatedAt" : "2018-01-10T10:20:07Z",
        "lastEditedBy" : "b844a9ac-6d5a-4e67-85c6-f6a3bf31e506",
        "tags" : [
        ]
      },
      {
        "id" : "abedc825-2d6d-4f86-b8dc-5cd1698dbf6b",
        "parentId" : "091ff244-856a-4a08-a41c-b9704f1236c3",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Sorry to have missed this. I've filed and issue and will fix:\r\nhttps://github.com/flutter/flutter/issues/14165\r\n",
        "createdAt" : "2018-01-18T18:17:09Z",
        "updatedAt" : "2018-01-18T18:17:09Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "da570e6006bd7c56f5b45a7867290de2b86a60fa",
    "line" : 1003,
    "diffHunk" : "@@ -1,1 +999,1003 @@      // The center of the outline border label ends up a little below the\n      // center of the top border line.\n      final double floatingY = decoration.border.isOutline ? -labelHeight * 0.25 : contentPadding.top;\n      final double scale = lerpDouble(1.0, 0.75, t);\n      final double dx = textDirection == TextDirection.rtl"
  },
  {
    "id" : "9c794edf-1ee7-41b8-ace7-4294e09aca8e",
    "prId" : 14177,
    "prUrl" : "https://github.com/flutter/flutter/pull/14177#pullrequestreview-90241194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de9ffbaf-01c2-42ad-a381-0dffa538ff3f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "update this to mention that this controls the area that `filled` and `fillColor` fill",
        "createdAt" : "2018-01-19T20:48:54Z",
        "updatedAt" : "2018-01-20T01:25:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a3a49f135e932c012279b21adcd64249ad88dfe",
    "line" : 500,
    "diffHunk" : "@@ -1,1 +2300,2304 @@  ///  * [OutlineInputBorder], an [InputDecorator] border which draws a\n  ///    rounded rectangle around the input decorator's container.\n  final InputBorder border;\n}"
  },
  {
    "id" : "6e3812c5-efd1-4c74-8ffe-a14afe9515bf",
    "prId" : 14177,
    "prUrl" : "https://github.com/flutter/flutter/pull/14177#pullrequestreview-90289957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39f82be3-b923-48e1-a41c-f674d5f47556",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i don't think InputBorder.none should be special here. If I create a new InputBorder class that is otherwise identical to _NoInputBorder, it should work the same.",
        "createdAt" : "2018-01-19T23:44:50Z",
        "updatedAt" : "2018-01-20T01:25:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "127882a4-c406-44d7-9f51-47d64daf8e7a",
        "parentId" : "39f82be3-b923-48e1-a41c-f674d5f47556",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "You are correct. At the moment there's no other way to recognize an InputBorder that's not actually going to draw a border.  I think could use the value of InputBorder.borderSide by giving the initial value (current BorderSide.none) some meaning. I will address this in a separate PR.",
        "createdAt" : "2018-01-20T01:36:42Z",
        "updatedAt" : "2018-01-20T01:36:43Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "cc8cfce9-7ec5-4be6-87c0-92f559d0b721",
        "parentId" : "39f82be3-b923-48e1-a41c-f674d5f47556",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Filed: https://github.com/flutter/flutter/issues/14197",
        "createdAt" : "2018-01-20T01:57:22Z",
        "updatedAt" : "2018-01-20T01:57:23Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a3a49f135e932c012279b21adcd64249ad88dfe",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +1469,1473 @@\n  double get _borderWeight {\n    if (decoration.isCollapsed || decoration.border == InputBorder.none || !decoration.enabled)\n      return 0.0;\n    return isFocused ? 2.0 : 1.0;"
  },
  {
    "id" : "11d073d9-6338-47d0-9459-50274c2ac1b2",
    "prId" : 17292,
    "prUrl" : "https://github.com/flutter/flutter/pull/17292#pullrequestreview-117709770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7eef4f8-fa91-45df-b259-532ee7d19915",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Do you also want to be able to specify the overflow here?  I know that at least for Arabic, ellipsis is pretty bad as a choice (it cuts off whole words only, so often doesn't fill the available space).  It's a good default, but it would be good to be able to specify it. (See https://github.com/flutter/flutter/issues/16450 also)",
        "createdAt" : "2018-05-04T17:42:34Z",
        "updatedAt" : "2018-05-04T17:42:50Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "b3b2a43e-4b74-4abf-a414-8125a7be0cfd",
        "parentId" : "c7eef4f8-fa91-45df-b259-532ee7d19915",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "That seems reasonable. An alternative would be an error widget value, which would would allow one to display anything at all for the error. The implementation is already structured this way. The hardest part might be deciding what to call the property. Maybe `InputDecoration.errorWidget`.\r\n\r\nIf it's OK with you, I'd like to defer this bit of evolution to a separate PR.",
        "createdAt" : "2018-05-04T17:53:40Z",
        "updatedAt" : "2018-05-04T17:53:40Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "017b14a5-94a2-4d42-b863-85eedeb0ec73",
        "parentId" : "c7eef4f8-fa91-45df-b259-532ee7d19915",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Sure.",
        "createdAt" : "2018-05-04T18:12:55Z",
        "updatedAt" : "2018-05-04T18:12:55Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd515afbf3cb940a82304f7d8df7afedf087faa2",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +345,349 @@          style: widget.errorStyle,\n          textAlign: widget.textAlign,\n          overflow: TextOverflow.ellipsis,\n          maxLines: widget.errorMaxLines,\n        ),"
  },
  {
    "id" : "9d8995b3-18b7-4e67-9a7d-c572e6f6430e",
    "prId" : 19514,
    "prUrl" : "https://github.com/flutter/flutter/pull/19514#pullrequestreview-138680913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fb98576-3d6a-4425-a0ec-683b6804e326",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It's worth explaining that the prefix widget's baseline will be lined up with the input baseline.",
        "createdAt" : "2018-07-19T14:38:47Z",
        "updatedAt" : "2018-08-03T15:58:10Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "79c865a8c39d58b44bb9b32e8e798a643b914c5f",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +2128,2132 @@  final Widget prefixIcon;\n\n  /// Optional widget to place on the line before the input.\n  /// Can be used to add some padding to the [prefixText] or to\n  /// add a custom widget in front of the input. The widget's baseline"
  },
  {
    "id" : "f8b94c38-9a59-4651-b1be-fceef9509b09",
    "prId" : 19514,
    "prUrl" : "https://github.com/flutter/flutter/pull/19514#pullrequestreview-138680913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d592db61-cc36-4e4f-ab15-7686871bd074",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It's worth explaining that the suffix widget's baseline will be lined up with the input's baseline.",
        "createdAt" : "2018-07-19T14:39:18Z",
        "updatedAt" : "2018-08-03T15:58:10Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "79c865a8c39d58b44bb9b32e8e798a643b914c5f",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +2175,2179 @@  final Widget suffixIcon;\n\n  /// Optional widget to place on the line after the input.\n  /// Can be used to add some padding to the [suffixText] or to\n  /// add a custom widget after the input. The widget's baseline"
  },
  {
    "id" : "d5805184-286e-4a9b-977f-9fcc4ebaa42f",
    "prId" : 24414,
    "prUrl" : "https://github.com/flutter/flutter/pull/24414#pullrequestreview-175629968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "465fb354-5486-418f-9e8f-0c5c2bc8fc31",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2018-11-16T01:39:15Z",
        "updatedAt" : "2018-11-16T16:04:36Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4704de27c453a6da9503cd903593532a02b79e5",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1899,1903 @@        counter: counter,\n        container: container,\n      ),\n      textDirection: textDirection,\n      textBaseline: textBaseline,"
  },
  {
    "id" : "1e2b21d2-c194-4b17-af77-7208c1ebf698",
    "prId" : 24993,
    "prUrl" : "https://github.com/flutter/flutter/pull/24993#pullrequestreview-182007722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee29cf36-dc0d-4fab-8a0b-af240bad9234",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Even though there are only two cases here, we consistently use switch to dispatch enum values.  Here and below...\r\n\r\nhttps://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#avoid-using-if-chains-or--or--with-enum-values",
        "createdAt" : "2018-12-05T22:45:02Z",
        "updatedAt" : "2018-12-17T19:16:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1b9f4d80caf97054e080062c38a4bd351d9958b",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +1049,1053 @@          start -= centerLayout(prefixIcon, start - prefixIcon.size.width);\n        }\n        if (label != null) {\n          if (decoration.alignLabelWithHint) {\n            baselineLayout(label, start - label.size.width);"
  },
  {
    "id" : "58067f50-13e1-4563-8f7e-42ac7b2bf66b",
    "prId" : 24993,
    "prUrl" : "https://github.com/flutter/flutter/pull/24993#pullrequestreview-182425544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d943d2b-64d7-4685-9d9c-6e86ae18f08e",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "In this case, best to preserve the comment FWIW\r\n```\r\n// The label is centered, not baseline aligned\r\n```",
        "createdAt" : "2018-12-06T20:08:34Z",
        "updatedAt" : "2018-12-17T19:16:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1b9f4d80caf97054e080062c38a4bd351d9958b",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +850,854 @@      } else {\n        // The label is centered, not baseline aligned\n        label.layout(boxConstraints, parentUsesSize: true);\n      }\n    }"
  },
  {
    "id" : "be130754-55b6-412b-b358-d54c09b06f1f",
    "prId" : 24993,
    "prUrl" : "https://github.com/flutter/flutter/pull/24993#pullrequestreview-182451645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32c3c32d-00f1-4190-94aa-0178ac4150df",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2018-12-06T20:12:48Z",
        "updatedAt" : "2018-12-17T19:16:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "bce75612-dbfd-4d12-97cb-09cb25d4650d",
        "parentId" : "32c3c32d-00f1-4190-94aa-0178ac4150df",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "My test already caught a mistake haha.",
        "createdAt" : "2018-12-06T21:17:10Z",
        "updatedAt" : "2018-12-17T19:16:46Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1b9f4d80caf97054e080062c38a4bd351d9958b",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +3085,3089 @@    properties.add(DiagnosticsProperty<InputBorder>('errorBorder', errorBorder, defaultValue: defaultTheme.errorBorder));\n    properties.add(DiagnosticsProperty<InputBorder>('focusedBorder', focusedBorder, defaultValue: defaultTheme.focusedErrorBorder));\n    properties.add(DiagnosticsProperty<InputBorder>('focusedErrorBorder', focusedErrorBorder, defaultValue: defaultTheme.focusedErrorBorder));\n    properties.add(DiagnosticsProperty<InputBorder>('disabledBorder', disabledBorder, defaultValue: defaultTheme.disabledBorder));\n    properties.add(DiagnosticsProperty<InputBorder>('enabledBorder', enabledBorder, defaultValue: defaultTheme.enabledBorder));"
  },
  {
    "id" : "eb51a44b-ea6f-4cd9-b043-5b82818b5d3c",
    "prId" : 25095,
    "prUrl" : "https://github.com/flutter/flutter/pull/25095#pullrequestreview-186704378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8626c650-7c26-4865-aaa7-6f9bb60bf917",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Would it be possible for someone creating a custom counter widget to provide the same accessibility guarantees that the current widget does? For example, can you find out about the focus state and so on.\r\n\r\nIf users provide their own counters, is it obvious how to do so?",
        "createdAt" : "2018-12-07T20:44:19Z",
        "updatedAt" : "2019-01-14T19:06:52Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "b085e09f-d8d8-40a2-b6d1-95cffa5741a8",
        "parentId" : "8626c650-7c26-4865-aaa7-6f9bb60bf917",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Good call.  I just added `isFocused` to the function parameters so that users can support this.  I also called this out in the docs and added an example of how to do it right.",
        "createdAt" : "2018-12-19T19:12:12Z",
        "updatedAt" : "2019-01-14T19:06:52Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbabfda7f9a2e91beb0e7f6f7f82b91df782daab",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1859,1863 @@    Widget counter;\n    if (decoration.counter != null) {\n      counter = decoration.counter;\n    } else if (decoration.counterText != null && decoration.counterText != '') {\n      counter = Semantics("
  },
  {
    "id" : "2ec1f742-2235-4e95-90f4-4dc1287e4b28",
    "prId" : 27205,
    "prUrl" : "https://github.com/flutter/flutter/pull/27205#pullrequestreview-208664605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e11ab91e-6bb5-4462-80ef-ba5513f4ab2c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Should format these expressions consistently. Using one line for the then/else (?/:) clauses does make them a little easier to read when one or both clauses are complicated.",
        "createdAt" : "2019-02-27T18:46:39Z",
        "updatedAt" : "2019-03-08T16:59:42Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "56d0a1b6d0ab5598c651c73c6dc67d49c731d25f",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +884,888 @@      ? math.max(labelHeight - boxToBaseline[label], 0)\n      : labelHeight;\n    final double counterHeight = counter == null\n      ? 0\n      : boxToBaseline[counter] + subtextGap * 2;"
  },
  {
    "id" : "0aceff6a-51b1-4295-8b70-257069d85101",
    "prId" : 32776,
    "prUrl" : "https://github.com/flutter/flutter/pull/32776#pullrequestreview-238680046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c2364bc-8181-4ef0-a365-603a54476235",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Isn't this also blended with the `hoverColor` if `isHover` is true as well? Maybe just mention that is contributes the `focusColor` to the eventual fill color?\r\n",
        "createdAt" : "2019-05-16T22:23:15Z",
        "updatedAt" : "2019-05-16T23:35:12Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "d46090cd-4652-4bdd-b3e2-b53c581b61b8",
        "parentId" : "1c2364bc-8181-4ef0-a365-603a54476235",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, good idea. I added a `See also:` section pointing to the `hoverColor` and `isHovering`.",
        "createdAt" : "2019-05-16T23:15:47Z",
        "updatedAt" : "2019-05-16T23:35:23Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "98195779e3cfa4bbeb44e10388fc4fcb49ba1523",
    "line" : 226,
    "diffHunk" : "@@ -1,1 +1689,1693 @@  /// Whether the input field has focus.\n  ///\n  /// Determines the position of the label text and the color and weight of the\n  /// border, as well as the container fill color, which is a blend of\n  /// [InputDecoration.focusColor] with [InputDecoration.fillColor] when"
  },
  {
    "id" : "ed64cd3e-b26e-4e20-8b3c-950317121fe0",
    "prId" : 32776,
    "prUrl" : "https://github.com/flutter/flutter/pull/32776#pullrequestreview-238680046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1120ac7-db71-4189-b2a1-46ecf24516b6",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Same comment here, but with `focusColor`.",
        "createdAt" : "2019-05-16T22:24:16Z",
        "updatedAt" : "2019-05-16T23:35:12Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "7093dafd-424a-4371-b1f8-f0302c7264c8",
        "parentId" : "f1120ac7-db71-4189-b2a1-46ecf24516b6",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2019-05-16T23:22:01Z",
        "updatedAt" : "2019-05-16T23:35:23Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "98195779e3cfa4bbeb44e10388fc4fcb49ba1523",
    "line" : 242,
    "diffHunk" : "@@ -1,1 +1705,1709 @@  /// Whether the input field is being hovered over by a mouse pointer.\n  ///\n  /// Determines the container fill color, which is a blend of\n  /// [InputDecoration.hoverColor] with [InputDecoration.fillColor] when\n  /// true, and [InputDecoration.fillColor] when not."
  },
  {
    "id" : "4f166acf-5aec-46c8-8342-d91420e8d92c",
    "prId" : 32776,
    "prUrl" : "https://github.com/flutter/flutter/pull/32776#pullrequestreview-238680046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba1ae35b-6229-4d35-8503-0a1b5cf91305",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Why does `_getFocusColor()` handle the `decoration.filled` case, but not `_getHoverColor()`?",
        "createdAt" : "2019-05-16T22:26:30Z",
        "updatedAt" : "2019-05-16T23:35:12Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "ec11a670-b894-4390-84bd-5468f67ef541",
        "parentId" : "ba1ae35b-6229-4d35-8503-0a1b5cf91305",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Because it is wrong. Fixed.",
        "createdAt" : "2019-05-16T23:22:20Z",
        "updatedAt" : "2019-05-16T23:35:23Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "98195779e3cfa4bbeb44e10388fc4fcb49ba1523",
    "line" : 304,
    "diffHunk" : "@@ -1,1 +1911,1915 @@  }\n\n  Color _getHoverColor(ThemeData themeData) {\n    if (isFocused || decoration.filled != true) // filled == null same as filled == false\n      return Colors.transparent;"
  },
  {
    "id" : "67c8053f-5e67-4a32-9293-cc7e4c0de8b4",
    "prId" : 34355,
    "prUrl" : "https://github.com/flutter/flutter/pull/34355#pullrequestreview-251118134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "871b98d2-0cca-43f3-ad15-49e141394897",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Maybe only do this if the \"effective\" value of _textAlignVertical changed. For example if it was null and _isOutlineAligned is true, then only markNeedsLayout if the old value wasn't TextAlignVerticalCenter.",
        "createdAt" : "2019-06-17T23:34:31Z",
        "updatedAt" : "2019-06-18T23:59:22Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "6f53b51e-e40d-4afc-808f-ac6cedba0d6b",
        "parentId" : "871b98d2-0cca-43f3-ad15-49e141394897",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Smart.",
        "createdAt" : "2019-06-18T14:01:52Z",
        "updatedAt" : "2019-06-18T23:59:22Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeb8950f094f62a3df844da202abbb4f6d8ba587",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +765,769 @@    }\n    _textAlignVertical = value;\n    markNeedsLayout();\n  }\n"
  },
  {
    "id" : "75bd9f2a-8e3c-4756-a8d0-2a03747fa572",
    "prId" : 34355,
    "prUrl" : "https://github.com/flutter/flutter/pull/34355#pullrequestreview-250796222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e94be571-fc78-4ce9-9fea-497d3e5734b6",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It's not obvious (to me) what the `+ 1.0` and the `1 - ` adjustments are for here and on the next line.",
        "createdAt" : "2019-06-17T23:37:05Z",
        "updatedAt" : "2019-06-18T23:59:22Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeb8950f094f62a3df844da202abbb4f6d8ba587",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1040,1044 @@    // Map textAlignVertical from -1:1 to 0:1 so that it can be used to scale\n    // the baseline from its minimum to maximum values.\n    final double textAlignVerticalFactor = (textAlignVertical.y + 1.0) / 2.0;\n    // Adjust to try to fit top overflow inside the input on an inverse scale of\n    // textAlignVertical, so that top aligned text adjusts the most and bottom"
  },
  {
    "id" : "cf35acd4-8e75-4dae-b0c2-f2916c04b2c3",
    "prId" : 34355,
    "prUrl" : "https://github.com/flutter/flutter/pull/34355#pullrequestreview-250796222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5fcea88-70b1-421e-80dc-07f032b65ea1",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2019-06-17T23:39:58Z",
        "updatedAt" : "2019-06-18T23:59:22Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeb8950f094f62a3df844da202abbb4f6d8ba587",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +1251,1255 @@          start += centerLayout(prefixIcon, start);\n        }\n        if (label != null) {\n          if (decoration.alignLabelWithHint) {\n            baselineLayout(label, start);"
  },
  {
    "id" : "e30e990e-4c17-4bdc-8bf6-69af8297c6b3",
    "prId" : 34355,
    "prUrl" : "https://github.com/flutter/flutter/pull/34355#pullrequestreview-250796222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8782209-ff96-4bb9-95aa-92001914d7ef",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This would be a good place for a see also section that links to TextField ",
        "createdAt" : "2019-06-17T23:43:15Z",
        "updatedAt" : "2019-06-18T23:59:22Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeb8950f094f62a3df844da202abbb4f6d8ba587",
    "line" : 239,
    "diffHunk" : "@@ -1,1 +3540,3544 @@///  * [InputDecorator.textAlignVertical], which defines the alignment of\n///    prefix, input, and suffix, within the [InputDecorator].\nclass TextAlignVertical {\n  /// Construct TextAlignVertical from any given y value.\n  const TextAlignVertical({"
  },
  {
    "id" : "2267efff-456a-4bb5-94b3-498554f40aa1",
    "prId" : 34355,
    "prUrl" : "https://github.com/flutter/flutter/pull/34355#pullrequestreview-250796222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a797bc8-a2ff-4e4c-9490-1f728b35dc48",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Best to explain this a little more carefully, since what we're talking about depends on how the textfield is decorated. ",
        "createdAt" : "2019-06-17T23:52:37Z",
        "updatedAt" : "2019-06-18T23:59:22Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeb8950f094f62a3df844da202abbb4f6d8ba587",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +1687,1691 @@\n  /// {@template flutter.widgets.inputDecorator.textAlignVertical}\n  /// How the text should be aligned vertically.\n  ///\n  /// Determines the alignment of the baseline within the available space of"
  },
  {
    "id" : "9669cc1b-1045-4160-815f-fbfe3e7975de",
    "prId" : 34859,
    "prUrl" : "https://github.com/flutter/flutter/pull/34859#pullrequestreview-252933763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f5382da-3faa-48e2-9f16-cbdfa935c5c3",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE catch",
        "createdAt" : "2019-06-21T17:08:14Z",
        "updatedAt" : "2019-06-21T17:33:54Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "a394c447fa8efa659299c7f95b1007117ad248fb",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +1129,1133 @@      // It's possible for begin, middle, and end to not be in order because of\n      // excessive padding. Those cases are handled by using middle.\n      if (begin >= middle) {\n        return middle;\n      }"
  },
  {
    "id" : "f8da0d6c-08de-4128-ba86-022b5f7e9602",
    "prId" : 46115,
    "prUrl" : "https://github.com/flutter/flutter/pull/46115#pullrequestreview-334117335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2652e5de-0f4c-4a21-a162-2b25d5fcffb8",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "No need for this last line of `///`.",
        "createdAt" : "2019-12-18T17:00:38Z",
        "updatedAt" : "2020-01-15T18:49:44Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "da74fe85940a07fd651da8562ec5c34b28213a8f",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +2690,2694 @@  /// When [FloatingLabelBehavior.never] the label will always appear in an empty\n  /// field in place of the content.\n  ///\n  /// Defaults to [FloatingLabelBehavior.auto].\n  /// {@endtemplate}"
  },
  {
    "id" : "2c4fe6a9-172d-40ad-828a-4e42a4fe2f9f",
    "prId" : 54919,
    "prUrl" : "https://github.com/flutter/flutter/pull/54919#pullrequestreview-404380220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7077bdb-9da7-41b2-a370-ac4dd214b0ae",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I don't fully understand the changes in this file. If the widget is focused, there's no longer a way to tell from its visuals whether it's enabled or not? Is this in line with material spec?\r\n\r\n/cc @HansMuller ",
        "createdAt" : "2020-04-29T18:18:37Z",
        "updatedAt" : "2020-05-27T00:46:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "e6876dda-479a-4f8d-b363-7bc5029b5fde",
        "parentId" : "b7077bdb-9da7-41b2-a370-ac4dd214b0ae",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "No, there's definitely no Material spec for this.\r\n\r\nThat's something I think I'll be asking the customer to push for, since this is a use case that probably needs some design work.",
        "createdAt" : "2020-04-29T21:07:16Z",
        "updatedAt" : "2020-05-27T00:46:58Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "879049df-b9b7-41c9-9868-7f5a781a1bc0",
        "parentId" : "b7077bdb-9da7-41b2-a370-ac4dd214b0ae",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "But you can usually tell if it is disabled: all the hints and labels are shown as \"disabled\", and it acts like a read-only field.  Of course, if you don't have any hints or labels, then no, you can't tell.\r\n\r\nIn order to provide that, we'll have to add a `disabledFocusColor` or something.  Waiting for some more spec guidance before doing that seems like a good idea.",
        "createdAt" : "2020-05-01T20:24:34Z",
        "updatedAt" : "2020-05-27T00:46:58Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a82c577ded9e85d6474292d8628c739e47c715d",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +2066,2070 @@\n  Color _getDefaultIconColor(ThemeData themeData) {\n    if (!decoration.enabled && !isFocused)\n      return themeData.disabledColor;\n"
  },
  {
    "id" : "1feb7a13-fe2e-48c9-bcf9-991f0e71a0bc",
    "prId" : 54919,
    "prUrl" : "https://github.com/flutter/flutter/pull/54919#pullrequestreview-404380220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf1eb170-b357-416e-9215-969ef244cbbb",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Is this a breaking change?",
        "createdAt" : "2020-04-29T19:16:25Z",
        "updatedAt" : "2020-05-27T00:46:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "3f2ea122-6547-4ef7-8abf-ff99648d64f1",
        "parentId" : "cf1eb170-b357-416e-9215-969ef244cbbb",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "No, because you could never set it to `null` before anyhow: it would throw an exception as soon as `initState` was called. This just asserts sooner than that.",
        "createdAt" : "2020-05-01T20:21:09Z",
        "updatedAt" : "2020-05-27T00:46:58Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a82c577ded9e85d6474292d8628c739e47c715d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1782,1786 @@    this.isEmpty = false,\n    this.child,\n  }) : assert(decoration != null),\n       assert(isFocused != null),\n       assert(isHovering != null),"
  },
  {
    "id" : "67000299-ff8e-4177-9e5f-51cbf06733de",
    "prId" : 55911,
    "prUrl" : "https://github.com/flutter/flutter/pull/55911#pullrequestreview-405092329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53201580-8bb2-46f6-b762-67ab02fd9b03",
        "parentId" : null,
        "authorId" : "d3cef59c-85a2-415a-8c01-9f8f25def9f5",
        "body" : "The doc comment is no longer accurate.",
        "createdAt" : "2020-05-01T19:50:38Z",
        "updatedAt" : "2020-05-06T23:28:01Z",
        "lastEditedBy" : "d3cef59c-85a2-415a-8c01-9f8f25def9f5",
        "tags" : [
        ]
      },
      {
        "id" : "9ece2146-ea00-4c3a-a664-61c121c6614b",
        "parentId" : "53201580-8bb2-46f6-b762-67ab02fd9b03",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Thanks for catching that!  It makes me worry about people relying on the old behavior, though I think technically it's not a breaking change.  I wonder why isCollapsed was not passed through in the first place.",
        "createdAt" : "2020-05-04T15:23:15Z",
        "updatedAt" : "2020-05-06T23:28:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed18eb48b4cce72e287cbc93ce8e8191cac44501",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +3319,3323 @@    bool hasFloatingPlaceholder,\n    FloatingLabelBehavior floatingLabelBehavior,\n    bool isCollapsed,\n    bool isDense,\n    EdgeInsetsGeometry contentPadding,"
  }
]