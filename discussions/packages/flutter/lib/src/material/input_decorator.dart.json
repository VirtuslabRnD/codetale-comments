[
  {
    "id" : "9dca1ea5-b24d-4fdf-be63-09d980de0ed1",
    "prId" : 9119,
    "prUrl" : "https://github.com/flutter/flutter/pull/9119#pullrequestreview-30365284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb83561e-4b37-47a5-9094-f74c84c16636",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "if we factored this out into the InputDecoration class itself, then you could pass in entirely novel decorations, much as we do with DecoratedBox.\r\n\r\nActually that kind of seems like a primitive we should have. `build(BuildContext context, Widget child)`. AnimatedBuilder does something like that, though it passes in a Listenable as well IIRC.",
        "createdAt" : "2017-03-31T17:35:56Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d18d8b58-596e-452b-80c9-658a13c76b47",
        "parentId" : "cb83561e-4b37-47a5-9094-f74c84c16636",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Actually AnimatedBuilder's builder does have exactly that signature. The listenable is passed in out of band.",
        "createdAt" : "2017-03-31T17:37:30Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e9af38c9-2089-4536-9da5-69af93e16f25",
        "parentId" : "cb83561e-4b37-47a5-9094-f74c84c16636",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Maybe AnimatedBuilder is exactly what we should use here, with InputDecoration just being a class that extends Listenable and exposes a method with that signature, and you pass in both the Decoration and the method, or something...",
        "createdAt" : "2017-03-31T17:38:51Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "3ce4ee42-6f2e-4a95-b3b2-f3273b248fc1",
        "parentId" : "cb83561e-4b37-47a5-9094-f74c84c16636",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It's not quite so clean because there's some interaction between the InputDecoration data and the other parameters to the widget.  For example, the baseStyle and the isFocused bit.\r\n\r\nAlso, you don't gain a ton by doing that because you can always pass null to TextField to remove the decoration and just wrap it yourself with whatever you want.",
        "createdAt" : "2017-03-31T23:43:47Z",
        "updatedAt" : "2017-04-01T05:02:33Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "abd6da3d1ab5c0a5221dd9d1c2ab3f320cdde802",
    "line" : 328,
    "diffHunk" : "@@ -1,1 +326,330 @@\n  @override\n  Widget build(BuildContext context) {\n    assert(debugCheckHasMaterial(context));\n    final ThemeData themeData = Theme.of(context);"
  },
  {
    "id" : "e9b56b3c-89be-429e-8135-6c118464cce4",
    "prId" : 10852,
    "prUrl" : "https://github.com/flutter/flutter/pull/10852#pullrequestreview-45190091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6410899-a3b2-4d3e-83af-ceb70b2551ca",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Should we be animating this stuff?",
        "createdAt" : "2017-06-20T05:54:43Z",
        "updatedAt" : "2017-06-20T16:18:27Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "4f11050d-ce82-43bb-862f-ae0261a24210",
        "parentId" : "c6410899-a3b2-4d3e-83af-ceb70b2551ca",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "We could cross fade between the error and helper text, and animate the divider's color change. I'll file an issue.",
        "createdAt" : "2017-06-20T16:17:43Z",
        "updatedAt" : "2017-06-20T16:18:27Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "175a40b86682af87afd42d47aa757e111fcb3bf1",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +525,529 @@        child: new Text(\n          errorText ?? helperText,\n          style: subtextStyle,\n          textAlign: textAlign,\n          overflow: TextOverflow.ellipsis,"
  },
  {
    "id" : "516d7e77-3334-49a4-a6b5-d88d400b249a",
    "prId" : 12595,
    "prUrl" : "https://github.com/flutter/flutter/pull/12595#pullrequestreview-70367850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c356b7-6d4f-43aa-9222-05c0d7463788",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2017-10-18T22:08:10Z",
        "updatedAt" : "2017-10-19T01:44:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b136c936e3890600ae6b8c1de3394da8d18b7ef",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +561,565 @@            style: subtextStyle,\n            textAlign: textAlign,\n            overflow: TextOverflow.ellipsis,\n          ),\n        ),"
  },
  {
    "id" : "144554fb-615d-4236-be08-2260c16f442f",
    "prId" : 12648,
    "prUrl" : "https://github.com/flutter/flutter/pull/12648#pullrequestreview-71264141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f98f1e65-028f-40df-b6ee-ec89c2572b4a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "at some point soon we're really going to have to turn this into a Diagnosticable",
        "createdAt" : "2017-10-23T17:23:42Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dc9f3bb644ef3860d1cd6c16636813f58e41cdf",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +332,336 @@      description.add('counterStyle: $counterStyle');\n    return 'InputDecoration(${description.join(', ')})';\n  }\n}\n"
  },
  {
    "id" : "7c93c840-8891-4b29-8876-7bdac7c6ae67",
    "prId" : 13734,
    "prUrl" : "https://github.com/flutter/flutter/pull/13734#pullrequestreview-85206901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99ad21d2-cdce-4e9d-9d80-869ae957055d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should we just fill if fillColor is non-null, and not fill if it's null?",
        "createdAt" : "2017-12-21T22:35:49Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ba38bf0b-9fd0-41dc-bae5-0dc48bdd4c6d",
        "parentId" : "99ad21d2-cdce-4e9d-9d80-869ae957055d",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Most apps will not want to actually specify a fill color, they'll just the default one that's based on the theme's brightness.",
        "createdAt" : "2017-12-21T22:38:42Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "f93df3a6-ae70-46c9-a1f1-9773d9440dcc",
        "parentId" : "99ad21d2-cdce-4e9d-9d80-869ae957055d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(that would work better in a world where there's a way to configure the fill color in the theme explicitly)",
        "createdAt" : "2017-12-21T22:53:57Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "53a7fa97-26b8-42d0-a2d7-e72cd0d74be9",
        "parentId" : "99ad21d2-cdce-4e9d-9d80-869ae957055d",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I agree.  What might work best here is an InputDecoratorTheme which would be part of ThemeData like IconTheme and textTheme. I will add that in a follow-up PR.",
        "createdAt" : "2017-12-21T23:09:03Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "da570e6006bd7c56f5b45a7867290de2b86a60fa",
    "line" : 1908,
    "diffHunk" : "@@ -1,1 +1903,1907 @@  ///\n  /// This property is false by default.\n  final bool filled;\n\n  /// The color to fill the decoration's container with, if [filled] is true."
  },
  {
    "id" : "3873016d-a208-4d4f-9dfc-85064c5a7d5d",
    "prId" : 13734,
    "prUrl" : "https://github.com/flutter/flutter/pull/13734#pullrequestreview-86512744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3b38d9c-87b1-4c36-9ead-8cffd1f895e5",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this only seems to be used in tests?",
        "createdAt" : "2018-01-03T21:40:09Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "93212b66-8d3c-4c54-a4a6-c2f3d2f51754",
        "parentId" : "f3b38d9c-87b1-4c36-9ead-8cffd1f895e5",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It was also used by the ripple (splash) code, since the ripple is clipped to the container's boundary. I took the ripple changes out of this PR to keep it smaller; I'm going to try and land the splash=>ripple changes next.",
        "createdAt" : "2018-01-03T22:38:41Z",
        "updatedAt" : "2018-01-06T01:53:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "da570e6006bd7c56f5b45a7867290de2b86a60fa",
    "line" : 1309,
    "diffHunk" : "@@ -1,1 +1305,1309 @@  ///\n  /// [TextField] renders ink splashes within the container.\n  static RenderBox containerOf(BuildContext context) {\n    final _RenderDecoration result = context.ancestorRenderObjectOfType(const TypeMatcher<_RenderDecoration>());\n    return result?.container;"
  },
  {
    "id" : "27766285-9d2b-4aa5-9e36-26df1e3c9ad6",
    "prId" : 13734,
    "prUrl" : "https://github.com/flutter/flutter/pull/13734#pullrequestreview-89882016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "091ff244-856a-4a08-a41c-b9704f1236c3",
        "parentId" : null,
        "authorId" : "0a7b5caf-08df-4bec-be56-11ced29e020b",
        "body" : "this line throws an exception if border: null and a labelText is used",
        "createdAt" : "2018-01-09T17:54:09Z",
        "updatedAt" : "2018-01-09T17:54:10Z",
        "lastEditedBy" : "0a7b5caf-08df-4bec-be56-11ced29e020b",
        "tags" : [
        ]
      },
      {
        "id" : "95f33d9d-476d-4e77-bfdb-351f3e41bd8c",
        "parentId" : "091ff244-856a-4a08-a41c-b9704f1236c3",
        "authorId" : "b844a9ac-6d5a-4e67-85c6-f6a3bf31e506",
        "body" : "jup, can confirm.\r\nhttps://gist.github.com/BenSower/e4bda931033a0fa306722e3da3b02fc9",
        "createdAt" : "2018-01-10T10:20:07Z",
        "updatedAt" : "2018-01-10T10:20:07Z",
        "lastEditedBy" : "b844a9ac-6d5a-4e67-85c6-f6a3bf31e506",
        "tags" : [
        ]
      },
      {
        "id" : "abedc825-2d6d-4f86-b8dc-5cd1698dbf6b",
        "parentId" : "091ff244-856a-4a08-a41c-b9704f1236c3",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Sorry to have missed this. I've filed and issue and will fix:\r\nhttps://github.com/flutter/flutter/issues/14165\r\n",
        "createdAt" : "2018-01-18T18:17:09Z",
        "updatedAt" : "2018-01-18T18:17:09Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "da570e6006bd7c56f5b45a7867290de2b86a60fa",
    "line" : 1003,
    "diffHunk" : "@@ -1,1 +999,1003 @@      // The center of the outline border label ends up a little below the\n      // center of the top border line.\n      final double floatingY = decoration.border.isOutline ? -labelHeight * 0.25 : contentPadding.top;\n      final double scale = lerpDouble(1.0, 0.75, t);\n      final double dx = textDirection == TextDirection.rtl"
  },
  {
    "id" : "9c794edf-1ee7-41b8-ace7-4294e09aca8e",
    "prId" : 14177,
    "prUrl" : "https://github.com/flutter/flutter/pull/14177#pullrequestreview-90241194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de9ffbaf-01c2-42ad-a381-0dffa538ff3f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "update this to mention that this controls the area that `filled` and `fillColor` fill",
        "createdAt" : "2018-01-19T20:48:54Z",
        "updatedAt" : "2018-01-20T01:25:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a3a49f135e932c012279b21adcd64249ad88dfe",
    "line" : 500,
    "diffHunk" : "@@ -1,1 +2300,2304 @@  ///  * [OutlineInputBorder], an [InputDecorator] border which draws a\n  ///    rounded rectangle around the input decorator's container.\n  final InputBorder border;\n}"
  },
  {
    "id" : "6e3812c5-efd1-4c74-8ffe-a14afe9515bf",
    "prId" : 14177,
    "prUrl" : "https://github.com/flutter/flutter/pull/14177#pullrequestreview-90289957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39f82be3-b923-48e1-a41c-f674d5f47556",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i don't think InputBorder.none should be special here. If I create a new InputBorder class that is otherwise identical to _NoInputBorder, it should work the same.",
        "createdAt" : "2018-01-19T23:44:50Z",
        "updatedAt" : "2018-01-20T01:25:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "127882a4-c406-44d7-9f51-47d64daf8e7a",
        "parentId" : "39f82be3-b923-48e1-a41c-f674d5f47556",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "You are correct. At the moment there's no other way to recognize an InputBorder that's not actually going to draw a border.  I think could use the value of InputBorder.borderSide by giving the initial value (current BorderSide.none) some meaning. I will address this in a separate PR.",
        "createdAt" : "2018-01-20T01:36:42Z",
        "updatedAt" : "2018-01-20T01:36:43Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "cc8cfce9-7ec5-4be6-87c0-92f559d0b721",
        "parentId" : "39f82be3-b923-48e1-a41c-f674d5f47556",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Filed: https://github.com/flutter/flutter/issues/14197",
        "createdAt" : "2018-01-20T01:57:22Z",
        "updatedAt" : "2018-01-20T01:57:23Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a3a49f135e932c012279b21adcd64249ad88dfe",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +1469,1473 @@\n  double get _borderWeight {\n    if (decoration.isCollapsed || decoration.border == InputBorder.none || !decoration.enabled)\n      return 0.0;\n    return isFocused ? 2.0 : 1.0;"
  },
  {
    "id" : "11d073d9-6338-47d0-9459-50274c2ac1b2",
    "prId" : 17292,
    "prUrl" : "https://github.com/flutter/flutter/pull/17292#pullrequestreview-117709770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7eef4f8-fa91-45df-b259-532ee7d19915",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Do you also want to be able to specify the overflow here?  I know that at least for Arabic, ellipsis is pretty bad as a choice (it cuts off whole words only, so often doesn't fill the available space).  It's a good default, but it would be good to be able to specify it. (See https://github.com/flutter/flutter/issues/16450 also)",
        "createdAt" : "2018-05-04T17:42:34Z",
        "updatedAt" : "2018-05-04T17:42:50Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "b3b2a43e-4b74-4abf-a414-8125a7be0cfd",
        "parentId" : "c7eef4f8-fa91-45df-b259-532ee7d19915",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "That seems reasonable. An alternative would be an error widget value, which would would allow one to display anything at all for the error. The implementation is already structured this way. The hardest part might be deciding what to call the property. Maybe `InputDecoration.errorWidget`.\r\n\r\nIf it's OK with you, I'd like to defer this bit of evolution to a separate PR.",
        "createdAt" : "2018-05-04T17:53:40Z",
        "updatedAt" : "2018-05-04T17:53:40Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "017b14a5-94a2-4d42-b863-85eedeb0ec73",
        "parentId" : "c7eef4f8-fa91-45df-b259-532ee7d19915",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Sure.",
        "createdAt" : "2018-05-04T18:12:55Z",
        "updatedAt" : "2018-05-04T18:12:55Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd515afbf3cb940a82304f7d8df7afedf087faa2",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +345,349 @@          style: widget.errorStyle,\n          textAlign: widget.textAlign,\n          overflow: TextOverflow.ellipsis,\n          maxLines: widget.errorMaxLines,\n        ),"
  }
]