[
  {
    "id" : "ca5b35fb-0afc-4ba0-8528-2d22e52b7a0b",
    "prId" : 1352,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f689c8ab-c373-4005-93f7-3aaa382b8fcc",
        "parentId" : null,
        "authorId" : "29909713-5424-4233-a02b-b02672141af4",
        "body" : "We're probably going to want a named constant for 400 (not necessarily this patch).  No clue why 400 is right instead of 500 here.\n",
        "createdAt" : "2016-01-24T00:32:39Z",
        "updatedAt" : "2016-01-24T01:47:39Z",
        "lastEditedBy" : "29909713-5424-4233-a02b-b02672141af4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f3b2d48359a7ca6be9ad6392b8d51d072d2f344",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +139,143 @@    Color focusHighlightColor = themeData.accentColor;\n    if (themeData.primarySwatch != null)\n      focusHighlightColor = focused ? themeData.primarySwatch[400] : themeData.hintColor;\n    double topPadding = config.isDense ? 12.0 : 16.0;\n"
  },
  {
    "id" : "127850c2-3a9f-4ede-bb53-6f2ca8bad974",
    "prId" : 1352,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f40c63d5-befd-4601-ad46-f5b221a6e1e2",
        "parentId" : null,
        "authorId" : "29909713-5424-4233-a02b-b02672141af4",
        "body" : "I guess all tehse are specified in teh spec.\n",
        "createdAt" : "2016-01-24T00:32:57Z",
        "updatedAt" : "2016-01-24T01:47:39Z",
        "lastEditedBy" : "29909713-5424-4233-a02b-b02672141af4",
        "tags" : [
        ]
      },
      {
        "id" : "8be4b18f-949f-465e-81be-6184607b7871",
        "parentId" : "f40c63d5-befd-4601-ad46-f5b221a6e1e2",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, these values just come straight from the spec.  They aren't re-used anywhere as far as I can tell.\n",
        "createdAt" : "2016-01-24T01:33:08Z",
        "updatedAt" : "2016-01-24T01:47:39Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f3b2d48359a7ca6be9ad6392b8d51d072d2f344",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +140,144 @@    if (themeData.primarySwatch != null)\n      focusHighlightColor = focused ? themeData.primarySwatch[400] : themeData.hintColor;\n    double topPadding = config.isDense ? 12.0 : 16.0;\n\n    List<Widget> stackChildren = <Widget>[];"
  },
  {
    "id" : "77416aea-7cce-4e2e-8ed3-6aa53a919f37",
    "prId" : 1352,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e52737b-086e-4f41-94cf-d4d8236aa2b1",
        "parentId" : null,
        "authorId" : "29909713-5424-4233-a02b-b02672141af4",
        "body" : "Crazy all teh custom dimentions for the isDense stuff. :)\n",
        "createdAt" : "2016-01-24T00:34:19Z",
        "updatedAt" : "2016-01-24T01:47:39Z",
        "lastEditedBy" : "29909713-5424-4233-a02b-b02672141af4",
        "tags" : [
        ]
      },
      {
        "id" : "b1423e60-6e55-41b1-8524-d1bb91efbeeb",
        "parentId" : "2e52737b-086e-4f41-94cf-d4d8236aa2b1",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, the dense stuff seems like a wart on the design.  We could leave it out of the implementation, but I'm sure someone will want to use it.\n",
        "createdAt" : "2016-01-24T01:34:47Z",
        "updatedAt" : "2016-01-24T01:47:39Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f3b2d48359a7ca6be9ad6392b8d51d072d2f344",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +235,239 @@          new Container(\n            margin: new EdgeDims.only(right: 16.0, top: iconTop),\n            width: config.isDense ? 40.0 : 48.0,\n            child: new Icon(\n              icon: config.icon,"
  },
  {
    "id" : "baf0291d-cf94-4cfa-8305-c58d1a5c9769",
    "prId" : 1370,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcc73cb2-4c82-45d5-879f-3860cfd48029",
        "parentId" : null,
        "authorId" : "29909713-5424-4233-a02b-b02672141af4",
        "body" : "So this is the real fix, and the rest is just cleanup to use a single static?\n",
        "createdAt" : "2016-01-25T21:41:36Z",
        "updatedAt" : "2016-01-25T21:41:36Z",
        "lastEditedBy" : "29909713-5424-4233-a02b-b02672141af4",
        "tags" : [
        ]
      },
      {
        "id" : "89eb9793-adfb-4b2f-8d84-3a148ebcf6b4",
        "parentId" : "fcc73cb2-4c82-45d5-879f-3860cfd48029",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, I wanted to write this line of code correctly, which required refactoring how to get an empty text range.\n",
        "createdAt" : "2016-01-25T21:48:15Z",
        "updatedAt" : "2016-01-25T21:48:15Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "008af64ccecebb9c63b547c86d97fed1ce0394aa",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +110,114 @@    } else if (!focused && _keyboardHandle.attached) {\n      _keyboardHandle.release();\n      _editableString.composing = TextRange.empty;\n    }\n  }"
  },
  {
    "id" : "68832973-3853-43cd-8bdd-749a543d4654",
    "prId" : 1496,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37301158-9acb-4fe3-b89c-e905d45b83ae",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "~~does the keyboard tell the editable string?~~\n",
        "createdAt" : "2016-01-30T18:59:54Z",
        "updatedAt" : "2016-01-31T05:57:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d772836b-d049-4215-8568-12e6564b95d5",
        "parentId" : "37301158-9acb-4fe3-b89c-e905d45b83ae",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think we should organise the keyboard handle and the editable string such that you tell the same object what the new selection is regardless of whether a keyboard is attached.\n",
        "createdAt" : "2016-01-30T19:22:07Z",
        "updatedAt" : "2016-01-31T05:57:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "98f52f8a-4185-4b3d-b499-bbb1cd89c563",
        "parentId" : "37301158-9acb-4fe3-b89c-e905d45b83ae",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Ok, I think I know what the problem really is. It's that we have the keyboard logic in the Material layer instead of in `widgets/editable.dart`. But we can fix that in a later patch.\n",
        "createdAt" : "2016-01-30T19:25:01Z",
        "updatedAt" : "2016-01-31T05:57:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f4407970-302f-48bb-8f6e-1834a10e47b9",
        "parentId" : "37301158-9acb-4fe3-b89c-e905d45b83ae",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, we need to reorganize this code a bit.  There's another problem where the EditableString does't know how to tell the render object to repaint when the selection changes.  Currently we wait for the cursor to blink.  I can look at this in the next patch.\n",
        "createdAt" : "2016-01-30T19:30:00Z",
        "updatedAt" : "2016-01-31T05:57:23Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "3609938327b56b3af96e8922842c8c60473625ca",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +150,154 @@  void _handleSelectionChanged(TextSelection selection) {\n    if (_isAttachedToKeyboard) {\n      _keyboardHandle.setSelection(selection.start, selection.end);\n    } else {\n      _editableString.setSelection(selection);"
  },
  {
    "id" : "6c0acbca-4d78-4229-adc9-035bf3ddb451",
    "prId" : 1496,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f53aefb9-c031-466e-844f-5703289c5c39",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this function is confusing, in part because it calls _requestKeyboard in a branch which guarantees that _requestKeyboard only does one line. I think rather than factoring _requestKeyboard out, we should just factor out the `Focus.moveTo(config.key);` line.\n",
        "createdAt" : "2016-01-30T19:15:21Z",
        "updatedAt" : "2016-01-31T05:57:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "fe997c77-aae2-4eee-a62d-2f8090aa195b",
        "parentId" : "f53aefb9-c031-466e-844f-5703289c5c39",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "ok\n",
        "createdAt" : "2016-01-30T19:28:50Z",
        "updatedAt" : "2016-01-31T05:57:23Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "3609938327b56b3af96e8922842c8c60473625ca",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +155,159 @@      _requestKeyboard();\n    }\n  }\n\n  Widget build(BuildContext context) {"
  },
  {
    "id" : "c59c93cf-cd21-49b0-8f17-07ec5ea0a3f0",
    "prId" : 2074,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c468a23a-f288-48ed-a100-763a4ae270ca",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we have this switch all over. maybe we should consider brightness to be an input too. that would solve several problems e.g. in lerping.\n",
        "createdAt" : "2016-02-22T05:06:10Z",
        "updatedAt" : "2016-02-22T05:06:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7701e56e-5ae0-495f-b6bb-0c50aae643fa",
        "parentId" : "c468a23a-f288-48ed-a100-763a4ae270ca",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Only here and in drawer_item.  /me will study more.\n",
        "createdAt" : "2016-02-22T05:34:07Z",
        "updatedAt" : "2016-02-22T05:34:07Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c2fa238863bd97538a6f106b0829d70aaec9045",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +87,91 @@    Color activeColor = themeData.hintColor;\n    if (focused) {\n      switch (themeData.brightness) {\n        case ThemeBrightness.dark:\n          activeColor = themeData.accentColor;"
  },
  {
    "id" : "d2485492-767d-4af5-8526-32fb25dd3db6",
    "prId" : 2850,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45cd7975-1c5b-49ba-9e33-27ec20bacd26",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It looks like these vars could be final\n",
        "createdAt" : "2016-03-24T21:10:02Z",
        "updatedAt" : "2016-03-25T21:55:49Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7b28a3ede4639d51a59a063f28365e968ffda3a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +90,94 @@  Widget build(BuildContext context) {\n    assert(debugCheckHasMaterial(context));\n    ThemeData themeData = Theme.of(context);\n    BuildContext focusContext = focusKey.currentContext;\n    bool focused = focusContext != null && Focus.at(focusContext, autofocus: config.autofocus);"
  },
  {
    "id" : "6badadc7-1441-4d0f-98c9-ff3e2e1283ac",
    "prId" : 3018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2b094f7-8c0a-416e-a265-90f5f1abe317",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "newline\n",
        "createdAt" : "2016-03-31T22:38:00Z",
        "updatedAt" : "2016-03-31T22:38:00Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bc08720e48a8063b50875281726fbe3b2768994",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +19,23 @@///\n/// See also:\n///  * <https://www.google.com/design/spec/components/text-fields.html>\nclass Input extends StatefulWidget {\n  Input({"
  },
  {
    "id" : "12ceadc3-729f-46bb-a518-fb77167e4c3c",
    "prId" : 6155,
    "prUrl" : "https://github.com/flutter/flutter/pull/6155#pullrequestreview-2988804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce8af696-aad9-4873-a08c-4fc41db7cabe",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "+1 to selectionControls\n",
        "createdAt" : "2016-10-05T19:45:30Z",
        "updatedAt" : "2016-10-05T19:45:30Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf5a8c0847cbdeffa78cb8d833c0f44bed5cf301",
    "line" : null,
    "diffHunk" : "@@ -1,1 +214,218 @@        cursorColor: themeData.textSelectionColor,\n        selectionColor: themeData.textSelectionColor,\n        selectionControls: materialTextSelectionControls,\n        platform: Theme.of(context).platform,\n        keyboardType: config.keyboardType,"
  },
  {
    "id" : "b13b26d2-5b57-4f57-9ff9-f80ac4c31452",
    "prId" : 6733,
    "prUrl" : "https://github.com/flutter/flutter/pull/6733#pullrequestreview-7509035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4aaaab35-b59b-47c8-9602-d4e8ddda0da2",
        "parentId" : null,
        "authorId" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "body" : "Why another gesture detector? Doesn't the InputField widget handle it?\n",
        "createdAt" : "2016-11-07T20:48:34Z",
        "updatedAt" : "2016-11-07T21:44:41Z",
        "lastEditedBy" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "tags" : [
        ]
      },
      {
        "id" : "ebff722e-7c9c-41a3-b436-09e74f5aff64",
        "parentId" : "4aaaab35-b59b-47c8-9602-d4e8ddda0da2",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This GestureDetector is as big as the entire Input widget, not just its InputField child.\n",
        "createdAt" : "2016-11-07T21:28:02Z",
        "updatedAt" : "2016-11-07T21:44:41Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "c312fa6f01aee42dc9ecc8122bf2df4a5c0f715c",
    "line" : 247,
    "diffHunk" : "@@ -1,1 +380,384 @@    }\n\n    return new GestureDetector(\n      key: config.key is GlobalKey ? null : focusKey,\n      behavior: HitTestBehavior.opaque,"
  },
  {
    "id" : "7581d437-1d71-4f1a-ae52-ae8a1e26202c",
    "prId" : 6733,
    "prUrl" : "https://github.com/flutter/flutter/pull/6733#pullrequestreview-7509912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdd6428f-94b8-4cb4-8b9f-cc3cd4c8cfe0",
        "parentId" : null,
        "authorId" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "body" : "I'm not crazy about this name. Seems very easy to confuse with InputFormField. Though we should probably do a rename pass on all of [RawInput, Input, InputField, InputFormField], so maybe it's good enough for now.\n",
        "createdAt" : "2016-11-07T20:51:55Z",
        "updatedAt" : "2016-11-07T21:44:41Z",
        "lastEditedBy" : "354333fe-86e0-40ca-aa4b-29a9d64d7f86",
        "tags" : [
        ]
      },
      {
        "id" : "0be81ba1-f884-48ea-968c-2565d45981a2",
        "parentId" : "cdd6428f-94b8-4cb4-8b9f-cc3cd4c8cfe0",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I'd like to do a rename pass as well.  I think what we call Input could be called TextField, as it is in the Material spec.  FormField could be FormTextField. What I've called InputField is a little harder, maybe TextFieldInput. Perhaps we should find a way to not expose RawInput at all.\n",
        "createdAt" : "2016-11-07T21:32:14Z",
        "updatedAt" : "2016-11-07T21:44:41Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "c312fa6f01aee42dc9ecc8122bf2df4a5c0f715c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +17,21 @@export 'package:flutter/services.dart' show TextInputType;\n\nclass InputField extends StatefulWidget {\n  InputField({\n    Key key,"
  },
  {
    "id" : "b1f0f971-af4e-4970-a6f7-e425e7ffaa86",
    "prId" : 6733,
    "prUrl" : "https://github.com/flutter/flutter/pull/6733#pullrequestreview-7524956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1497648a-6ede-40cc-9ea3-f1c9eb7cebe5",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "in particular, I would have expected the hint feature to be in the same class as the underline and label and so forth, rather than being specific to a text field subclass.\n",
        "createdAt" : "2016-11-07T21:37:31Z",
        "updatedAt" : "2016-11-07T21:44:41Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2c2bc9e1-2713-462b-81bd-c4ee318cf10f",
        "parentId" : "1497648a-6ede-40cc-9ea3-f1c9eb7cebe5",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "InputField supports the selection menu and hints and is just big as a Text widget. That's what #6691 is asking for. InputField also deals with the focus key.  RawInput doesn't do any of those things.\n\nInput is padded bigger, even without the error and label parts and includes a divider, per the Material spec.\n",
        "createdAt" : "2016-11-07T21:59:20Z",
        "updatedAt" : "2016-11-07T21:59:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "461dfd81-f948-4c9c-9391-095d365a1b08",
        "parentId" : "1497648a-6ede-40cc-9ea3-f1c9eb7cebe5",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Seems like RawInput should handle the focus stuff.\nI can buy the argument that we need a widget between the opinion-less RawInput and the fully-fledged Material Input that adds the Material-like copy/paste selection logic.\n",
        "createdAt" : "2016-11-07T22:04:32Z",
        "updatedAt" : "2016-11-07T22:04:32Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c72b1643-d38f-4c45-bbab-862fe5d17051",
        "parentId" : "1497648a-6ede-40cc-9ea3-f1c9eb7cebe5",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "But I think hints should move out of here and up to Input. We're gonna want hints when we do the more generic non-text-input widget split.\n",
        "createdAt" : "2016-11-07T22:05:07Z",
        "updatedAt" : "2016-11-07T22:05:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "bba8bf23-8488-40da-8873-a9c6d3915da4",
        "parentId" : "1497648a-6ede-40cc-9ea3-f1c9eb7cebe5",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I agree that it would be better if Input could manage it's hintText overlay. I will try and address that, along with the general requirement to enable writing custom widgets that lay out as Input does, in phase 2.\n",
        "createdAt" : "2016-11-07T22:38:18Z",
        "updatedAt" : "2016-11-07T22:38:19Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "5e317b0c-8c95-4911-91be-c34dfff2a448",
        "parentId" : "1497648a-6ede-40cc-9ea3-f1c9eb7cebe5",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "SGTM!\n",
        "createdAt" : "2016-11-07T22:58:50Z",
        "updatedAt" : "2016-11-07T22:58:50Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c312fa6f01aee42dc9ecc8122bf2df4a5c0f715c",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +119,123 @@    ];\n\n    if (config.hintText != null && value.text.isEmpty) {\n      TextStyle hintStyle = themeData.textTheme.subhead.copyWith(color: themeData.hintColor);\n      stackChildren.add("
  },
  {
    "id" : "b193419c-e588-4830-b563-762bdf422015",
    "prId" : 6881,
    "prUrl" : "https://github.com/flutter/flutter/pull/6881#pullrequestreview-8733435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "194a1f7b-4c97-41a5-8f40-9ffea16a4436",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why is there a Builder in the build function above?\n",
        "createdAt" : "2016-11-16T00:32:35Z",
        "updatedAt" : "2016-11-16T16:40:49Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ad10dd2c-b04b-4065-8fb0-52b3762b42e7",
        "parentId" : "194a1f7b-4c97-41a5-8f40-9ffea16a4436",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This the comment that appears here. Maybe it's not clear?\n\n```\n// Since the focusKey may have been created here, defer building the\n// RawInput until the focusKey's context has been set. This is necessary\n// because the RawInput will check the focus, like Focus.at(focusContext),\n// when it builds.\n```\n",
        "createdAt" : "2016-11-16T01:14:46Z",
        "updatedAt" : "2016-11-16T16:40:49Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab63325b3f5eca8888545ee0284a2c338ba38632",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +136,140 @@        ),\n      ),\n    ];\n\n    if (config.hintText != null && value.text.isEmpty) {"
  },
  {
    "id" : "bc8df74b-38d2-414b-a27b-5fac5989bd12",
    "prId" : 6881,
    "prUrl" : "https://github.com/flutter/flutter/pull/6881#pullrequestreview-8732989",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9dd9392-82ce-4765-af5d-2aa70adc6c00",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why a Builder?\n",
        "createdAt" : "2016-11-16T00:32:50Z",
        "updatedAt" : "2016-11-16T16:40:49Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "22748262-fdac-4ce6-9d2b-b34cb27169c0",
        "parentId" : "f9dd9392-82ce-4765-af5d-2aa70adc6c00",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I'll add this comment:\n\n```\nSince the focusKey may have been created here, defer building the InputContainer until the\nfocusKey's context has been set. This is necessary because we're passing the value of\nFocus.at(focusKey.currentContext, ...) along to the InputContainer.\n```\n",
        "createdAt" : "2016-11-16T01:11:04Z",
        "updatedAt" : "2016-11-16T16:40:49Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab63325b3f5eca8888545ee0284a2c338ba38632",
    "line" : null,
    "diffHunk" : "@@ -1,1 +466,470 @@      // InputContainer until the focusKey's context has been set. This is\n      // necessary because we're passing the value of Focus.at() along.\n      child: new Builder(\n        builder: (BuildContext context) {\n          final bool focused = Focus.at(focusKey.currentContext, autofocus: config.autofocus);"
  }
]