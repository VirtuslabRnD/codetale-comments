[
  {
    "id" : "ad8b2a9e-3c34-499a-bc2f-a023f3a1a59c",
    "prId" : 3018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba9ad804-44af-4161-99f3-8b8fa15fea11",
        "parentId" : null,
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "Maybe reiterate here that the caller will typically rebuild the widget in the opposite state when this callback is invoked.\n",
        "createdAt" : "2016-03-31T08:29:17Z",
        "updatedAt" : "2016-03-31T14:39:19Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      },
      {
        "id" : "99ebe087-3641-48f6-9365-4b1397c40c64",
        "parentId" : "ba9ad804-44af-4161-99f3-8b8fa15fea11",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Done.\n",
        "createdAt" : "2016-03-31T14:39:09Z",
        "updatedAt" : "2016-03-31T14:39:19Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bc08720e48a8063b50875281726fbe3b2768994",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +58,62 @@  final Decoration inactiveThumbDecoration;\n\n  /// Called when the user toggles with switch on or off.\n  ///\n  /// The switch passes the new value to the callback but does not actually"
  },
  {
    "id" : "4caa8b39-8b35-470c-b3df-f78fbf0abeac",
    "prId" : 3018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72d7d66e-a90d-4333-bc8e-1737418c4200",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "newline\n",
        "createdAt" : "2016-03-31T22:49:44Z",
        "updatedAt" : "2016-03-31T22:49:44Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bc08720e48a8063b50875281726fbe3b2768994",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +26,30 @@///\n/// See also:\n///  * [CheckBox]\n///  * [Radio]\n///  * [Slider]"
  },
  {
    "id" : "a768d98b-65b7-4b38-9882-38a15d293893",
    "prId" : 3018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e366e937-3219-43b8-a909-4c458f6c63c7",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "mention that if null, it'll be disabled\n",
        "createdAt" : "2016-03-31T22:50:02Z",
        "updatedAt" : "2016-03-31T22:50:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bc08720e48a8063b50875281726fbe3b2768994",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +63,67 @@  /// change state until the parent widget rebuilds the switch with the new\n  /// value.\n  final ValueChanged<bool> onChanged;\n\n  @override"
  },
  {
    "id" : "7d9151eb-ba75-41f0-b6fa-3466e33aa706",
    "prId" : 22688,
    "prUrl" : "https://github.com/flutter/flutter/pull/22688#pullrequestreview-162230487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e8eaf75-3124-4088-a9cb-0dc5dce325ea",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "These fields' documentations should be updated too.",
        "createdAt" : "2018-10-04T23:41:42Z",
        "updatedAt" : "2018-10-05T23:22:46Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "592e621b-ea06-47ef-a07f-0effd2aeefd7",
        "parentId" : "7e8eaf75-3124-4088-a9cb-0dc5dce325ea",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Done",
        "createdAt" : "2018-10-05T23:23:04Z",
        "updatedAt" : "2018-10-05T23:23:04Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce58e97c5eac1fdbdf4e2a78fcf080d05cf0063d",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +76,80 @@  ///\n  /// If a [CupertinoSwitch] is created, the following parameters are\n  /// ignored: [activeTrackColor], [inactiveThumbColor], [inactiveTrackColor],\n  /// [activeThumbImage], [inactiveThumbImage], [materialTapTargetSize].\n  ///"
  },
  {
    "id" : "58a84f5c-0456-4daa-93d0-55e30639f26c",
    "prId" : 22688,
    "prUrl" : "https://github.com/flutter/flutter/pull/22688#pullrequestreview-162230461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b224299d-3af1-4735-84d4-6d28630d9968",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Add a comment that the intent is to keep them the same size as the platform toggles",
        "createdAt" : "2018-10-04T23:50:28Z",
        "updatedAt" : "2018-10-05T23:22:46Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "e2debfda-2311-4e7f-8d2f-68796ead0577",
        "parentId" : "b224299d-3af1-4735-84d4-6d28630d9968",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Done",
        "createdAt" : "2018-10-05T23:22:54Z",
        "updatedAt" : "2018-10-05T23:22:54Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce58e97c5eac1fdbdf4e2a78fcf080d05cf0063d",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +230,234 @@\n  Widget buildCupertinoSwitch(BuildContext context) {\n    final Size size = getSwitchSize(Theme.of(context));\n    return Container(\n      width: size.width,  // Same size as the Material switch."
  },
  {
    "id" : "07bbb2cd-0a0a-498e-85e9-1694118122dc",
    "prId" : 22688,
    "prUrl" : "https://github.com/flutter/flutter/pull/22688#pullrequestreview-162224658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e094b53-0b0b-430c-84d4-0c53b888c3b0",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Add the inherited override mechanism we were talking about?",
        "createdAt" : "2018-10-04T23:56:52Z",
        "updatedAt" : "2018-10-05T23:22:46Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "b21a12cb-8f8e-4a92-9c75-b3dc4c9d325a",
        "parentId" : "8e094b53-0b0b-430c-84d4-0c53b888c3b0",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Since apps have to opt-in, there's no need for an inherited override",
        "createdAt" : "2018-10-05T21:23:05Z",
        "updatedAt" : "2018-10-05T23:22:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "fe62d950-b613-4392-9257-1ef7d0731053",
        "parentId" : "8e094b53-0b0b-430c-84d4-0c53b888c3b0",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Arguably every feature is opt-in initially. \r\n\r\nThe feature developer for a screen may not be the same person maintaining the overall app's visual aesthetics. There isn't an easy way to defer this choice up the tree this way unless the developer responsible for global visuals does a global search and replace one by one. ",
        "createdAt" : "2018-10-05T21:46:56Z",
        "updatedAt" : "2018-10-05T23:22:46Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "03011e7e-ee06-4d7e-8e95-261401830e77",
        "parentId" : "8e094b53-0b0b-430c-84d4-0c53b888c3b0",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I don't think a battery of flags that optionally disable the platform adaptations is useful enough to balance the cost of the additional API.  If demand for such a thing surfaces, we can always add it.",
        "createdAt" : "2018-10-05T22:42:21Z",
        "updatedAt" : "2018-10-05T23:22:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce58e97c5eac1fdbdf4e2a78fcf080d05cf0063d",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +245,249 @@  @override\n  Widget build(BuildContext context) {\n    switch (widget._switchType) {\n      case _SwitchType.material:\n        return buildMaterialSwitch(context);"
  },
  {
    "id" : "7aeca67c-7467-4618-acf2-2a4b13ec13ad",
    "prId" : 23424,
    "prUrl" : "https://github.com/flutter/flutter/pull/23424#pullrequestreview-172696152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47260ad2-39c3-425a-9495-72592714c3ba",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this needs to handle the behavior changing",
        "createdAt" : "2018-10-27T07:39:33Z",
        "updatedAt" : "2019-01-07T19:36:25Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7b21f0a9-9ce9-4e6f-ab28-f3d5037d71eb",
        "parentId" : "47260ad2-39c3-425a-9495-72592714c3ba",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "So does that mean I need to have a function that calls `setState` if `_drag` is updated?",
        "createdAt" : "2018-10-30T02:07:21Z",
        "updatedAt" : "2019-01-07T19:36:25Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "c422d5e5-06d0-4815-99b8-1ed4b288b1f0",
        "parentId" : "47260ad2-39c3-425a-9495-72592714c3ba",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "other way around. Right now your render object widget does nothing when the Switch's dragStartBehavior changes.",
        "createdAt" : "2018-11-07T20:59:21Z",
        "updatedAt" : "2019-01-07T19:36:25Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f463e9f73d8a7eb59f05588877bc12fec02d40",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +382,386 @@      ..onUpdate = _handleDragUpdate\n      ..onEnd = _handleDragEnd\n      ..dragStartBehavior = dragStartBehavior;\n  }\n"
  },
  {
    "id" : "a1f3f033-792e-4f0a-b1ae-a7e37160d4e1",
    "prId" : 51606,
    "prUrl" : "https://github.com/flutter/flutter/pull/51606#pullrequestreview-378197310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "988e4b72-38f6-4f30-846e-da5312e3894c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2020-03-20T01:49:05Z",
        "updatedAt" : "2020-03-20T19:49:09Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1d96f467bdd12953dfcad63262260a7af7625fe",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +627,631 @@    _needsPositionAnimation = true;\n\n    if (position.value >= 0.5 != value)\n      onChanged(!value);\n    reactionController.reverse();"
  },
  {
    "id" : "c95c7011-8288-40e0-a61e-6fb75b535f5e",
    "prId" : 67166,
    "prUrl" : "https://github.com/flutter/flutter/pull/67166#pullrequestreview-502395714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f023ff54-3e23-478c-b628-f97a076036d2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "cc @HansMuller we might be able to get rid of this line too, it looks like RenderToggleable always sets reverseCurve when it sets curve. But that's a story for another PR.",
        "createdAt" : "2020-10-05T20:27:51Z",
        "updatedAt" : "2020-10-06T08:42:38Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "691cd371cae3549beed8ae44586aa60c3463bdb9",
    "line" : 388,
    "diffHunk" : "@@ -1,1 +643,647 @@    if (_needsPositionAnimation) {\n      _needsPositionAnimation = false;\n      position.reverseCurve = null;\n      if (newValue!)\n        positionController.forward();"
  },
  {
    "id" : "effce05d-ee0f-41bf-98d2-184ec4bf1dc6",
    "prId" : 68831,
    "prUrl" : "https://github.com/flutter/flutter/pull/68831#pullrequestreview-520985701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc840ace-a1c7-4876-a673-16ce8e253b52",
        "parentId" : null,
        "authorId" : "48e1b91d-64e2-4bb8-894c-50cce634bfa9",
        "body" : "tests look great and thorough, but I couldn't find a place where this was tested. Can you add an expect or a comment where applicable?",
        "createdAt" : "2020-10-30T10:04:31Z",
        "updatedAt" : "2020-11-11T16:47:59Z",
        "lastEditedBy" : "48e1b91d-64e2-4bb8-894c-50cce634bfa9",
        "tags" : [
        ]
      },
      {
        "id" : "cd4c5bc5-e810-4fe9-bceb-57c6b5c0e66e",
        "parentId" : "dc840ace-a1c7-4876-a673-16ce8e253b52",
        "authorId" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "body" : "Good call, added a test.",
        "createdAt" : "2020-10-30T19:43:12Z",
        "updatedAt" : "2020-11-11T16:47:59Z",
        "lastEditedBy" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "tags" : [
        ]
      }
    ],
    "commit" : "1146267a5ef7f615ab2080e1247c4c5f74f6d19c",
    "line" : 313,
    "diffHunk" : "@@ -1,1 +906,910 @@    // thumbColor is not opaque. This way we do not see through the thumb to the\n    // track underneath.\n    final Color thumbColor = Color.alphaBlend(lerpedThumbColor, surfaceColor);\n\n    final ImageProvider? thumbImage = isEnabled"
  },
  {
    "id" : "d13427ed-1ea2-4d49-a6a1-d3b34ddc88a9",
    "prId" : 68831,
    "prUrl" : "https://github.com/flutter/flutter/pull/68831#pullrequestreview-520974354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "173ee89b-78b0-463b-8962-9f5708560931",
        "parentId" : null,
        "authorId" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "body" : "Is it possible that this is a breaking change?",
        "createdAt" : "2020-10-30T13:15:41Z",
        "updatedAt" : "2020-11-11T16:47:59Z",
        "lastEditedBy" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "tags" : [
        ]
      },
      {
        "id" : "fcfcc3a5-e5e8-4cd7-877e-24e4f70275a7",
        "parentId" : "173ee89b-78b0-463b-8962-9f5708560931",
        "authorId" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "body" : "I think it technically could be, but I don't believe it is considered one because none of the customer/internal tests fail. \r\n\r\nIt would only break if someone was passing in a non-opaque value to the thumb color. I don't think people do that because 1) Before now, you couldn't customize disabled color (which is when opacity is typically used), and 2) Before now, if you passed in a non-opaque color, you would see the track underneath, which is probably not preferred. ",
        "createdAt" : "2020-10-30T19:32:17Z",
        "updatedAt" : "2020-11-11T16:47:59Z",
        "lastEditedBy" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "tags" : [
        ]
      }
    ],
    "commit" : "1146267a5ef7f615ab2080e1247c4c5f74f6d19c",
    "line" : 313,
    "diffHunk" : "@@ -1,1 +906,910 @@    // thumbColor is not opaque. This way we do not see through the thumb to the\n    // track underneath.\n    final Color thumbColor = Color.alphaBlend(lerpedThumbColor, surfaceColor);\n\n    final ImageProvider? thumbImage = isEnabled"
  },
  {
    "id" : "3043e3f7-585f-428e-a0bc-b68c4d753599",
    "prId" : 81089,
    "prUrl" : "https://github.com/flutter/flutter/pull/81089#pullrequestreview-644937520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3fbc2e9-ce56-4b62-8474-78f05b33fb7e",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Should we null _cachedThubPainter and other internal fields so that holding a reference to a disposed _MaterialSwitch doesn't prevent the image from being GC'd?",
        "createdAt" : "2021-04-23T23:31:15Z",
        "updatedAt" : "2021-04-26T17:31:51Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "7c1d21af-6303-43de-9ffe-392da0c49ba6",
        "parentId" : "e3fbc2e9-ce56-4b62-8474-78f05b33fb7e",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Good idea, will make that change.",
        "createdAt" : "2021-04-26T17:28:07Z",
        "updatedAt" : "2021-04-26T17:31:51Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "abe6c52046ab317319054584c587f90dba805adc",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +959,963 @@  @override\n  void dispose() {\n    _cachedThumbPainter?.dispose();\n    _cachedThumbPainter = null;\n    _cachedThumbColor = null;"
  }
]