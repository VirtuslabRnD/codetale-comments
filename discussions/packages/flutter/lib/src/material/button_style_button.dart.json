[
  {
    "id" : "8b06bace-f443-49e6-96ae-a54aa4ebdd1a",
    "prId" : 59702,
    "prUrl" : "https://github.com/flutter/flutter/pull/59702#pullrequestreview-437045198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f769f4d2-3568-441e-b10a-444f168e6e76",
        "parentId" : null,
        "authorId" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "body" : "Should this be read from the themeData.splashFactory instead?",
        "createdAt" : "2020-06-24T14:02:28Z",
        "updatedAt" : "2020-07-09T15:54:00Z",
        "lastEditedBy" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "tags" : [
        ]
      },
      {
        "id" : "402e16bc-adbb-4f45-8036-1f897152a4e3",
        "parentId" : "f769f4d2-3568-441e-b10a-444f168e6e76",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Yes. We're going to need to provide a way for developers to simply configure a theme based on a ColorScheme that uses the 2018 text styles and the InkRipple splashFactory. ",
        "createdAt" : "2020-06-24T22:18:35Z",
        "updatedAt" : "2020-07-09T15:54:00Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d129af7f63046eba59cb205d0c73a398f70180",
    "line" : 317,
    "diffHunk" : "@@ -1,1 +315,319 @@          onFocusChange: _handleFocusedChanged,\n          autofocus: widget.autofocus,\n          splashFactory: InkRipple.splashFactory,\n          overlayColor: overlayColor,\n          highlightColor: Colors.transparent,"
  },
  {
    "id" : "fa300d94-c746-4d08-9b41-6c990fe110d1",
    "prId" : 59702,
    "prUrl" : "https://github.com/flutter/flutter/pull/59702#pullrequestreview-437758046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b546d0c-3c31-4021-85cc-a4a4e5bedaf2",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Nice, succinct description!",
        "createdAt" : "2020-06-25T18:54:55Z",
        "updatedAt" : "2020-07-09T15:54:00Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d129af7f63046eba59cb205d0c73a398f70180",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@///\n/// Concrete subclasses must override [defaultStyleOf] and [themeStyleOf].\n///\n/// See also:\n///"
  },
  {
    "id" : "2da7f07a-7df3-4e8b-8121-52ef3584fc7a",
    "prId" : 59702,
    "prUrl" : "https://github.com/flutter/flutter/pull/59702#pullrequestreview-438561501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "831fae87-f8db-40cf-8dba-94912959f3ad",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "So is the difference between `defaultStyleOf` and `themeStyleOf` that `defaultStyleOf` provides the default style for a given subclass, where the `themeStyleOf` can override the defaults for a given instance of the class?\r\n",
        "createdAt" : "2020-06-25T19:12:34Z",
        "updatedAt" : "2020-07-09T15:54:00Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "1fd84888-6f8d-434c-922c-62777798c1c5",
        "parentId" : "831fae87-f8db-40cf-8dba-94912959f3ad",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Yes",
        "createdAt" : "2020-06-26T20:01:05Z",
        "updatedAt" : "2020-07-09T15:54:00Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d129af7f63046eba59cb205d0c73a398f70180",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +95,99 @@  /// [TextButton.style] constructor parameter, or with a\n  /// [TextButtonTheme].\n  ///\n  /// Concrete button subclasses should return a ButtonStyle that\n  /// has no null properties, and where all of the [MaterialStateProperty]"
  },
  {
    "id" : "ac76ed7f-411b-44a5-99f9-f1275c4f539f",
    "prId" : 59702,
    "prUrl" : "https://github.com/flutter/flutter/pull/59702#pullrequestreview-455187467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72e00d85-0092-45ad-a662-d17a5dc5c520",
        "parentId" : null,
        "authorId" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "body" : "@HansMuller What about let the user provide the minimum width/height as in the old buttons. I know we can always wrap it in a SizedBox but I think it would be great to have that option.",
        "createdAt" : "2020-07-24T06:33:37Z",
        "updatedAt" : "2020-07-24T06:33:38Z",
        "lastEditedBy" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "tags" : [
        ]
      },
      {
        "id" : "ee1a2ab1-d027-4f6c-af9c-dfcea06d305c",
        "parentId" : "72e00d85-0092-45ad-a662-d17a5dc5c520",
        "authorId" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "body" : "Also, this can avoid one more wiget in the tree :)",
        "createdAt" : "2020-07-24T06:34:49Z",
        "updatedAt" : "2020-07-24T06:34:49Z",
        "lastEditedBy" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "tags" : [
        ]
      },
      {
        "id" : "9741c240-c3b2-44e5-ab07-bed9d5e952d2",
        "parentId" : "72e00d85-0092-45ad-a662-d17a5dc5c520",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Specifying a minimum size is still supported: the `resolvedMinimumSize` you're referring to is based on the button style's minimumSize: https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/material/button_style.dart#L160\r\n\r\n\r\n",
        "createdAt" : "2020-07-24T20:22:15Z",
        "updatedAt" : "2020-07-24T20:22:15Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "fb9857fc-7f64-42f7-8486-0ed19f144576",
        "parentId" : "72e00d85-0092-45ad-a662-d17a5dc5c520",
        "authorId" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "body" : "I meant the Widgets that depend on this one does not have a way to provide a custom size like the `ContainedButton` and `OutlinedButton` they does not have a `height` or minWidth property for example, just like the old buttons.",
        "createdAt" : "2020-07-24T20:30:34Z",
        "updatedAt" : "2020-07-24T20:30:34Z",
        "lastEditedBy" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "tags" : [
        ]
      },
      {
        "id" : "2f89dae2-50cf-4e87-af02-a315f782e870",
        "parentId" : "72e00d85-0092-45ad-a662-d17a5dc5c520",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It's true that the new buttons don't have explicit width or height parameters. However one can specify the minimum size for an individual button:\r\n\r\n```dart\r\nTextButton(\r\n  style: TextButton.styleFrom(\r\n    minimumSize: Size(100, 100),\r\n  ),\r\n  child: Text('I am at least 100x100')\r\n)\r\n```\r\nFor a fixed size button, you're right that it would be necessary to use a SizedBox:\r\n```\r\nTextButton(\r\n  child: SizedBox(\r\n   width: 100,\r\n   height: 100,\r\n   child: Text('I am 100x100'),\r\n  ),\r\n)\r\n```\r\n",
        "createdAt" : "2020-07-24T20:45:47Z",
        "updatedAt" : "2020-07-24T20:45:48Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "c71e56eb-4d84-4185-a75b-63e458867513",
        "parentId" : "72e00d85-0092-45ad-a662-d17a5dc5c520",
        "authorId" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "body" : "Size is now parte of the button style?\r\nIs the last piece of code valid? I mean you set the size for the child instead of the whole button widget.\r\n\r\nI need to try this :)",
        "createdAt" : "2020-07-24T20:57:49Z",
        "updatedAt" : "2020-07-24T20:57:50Z",
        "lastEditedBy" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "tags" : [
        ]
      },
      {
        "id" : "6fa65f6e-d3fc-41d8-a2b8-8ef779133366",
        "parentId" : "72e00d85-0092-45ad-a662-d17a5dc5c520",
        "authorId" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "body" : "I think we can take advantage of the possibility of passing the widget size on its parent widget to allow users to customize the widget without the need for another widget.",
        "createdAt" : "2020-07-24T21:02:28Z",
        "updatedAt" : "2020-07-24T21:02:29Z",
        "lastEditedBy" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "tags" : [
        ]
      },
      {
        "id" : "81187f51-6bf5-4477-a3b2-8779cc087103",
        "parentId" : "72e00d85-0092-45ad-a662-d17a5dc5c520",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The `minimumSize` is part of ButtonStyle (it was part of the ButtonTheme too, see https://api.flutter.dev/flutter/material/ButtonThemeData/constraints.html).\r\n\r\nThe second example produces a fixed size button, although it's not exactly 100x100 because padding.\r\n",
        "createdAt" : "2020-07-24T21:03:20Z",
        "updatedAt" : "2020-07-24T21:03:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "99d2649e-d65d-41ba-b9a1-682f0b74ce02",
        "parentId" : "72e00d85-0092-45ad-a662-d17a5dc5c520",
        "authorId" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "body" : "Sounds right. Thank you.",
        "createdAt" : "2020-07-24T21:10:19Z",
        "updatedAt" : "2020-07-24T21:10:19Z",
        "lastEditedBy" : "be1ebfb4-b241-4f0a-8020-88cd3cee0136",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d129af7f63046eba59cb205d0c73a398f70180",
    "line" : 285,
    "diffHunk" : "@@ -1,1 +283,287 @@        minHeight: resolvedMinimumSize.height,\n      ),\n    );\n    final EdgeInsetsGeometry padding = resolvedPadding.add(\n      EdgeInsets.only("
  }
]