[
  {
    "id" : "e4abaa99-0d9c-40bb-8d25-155298b64f03",
    "prId" : 10920,
    "prUrl" : "https://github.com/flutter/flutter/pull/10920#pullrequestreview-45881805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b036c377-43fc-45af-9347-bbe6a3fb24e3",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "interesting, i would have expected this to belong to the selection controls delegate. This works too.",
        "createdAt" : "2017-06-23T01:15:15Z",
        "updatedAt" : "2017-06-23T21:26:46Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "480c37d1a8e46286e15e8f4cdc3478fc429a504b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +250,254 @@        onChanged: widget.onChanged,\n        onSubmitted: widget.onSubmitted,\n        onSelectionChanged: (TextSelection _, bool longPress) => _onSelectionChanged(context, longPress),\n        inputFormatters: widget.inputFormatters,\n      ),"
  },
  {
    "id" : "a9481395-b059-4e27-9a30-378551fe6b57",
    "prId" : 12648,
    "prUrl" : "https://github.com/flutter/flutter/pull/12648#pullrequestreview-70918530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3be52fb1-218a-4520-9eac-a6dc3d56b657",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "maxLengthEnforced?",
        "createdAt" : "2017-10-20T17:11:28Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "54544857-11af-457d-8fd5-608acc375c2e",
        "parentId" : "3be52fb1-218a-4520-9eac-a6dc3d56b657",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Oooh!  Good catch.  Fixed.",
        "createdAt" : "2017-10-20T18:06:46Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dc9f3bb644ef3860d1cd6c16636813f58e41cdf",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +272,276 @@    description.add(new DiagnosticsProperty<bool>('autocorrect', autocorrect, defaultValue: false));\n    description.add(new IntProperty('maxLines', maxLines, defaultValue: 1));\n    description.add(new IntProperty('maxLength', maxLength, defaultValue: null));\n    description.add(new FlagProperty('maxLengthEnforced', value: maxLengthEnforced, ifTrue: 'max length enforced'));\n  }"
  },
  {
    "id" : "d61d6b84-1a32-4d71-882f-31d32d518ab0",
    "prId" : 12648,
    "prUrl" : "https://github.com/flutter/flutter/pull/12648#pullrequestreview-71671662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a29ab89b-bdd2-4545-b162-ac5e045ea0bb",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "if you assert, in the constructor, that `!(maxLength == null && maxLengthEnforced)`, then you can just check maxLengthEnforced here.",
        "createdAt" : "2017-10-23T17:27:52Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a2781100-7511-4fb1-98ad-d3eba639b01d",
        "parentId" : "a29ab89b-bdd2-4545-b162-ac5e045ea0bb",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Actually, that won't work, because maxLength defaults to null (unlimited length), and maxLengthEnforced defaults to true, and those are the least surprising defaults.  That's an OK state too, since it just means exactly what this conditional expresses: if you don't set maxLength, then maxLengthEnforced is ignored.",
        "createdAt" : "2017-10-23T17:54:13Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "4468df6c-e64f-4355-8d28-f5bd709874c2",
        "parentId" : "a29ab89b-bdd2-4545-b162-ac5e045ea0bb",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "You could have the constructor default the maxLengthEnforced argument to null, then set the property to true if maxLength is non-null and maxLengthEnforced is null, and false otherwise.",
        "createdAt" : "2017-10-24T21:02:47Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dc9f3bb644ef3860d1cd6c16636813f58e41cdf",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +346,350 @@    final FocusNode focusNode = _effectiveFocusNode;\n    final List<TextInputFormatter> formatters = widget.inputFormatters ?? <TextInputFormatter>[];\n    if (widget.maxLength != null && widget.maxLengthEnforced)\n      formatters.add(new LengthLimitingTextInputFormatter(widget.maxLength));\n"
  },
  {
    "id" : "b80bc0a0-b4fb-4aa4-b00a-29871f722d39",
    "prId" : 12648,
    "prUrl" : "https://github.com/flutter/flutter/pull/12648#pullrequestreview-71267706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7802194-3a86-48e3-866b-166efce3a5a8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "add:\r\n\r\n```\r\n/// See also:\r\n///\r\n///  * [maxLength], which discusses the precise meaning of \"number of characters\" and how\r\n///    it may differ from the intuitive meaning.\r\n```",
        "createdAt" : "2017-10-23T17:31:26Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1adb6c91-c9ec-4344-bfe9-52faadfb4622",
        "parentId" : "c7802194-3a86-48e3-866b-166efce3a5a8",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2017-10-23T17:35:46Z",
        "updatedAt" : "2017-10-24T21:23:42Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dc9f3bb644ef3860d1cd6c16636813f58e41cdf",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +87,91 @@  ///\n  /// The [keyboardType], [textAlign], [autofocus], [obscureText], and\n  /// [autocorrect] arguments must not be null.\n  ///\n  /// See also:"
  },
  {
    "id" : "1e888300-05f1-4919-9d70-252a763c72f9",
    "prId" : 16027,
    "prUrl" : "https://github.com/flutter/flutter/pull/16027#pullrequestreview-107812773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a255477-6c6e-4eff-8467-90d7b193a9a6",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "If false --> If false,",
        "createdAt" : "2018-03-28T19:12:33Z",
        "updatedAt" : "2018-03-28T19:13:28Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "19a4e4eb55a3ef96118d99443546ef2102134924",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +263,267 @@  final List<TextInputFormatter> inputFormatters;\n\n  /// If false the textfield is \"disabled\": it ignores taps and its\n  /// [decoration] is rendered in grey.\n  ///"
  },
  {
    "id" : "849ae2d0-dd41-4f84-9ba4-3b08d6a9150c",
    "prId" : 19317,
    "prUrl" : "https://github.com/flutter/flutter/pull/19317#pullrequestreview-136866004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c346b084-38f3-4f16-a240-68dd722b89cb",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This is a backwards incompatible change. Is it really needed?",
        "createdAt" : "2018-07-12T23:00:49Z",
        "updatedAt" : "2018-07-23T20:41:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "0fac603a-6c8d-470a-ada8-144e9fe97e11",
        "parentId" : "c346b084-38f3-4f16-a240-68dd722b89cb",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "OK: see https://github.com/flutter/flutter/pull/19317#discussion_r202209668",
        "createdAt" : "2018-07-12T23:38:26Z",
        "updatedAt" : "2018-07-23T20:41:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d87d6b5060e6fe57be2cad556d91560371c40256",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +118,122 @@    this.inputFormatters,\n    this.enabled,\n    this.cursorWidth = 2.0,\n    this.cursorRadius,\n    this.cursorColor,"
  },
  {
    "id" : "4eb6bbbb-1d30-4d8d-8010-2e21ea58bf0e",
    "prId" : 19317,
    "prUrl" : "https://github.com/flutter/flutter/pull/19317#pullrequestreview-138455268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbddb16e-7621-4d8a-9a78-877e252082aa",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Describe default and null behavior",
        "createdAt" : "2018-07-18T21:56:28Z",
        "updatedAt" : "2018-07-23T20:41:52Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d87d6b5060e6fe57be2cad556d91560371c40256",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +327,331 @@  final Radius cursorRadius;\n\n  /// The color to use when painting the cursor.\n  final Color cursorColor;\n"
  },
  {
    "id" : "93ffb0b9-6f29-4ef8-903b-ff42748dda9f",
    "prId" : 24183,
    "prUrl" : "https://github.com/flutter/flutter/pull/24183#pullrequestreview-174088779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85f52d02-5920-4097-8b6d-3937bbf9a850",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "This doesn't seem like the right approach",
        "createdAt" : "2018-11-12T20:13:38Z",
        "updatedAt" : "2018-11-14T12:03:47Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "3057a460-7fa0-46b4-98a9-62b03e3ecc8f",
        "parentId" : "85f52d02-5920-4097-8b6d-3937bbf9a850",
        "authorId" : "3561395e-48e8-44fe-819a-6ed9a66c0eae",
        "body" : "@jonahwilliams -- It was the approach suggested by @HansMuller in the Issue:\r\n\r\n[Issue](https://github.com/flutter/flutter/issues/23791)",
        "createdAt" : "2018-11-12T20:48:18Z",
        "updatedAt" : "2018-11-14T12:03:47Z",
        "lastEditedBy" : "3561395e-48e8-44fe-819a-6ed9a66c0eae",
        "tags" : [
        ]
      },
      {
        "id" : "e82db792-0231-4d61-b18a-56bd1a7dd0bd",
        "parentId" : "85f52d02-5920-4097-8b6d-3937bbf9a850",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "sounds good then",
        "createdAt" : "2018-11-12T20:54:07Z",
        "updatedAt" : "2018-11-14T12:03:47Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "880bf5c0fa983a6f4e11082917be45b67a9f7a57",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +198,202 @@  /// If [maxLength] is set to this value, only the \"current input length\"\n  /// part of the character counter is shown.\n  static const int noMaxLength = 9007199254740992; // math.pow(2, 53);\n\n  /// The maximum number of characters (Unicode scalar values) to allow in the"
  },
  {
    "id" : "f55f84c2-90b3-4fcb-95fe-9ecf160c97a4",
    "prId" : 24536,
    "prUrl" : "https://github.com/flutter/flutter/pull/24536#pullrequestreview-176530665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d733e79b-aa56-4b05-9525-5de2403ff1b0",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "This will be called twice (in the next PR) in a double tap. Is that ok?",
        "createdAt" : "2018-11-19T22:17:05Z",
        "updatedAt" : "2018-11-19T22:17:15Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "b9fe3a7f-dab5-4d1c-bac8-67ae1c4455e2",
        "parentId" : "d733e79b-aa56-4b05-9525-5de2403ff1b0",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I haven't looked at the \"next PR\" yet but if we're timing taps to detect double taps, then we don't need to call this more than once for a series of taps?",
        "createdAt" : "2018-11-19T22:37:43Z",
        "updatedAt" : "2018-11-19T22:37:43Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "a13a7d95adddc00f00fe55828f1bb4615744cc12",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +353,357 @@  /// To listen to arbitrary pointer events without competing with the\n  /// textfield's internal gesture detector, use a [Listener].\n  final GestureTapCallback onTap;\n\n  @override"
  },
  {
    "id" : "e9d6c410-2b39-4428-a366-d22968a4dace",
    "prId" : 24536,
    "prUrl" : "https://github.com/flutter/flutter/pull/24536#pullrequestreview-177030648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "391209d7-f409-4d3f-b95f-f9334d7dec64",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "typo: `withouth`",
        "createdAt" : "2018-11-21T00:11:17Z",
        "updatedAt" : "2018-11-21T00:11:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a13a7d95adddc00f00fe55828f1bb4615744cc12",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +174,178 @@  /// if it's not showing already.\n  ///\n  /// On Android, the user can hide the keyboard - withouth changing the focus -\n  /// with the system back button. They can restore the keyboard's visibility\n  /// by tapping on a text field.  The user might hide the keyboard and"
  },
  {
    "id" : "aa287f90-eeb1-4598-b16b-79c7d4ceb88a",
    "prId" : 24536,
    "prUrl" : "https://github.com/flutter/flutter/pull/24536#pullrequestreview-177030813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "003cbb3c-55fe-4627-93f4-c535c0d97e30",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "nit: looks like we call it a \"text field\" (with a space) in the class docs",
        "createdAt" : "2018-11-21T00:12:05Z",
        "updatedAt" : "2018-11-21T00:12:05Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a13a7d95adddc00f00fe55828f1bb4615744cc12",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +335,339 @@  final bool enableInteractiveSelection;\n\n  /// Called when the user taps on this textfield.\n  ///\n  /// The textfield builds a [GestureDetector] to handle input events like tap,"
  },
  {
    "id" : "42506f33-a899-4251-b25a-e3579277acdd",
    "prId" : 24536,
    "prUrl" : "https://github.com/flutter/flutter/pull/24536#pullrequestreview-177031113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41bde62c-60cb-4eef-995f-74267eeac418",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't think we usually add callbacks to debugFillProperties, fwiw. Normally if we want to expose that we add something like the list of gestures that are listened for (they have short names) or some such, but in this case it's probably easier to just not mention it at all. Not a big deal though.",
        "createdAt" : "2018-11-21T00:13:27Z",
        "updatedAt" : "2018-11-21T00:13:27Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a13a7d95adddc00f00fe55828f1bb4615744cc12",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +373,377 @@    properties.add(IntProperty('maxLength', maxLength, defaultValue: null));\n    properties.add(FlagProperty('maxLengthEnforced', value: maxLengthEnforced, ifTrue: 'max length enforced'));\n    properties.add(DiagnosticsProperty<GestureTapCallback>('onTap', onTap, defaultValue: false));\n  }\n}"
  },
  {
    "id" : "30ae2011-89e5-414c-bd8b-bec6137e3bb2",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-201283412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8336f0cb-c7d2-4ae8-9cc3-f3029fdcd58d",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This appears to be used unconditionally. It should only be used if the platform is iOS.",
        "createdAt" : "2019-02-07T19:35:46Z",
        "updatedAt" : "2019-02-07T19:35:47Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +702,706 @@  bool get _cursorOpacityAnimates => Theme.of(context).platform == TargetPlatform.iOS ? true : false;\n\n  Offset get _getCursorOffset => Offset(_iOSHorizontalCursorOffsetPixels / MediaQuery.of(context).devicePixelRatio, 0);\n\n  bool get _paintCursorAboveText => Theme.of(context).platform == TargetPlatform.iOS ? true : false;"
  },
  {
    "id" : "89a8089f-aec0-4599-a0bf-78091b404389",
    "prId" : 25095,
    "prUrl" : "https://github.com/flutter/flutter/pull/25095#pullrequestreview-187491039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a065d94c-925f-468c-b0b3-64e73d987c9f",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This typedef needs documentation: explain the purpose of the function and the meaning of each argument.\r\n\r\nTypically the first line for typedef doc is boilerplate:\r\n```\r\n/// Signature for the [TextField.buildCounter] callback.\r\n```",
        "createdAt" : "2018-12-21T18:18:56Z",
        "updatedAt" : "2019-01-14T19:06:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbabfda7f9a2e91beb0e7f6f7f82b91df782daab",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +22,26 @@\n/// Signature for the [TextField.buildCounter] callback.\ntypedef InputCounterWidgetBuilder = Widget Function(\n  /// The build context for the TextField\n  BuildContext context,"
  },
  {
    "id" : "3bad7ac3-c739-4ec6-b1e2-d233fc1cb636",
    "prId" : 25095,
    "prUrl" : "https://github.com/flutter/flutter/pull/25095#pullrequestreview-187491039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efa08a71-9349-420a-8030-49218f2c35f7",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The internal logic for this method should be shuffled around a bit to make what's going on clearer.\r\n\r\nProbably init the needsCounter var right before the `if (!needsCounter)` short-circuit return and include the `buildCounter != null` case too. And then use buildCounter or the counterText code...",
        "createdAt" : "2018-12-21T18:33:33Z",
        "updatedAt" : "2019-01-14T19:06:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbabfda7f9a2e91beb0e7f6f7f82b91df782daab",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +470,474 @@\n    // If buildCounter was provided, use it to generate a counter widget.\n    Widget counter;\n    final int currentLength = _effectiveController.value.text.runes.length;\n    if (effectiveDecoration.counter == null"
  },
  {
    "id" : "2eeddf51-ccd9-472f-929d-3f0ab2cea063",
    "prId" : 25095,
    "prUrl" : "https://github.com/flutter/flutter/pull/25095#pullrequestreview-189251131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eeff7642-d567-4a31-9d80-5f569f258b72",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Suggest putting this expression on one line and definitely remove the redundant if statement that follows.\r\n\r\nAnd isn't the logic wrong? We're not going to build a counter widget if counterText == null AND counter == null, right?\r\n\r\n```\r\n    if (effectiveDecoration.counter == null && effectiveDecoration.counterText == null)\r\n      return effectiveDecoration;\r\n```\r\n\r\nAssuming I'm not mistaken and the existing tests passed, we need some more tests.",
        "createdAt" : "2019-01-03T19:15:08Z",
        "updatedAt" : "2019-01-14T19:06:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "ac5cc108-2062-470a-92fe-2085f2984a3d",
        "parentId" : "eeff7642-d567-4a31-9d80-5f569f258b72",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Whoops, fixed the redundant conditional and put the first one on one line.\r\n\r\nThe logic should be correct as it is.  If `counter` is specified then it can be used as the counter widget directly.  If `counterText` is specified then input decorator will build a widget for the given text.  If neither are specified then this method might need to build a counter widget.",
        "createdAt" : "2019-01-04T02:43:16Z",
        "updatedAt" : "2019-01-14T19:06:52Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbabfda7f9a2e91beb0e7f6f7f82b91df782daab",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +472,476 @@    Widget counter;\n    final int currentLength = _effectiveController.value.text.runes.length;\n    if (effectiveDecoration.counter == null\n        && effectiveDecoration.counterText == null\n        && widget.buildCounter != null) {"
  },
  {
    "id" : "4e103799-6cbd-49ed-b03a-649295a71cf8",
    "prId" : 25095,
    "prUrl" : "https://github.com/flutter/flutter/pull/25095#pullrequestreview-192278208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45df6151-9550-49b9-b12f-c261ea4200b0",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This check, which is the shortest of the short-circuits, should go first.\r\n\r\nI think you can cover the gist of this a little better with an inline comment:\r\n```\r\n    if (widget.maxLength == null)\r\n      return effectiveDecoration; // No counter widget\r\n```",
        "createdAt" : "2019-01-03T19:18:05Z",
        "updatedAt" : "2019-01-14T19:06:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "3dc841b3-aadf-434a-8453-f4075b8f383b",
        "parentId" : "45df6151-9550-49b9-b12f-c261ea4200b0",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "It looks like moving this up will change the behavior a little bit.  If `maxLength` is not specified, then you can still get a counter widget by passing `counter` or `counterText`, but not by passing `counterBuilder`.  As it is now, you can get a counter widget with any of those params and no `maxLength`.\r\n\r\nWhat do you think the behavior should be?  For now I'm leaving it where it is and adding a test to show that you can still build a counter without `maxLength`.  I can easily move it and flip the logic in the test if you think that's better though.",
        "createdAt" : "2019-01-04T03:30:41Z",
        "updatedAt" : "2019-01-14T19:06:52Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "f268e786-47a1-40cf-b4d3-e661316f8636",
        "parentId" : "45df6151-9550-49b9-b12f-c261ea4200b0",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I agree, good point. Best to leave the logic as it is.",
        "createdAt" : "2019-01-14T17:46:19Z",
        "updatedAt" : "2019-01-14T19:06:52Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbabfda7f9a2e91beb0e7f6f7f82b91df782daab",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +489,493 @@    }\n\n    if (widget.maxLength == null)\n      return effectiveDecoration; // No counter widget\n"
  },
  {
    "id" : "200fea1a-6eb4-4f4f-8c4e-f61f68f582ba",
    "prId" : 25683,
    "prUrl" : "https://github.com/flutter/flutter/pull/25683#pullrequestreview-192991441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b31a13e-9dc9-421e-b656-d9d284b65628",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why are we saying SelectionChangedCause is something other than what it is?\r\nShouldn't we introduce a new enum value?\r\n\r\ncc @xster",
        "createdAt" : "2019-01-16T06:44:15Z",
        "updatedAt" : "2019-01-16T06:44:16Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bef0607b52e8025966831ceb2654e9b5593010e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +550,554 @@          // The cause is not technically double tap, but we would like to show\n          // the toolbar.\n          _renderEditable.selectWordsInRange(from: details.globalPosition, cause: SelectionChangedCause.doubleTap);\n          break;\n        case TargetPlatform.android:"
  },
  {
    "id" : "71fc6783-9fa7-4e74-815c-8736a68fe0a3",
    "prId" : 26001,
    "prUrl" : "https://github.com/flutter/flutter/pull/26001#pullrequestreview-192957506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb5aebb8-7365-4565-8adc-52169e8cbf95",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If selection changes cause scrolling on iOS then should the test below be `!selection.isCollapsed` ?",
        "createdAt" : "2019-01-15T18:52:56Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "abdf24e5-cbf9-43a8-b6ba-fe7c80f70d35",
        "parentId" : "eb5aebb8-7365-4565-8adc-52169e8cbf95",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Rephrased the commen.",
        "createdAt" : "2019-01-16T03:04:43Z",
        "updatedAt" : "2019-02-07T19:15:01Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5725a2658d8ec7bee93bbac5b0818122b39d02a3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +585,589 @@  void _handleSelectionChanged(TextSelection selection, SelectionChangedCause cause) {\n    // iOS cursor doesn't move via a selection handle. The scroll happens\n    // directly from new text selection changes.\n    if (Theme.of(context).platform == TargetPlatform.iOS\n        && cause == SelectionChangedCause.longPress) {"
  },
  {
    "id" : "b1a3f4b8-0523-4a93-8c11-33d46d7d136f",
    "prId" : 27663,
    "prUrl" : "https://github.com/flutter/flutter/pull/27663#pullrequestreview-201801812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8ddd7b7-4a4e-468a-b902-14bc22d8c980",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Do we not need the default value of 2 coming from the widget.cursorOffset?\r\n\r\nSome random yak shaving while we're here. I had to click through all the editables to realize that RenderEditable handles nulls. Can we add it to the doc? ",
        "createdAt" : "2019-02-08T20:50:32Z",
        "updatedAt" : "2019-02-08T20:53:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "65190fea-ed6b-4c72-8ad4-25303d60eb8e",
        "parentId" : "a8ddd7b7-4a4e-468a-b902-14bc22d8c980",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I also thing I'm leaning towards liking the getters more. It takes less effort to read and realize that we're only dealing with an Android and an iOS value and don't have to follow the local variable through to watch out for the fallthrough/null case.",
        "createdAt" : "2019-02-08T20:51:57Z",
        "updatedAt" : "2019-02-08T20:53:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "cd218696-67d8-4d66-8078-1ed944c505ed",
        "parentId" : "a8ddd7b7-4a4e-468a-b902-14bc22d8c980",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The cursorOffset is only defined for iOS. \r\n\r\nI moved the couple of getters that were returning platform-specific values to the block of code that handles configuring the EditableText's other platform-specific values because it's easier to read (all in one place), simpler, and that's the way the rest of it already was.\r\n\r\nI'll be happy to add some documentation about null parameters to RenderEditable in a separate PR.",
        "createdAt" : "2019-02-08T21:14:36Z",
        "updatedAt" : "2019-02-08T21:14:36Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "630df490-f283-4575-9a5f-30594ef0a7a2",
        "parentId" : "a8ddd7b7-4a4e-468a-b902-14bc22d8c980",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "oops, sorry, there is no widget.cursorOffset. I misread widget.cursorWidth",
        "createdAt" : "2019-02-08T21:54:25Z",
        "updatedAt" : "2019-02-08T21:54:26Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f6f16e2b6f84c76be014c849b0d4edd0d54cc4d",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +725,729 @@    bool paintCursorAboveText;\n    bool cursorOpacityAnimates;\n    Offset cursorOffset;\n    Color cursorColor = widget.cursorColor;\n    Radius cursorRadius = widget.cursorRadius;"
  },
  {
    "id" : "e35e00e5-0c37-4a2f-bda3-533d35ded1bf",
    "prId" : 28290,
    "prUrl" : "https://github.com/flutter/flutter/pull/28290#pullrequestreview-208848594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74027402-5681-460e-a301-70115d2ad25b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "how did you solve the long press on mouse problem?",
        "createdAt" : "2019-02-28T01:05:38Z",
        "updatedAt" : "2019-03-01T21:18:27Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "72604c05-b030-48a6-aa08-6cdbf6b6bf5f",
        "parentId" : "74027402-5681-460e-a301-70115d2ad25b",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "never-mind, you did it inside TextSelectionGestureDetector",
        "createdAt" : "2019-02-28T01:08:30Z",
        "updatedAt" : "2019-03-01T21:18:27Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "d39a81a281f10dd9b4fba6d3884058c0a7448d9e",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +889,893 @@          onSingleTapCancel: _handleSingleTapCancel,\n          onSingleLongTapStart: _handleSingleLongTapStart,\n          onSingleLongTapMoveUpdate: _handleSingleLongTapMoveUpdate,\n          onSingleLongTapEnd: _handleSingleLongTapEnd,\n          onDoubleTapDown: _handleDoubleTapDown,"
  },
  {
    "id" : "1ed0fde4-682e-4e8a-a637-b6353f36cea3",
    "prId" : 29683,
    "prUrl" : "https://github.com/flutter/flutter/pull/29683#pullrequestreview-222516767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eafd922a-a41e-435a-b96f-32f5f04c6b8e",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Keep white lines consistent.",
        "createdAt" : "2019-04-04T00:54:22Z",
        "updatedAt" : "2019-05-13T18:37:47Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "e569fef46da2993e5f48803f89ed8d7357829f21",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +622,626 @@    if (cause == SelectionChangedCause.keyboard)\n      return false;\n\n    if (cause == SelectionChangedCause.longPress)\n      return true;"
  },
  {
    "id" : "2e50555b-89ea-47e9-8a93-898b27ab0278",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-243386139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dee39f17-0755-4742-b57a-a7c5b1b00a8a",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "this logic deal with collapse selection handle during readonly <---> non readonly transition.\r\n\r\nTo make it possible _editableText.showHandles() will need to remove some assert (see editable_text.dart line 1452)\r\nThe assert is fine before because text_field used to only call the function during handle selection change. At the time selectionoverlay is guaranteed to exist. However, this is not the case here, and TextField does not have knowledget about selectionoverlay.\r\n\r\nThe other part I need to change is text_selection.dart line 358. showHandles will now be called during build phase, I have to deal with that case.\r\n\r\nI make this compromise since I can't think of a better way. The selection handle completely handle by the TextField side instead of Editabletext due to we need different behavior on CupertinoTextField and Textfield.",
        "createdAt" : "2019-05-21T23:36:10Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "10b9e3b7-cc93-4ac8-815e-b9c79c0908c9",
        "parentId" : "dee39f17-0755-4742-b57a-a7c5b1b00a8a",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "@justinmc ",
        "createdAt" : "2019-05-21T23:36:29Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "d565a888-605b-41c3-bc96-86cdbfd27b5a",
        "parentId" : "dee39f17-0755-4742-b57a-a7c5b1b00a8a",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "also added a test 'Dynamically switching between read only and not read only should hide or show collapse cursor'",
        "createdAt" : "2019-05-21T23:40:42Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "6e163c03-2f80-457d-9a56-96c4cc03cea4",
        "parentId" : "dee39f17-0755-4742-b57a-a7c5b1b00a8a",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Removing the showHandles assertion seems fine to me because now handles can be visible without a menu.\r\n\r\nThe other thing with `addPostFrameCallback` seems more suspect...  The fact that we're using an imperative pattern (showHandles) is a red flag to me, but I guess that has been around long before this PR.  It seems like the problem is that we're calling an imperative command to change the UI at the same time that the widget is being updated through Flutter's normal declarative way.  I'm not sure if it's possible to remedy that though, especially without a big refactor.\r\n\r\nHopefully someone else has some context on this and whether it's a major sin to call `addPostFrameCallback` or not.",
        "createdAt" : "2019-05-22T18:09:24Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "d9820a77-c9af-49cb-8242-baeb7d47d7b5",
        "parentId" : "dee39f17-0755-4742-b57a-a7c5b1b00a8a",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Also, does this logic need to be in CupertinoTextField too?",
        "createdAt" : "2019-05-22T19:39:31Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "485bc7c5-8add-4d71-b8b8-4553eb1daa96",
        "parentId" : "dee39f17-0755-4742-b57a-a7c5b1b00a8a",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "https://github.com/flutter/flutter/commit/bcae3563d4\r\nthis is the pr that exposed showhandles, and I think there is no easy way to avoid it because we want different showhandles behavior on TextField and CupertinoTextfield. Unless we can move the entire selectionOverlay out of editable text, which is a heavy lift but probably the right approach.\r\n\r\nThis logic does not need to be in CupertinoTextField as it already does not show the handles when it is collapse ",
        "createdAt" : "2019-05-22T21:50:03Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "d7a8ddae-4802-4d14-93c4-30f734449d1f",
        "parentId" : "dee39f17-0755-4742-b57a-a7c5b1b00a8a",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "@HansMuller might have more context on this?",
        "createdAt" : "2019-05-28T16:41:48Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "e98d4ddb-8407-41c0-b936-622d4f4a52e9",
        "parentId" : "dee39f17-0755-4742-b57a-a7c5b1b00a8a",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I didn't review https://github.com/flutter/flutter/pull/29683 but it does seem strange that we're adding a `showCursor` property where we already have `showToolbar()` and `hideToolbar()` methods. The toolbar methods seem out of place. \r\n\r\nThis PR introduces some backwards-incompatible changes anyway ... maybe we should replace showToolbar and hideToolbar with a showToolbar property? The toolbar methods have only been around for two weeks.",
        "createdAt" : "2019-05-29T00:02:52Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "b178808c-5d08-45d4-8bb2-0e93ec55fa28",
        "parentId" : "dee39f17-0755-4742-b57a-a7c5b1b00a8a",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "showcursor and showhandles are two different things.\r\n![Screen Shot 2019-05-29 at 9 41 42 AM](https://user-images.githubusercontent.com/47866232/58575150-5fc20700-81f6-11e9-8646-49c15cdb6d98.png)\r\n",
        "createdAt" : "2019-05-29T16:44:56Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +621,625 @@      _effectiveFocusNode.unfocus();\n    }\n    if (_effectiveFocusNode.hasFocus && widget.readOnly != oldWidget.readOnly) {\n      if(_effectiveController.selection.isCollapsed) {\n        _showSelectionHandles = !widget.readOnly;"
  },
  {
    "id" : "65f16be9-8c3a-4b64-bce4-034c73d4280d",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-244421726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8559e0d2-0a8f-4591-a01b-9da6410da98e",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Same here as above",
        "createdAt" : "2019-05-31T17:14:30Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +124,128 @@  /// switch to the [decoration.errorStyle] when the limit is exceeded.\n  ///\n  /// The text cursor is not shown if [showCursor] is false or if [showCursor]\n  /// is null (the default) and [readOnly] is true.\n  ///"
  },
  {
    "id" : "42caa58c-ce43-4e50-b3af-e5043d4e42b6",
    "prId" : 34964,
    "prUrl" : "https://github.com/flutter/flutter/pull/34964#pullrequestreview-253582233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57158231-a121-453a-97bd-e3d5f95a0fb0",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I guess this is an undesirable side effect of using `_handleSingleTapUp`?",
        "createdAt" : "2019-06-24T03:52:38Z",
        "updatedAt" : "2019-06-24T22:23:29Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "5d999e8b-0f6f-411d-8bf4-7ecee221758a",
        "parentId" : "57158231-a121-453a-97bd-e3d5f95a0fb0",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I think so, that sounds familiar.  We could hack in the second taps but it's probably fine if no one is asking for it.",
        "createdAt" : "2019-06-24T18:24:58Z",
        "updatedAt" : "2019-06-24T22:23:29Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "ba2c9f6a-806e-4f92-99ae-d099a40f398f",
        "parentId" : "57158231-a121-453a-97bd-e3d5f95a0fb0",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It looks that way, yes. Although it's a little quirky, I think this is what most developers want from this callback.",
        "createdAt" : "2019-06-24T18:28:44Z",
        "updatedAt" : "2019-06-24T22:23:29Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "c90f0dcd8abb2892858f5e43815dae9809407ae1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +434,438 @@\n  /// {@template flutter.material.textfield.onTap}\n  /// Called for each distinct tap except for every second tap of a double tap.\n  ///\n  /// The text field builds a [GestureDetector] to handle input events like tap,"
  },
  {
    "id" : "8c8b3982-62a9-40b9-ad55-6e768c5b06c8",
    "prId" : 45567,
    "prUrl" : "https://github.com/flutter/flutter/pull/45567#pullrequestreview-331387550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2e390cd-d908-4582-a989-491cbf1b9454",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Similar to the `.clamp(...) as double`, I think here it'd be safer to say `.clamp(...).toInt()`.",
        "createdAt" : "2019-12-12T16:54:23Z",
        "updatedAt" : "2019-12-12T18:17:51Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "f188f77d-15a5-4196-8693-d99f30c8a9e8",
        "parentId" : "c2e390cd-d908-4582-a989-491cbf1b9454",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "same comment as above for `as double` vs. `.toDouble()`",
        "createdAt" : "2019-12-12T17:09:04Z",
        "updatedAt" : "2019-12-12T18:17:51Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "99853c0dc4f832719eb3cc0dc4327d38ac1dadc9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +783,787 @@      // Show the maxLength in the counter\n      counterText += '/${widget.maxLength}';\n      final int remaining = (widget.maxLength - currentLength).clamp(0, widget.maxLength) as int;\n      semanticCounterText = localizations.remainingTextFieldCharacterCount(remaining);\n"
  },
  {
    "id" : "07cbd15a-06ca-4d80-ae41-2b241ba2870f",
    "prId" : 48917,
    "prUrl" : "https://github.com/flutter/flutter/pull/48917#pullrequestreview-354063491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf9b72be-ce3f-428e-ad47-a71bcfdc9cb6",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "assert on this.",
        "createdAt" : "2020-02-05T21:49:02Z",
        "updatedAt" : "2020-02-05T22:24:28Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4822286f54a6073dbd4db67bd1e557313a60f4",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +285,289 @@  /// changing the shape of the selection highlighting. These properties default\n  /// to [ui.BoxHeightStyle.tight] and [ui.BoxWidthStyle.tight] respectively and\n  /// must not be null.\n  ///\n  /// The [textAlign], [autofocus], [obscureText], [readOnly], [autocorrect],"
  },
  {
    "id" : "76e1eacd-9750-4b04-98cf-e32ea5141ad9",
    "prId" : 54919,
    "prUrl" : "https://github.com/flutter/flutter/pull/54919#pullrequestreview-402916871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f8af02a-60c4-401f-b020-f2860b111bc4",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "/cc @justinmc to take a look at the textfield stuff.",
        "createdAt" : "2020-04-29T18:29:19Z",
        "updatedAt" : "2020-05-27T00:46:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a82c577ded9e85d6474292d8628c739e47c715d",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +889,893 @@      _controller = TextEditingController();\n    }\n    _effectiveFocusNode.canRequestFocus = _isEnabled;\n  }\n"
  },
  {
    "id" : "8136018a-caf0-4ee9-8ace-81ea138d7184",
    "prId" : 59883,
    "prUrl" : "https://github.com/flutter/flutter/pull/59883#pullrequestreview-441177378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bcdee36-3c9a-4517-bed5-dcc768c5acfb",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why are we switching this around? Even when it is disabled it should still respond to hovers?",
        "createdAt" : "2020-06-30T21:39:41Z",
        "updatedAt" : "2020-07-06T20:06:33Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "a4b9cffd-c4bd-40ff-b541-20a72a3c5958",
        "parentId" : "9bcdee36-3c9a-4517-bed5-dcc768c5acfb",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Yes. A widget should never turn off the mouse region when it's disabled.\r\n\r\nThe mouse cursor algorithm detects the first `MouseTrackerAnnotation` found and uses its cursor. If the `MouseRegion` is hidden behind the `IgnorePointer` then the widget will never be able to show its disabled cursor, and the cursor will incorrectly be the one of the widget behind it, as if the `TextField` does not exist. A test that is violated can be found at https://github.com/flutter/flutter/blob/3f4f91532f5959923ed5a25fc0bed83bdd207b46/packages/flutter/test/material/text_field_test.dart#L8170\r\n\r\nThe reason why this isn't found earlier is probably because `IgnorePointer` and `AbsorbPointer` failed to support mouse events (incorrectly, see https://github.com/flutter/flutter/issues/35213).",
        "createdAt" : "2020-07-01T20:32:28Z",
        "updatedAt" : "2020-07-06T20:06:33Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a8ed4afae7a150ba57466a04ad680f20282ebf2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1149,1153 @@    );\n\n    return MouseRegion(\n      cursor: effectiveMouseCursor,\n      onEnter: (PointerEnterEvent event) => _handleHover(true),"
  },
  {
    "id" : "aced31d9-631e-468f-9039-82c3b5a19aba",
    "prId" : 62712,
    "prUrl" : "https://github.com/flutter/flutter/pull/62712#pullrequestreview-462004444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b6391d1-aded-420a-ba35-3597d06badfc",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Dartdoc is complaining that there's no template for this macro: https://cirrus-ci.com/task/5126735421243392?command=main#L119",
        "createdAt" : "2020-08-05T16:21:38Z",
        "updatedAt" : "2020-08-11T04:04:52Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ad602441-ac1d-46ac-86fe-1bbd1291d9ad",
        "parentId" : "8b6391d1-aded-420a-ba35-3597d06badfc",
        "authorId" : "d97f9005-c44f-4365-ae32-14d5873a0e35",
        "body" : "Added template in editable_text.dart",
        "createdAt" : "2020-08-05T20:36:05Z",
        "updatedAt" : "2020-08-11T04:04:52Z",
        "lastEditedBy" : "d97f9005-c44f-4365-ae32-14d5873a0e35",
        "tags" : [
        ]
      }
    ],
    "commit" : "6de0b08e200a9412b65f8415af5584fe4a978619",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +634,638 @@  final ValueChanged<String> onSubmitted;\n\n  /// {@macro flutter.widgets.editableText.onAppPrivateCommand}\n  final AppPrivateCommandCallback onAppPrivateCommand;\n"
  },
  {
    "id" : "d8aa85d8-e428-4bc8-94f6-6adca6ac6d3e",
    "prId" : 67361,
    "prUrl" : "https://github.com/flutter/flutter/pull/67361#pullrequestreview-503146585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fddb6c6-3c46-4f82-bc7c-1265bf2d00ec",
        "parentId" : null,
        "authorId" : "4c4f4d7a-cf21-4e96-a7ad-56aa3a3c1b4e",
        "body" : "Nice!",
        "createdAt" : "2020-10-06T16:24:55Z",
        "updatedAt" : "2020-10-06T22:26:44Z",
        "lastEditedBy" : "4c4f4d7a-cf21-4e96-a7ad-56aa3a3c1b4e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f26c053873aa1e7758cc4722373dcb7629784b7a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +264,268 @@/// into the field and submitting. Because the example code measures the length\n/// with `value.characters.length`, the emoji is correctly counted as a single\n/// character.\n///\n/// See also:"
  },
  {
    "id" : "17d0cab6-c24d-44b7-9f73-c27f7536d096",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-511149893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24154291-70f4-438c-b899-64aa941aa07f",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The developer won't be able to confidently determine which `MaxLengthEnforcement` option should be used by just looking at this section alone (unless they know ios and android very very well), and they might go for the `default` option thinking it's more CJK friendly, and find out later that it doesn't work well with Gboard. I think we should document how Gboard and ios IME use composing text differently.",
        "createdAt" : "2020-10-18T00:28:08Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "51dd4e7f-9f01-4b16-8fad-c1498e64a665",
        "parentId" : "24154291-70f4-438c-b899-64aa941aa07f",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Added more description.",
        "createdAt" : "2020-10-18T14:26:38Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +610,614 @@  /// {@macro flutter.services.textFormatter.effectiveMaxLengthEnforcement}\n  ///\n  /// {@macro flutter.services.textFormatter.maxLengthEnforcement}\n  final MaxLengthEnforcement? maxLengthEnforcement;\n"
  },
  {
    "id" : "59c3707a-4267-4b18-8ea9-ff9df151ae45",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-511179987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9aad304-b617-4b20-afd4-99ca715e3d20",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "nit: describe the default value.",
        "createdAt" : "2020-10-18T20:42:16Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +610,614 @@  /// {@macro flutter.services.textFormatter.effectiveMaxLengthEnforcement}\n  ///\n  /// {@macro flutter.services.textFormatter.maxLengthEnforcement}\n  final MaxLengthEnforcement? maxLengthEnforcement;\n"
  },
  {
    "id" : "e4bf9b5d-2393-42da-a08a-577569e8ee20",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-513293931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12ddeba9-4171-4bbc-b68a-00d06f081515",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I think we need an `@deprecated` annotation for the constructor parameter as well.",
        "createdAt" : "2020-10-21T04:20:04Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +357,361 @@    this.expands = false,\n    this.maxLength,\n    this.maxLengthEnforced = true,\n    this.maxLengthEnforcement,\n    this.onChanged,"
  },
  {
    "id" : "97ab321e-ef60-4e13-a11d-baf1c86e39ad",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-515858432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36ed3aec-6edd-4920-97c1-f80b588f4b81",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Nit: I think there should be an empty `///` line between these paragraphs.",
        "createdAt" : "2020-10-23T17:14:30Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +576,580 @@  /// After [maxLength] characters have been input, additional input\n  /// is ignored, unless [maxLengthEnforcement] is set to\n  /// [MaxLengthEnforcement.none].\n  ///\n  /// The text field enforces the length with a [LengthLimitingTextInputFormatter],"
  },
  {
    "id" : "8672acfe-cea7-4ede-a9c3-afb474cf497c",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-546763818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ed1a48d-82fb-4a96-8c86-c891ce2517d5",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "NIt: You can get rid of this `else` block and it will still be null anyway.",
        "createdAt" : "2020-12-07T17:23:19Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "0dccea05-eec2-4d31-bf0f-63b65ad300af",
        "parentId" : "7ed1a48d-82fb-4a96-8c86-c891ce2517d5",
        "authorId" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "body" : "Actually it can't. Because without this control flow the `final xxx` without assignment is a compile error.",
        "createdAt" : "2020-12-08T01:34:57Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "20b156cc-7793-4e52-af65-da65800a8c8a",
        "tags" : [
        ]
      },
      {
        "id" : "f92066fb-c3ce-4459-afdc-325b9f4e06aa",
        "parentId" : "7ed1a48d-82fb-4a96-8c86-c891ce2517d5",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Ah NNBD is still tripping me up.  Good point. 👍 ",
        "createdAt" : "2020-12-08T05:49:51Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +1258,1262 @@      semanticsMaxValueLength = widget.maxLength;\n    } else {\n      semanticsMaxValueLength = null;\n    }\n"
  },
  {
    "id" : "d6d0cdf5-4c09-417b-9217-82b409304b8c",
    "prId" : 68918,
    "prUrl" : "https://github.com/flutter/flutter/pull/68918#pullrequestreview-517055613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87e5cf87-4fca-417e-ae1f-f3a133800b13",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I didn't check all the fields. Take a look to make sure for any fields that is used in one implementation and not the other, mention so in that field's documentation. ",
        "createdAt" : "2020-10-26T18:20:48Z",
        "updatedAt" : "2020-10-27T20:49:26Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "329b52e253019f689f842bb2f81b92ae80078e72",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +1195,1199 @@  Widget _buildCupertinoTextField(BuildContext context) {\n    return CupertinoTextField(\n      key: widget.key,\n      controller: widget.controller,\n      focusNode: widget.focusNode,"
  }
]