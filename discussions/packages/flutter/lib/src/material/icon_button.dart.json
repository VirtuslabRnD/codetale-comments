[
  {
    "id" : "d92c85b8-4a41-4b9c-9f75-bb8a365aabc6",
    "prId" : 1237,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "298ecdb4-4b68-4aaf-860f-e98b7c0a706c",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "color: $color\n\n?\n",
        "createdAt" : "2016-01-14T03:22:11Z",
        "updatedAt" : "2016-01-14T20:21:58Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "18c4b49d-4853-426c-8ed0-1a0714523f64",
        "parentId" : "298ecdb4-4b68-4aaf-860f-e98b7c0a706c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "When you stringify a color it already has \"Color\" in the string so I often skip the 'color:' for widget descriptions (since they all end up on one line brevity is important).\n",
        "createdAt" : "2016-01-14T03:32:20Z",
        "updatedAt" : "2016-01-14T20:21:58Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "24cab8999c5799da203c6a97e182c12b187b7a76",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +53,57 @@      description.add('disabled');\n    if (color != null)\n      description.add('$color');\n    if (tooltip != null)\n      description.add('tooltip: \"$tooltip\"');"
  },
  {
    "id" : "1e32b373-e511-47a3-aa64-691dc5f40391",
    "prId" : 4382,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fb5b910-f552-47c4-a539-c2b8231bf974",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Use `@required` ?\n",
        "createdAt" : "2016-06-04T04:08:56Z",
        "updatedAt" : "2016-06-07T23:00:35Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "47dd3651-8597-41f8-a326-98a915bf2db1",
        "parentId" : "8fb5b910-f552-47c4-a539-c2b8231bf974",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "done\n",
        "createdAt" : "2016-06-07T22:43:11Z",
        "updatedAt" : "2016-06-07T23:00:35Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c8ccb7f628edf82988eff4c3af9c3df172c2c3e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +42,46 @@  ///\n  /// The [icon] argument must be specified. See [Icons] for a list of icons to\n  /// use for this argument.\n  const IconButton({\n    Key key,"
  },
  {
    "id" : "521f3077-b56d-4c2f-b78e-1b458457c896",
    "prId" : 4649,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a3e9bab-8415-42e9-97de-d4b7edc406ea",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It's interesting the pass the size this way.  It's different than using a SizedBox because the Icon centers the icon of the specified size.\n",
        "createdAt" : "2016-06-21T02:50:36Z",
        "updatedAt" : "2016-06-21T03:19:49Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "183a521c7f8b2c721976455c8b526347702dca40",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +129,133 @@            context: context,\n            data: new IconThemeData(\n              size: size,\n              color: currentColor\n            ),"
  },
  {
    "id" : "f8a9ca00-030e-4e04-b93e-4eff331d02be",
    "prId" : 10223,
    "prUrl" : "https://github.com/flutter/flutter/pull/10223#pullrequestreview-39838562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79890413-7d54-4475-a72e-dd545e26f4b6",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "+100000",
        "createdAt" : "2017-05-23T19:06:57Z",
        "updatedAt" : "2017-05-23T22:04:58Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6591de46a350c14b5390dc250fd7d8b343ffeb4",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +41,45 @@///\n/// ```dart\n/// new IconButton(\n///   icon: new Icon(Icons.volume_up),\n///   tooltip: 'Increase volume by 10%',"
  },
  {
    "id" : "3f9d84f7-9424-4f42-921d-ccf1c297b7b8",
    "prId" : 36964,
    "prUrl" : "https://github.com/flutter/flutter/pull/36964#pullrequestreview-267892365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d26ba873-ae0b-4c7b-8db8-c0d04a1bf8d5",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Might not be the best spec link; see earlier comment",
        "createdAt" : "2019-07-29T16:21:18Z",
        "updatedAt" : "2019-07-29T22:18:11Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2645ace41439b73473e3594f2249b2b031164e5",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +35,39 @@/// The hit region of an icon button will, if possible, be at least\n/// kMinInteractiveDimension pixels in size, regardless of the actual\n/// [iconSize], to satisfy the [touch target size](https://material.io/guidelines/layout/metrics-keylines.html#metrics-keylines-touch-target-size)\n/// requirements in the Material Design specification. The [alignment] controls\n/// how the icon itself is positioned within the hit region."
  },
  {
    "id" : "781f4350-47e3-465f-a5c9-78ee7ddd0855",
    "prId" : 41972,
    "prUrl" : "https://github.com/flutter/flutter/pull/41972#pullrequestreview-301703833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edc3b702-c1da-4776-a4c7-bcf8bd914c72",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "It seems that `RawMaterialButton`, `MaterialButton` and `IconButton` do not have an `onLongPress` callback or option, which makes this inaccurate. We should either modify the docs to explain that long-press is not supported for these widgets, or implement them correctly. \r\n\r\n@HansMuller What seems like the appropriate step here? ",
        "createdAt" : "2019-10-07T17:14:31Z",
        "updatedAt" : "2019-11-01T19:12:55Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "a07df65f-0a54-40ac-9a08-3bb50aa072b7",
        "parentId" : "edc3b702-c1da-4776-a4c7-bcf8bd914c72",
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "Related to this issue somewhat, since it explains the default long press behavior for Material buttons and the intent to add an `onLongPress` param: https://github.com/flutter/flutter/pull/40641",
        "createdAt" : "2019-10-07T17:16:37Z",
        "updatedAt" : "2019-11-01T19:12:55Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "45c01511-ad4d-4b35-8ef0-1e42fc309ca7",
        "parentId" : "edc3b702-c1da-4776-a4c7-bcf8bd914c72",
        "authorId" : "fbe1ea61-46af-480a-9a9f-bc4305271514",
        "body" : "Removed comment in doc about long-press",
        "createdAt" : "2019-10-08T08:11:56Z",
        "updatedAt" : "2019-11-01T19:12:55Z",
        "lastEditedBy" : "fbe1ea61-46af-480a-9a9f-bc4305271514",
        "tags" : [
        ]
      },
      {
        "id" : "a7b9ff6f-0297-4370-b410-ce4df1aa516c",
        "parentId" : "edc3b702-c1da-4776-a4c7-bcf8bd914c72",
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "I don't think just removing it is the right approach -- I think if we take the route of not having it respond to long presses, we need to explain how this is different from what is expected. Let's wait for @HansMuller before we continue forward about this topic",
        "createdAt" : "2019-10-08T15:58:37Z",
        "updatedAt" : "2019-11-01T19:12:55Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "c182a463-e27d-466c-88a6-cecc9c73b253",
        "parentId" : "edc3b702-c1da-4776-a4c7-bcf8bd914c72",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I think that #40641 will land pretty soon and so it's OK to explain that enableFeedback does what InkWell.enableFeedback does without qualification.",
        "createdAt" : "2019-10-15T00:22:28Z",
        "updatedAt" : "2019-11-01T19:12:55Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "8e40319e-ad62-4e52-bdc8-90915173c467",
        "parentId" : "edc3b702-c1da-4776-a4c7-bcf8bd914c72",
        "authorId" : "fbe1ea61-46af-480a-9a9f-bc4305271514",
        "body" : "Done",
        "createdAt" : "2019-10-15T07:35:38Z",
        "updatedAt" : "2019-11-01T19:12:55Z",
        "lastEditedBy" : "fbe1ea61-46af-480a-9a9f-bc4305271514",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0362bc6b92daf40ca820b0664459fe0d42f5906",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +274,278 @@  ///\n  /// For example, on Android a tap will produce a clicking sound and a\n  /// long-press will produce a short vibration, when feedback is enabled.\n  ///\n  /// See also:"
  },
  {
    "id" : "a6ef2ad0-f550-470c-9f5d-680d42a229e8",
    "prId" : 47457,
    "prUrl" : "https://github.com/flutter/flutter/pull/47457#pullrequestreview-342933789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "689c1091-f24b-45d0-b868-194afb8b4eba",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The doc should briefly explain what happens by default (if the constraints are not specified).  It would also help to include a (short) paragraph that explains the use case that motivated this PR, i.e. for icons that are smaller than 48x48 one must...\r\n\r\nRaisedButton, FlatButton, OutlineButton, all unconditionally apply the visual density adjustment. We should probably do the same here.\r\n\r\nNote also: perhaps the following idiom (from RawMaterialButton) should be factored into a VisualDensity.effectiveConstraints() method.\r\n```\r\n    final Offset densityAdjustment = widget.visualDensity.baseSizeAdjustment;\r\n    final BoxConstraints effectiveConstraints = widget.constraints.copyWith(\r\n      minWidth: widget.constraints.minWidth != null ? (widget.constraints.minWidth + densityAdjustment.dx).clamp(0.0, double.infinity) as double : null,\r\n      minHeight: widget.constraints.minWidth != null ? (widget.constraints.minHeight + densityAdjustment.dy).clamp(0.0, double.infinity) as double : null,\r\n    );\r\n```\r\n\r\nCC @gspencergoog ",
        "createdAt" : "2019-12-20T01:15:01Z",
        "updatedAt" : "2020-01-15T02:18:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "f09e3e72-ca50-421b-a6a6-266edad227ae",
        "parentId" : "689c1091-f24b-45d0-b868-194afb8b4eba",
        "authorId" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "body" : "Thank you very much for the comment! I have a few questions:\r\n\r\n1. What is a situation where `constraints.minWidth` can be `null`?\r\n    - The [documentation on `BoxConstraints`](https://api.flutter.dev/flutter/rendering/BoxConstraints-class.html) mentions that the the parameters must satisfy 0.0 ≤ minWidth ≤ maxWidth ≤ double.infinity and 0.0 ≤ minHeight ≤ maxHeight ≤ double.infinity. Does this mean that `constraints.minWidth` should never be `null`?\r\n2. If the incoming `BoxConstraints` parameter specifies `maxWidth` and `maxHeight`, should they also comply with `VisualDensity` adjustment?\r\n3. In the above code, why do we test that **minWidth** is not null in **minHeight**?\r\n```dart\r\n      minHeight: widget.constraints.minWidth != null ? (widget.constraints.minHeight + densityAdjustment.dy).clamp(0.0, double.infinity) as double : null,\r\n```",
        "createdAt" : "2019-12-20T11:34:42Z",
        "updatedAt" : "2020-01-15T02:18:57Z",
        "lastEditedBy" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "tags" : [
        ]
      },
      {
        "id" : "21c8ff8a-a278-4326-ad5e-f1075ba1d6ee",
        "parentId" : "689c1091-f24b-45d0-b868-194afb8b4eba",
        "authorId" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "body" : "Please see latest commit, which does the following:\r\n1. Adds assertions to `BoxConstraints` so that parameters are always non-null.\r\n2. `BoxConstraints` does not modify existing `maxWidth` and `maxHeight`.\r\n3. Removed the testing for `!= null`.\r\n\r\n",
        "createdAt" : "2019-12-20T13:37:26Z",
        "updatedAt" : "2020-01-15T02:18:57Z",
        "lastEditedBy" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "tags" : [
        ]
      },
      {
        "id" : "538431b9-56f7-4536-9dc6-a198e15389b6",
        "parentId" : "689c1091-f24b-45d0-b868-194afb8b4eba",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "[just returned from the holiday break]\r\n\r\nI agree that BoxConstraints shouldn't allow null parameters. Unforunately asserting that the parameters are non-null is a potentially breaking change and a bit subtle.\r\n\r\nIt would be safest to roll the BoxConstraints change through by itself (separate PR) assuming that it's not in fact a breaking change.\r\n\r\nIn this case, the constructor should assert `constraints == null || constraints.debugAssertIsValid()`. Likewise for the new visualDensity.effectiveConstraints() method. The MaterialButton class should include the same assert for its constraints parameter.\r\n\r\n\r\n",
        "createdAt" : "2020-01-02T20:35:00Z",
        "updatedAt" : "2020-01-15T02:18:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "d60b3785-4de9-4d0d-ba6f-be050da93010",
        "parentId" : "689c1091-f24b-45d0-b868-194afb8b4eba",
        "authorId" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "body" : "Added more documentation.",
        "createdAt" : "2020-01-14T17:15:43Z",
        "updatedAt" : "2020-01-15T02:18:57Z",
        "lastEditedBy" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "tags" : [
        ]
      },
      {
        "id" : "55774a62-b974-4f20-885d-891602116bd3",
        "parentId" : "689c1091-f24b-45d0-b868-194afb8b4eba",
        "authorId" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "body" : "Hi Hans,\r\n\r\nThere seems to be an issue with the assertion.\r\n\r\nI added the `constraints == null || constraints.debugAssertIsValid()` assertion to the constructor, but it is considered as \"invalid constant value\" because `BoxConstraints.debugAssertIsValid()` is not constant, but the constructor for `IconButton` is constant. Analysis is not passed.\r\n\r\nIs there a way to make it work? I thought of a few ways to work around it:\r\n1. Add the assertions to the relevant methods in `IconButton` and `RawMaterialButton` where the value of `constraints` is used. This does not verify the validity of constraints upon construction, but only each time when the constraints are used.\r\n2. Add the assertions to the constructor for `BoxConstraints`. But this could be a breaking change, requiring all `BoxConstraints` instances to be valid.\r\n\r\nUsing `constraints.minWidth` in constructor does not seem to work either — it looks like `constraints.minWidth` is not a constant.\r\n\r\nHow should we handle this situation?\r\n\r\nThank you very much.\r\n\r\nRegards,\r\nTianguang\r\n\r\n(Output of `flutter analyze --flutter-repo`)\r\n```\r\nAnalyzing 3 directories...                                              \r\n\r\n  error • Invalid constant value • lib/src/material/button.dart:73:38 • invalid_constant\r\n  error • Invalid constant value • lib/src/material/icon_button.dart:163:38 • invalid_constant\r\n\r\n2 issues found. (ran in 98.8s)\r\n```",
        "createdAt" : "2020-01-14T19:49:42Z",
        "updatedAt" : "2020-01-15T02:18:57Z",
        "lastEditedBy" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "tags" : [
        ]
      },
      {
        "id" : "24221c7b-8d4d-4565-af89-f803eae6c66f",
        "parentId" : "689c1091-f24b-45d0-b868-194afb8b4eba",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The asserts in the initializer lists for const constructors can only be applied to const expressions.  The debugIsValid() check in VisualDensity.effectiveConstraints() is sufficient, we don't need to check that the constraints are valid here.",
        "createdAt" : "2020-01-15T01:10:10Z",
        "updatedAt" : "2020-01-15T02:18:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "850067411abb68593a005dd13dab90f3d7cb178f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +308,312 @@  /// The visual density uses the [visualDensity] parameter if specified,\n  /// and `Theme.of(context).visualDensity` otherwise.\n  final BoxConstraints constraints;\n\n  @override"
  },
  {
    "id" : "71654724-1e04-4d5f-8e65-a8f05c5472cd",
    "prId" : 47457,
    "prUrl" : "https://github.com/flutter/flutter/pull/47457#pullrequestreview-342956737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c402e1f5-1ac7-4da9-8c83-9c80c03b76f2",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The default constraints ensure that the the button is accessible. Creating a button that's smaller than the minimum size is not recommended.\r\n",
        "createdAt" : "2020-01-15T01:07:31Z",
        "updatedAt" : "2020-01-15T02:18:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "09349d16-c24e-4585-8ffb-b751e0621ba4",
        "parentId" : "c402e1f5-1ac7-4da9-8c83-9c80c03b76f2",
        "authorId" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "body" : "Edited, with some slightly different wording.",
        "createdAt" : "2020-01-15T02:24:04Z",
        "updatedAt" : "2020-01-15T02:24:04Z",
        "lastEditedBy" : "b6f5d261-bce5-4ac7-8548-424662f5f751",
        "tags" : [
        ]
      }
    ],
    "commit" : "850067411abb68593a005dd13dab90f3d7cb178f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +299,303 @@  /// )\n  /// ```\n  /// where [kMinInteractiveDimension] is 48.0, and then with visual density\n  /// applied.\n  ///"
  }
]