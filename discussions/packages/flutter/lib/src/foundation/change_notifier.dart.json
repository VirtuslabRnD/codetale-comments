[
  {
    "id" : "d8922195-b1bc-4dd5-8272-0ef9984f7d90",
    "prId" : 7256,
    "prUrl" : "https://github.com/flutter/flutter/pull/7256#pullrequestreview-13226211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7efaec4b-8251-4274-81ed-9f923fd54f1e",
        "parentId" : null,
        "authorId" : "751461d1-65c8-4e1c-94ef-5199e88e8f39",
        "body" : "dartfmt",
        "createdAt" : "2016-12-15T20:35:10Z",
        "updatedAt" : "2016-12-15T21:36:32Z",
        "lastEditedBy" : "751461d1-65c8-4e1c-94ef-5199e88e8f39",
        "tags" : [
        ]
      },
      {
        "id" : "31c254e8-ee2a-4643-ac89-3ddcf306a68d",
        "parentId" : "7efaec4b-8251-4274-81ed-9f923fd54f1e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "dartfmt would reformat this in a way that violates our style guide.",
        "createdAt" : "2016-12-15T21:13:07Z",
        "updatedAt" : "2016-12-15T21:36:32Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "06dc982c-5133-46c5-b65b-8833d6fe0e09",
        "parentId" : "7efaec4b-8251-4274-81ed-9f923fd54f1e",
        "authorId" : "751461d1-65c8-4e1c-94ef-5199e88e8f39",
        "body" : "Well maybe you want to add an empty line at the eof then.",
        "createdAt" : "2016-12-15T21:31:15Z",
        "updatedAt" : "2016-12-15T21:36:32Z",
        "lastEditedBy" : "751461d1-65c8-4e1c-94ef-5199e88e8f39",
        "tags" : [
        ]
      },
      {
        "id" : "ceae3e94-1bfb-4de8-a72d-cc9febf3d9b1",
        "parentId" : "7efaec4b-8251-4274-81ed-9f923fd54f1e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "If you insist. :-)",
        "createdAt" : "2016-12-15T21:36:39Z",
        "updatedAt" : "2016-12-15T21:36:39Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "65b87e9056abe34fde04ff8f5dd5d1fea6202039",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +105,109 @@    super.dispose();\n  }\n}"
  },
  {
    "id" : "03c94700-e427-4e92-a4f0-d887e5061346",
    "prId" : 7566,
    "prUrl" : "https://github.com/flutter/flutter/pull/7566#pullrequestreview-17786851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b67f03c-ed79-4fab-acdf-243a2bc9c4b0",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "it's tempting to suggest we should do a copy-on-write during iteration here, since we now control this more closely.\r\n\r\nbut that's probably a premature optimisation.",
        "createdAt" : "2017-01-20T23:23:36Z",
        "updatedAt" : "2017-01-20T23:23:36Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "4ecc8e77-a01b-4d00-a85f-e3299cc119a6",
        "parentId" : "4b67f03c-ed79-4fab-acdf-243a2bc9c4b0",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, I'd prefer to wait to see this show up on a profile.",
        "createdAt" : "2017-01-20T23:38:47Z",
        "updatedAt" : "2017-01-20T23:38:47Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "a596fc520af8b16eb8ec34564398ebdd4d37d17a",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +102,106 @@    assert(_debugAssertNotDisposed);\n    if (_listeners != null) {\n      final List<VoidCallback> localListeners = new List<VoidCallback>.from(_listeners);\n      for (VoidCallback listener in localListeners) {\n        try {"
  },
  {
    "id" : "3f74fa91-74ae-4b66-82b3-93c6a0f41611",
    "prId" : 8463,
    "prUrl" : "https://github.com/flutter/flutter/pull/8463#pullrequestreview-24306769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ae850f5-816f-4689-82b6-566a77c99f94",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This will sadly go pathological for `ValueNotifier<double>` when you give it a `NaN`, but I guess there's no good solution to that.",
        "createdAt" : "2017-02-28T18:08:09Z",
        "updatedAt" : "2017-02-28T19:17:03Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2ae20f5fa4424be06e4e20c000892a6db0a9b24",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +174,178 @@  T _value;\n  set value(T newValue) {\n    if (_value == newValue)\n      return;\n    _value = newValue;"
  },
  {
    "id" : "66f3deca-ddb9-4b2c-b0bd-3e03aa11c8bd",
    "prId" : 9081,
    "prUrl" : "https://github.com/flutter/flutter/pull/9081#pullrequestreview-29899765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec0bed31-54cf-483c-8911-26125bac450e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ditto",
        "createdAt" : "2017-03-30T04:58:28Z",
        "updatedAt" : "2017-03-30T04:58:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "93e425d51f29a99b56225514c0aacc79766be6cc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@// found in the LICENSE file.\n\nimport 'package:flutter/foundation.dart';\n\nimport 'assertions.dart';"
  },
  {
    "id" : "60b79b9b-d879-4987-8c70-1ac507c95fc6",
    "prId" : 30983,
    "prUrl" : "https://github.com/flutter/flutter/pull/30983#pullrequestreview-228539391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5916d89-ee99-4046-9f39-c56dad58fb0f",
        "parentId" : null,
        "authorId" : "4c4f4d7a-cf21-4e96-a7ad-56aa3a3c1b4e",
        "body" : "What would be the ErrorSummary for this error, since it's not specified?",
        "createdAt" : "2019-04-18T19:36:30Z",
        "updatedAt" : "2019-05-01T15:56:38Z",
        "lastEditedBy" : "4c4f4d7a-cf21-4e96-a7ad-56aa3a3c1b4e",
        "tags" : [
        ]
      },
      {
        "id" : "80eba53a-f713-4bc8-aa94-3e4ab726e527",
        "parentId" : "e5916d89-ee99-4046-9f39-c56dad58fb0f",
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "The exception is the piece that is expected to contain an ErrorSummary.\r\nIf the exception is a FlutterError we have assertions if it doesn't have an ErrorSummary.\r\nWe could be smart and if the exception is just a String, treat that String as an ErrorSummary.",
        "createdAt" : "2019-04-18T22:53:30Z",
        "updatedAt" : "2019-05-01T15:56:38Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ba17fce6036bd4207970d1d5a528fe05af1b596",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +216,220 @@                this,\n                style: DiagnosticsTreeStyle.errorProperty,\n              );\n            },\n          ));"
  },
  {
    "id" : "e5d1383d-d84c-4360-96fe-fdfde8f13f43",
    "prId" : 62330,
    "prUrl" : "https://github.com/flutter/flutter/pull/62330#pullrequestreview-456118238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2b3fcb1-7de3-443f-83ac-fc42445607ac",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This probably deserves a comment explaining why we have this wrapper object instead of just using the `listener` directly.",
        "createdAt" : "2020-07-27T20:17:53Z",
        "updatedAt" : "2020-08-18T08:16:13Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "c8c72cc3-dbfa-42c9-bb18-21963ef8a8bc",
        "parentId" : "c2b3fcb1-7de3-443f-83ac-fc42445607ac",
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "It is required by LinkedList. We cannot do `LinkedList<VoidCallback>`.\r\n\r\nWe could change `LinkedList<_ListenerEntry>` by `DoubleLinkedQueue<VoidCallback>` maybe?",
        "createdAt" : "2020-07-27T20:37:38Z",
        "updatedAt" : "2020-08-18T08:16:13Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      },
      {
        "id" : "38b07dc8-eeb9-4a79-a02c-838b19aeee5f",
        "parentId" : "c2b3fcb1-7de3-443f-83ac-fc42445607ac",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Ah, I see. I didn't look at the interface for LinkedList. Never mind. ",
        "createdAt" : "2020-07-27T20:40:08Z",
        "updatedAt" : "2020-08-18T08:16:13Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4a153f3ef89dcd09d9abeb67129f45c13b1676",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +95,99 @@}\n\nclass _ListenerEntry extends LinkedListEntry<_ListenerEntry> {\n  _ListenerEntry(this.listener);\n  final VoidCallback listener;"
  },
  {
    "id" : "df736cf0-65b5-47e1-bf24-f82eb7b9a9d8",
    "prId" : 62330,
    "prUrl" : "https://github.com/flutter/flutter/pull/62330#pullrequestreview-456146759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1c60c03-59a4-4199-a188-1da54129719c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "What if `entry.listener()` calls `removeListener` for itself? Wouldn't that set `entry.next` to null and the iteration would end early? ",
        "createdAt" : "2020-07-27T20:27:31Z",
        "updatedAt" : "2020-08-18T08:16:13Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "cbd50551-7723-46dd-99a2-ef1791dfd7b5",
        "parentId" : "e1c60c03-59a4-4199-a188-1da54129719c",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "(If we don't have a test for this scenario, we should add one)",
        "createdAt" : "2020-07-27T20:28:14Z",
        "updatedAt" : "2020-08-18T08:16:13Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "88737111-8c6d-4df4-ba08-be339df0ea88",
        "parentId" : "e1c60c03-59a4-4199-a188-1da54129719c",
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "Good catch\r\n\r\nI should add tests for `addListener(() { notifier.notifyListeners() })` too",
        "createdAt" : "2020-07-27T21:25:29Z",
        "updatedAt" : "2020-08-18T08:16:13Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4a153f3ef89dcd09d9abeb67129f45c13b1676",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +224,228 @@      try {\n        if (entry.list != null)\n          entry.listener();\n      } catch (exception, stack) {\n        FlutterError.reportError(FlutterErrorDetails("
  },
  {
    "id" : "cebad108-1879-4870-ae59-5b8b434ee090",
    "prId" : 62330,
    "prUrl" : "https://github.com/flutter/flutter/pull/62330#pullrequestreview-481403894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da12358f-9e90-46ea-ab64-e7e56e0b1931",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Could we avoid this copy by getting the next entry before we invoke the current entry's listener?",
        "createdAt" : "2020-09-02T23:55:34Z",
        "updatedAt" : "2020-09-02T23:55:34Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "89e23047-fd95-4c20-a88c-5517e4312135",
        "parentId" : "da12358f-9e90-46ea-ab64-e7e56e0b1931",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "I wonder if any modification invalidates the list (theoretically). Iterable says modification during iteration is generally not allowed and may throw errors, although not necessarily for List. However can we do a lazy copy, i.e. only copy when the list is first modified during the dispatch?",
        "createdAt" : "2020-09-03T00:27:40Z",
        "updatedAt" : "2020-09-03T00:27:41Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "dbc3b8e3-c72e-435f-b58b-307358824f1a",
        "parentId" : "da12358f-9e90-46ea-ab64-e7e56e0b1931",
        "authorId" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "body" : "@dnfield That would break the behavior of \"listeners added during notifyListeners are not called immediately\"\r\n\r\nWe could keep track of the last listener before the iteration to work around that. But the complexity is that removeListener can be called at any given time. So the \"last listener\" may change over time\r\n",
        "createdAt" : "2020-09-03T00:33:56Z",
        "updatedAt" : "2020-09-03T00:36:51Z",
        "lastEditedBy" : "954364cb-4e9d-4f5d-94ac-4dabc333fa8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4a153f3ef89dcd09d9abeb67129f45c13b1676",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +221,225 @@    final List<_ListenerEntry> localListeners = List<_ListenerEntry>.from(_listeners!);\n\n    for (final _ListenerEntry entry in localListeners) {\n      try {\n        if (entry.list != null)"
  },
  {
    "id" : "8e944f01-41e5-4db3-87e6-8d902217acc8",
    "prId" : 67359,
    "prUrl" : "https://github.com/flutter/flutter/pull/67359#pullrequestreview-506935864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9782a96a-ce85-47e6-b58f-815ca3659e7a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Could be a macro to share it between here and removeListener.",
        "createdAt" : "2020-10-12T17:31:27Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "4cf24b78-563a-40ef-ba10-1a81dba3070f",
        "parentId" : "9782a96a-ce85-47e6-b58f-815ca3659e7a",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done",
        "createdAt" : "2020-10-12T21:42:55Z",
        "updatedAt" : "2020-10-16T18:12:05Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a7b56760946cea0c1c4d752a1b3d94e93f9bedb",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +165,169 @@  /// This surprising behavior can be unexpectedly observed when registering a\n  /// listener on two separate objects which are both forwarding all\n  /// registrations to a common upstream object.\n  /// {@endtemplate}\n  ///"
  },
  {
    "id" : "4b14b6b7-4250-4337-b226-08cbed7e2b52",
    "prId" : 71947,
    "prUrl" : "https://github.com/flutter/flutter/pull/71947#pullrequestreview-563095454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3d3c584-aa0d-4065-8d88-80a19ef37855",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Since the length is specified as 0, what does \"filled\" get us here over just `const <VoidCallback?>[]`?",
        "createdAt" : "2020-12-15T20:13:15Z",
        "updatedAt" : "2021-04-08T19:33:47Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "2c35ab94-b40e-4cec-a2dd-42ef99b0cff4",
        "parentId" : "d3d3c584-aa0d-4065-8d88-80a19ef37855",
        "authorId" : "38524d0f-c27f-48db-bbae-039f29ad3218",
        "body" : "@mraleph would explain this better than me, but in my understanding `const <VoidCallback?>[]` would create a growable array and inlining wouldn't work (because we use fixed-length array everywhere else). So it would create a drop in the performances.",
        "createdAt" : "2020-12-17T14:50:43Z",
        "updatedAt" : "2021-04-08T19:33:47Z",
        "lastEditedBy" : "38524d0f-c27f-48db-bbae-039f29ad3218",
        "tags" : [
        ]
      },
      {
        "id" : "bbfd115b-e711-4df2-bf39-d0a892555f06",
        "parentId" : "d3d3c584-aa0d-4065-8d88-80a19ef37855",
        "authorId" : "45727d35-317d-432d-b0c6-83fc042c0c8a",
        "body" : "To be more precise: `const []` will be an instance of `_ImmutableList` which is yet another private class implementing `List` (in addition to a fixed-length `_List` and `_GrowableList`). If one wants operations like `_listeners[]` and `_listeners.length` to be inlined then you need to ensure that AOT compiler can infer _concrete_ type for this field - meaning that should not mix instances of different type in it. \r\n\r\nYou can actually optimize this a bit by doing:\r\n\r\n```dart\r\nstatic final List<VoidCallback?> _emptyListeners = List<VoidCallback?>.filled(0, null);\r\nList<VoidCallback?> _listeners = _emptyListeners;\r\n```\r\n\r\nthen you avoid allocation of an empty list for each new `ChangeNotifier`\r\n",
        "createdAt" : "2020-12-18T09:53:50Z",
        "updatedAt" : "2021-04-08T19:33:47Z",
        "lastEditedBy" : "45727d35-317d-432d-b0c6-83fc042c0c8a",
        "tags" : [
        ]
      },
      {
        "id" : "f63e215b-a7cb-4321-8f09-4e77fcfa0082",
        "parentId" : "d3d3c584-aa0d-4065-8d88-80a19ef37855",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Interesting, thanks for the explanation. May be worthwhile to leave a comment in the code.",
        "createdAt" : "2021-01-06T23:02:58Z",
        "updatedAt" : "2021-04-08T19:33:47Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fd5281d6763c87f47ad3c046f10bc90b7c43020",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +104,108 @@class ChangeNotifier implements Listenable {\n  int _count = 0;\n  List<VoidCallback?> _listeners = List<VoidCallback?>.filled(0, null);\n  int _notificationCallStackDepth = 0;\n  int _reentrantlyRemovedListeners = 0;"
  }
]