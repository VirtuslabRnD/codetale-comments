[
  {
    "id" : "53057f16-eda4-4dcd-8d1b-338d5fae63e6",
    "prId" : 39589,
    "prUrl" : "https://github.com/flutter/flutter/pull/39589#pullrequestreview-283237358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da3b332e-6043-42ec-bdbc-004418bb222d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can we remove the clear call from the \"contains\" code below then?",
        "createdAt" : "2019-09-03T19:43:12Z",
        "updatedAt" : "2019-09-03T23:44:37Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d7ff1b46-8a01-4e81-b63b-b45724023ed7",
        "parentId" : "da3b332e-6043-42ec-bdbc-004418bb222d",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Hmm, I suppose so.  It's possible to reach the `addAll` there without the list being cleared then, but I guess because the set won't add duplicates that it's fine.  OK.",
        "createdAt" : "2019-09-03T20:25:47Z",
        "updatedAt" : "2019-09-03T23:44:40Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "96c417043bef9f9bc4dbec63dcb66f0dcef4bc4b",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +45,49 @@  bool remove(T item) {\n    _isDirty = true;\n    _set?.clear(); // Clear the set so that we don't leak items.\n    return _list.remove(item);\n  }"
  },
  {
    "id" : "628d9a84-b435-4d3f-a1f4-d17a40527cc1",
    "prId" : 61188,
    "prUrl" : "https://github.com/flutter/flutter/pull/61188#pullrequestreview-448477384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "676baabc-7e5e-4575-9705-3754788ecd5d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why `late`?",
        "createdAt" : "2020-07-13T21:38:36Z",
        "updatedAt" : "2020-07-15T13:24:25Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "6a230f70-8dd4-46e6-acf1-d39efc18ad6e",
        "parentId" : "676baabc-7e5e-4575-9705-3754788ecd5d",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "IIRC this will make the field lazy initialized.",
        "createdAt" : "2020-07-14T20:33:21Z",
        "updatedAt" : "2020-07-15T13:24:25Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "c307d5c8-eaf9-4651-9f9a-001fa9c08636",
        "parentId" : "676baabc-7e5e-4575-9705-3754788ecd5d",
        "authorId" : "1e73ec3f-3dcd-4cbc-b476-0d1c629cd277",
        "body" : "It won't do anything in this case (other than maybe make it slower to access). It allows you to (yourself) lazily initialize it but leave it as a non-nullable type.",
        "createdAt" : "2020-07-14T20:48:03Z",
        "updatedAt" : "2020-07-15T13:24:25Z",
        "lastEditedBy" : "1e73ec3f-3dcd-4cbc-b476-0d1c629cd277",
        "tags" : [
        ]
      },
      {
        "id" : "fd9d7a50-16cd-41b8-9fab-a53c4e0da72d",
        "parentId" : "676baabc-7e5e-4575-9705-3754788ecd5d",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Sorry if this wasn't clear, but my question was meant as: \"Why are we declaring this field as late? It seems unnecessary here.\"",
        "createdAt" : "2020-07-14T20:50:13Z",
        "updatedAt" : "2020-07-15T13:24:25Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "c6ee949e-9c60-4314-b0c9-7a721d8ecb95",
        "parentId" : "676baabc-7e5e-4575-9705-3754788ecd5d",
        "authorId" : "1e73ec3f-3dcd-4cbc-b476-0d1c629cd277",
        "body" : "It was lazy before - I think there was a misunderstanding around what `late` means. If assigning immediately it has no meaning @stereotype441 should we have a lint for this?\r\n\r\nTo restore the lazy behavior that existed before this would have to be a nullable field type, and you would have to restore the old logic.",
        "createdAt" : "2020-07-14T20:55:04Z",
        "updatedAt" : "2020-07-15T13:24:25Z",
        "lastEditedBy" : "1e73ec3f-3dcd-4cbc-b476-0d1c629cd277",
        "tags" : [
        ]
      },
      {
        "id" : "96b4be93-a229-4453-a991-7f08431844e9",
        "parentId" : "676baabc-7e5e-4575-9705-3754788ecd5d",
        "authorId" : "6fe75f2e-2c3d-4d6a-800e-03a595a5d5aa",
        "body" : "@jakemac53 that's not correct. late with an initializer means lazy.",
        "createdAt" : "2020-07-14T20:58:55Z",
        "updatedAt" : "2020-07-15T13:24:25Z",
        "lastEditedBy" : "6fe75f2e-2c3d-4d6a-800e-03a595a5d5aa",
        "tags" : [
        ]
      },
      {
        "id" : "c3ec73c3-f404-49b1-972a-d0d6d810527b",
        "parentId" : "676baabc-7e5e-4575-9705-3754788ecd5d",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Now I am confused. What is the difference between those two lines?\r\n\r\n```dart\r\nlate final int foo = 1;\r\nfinal int bar = 1;\r\n```",
        "createdAt" : "2020-07-14T21:01:43Z",
        "updatedAt" : "2020-07-15T13:24:25Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "7f943988-81d8-4e84-972c-430a49f841c3",
        "parentId" : "676baabc-7e5e-4575-9705-3754788ecd5d",
        "authorId" : "6fe75f2e-2c3d-4d6a-800e-03a595a5d5aa",
        "body" : "Nothing, because you can't observe laziness with a value.  But:\r\n\r\n```dart\r\nclass A {\r\n  late final int foo = (() {print(\"hello\"); return 1;})();\r\n  final int bar = (() {print(\"world\"); return 1;})();\r\n  A();\r\n}\r\n                            \r\n                            \r\nvoid main() {\r\n  var a = A();\r\n  print(\"says\");\r\n  a.foo;\r\n}\r\n```\r\n\r\noutputs\r\n```\r\nworld\r\nsays\r\nhello\r\n```\r\n\r\nbecause a `late` variable with an initializer only evaluates its initializer on first use.\r\n\r\ncc @munificent this is something we're going to have to explain carefully.",
        "createdAt" : "2020-07-14T21:14:00Z",
        "updatedAt" : "2020-07-15T13:24:25Z",
        "lastEditedBy" : "6fe75f2e-2c3d-4d6a-800e-03a595a5d5aa",
        "tags" : [
        ]
      },
      {
        "id" : "df32cf67-be44-40e2-b944-c94024702285",
        "parentId" : "676baabc-7e5e-4575-9705-3754788ecd5d",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Thanks for the explanation!",
        "createdAt" : "2020-07-14T21:24:53Z",
        "updatedAt" : "2020-07-15T13:24:25Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ad5ea0797531d3b8b3bc97bc1837ee9a80a95a1",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +28,32 @@  final List<T> _list = <T>[];\n  bool _isDirty = false;\n  late final HashSet<T> _set = HashSet<T>();\n\n  /// Adds an item to the end of this list."
  }
]