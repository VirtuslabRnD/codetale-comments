[
  {
    "id" : "d0696b35-b1f0-4ec2-b901-cd7658bf9325",
    "prId" : 12277,
    "prUrl" : "https://github.com/flutter/flutter/pull/12277#pullrequestreview-74163957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "344c9d6f-6568-475a-834f-41a7282668b6",
        "parentId" : null,
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "Prettier indentation with trailing comma here?",
        "createdAt" : "2017-11-03T17:26:54Z",
        "updatedAt" : "2017-11-03T17:33:30Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      },
      {
        "id" : "b72569b5-2194-4fb1-8bb4-425b4a153735",
        "parentId" : "344c9d6f-6568-475a-834f-41a7282668b6",
        "authorId" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "body" : "This was intentional to make the parens symmetric with the opening line.",
        "createdAt" : "2017-11-03T17:53:03Z",
        "updatedAt" : "2017-11-03T17:53:03Z",
        "lastEditedBy" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "44f13442ce8740fed05945e480b08ef4e1b73488",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +257,261 @@            'composingExtent': -1,\n          },\n    ));\n  });\n"
  },
  {
    "id" : "f3b00c68-5701-4381-a2d8-a3f8bdd22fdd",
    "prId" : 12804,
    "prUrl" : "https://github.com/flutter/flutter/pull/12804#pullrequestreview-73651837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98cc7bcc-b8ff-4407-8bd5-d66baf708a8f",
        "parentId" : null,
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "Should we test the non focused case as well?",
        "createdAt" : "2017-11-01T23:12:02Z",
        "updatedAt" : "2017-11-01T23:38:03Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      },
      {
        "id" : "75de84cc-5a33-41fe-9e0a-94414b174da5",
        "parentId" : "98cc7bcc-b8ff-4407-8bd5-d66baf708a8f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Isn't that covered by line 278?",
        "createdAt" : "2017-11-01T23:38:46Z",
        "updatedAt" : "2017-11-01T23:38:46Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d9780c41-d838-459f-8e5b-27c492e29cad",
        "parentId" : "98cc7bcc-b8ff-4407-8bd5-d66baf708a8f",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "oops",
        "createdAt" : "2017-11-01T23:39:39Z",
        "updatedAt" : "2017-11-01T23:39:39Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "21da481a31ca8f1b64599c89a4c58d477b063f7f",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +284,288 @@    expect(semantics, includesNodeWith(flags: <SemanticsFlags>[SemanticsFlags.isTextField, SemanticsFlags.isFocused]));\n\n  });\n}"
  },
  {
    "id" : "5b9eacc6-fc03-4535-a394-5850fab1f706",
    "prId" : 18888,
    "prUrl" : "https://github.com/flutter/flutter/pull/18888#pullrequestreview-134045115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cb70e3d-232b-4315-a5dc-e135c9ee7f0f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: This file is hard to review because it contains so many unrelated format changes.",
        "createdAt" : "2018-07-03T15:14:25Z",
        "updatedAt" : "2018-07-03T17:53:35Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d4202716c56aeb0e9dee369eec4a41e3b26542d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +58,62 @@    await tester.idle();\n    expect(tester.testTextInput.editingState['text'], equals('test'));\n    expect(tester.testTextInput.setClientArgs['inputAction'],\n        equals(serializedActionName));\n  }"
  },
  {
    "id" : "742fc54a-674b-415d-b122-db84d947cd8e",
    "prId" : 24476,
    "prUrl" : "https://github.com/flutter/flutter/pull/24476#pullrequestreview-203799483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "749bb451-337a-4b46-a9a3-962bd8e16ced",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "There should probably also be tests for just PaintVisibility.",
        "createdAt" : "2019-01-23T20:27:03Z",
        "updatedAt" : "2019-03-12T13:53:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "67bb0c3c-75b3-4353-9cb3-953f06fd8fba",
        "parentId" : "749bb451-337a-4b46-a9a3-962bd8e16ced",
        "authorId" : "1bcfb382-657a-4d7d-879b-85c84363148f",
        "body" : "I've removed `PaintVisibility`.",
        "createdAt" : "2019-02-14T15:19:36Z",
        "updatedAt" : "2019-03-12T13:53:31Z",
        "lastEditedBy" : "1bcfb382-657a-4d7d-879b-85c84363148f",
        "tags" : [
        ]
      }
    ],
    "commit" : "21077df01a4bbbb19ba4a61b41ab18ce16a334fe",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1998,2002 @@    expect(renderEditable.text.style.decoration, isNull);\n  });\n\n  testWidgets('text selection handle visibility', (WidgetTester tester) async {\n    final GlobalKey<EditableTextState> editableTextKey ="
  },
  {
    "id" : "04f06ada-ed66-49dc-92a8-f3e4e98f40ca",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-179174666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98794d27-2f62-438a-b9dc-163c3ba587b0",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "use mock_canvas to actually test that a floating caret rrect is being drawn. ",
        "createdAt" : "2018-11-28T08:43:22Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 403,
    "diffHunk" : "@@ -1,1 +1939,1943 @@    expect(controller.selection.baseOffset, 11);\n  });\n}\n\nclass MockTextSelectionControls extends Mock implements TextSelectionControls {}"
  },
  {
    "id" : "e782ab4c-0292-43df-8c73-ec557ec0bcb0",
    "prId" : 27534,
    "prUrl" : "https://github.com/flutter/flutter/pull/27534#pullrequestreview-200391411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6069fc4-f5a7-4bea-93a4-8003ad090d2e",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This can go on the previous line.",
        "createdAt" : "2019-02-05T23:46:37Z",
        "updatedAt" : "2019-02-06T21:31:50Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "22990b33-bda9-4810-a9ab-ab0caff71edd",
        "parentId" : "b6069fc4-f5a7-4bea-93a4-8003ad090d2e",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I don't feel strongly about it, leaning towards keeping the 80 line width. ",
        "createdAt" : "2019-02-06T02:15:36Z",
        "updatedAt" : "2019-02-06T21:31:50Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a68a5c55a473ffac26e80b13c51722a1fb62e65",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +495,499 @@\n    final EditableTextState state =\n        tester.state<EditableTextState>(find.byType(EditableText));\n\n    expect(state.showToolbar(), false);"
  },
  {
    "id" : "09859ce4-8075-4981-8c67-aa9b6cb91f8b",
    "prId" : 27534,
    "prUrl" : "https://github.com/flutter/flutter/pull/27534#pullrequestreview-200391556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03bd8e2d-b46f-4957-8669-28fb88d27c97",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Shouldn't this be pumpAndSettle()? What if the toolbar animates into view?",
        "createdAt" : "2019-02-05T23:47:25Z",
        "updatedAt" : "2019-02-06T21:31:50Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "0e9137a7-036c-446c-a219-666dc294eab9",
        "parentId" : "03bd8e2d-b46f-4957-8669-28fb88d27c97",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Visual behavior changes should be test-breaking changes. ",
        "createdAt" : "2019-02-06T02:16:23Z",
        "updatedAt" : "2019-02-06T21:31:50Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a68a5c55a473ffac26e80b13c51722a1fb62e65",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +498,502 @@\n    expect(state.showToolbar(), false);\n    await tester.pump();\n    expect(find.text('PASTE'), findsNothing);\n"
  },
  {
    "id" : "0bcfbf7e-ed52-4311-b04e-f2f2ea9bee01",
    "prId" : 27534,
    "prUrl" : "https://github.com/flutter/flutter/pull/27534#pullrequestreview-200831269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0306e825-17c6-420b-b453-ee271b16d55a",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If this parameter needed? Since we're now being honest with the `cause` parameter, it seems like there should a special value (or just cause == null) that indicates a programmatic change.",
        "createdAt" : "2019-02-05T23:49:22Z",
        "updatedAt" : "2019-02-06T21:31:50Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "e4d61e36-0487-40dd-857e-b557533dbea5",
        "parentId" : "0306e825-17c6-420b-b453-ee271b16d55a",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I'm not deprecating SelectionChangedCause (my branch name is a misnomer I guess :D). We're still trying to be honest™️ with the real cause to supply it to users of the existing APIs via the various onSelectionChanged and whatnot. We're just not using it internally anymore, but we're not breaking external users. \r\n\r\nIn this test, I'm intending for it to mean a single tap. \r\n\r\nI'm not making the select*'s cause optional because they still aren't (to keep supporting onSelectionChanged users who might care). \r\n\r\nSo far, there are no 'fake' selection causes yet to have a new enum value.",
        "createdAt" : "2019-02-06T02:19:22Z",
        "updatedAt" : "2019-02-06T21:31:50Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "6af9f276-0687-4c5f-986a-0a372066a16c",
        "parentId" : "0306e825-17c6-420b-b453-ee271b16d55a",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "> So far, there are no 'fake' selection causes yet to have a new enum value.\r\n\r\nWhat about programmatic changes to the selection that are not triggered by an input event?",
        "createdAt" : "2019-02-06T21:12:26Z",
        "updatedAt" : "2019-02-06T21:31:50Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "67ed8277-35b9-4def-ad4f-44df12a7f1f4",
        "parentId" : "0306e825-17c6-420b-b453-ee271b16d55a",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Programmatic changes actually circumvents the whole thing it appears. i.e. nothing is triggered through the RenderEditable directly, no `on*Changed` is bubbled back through EditableText, there are no SelectionChangedCause involved, no toolbars are ever triggered and no` on*Changed` is called. \r\n\r\nThis is in the various `@template flutter.widgets.editableText.onChanged` docs. `This callback does run not when the TextField's text is changed, via the TextField's [controller].`\r\n\r\nAdding some additional docs to RenderEditable.select* to indicate that it's used for translating UI manipulations to logical selections and if you own the TextEditingController, it's a lot easier to go manipulate that directly.",
        "createdAt" : "2019-02-06T21:22:39Z",
        "updatedAt" : "2019-02-06T21:44:30Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "fcd9db0b-123f-4af4-8577-e399bea263cd",
        "parentId" : "0306e825-17c6-420b-b453-ee271b16d55a",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Thanks for clarifying that. So the rough summary would be: the RenderEditable selection changing methods are only called in response to user input.  That makes sense.",
        "createdAt" : "2019-02-06T22:05:55Z",
        "updatedAt" : "2019-02-06T22:06:03Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "7050e5d9-c0c3-4896-a13d-386853046c2f",
        "parentId" : "0306e825-17c6-420b-b453-ee271b16d55a",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "It's a good question though. I only thought about it after you asked. But the new docs should address the apparent redundancy now.",
        "createdAt" : "2019-02-06T22:09:03Z",
        "updatedAt" : "2019-02-06T22:09:21Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a68a5c55a473ffac26e80b13c51722a1fb62e65",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +510,514 @@    state.renderEditable.selectWordsInRange(\n      from: const Offset(0, 0),\n      cause: SelectionChangedCause.tap,\n    );\n    await tester.pump();"
  },
  {
    "id" : "72e8a0bd-dccb-44ed-a80d-6b1d4e2bc426",
    "prId" : 27534,
    "prUrl" : "https://github.com/flutter/flutter/pull/27534#pullrequestreview-200392039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc98d3d9-df1d-42b1-a42f-3d018ed92206",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Maybe pump a frame first, so that 'blah' actually ends up in the textfield?",
        "createdAt" : "2019-02-05T23:56:45Z",
        "updatedAt" : "2019-02-06T21:31:50Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "7ae1b095-5aad-4db1-be1d-fc78a2cf1209",
        "parentId" : "dc98d3d9-df1d-42b1-a42f-3d018ed92206",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ah, good point, done.",
        "createdAt" : "2019-02-06T02:19:27Z",
        "updatedAt" : "2019-02-06T21:31:50Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a68a5c55a473ffac26e80b13c51722a1fb62e65",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +503,507 @@    controller.text = 'blah';\n    await tester.pump();\n    expect(state.showToolbar(), false);\n    await tester.pump();\n    expect(find.text('PASTE'), findsNothing);"
  },
  {
    "id" : "1c3a47dc-919a-4e8b-8108-1fa3d8edea3c",
    "prId" : 31332,
    "prUrl" : "https://github.com/flutter/flutter/pull/31332#pullrequestreview-229657461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b63cb53-bb9a-4842-bdb2-fedfc46bc208",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Include a comment here:\r\n```\r\n// Regression test for https://github.com/flutter/flutter/issues/31287\r\n```",
        "createdAt" : "2019-04-23T16:35:49Z",
        "updatedAt" : "2019-04-25T18:24:59Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "405446e9682ad5046b4a3bc6c1ef3183c952313b",
    "line" : 442,
    "diffHunk" : "@@ -1,1 +2103,2107 @@  // Regression test for https://github.com/flutter/flutter/issues/31287\n  testWidgets('iOS text selection handle visibility', (WidgetTester tester) async {\n    debugDefaultTargetPlatformOverride = TargetPlatform.iOS;\n\n    // Text with two separate words to select."
  },
  {
    "id" : "727a9534-28eb-4b54-bb7a-7eefe61bb1ee",
    "prId" : 31332,
    "prUrl" : "https://github.com/flutter/flutter/pull/31332#pullrequestreview-229657461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ff8660f-570f-4b2a-bc61-323b53a52925",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This might be slightly easier to read if the parameter pairs were reversed:\r\n```\r\nverifyVisibility(leftViewportEdge, true, rightViewportEdge, true)",
        "createdAt" : "2019-04-23T16:49:47Z",
        "updatedAt" : "2019-04-25T18:24:59Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "405446e9682ad5046b4a3bc6c1ef3183c952313b",
    "line" : 476,
    "diffHunk" : "@@ -1,1 +2137,2141 @@    bool expectedRightVisibleBefore = false;\n\n    Future<void> verifyVisibility(\n      HandlePositionInViewport leftPosition,\n      bool expectedLeftVisible,"
  },
  {
    "id" : "e979bbc2-db44-4b92-8993-800c9d9db0d9",
    "prId" : 31332,
    "prUrl" : "https://github.com/flutter/flutter/pull/31332#pullrequestreview-229814362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6411f286-40f1-49b1-a8ca-5ab48f9d7e3e",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Add a comment for what the spaces are for",
        "createdAt" : "2019-04-23T21:59:19Z",
        "updatedAt" : "2019-04-25T18:24:59Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "405446e9682ad5046b4a3bc6c1ef3183c952313b",
    "line" : 445,
    "diffHunk" : "@@ -1,1 +2106,2110 @@\n    // Text with two separate words to select.\n    const String testText = 'XXXXX          XXXXX';\n    final TextEditingController controller = TextEditingController(text: testText);\n"
  },
  {
    "id" : "5654b23d-6ae1-44fe-b6d4-cd1c91654e32",
    "prId" : 36297,
    "prUrl" : "https://github.com/flutter/flutter/pull/36297#pullrequestreview-262654260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f077305-dc73-4095-8290-0cf38a317a96",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "How are flags matched? Does this make sure that `isMultiline` flag is off? It is a little surprising that only one flag is on. For example, I'd expect `isEnabled` to also be on.",
        "createdAt" : "2019-07-16T19:59:37Z",
        "updatedAt" : "2019-07-17T22:18:36Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "7744abda-e9a5-464a-8ba5-81fcaf48e543",
        "parentId" : "7f077305-dc73-4095-8290-0cf38a317a96",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "`RenderEditable` doesn't set the `isEnabled` flag.",
        "createdAt" : "2019-07-16T20:11:05Z",
        "updatedAt" : "2019-07-17T22:18:36Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fb79d9a2959da1f4447cb86bbdde2613c51fc0c",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +937,941 @@    expect(\n      semantics,\n      includesNodeWith(flags: <SemanticsFlag>[SemanticsFlag.isTextField]),\n    );\n"
  },
  {
    "id" : "9743044d-66da-4730-b490-26bfe4fd2a23",
    "prId" : 37042,
    "prUrl" : "https://github.com/flutter/flutter/pull/37042#pullrequestreview-268392733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c04a6b9c-a60a-4999-9615-6a789ef7d96b",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "`controller.dispose()` first?",
        "createdAt" : "2019-07-29T16:27:28Z",
        "updatedAt" : "2019-07-30T14:05:24Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "4fce9e45-cf0d-4226-ac07-1b5ae9a43b9b",
        "parentId" : "c04a6b9c-a60a-4999-9615-6a789ef7d96b",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Good catch.",
        "createdAt" : "2019-07-30T13:32:12Z",
        "updatedAt" : "2019-07-30T14:05:24Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd31aa02d304b2b134e6774f7b9367de8d7179ba",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +35,39 @@  tearDown(() {\n    controller.dispose();\n    controller = null;\n  });\n"
  },
  {
    "id" : "87d063d6-46b4-4e30-a1e3-8c118d98977a",
    "prId" : 41108,
    "prUrl" : "https://github.com/flutter/flutter/pull/41108#pullrequestreview-292700090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46282ce6-067e-439a-85a7-89efc4b8ee06",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "@nturgut  sorry I didn't review this earlier.\r\n\r\n`log.firstWhere(...)` always returns the first platform message that was sent when the first input field was focused. In order to make the test really work, we should clear `log` before switching to another input field.",
        "createdAt" : "2019-09-24T20:50:47Z",
        "updatedAt" : "2019-09-24T20:50:47Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f5997fcfc244d1ffa8fa23dac0a53c5c628ed90",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +2275,2279 @@    // Move to the next editable text.\n    await tester.showKeyboard(find.byKey(ValueKey<String>(controller2.text)));\n    final MethodCall methodCall2 = log.firstWhere((MethodCall m) => m.method == 'TextInput.setEditableSizeAndTransform');\n    expect(\n      methodCall2,"
  },
  {
    "id" : "0624a08b-93fe-4755-82cb-67444765a84c",
    "prId" : 42879,
    "prUrl" : "https://github.com/flutter/flutter/pull/42879#pullrequestreview-303451044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6db22276-1dee-4855-a804-3d6597b44440",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I was wondering if we had a good way to test hardware keyboard keys 👍 ",
        "createdAt" : "2019-10-17T15:09:10Z",
        "updatedAt" : "2019-10-17T21:27:56Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "20de4112-f471-4405-ae1d-8464cfaf3299",
        "parentId" : "6db22276-1dee-4855-a804-3d6597b44440",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes!  I added that stuff last month because it was missing. It's turning out to be very useful.",
        "createdAt" : "2019-10-17T18:36:54Z",
        "updatedAt" : "2019-10-17T21:27:57Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "38c148549c5256cee072092354184543ac03e6a6",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +2818,2822 @@    await tester.pump(); // Wait for autofocus to take effect.\n\n    Future<void> sendKeys(List<LogicalKeyboardKey> keys, {bool shift = false, bool control = false}) async {\n      if (shift) {\n        await tester.sendKeyDownEvent(LogicalKeyboardKey.shiftLeft);"
  },
  {
    "id" : "01c07854-d954-4e03-9f1d-34e300ebc995",
    "prId" : 43466,
    "prUrl" : "https://github.com/flutter/flutter/pull/43466#pullrequestreview-307505935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bdec6db-9d3d-4f9d-835f-2f1027ffd045",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Another interesting test would be to use the text field again after the connection is closed (it should create a new connection and work fine).",
        "createdAt" : "2019-10-25T03:51:59Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "1957d200-603e-483a-8db7-ac886e624e72",
        "parentId" : "7bdec6db-9d3d-4f9d-835f-2f1027ffd045",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "+1",
        "createdAt" : "2019-10-25T16:27:57Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d0f21939-6b95-448b-b4ed-77601bc4a69e",
        "parentId" : "7bdec6db-9d3d-4f9d-835f-2f1027ffd045",
        "authorId" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "body" : "Sure, it sounds very useful I'll add it.",
        "createdAt" : "2019-10-25T17:04:08Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "tags" : [
        ]
      },
      {
        "id" : "fc7bcf21-765e-4475-ad79-1873ecf1bd07",
        "parentId" : "7bdec6db-9d3d-4f9d-835f-2f1027ffd045",
        "authorId" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "body" : "Done.",
        "createdAt" : "2019-10-26T02:14:33Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf166460da28e2fd0e3125963a5c4a66df45478e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +555,559 @@  });\n\n  testWidgets('connection is closed when TextInputClient.onConnectionClosed message received', (WidgetTester tester) async {\n    await tester.pumpWidget(\n      MediaQuery("
  },
  {
    "id" : "95665180-d7b7-40a1-aae9-d51b64891c18",
    "prId" : 43466,
    "prUrl" : "https://github.com/flutter/flutter/pull/43466#pullrequestreview-307335010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c07da2a-75f9-40b1-a4f6-4fdd68f6d3d6",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why this?",
        "createdAt" : "2019-10-25T16:31:06Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "3bab3eec-8e88-4ff3-acc8-fd89155f36ac",
        "parentId" : "4c07da2a-75f9-40b1-a4f6-4fdd68f6d3d6",
        "authorId" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "body" : "I want to it to be as close to the previous test as possible. I usually find it easier to troubleshoot when there is an error, if some other tests also have the same setup.\r\n\r\nI can change it to another widget if you want to :) \r\n\r\nOne thing I'll add is also: \"switching between two editable text fields after connection closed\". I believe it might be good to test that case.",
        "createdAt" : "2019-10-25T17:03:34Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf166460da28e2fd0e3125963a5c4a66df45478e",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +612,616 @@              controller: controller,\n              focusNode: focusNode,\n              maxLines: 1, // Sets text keyboard implicitly.\n              style: textStyle,\n              cursorColor: cursorColor,"
  },
  {
    "id" : "69445b26-157d-4f91-b111-e6885731fa32",
    "prId" : 43466,
    "prUrl" : "https://github.com/flutter/flutter/pull/43466#pullrequestreview-310531784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "357b3ce0-07bf-4baf-be42-6aabcfaf7819",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "It might be useful to also check that the framework didn't respond with any platform messages.",
        "createdAt" : "2019-10-30T22:32:11Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "824ad6a6-de33-4b76-a046-d4dfce55e371",
        "parentId" : "357b3ce0-07bf-4baf-be42-6aabcfaf7819",
        "authorId" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "body" : "The expect for visibility does that since the code of test_text_input is written that way.\r\n\r\nhttps://github.com/flutter/flutter/blob/6bf1ad4bd5714f73c1c808dc821add7199260d0c/packages/flutter_test/lib/src/test_text_input.dart#L86\r\n\r\nas long as test_text_input.isVisible true it means that clearClient or hide platform messages are not sent.\r\n",
        "createdAt" : "2019-10-31T17:52:25Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "tags" : [
        ]
      },
      {
        "id" : "7afb2924-82e0-4119-86c8-057b600dcb5c",
        "parentId" : "357b3ce0-07bf-4baf-be42-6aabcfaf7819",
        "authorId" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "body" : "I added the check.",
        "createdAt" : "2019-11-01T15:42:13Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf166460da28e2fd0e3125963a5c4a66df45478e",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +592,596 @@\n    // Widget does not have focus anymore.\n    expect(state.wantKeepAlive, false);\n    // No method calls are sent from the framework.\n    // This makes sure hide/clearClient methods are not called after connection"
  },
  {
    "id" : "e174cd5c-03e5-48c1-bf22-5087eb987a3a",
    "prId" : 43466,
    "prUrl" : "https://github.com/flutter/flutter/pull/43466#pullrequestreview-310075668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d131294-4055-4a80-bc4f-d3b19b990d73",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Hmmm I wonder if there's a better way to check the focus state of a widget. @gspencergoog ?",
        "createdAt" : "2019-10-30T22:33:33Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "ad5bf2dd-ab2c-492a-8e8b-d8ed092a41a6",
        "parentId" : "1d131294-4055-4a80-bc4f-d3b19b990d73",
        "authorId" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "body" : "I wasn't able to find one in the test doubles :)  It will be great if there is one!\r\n\r\nI can also do write the validation as if it is more readbale\r\n`expect(state.widget.focusNode.hasFocus, true)\r\n`\r\n",
        "createdAt" : "2019-10-31T17:56:36Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf166460da28e2fd0e3125963a5c4a66df45478e",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +648,652 @@    expect(tester.testTextInput.editingState['text'], equals('test2'));\n    // Widget regained the focus.\n    expect(state.wantKeepAlive, true);\n  });\n"
  },
  {
    "id" : "53089185-0a8a-43c6-bc9e-9905020748da",
    "prId" : 43466,
    "prUrl" : "https://github.com/flutter/flutter/pull/43466#pullrequestreview-310533896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12f616be-ad2e-4169-bbf3-66d1e54d4b8b",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Are there any platform messages we could check here?",
        "createdAt" : "2019-10-30T22:36:32Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "b794485a-7a96-471a-8d7e-1c8cef817d58",
        "parentId" : "12f616be-ad2e-4169-bbf3-66d1e54d4b8b",
        "authorId" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "body" : "done.",
        "createdAt" : "2019-11-01T15:45:31Z",
        "updatedAt" : "2019-11-01T23:28:05Z",
        "lastEditedBy" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf166460da28e2fd0e3125963a5c4a66df45478e",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +642,646 @@    expect(tester.testTextInput.log, isEmpty);\n\n    await tester.tap(find.byType(EditableText));\n    await tester.showKeyboard(find.byType(EditableText));\n    await tester.pump();"
  },
  {
    "id" : "32ebd69e-afaa-4b8c-bee5-da60c4470046",
    "prId" : 44130,
    "prUrl" : "https://github.com/flutter/flutter/pull/44130#pullrequestreview-318528683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01d4a746-85ff-4291-b3c7-6ec3e5bc80f2",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "nit: equals doesn't really add anything here, unless you were going to nest matchers",
        "createdAt" : "2019-11-18T18:11:32Z",
        "updatedAt" : "2019-11-18T18:59:40Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "efbe7032-4e44-4b59-b3c5-127223a639c9",
        "parentId" : "01d4a746-85ff-4291-b3c7-6ec3e5bc80f2",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Oh, I know that, I just put it in because it reads better.",
        "createdAt" : "2019-11-18T18:12:08Z",
        "updatedAt" : "2019-11-18T18:59:40Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2902c76e0d79bcdaf6422d5c65dbdaa5a079ca24",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +3084,3088 @@    );\n\n    expect(cause, equals(SelectionChangedCause.keyboard), reason: 'on $platform');\n    expect(\n      selection,"
  },
  {
    "id" : "2908689e-5d52-415c-81e2-7d41c8260f11",
    "prId" : 47177,
    "prUrl" : "https://github.com/flutter/flutter/pull/47177#pullrequestreview-332950783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f580233-1274-4419-bbc9-c831d1038803",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This line is the key part of this test - without the change, we don't get the last setEditingState, which contains the value `...`.",
        "createdAt" : "2019-12-17T00:13:57Z",
        "updatedAt" : "2019-12-17T17:15:12Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b021e698a1ec7cfceeee33dfe84b5e02b7afd7",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +3997,4001 @@      'TextInput.setEditingState',\n      'TextInput.show',\n      'TextInput.setEditingState',\n    ];\n    expect(tester.testTextInput.log.length, logOrder.length);"
  },
  {
    "id" : "ae8ad5ba-d3c5-446d-961a-e2dea70f8b66",
    "prId" : 50831,
    "prUrl" : "https://github.com/flutter/flutter/pull/50831#pullrequestreview-363718991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92665617-0753-4a54-8dc9-bc36717243aa",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "why additional pump?",
        "createdAt" : "2020-02-24T19:35:28Z",
        "updatedAt" : "2020-02-26T01:30:24Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "a04283d6-28a7-4e50-85ec-8a285e08076d",
        "parentId" : "92665617-0753-4a54-8dc9-bc36717243aa",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "A pump is needed to allow the focus change (unfocus) to be resolved.",
        "createdAt" : "2020-02-24T21:37:21Z",
        "updatedAt" : "2020-02-26T01:30:24Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "01d5ebdcf7996a69d7b51129cd3fccf3990b1109",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +916,920 @@    tester.testTextInput.closeConnection();\n    // A pump is needed to allow the focus change (unfocus) to be resolved.\n    await tester.pump();\n\n    // Widget does not have focus anymore."
  },
  {
    "id" : "dd034392-f208-4c6c-ab92-3892577dbc00",
    "prId" : 51964,
    "prUrl" : "https://github.com/flutter/flutter/pull/51964#pullrequestreview-370629555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76ce1e56-87c4-4088-88dc-b4f22b136e8f",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "these should all be separate tests (so debugger can spend less time figuring out what the test is without reading the implementation)",
        "createdAt" : "2020-03-06T21:12:43Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e179e4dbc6dcf579630dcbe26fe8b856770ef63",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +4390,4394 @@    expect(state.wantKeepAlive, true);\n\n    // Does not overwrite existing RLM or LRM characters\n    state.updateEditingValue(const TextEditingValue(text: 'hello \\u{200F}ا'));\n    expect(state.currentTextEditingValue.text, equals('hello \\u{200F}ا'));"
  },
  {
    "id" : "b342d5bb-a3ca-41bb-8ac6-4191e1491b96",
    "prId" : 51964,
    "prUrl" : "https://github.com/flutter/flutter/pull/51964#pullrequestreview-371583096",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e471ea7-a00b-4135-bf93-61a782cc8fa9",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "some grammar issues in this text?",
        "createdAt" : "2020-03-09T23:00:10Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e179e4dbc6dcf579630dcbe26fe8b856770ef63",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +4405,4409 @@  });\n\n  testWidgets('Whitespace directionality formatter is not leaky Arabic', (WidgetTester tester) async {\n    final TextEditingController controller = TextEditingController(text: 'testText');\n    await tester.pumpWidget("
  },
  {
    "id" : "f19f1212-95a6-4cb6-a7ef-a7f85f7a1833",
    "prId" : 51964,
    "prUrl" : "https://github.com/flutter/flutter/pull/51964#pullrequestreview-371583779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "453dee56-62e7-48d9-9036-1275fbd56ed6",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Do we have a test for no 0x200F ever show up if there are no mixed directions etc?",
        "createdAt" : "2020-03-09T23:01:09Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "b8bedc42-b5c6-4504-8ea7-863d27427c5e",
        "parentId" : "453dee56-62e7-48d9-9036-1275fbd56ed6",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Can add that!",
        "createdAt" : "2020-03-09T23:01:59Z",
        "updatedAt" : "2020-03-11T22:20:03Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e179e4dbc6dcf579630dcbe26fe8b856770ef63",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +4526,4530 @@    expect(state.currentTextEditingValue.text, equals('\\u{200E}🇧🇼🇧🇷🇮🇴 🇻🇬🇧🇳wahhh!🇧🇬🇧🇫 🇧🇮🇰🇭عَ عَ \\u{200F}🇨🇲 🇨🇦🇮🇨 🇨🇻🇧🇶 🇰🇾🇨🇫 🇹🇩🇨🇱 🇨🇳🇨🇽\\u{200F}'));\n  });\n}\n\nclass MockTextFormatter extends TextInputFormatter {"
  },
  {
    "id" : "d4636f8c-4392-40a8-b813-8e954e4949d5",
    "prId" : 52126,
    "prUrl" : "https://github.com/flutter/flutter/pull/52126#pullrequestreview-387646607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b06106e-c661-4216-99ff-a660242c5a79",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Is it possible to test this at a high level, like by pumping a whole AutofillGroup setup and tapping a text field so that it autofills?",
        "createdAt" : "2020-04-03T23:26:50Z",
        "updatedAt" : "2020-04-16T19:27:44Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "b86398a5-caff-4112-ae10-b7227bd41033",
        "parentId" : "3b06106e-c661-4216-99ff-a660242c5a79",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I don't know if we can write an integration test for this on Android/iOS yet. @nturgut mentioned it's possible to do so on web.",
        "createdAt" : "2020-04-04T00:39:20Z",
        "updatedAt" : "2020-04-16T19:27:44Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "1260a8083a4a98db54114f4091a6f52703a70b24",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +4214,4218 @@      'TextInput.show',\n      'TextInput.setEditableSizeAndTransform',\n      'TextInput.requestAutofill',\n      'TextInput.setStyle',\n      'TextInput.setEditingState',"
  },
  {
    "id" : "530dcee4-6899-4f12-875e-175d1982cecc",
    "prId" : 52366,
    "prUrl" : "https://github.com/flutter/flutter/pull/52366#pullrequestreview-372911508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b0ff9db-af54-4d69-9ed5-65398586ede9",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "also do verifys on the mock formatter to check when it should and shouldn't be called ",
        "createdAt" : "2020-03-11T16:13:30Z",
        "updatedAt" : "2020-03-11T18:21:11Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b6556c39f58de82a5d7c2658e23896b2d0e56ef",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +4281,4285 @@    state.updateEditingValue(const TextEditingValue(text: '0123')); // Text change causes reformat\n    expect(formatter.formatCallCount, 3);\n    state.updateEditingValue(const TextEditingValue(text: '0123')); // Repeat, does not format\n    expect(formatter.formatCallCount, 3);\n    state.updateEditingValue(const TextEditingValue(text: '0123')); // Repeat, does not format"
  },
  {
    "id" : "18bbf64e-3629-4e84-a6df-c96586ffe94a",
    "prId" : 53613,
    "prUrl" : "https://github.com/flutter/flutter/pull/53613#pullrequestreview-384847251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e473ef4f-74d9-4617-975d-0377f8723b93",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Maybe add a comment saying this is a regression test for https://github.com/flutter/flutter/issues/53612?",
        "createdAt" : "2020-03-31T15:25:34Z",
        "updatedAt" : "2020-03-31T19:14:08Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb532a034e9128b0f156ec24233fb35fde90fb12",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4315,4319 @@\n  // Regression test for https://github.com/flutter/flutter/issues/53612\n  testWidgets('formatter logic handles initial repeat edge case', (WidgetTester tester) async {\n    final MockTextFormatter formatter = MockTextFormatter();\n    await tester.pumpWidget("
  },
  {
    "id" : "e9bb44a2-c4c3-4e67-afd2-269a6def3fd7",
    "prId" : 53974,
    "prUrl" : "https://github.com/flutter/flutter/pull/53974#pullrequestreview-389461630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16447f3a-6809-4372-bbb1-3845127069d8",
        "parentId" : null,
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "We do an extra pass through the formatter here as a result of the changes.",
        "createdAt" : "2020-04-07T20:22:58Z",
        "updatedAt" : "2020-04-07T20:22:58Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1ddd831b65643aaa142880b7947dcb1b2462a7b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +4222,4226 @@      '[2]: normal aaaa',\n      '[3]: aa, aaa',\n      '[3]: normal aaaaaa',\n      '[4]: aaa, aa',\n      '[4]: deleting aa',"
  },
  {
    "id" : "d67fd7b7-5dcc-48fb-9a13-5cb7b30f86a0",
    "prId" : 56641,
    "prUrl" : "https://github.com/flutter/flutter/pull/56641#pullrequestreview-408407110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcf9cb02-1ca7-4bc4-a55f-e47aac02fa7e",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Will these tests work even when they're run on other platforms after the PR is merged?  I would have expected you to need to use TargetPlatformVariant, but maybe I'm wrong.",
        "createdAt" : "2020-05-08T16:27:10Z",
        "updatedAt" : "2020-05-14T18:02:21Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "4fc21268-2534-41f8-9f77-cc87341376cf",
        "parentId" : "fcf9cb02-1ca7-4bc4-a55f-e47aac02fa7e",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "From the looks of it,  they do the same thing. Changed to `TargetPlatformVariant` as it seems to be more conventional. ",
        "createdAt" : "2020-05-08T17:44:04Z",
        "updatedAt" : "2020-05-14T18:02:21Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c36b639833317218084d84184a4fbea41dd0a0b",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +325,329 @@        expect(tester.testTextInput.editingState['text'], equals('test'));\n        expect(tester.testTextInput.setClientArgs['inputType']['name'], equals('TextInputType.address'));\n      });\n\n    testWidgets('inferred keyboard types can be overridden: ios',"
  },
  {
    "id" : "be20bf10-1f42-4d3c-a754-bc691e242acf",
    "prId" : 63592,
    "prUrl" : "https://github.com/flutter/flutter/pull/63592#pullrequestreview-466236422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "424219b8-f7fc-4323-9706-d0adbb0df067",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2020-08-12T20:09:57Z",
        "updatedAt" : "2020-08-18T23:04:38Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "58f9c0739baeaf86ce0cd34a4104841cf1ac66c9",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1340,1344 @@  final ValueVariant<TextInputAction> focusVariants = ValueVariant<\n      TextInputAction>(\n    TextInputAction.values.toSet(),\n  );\n"
  },
  {
    "id" : "9cce69e3-9261-4d99-a8ae-beb86189e063",
    "prId" : 65127,
    "prUrl" : "https://github.com/flutter/flutter/pull/65127#pullrequestreview-485270720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1df1842-367e-432e-b391-eb76ff81a3fc",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "should we also verify the handle does not show up?",
        "createdAt" : "2020-09-02T22:48:52Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "edb4681f-e864-4b1f-9ac5-9d82af226366",
        "parentId" : "d1df1842-367e-432e-b391-eb76ff81a3fc",
        "authorId" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "body" : "how do we verify it? can we add a screenshot test here?",
        "createdAt" : "2020-09-02T23:47:04Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "tags" : [
        ]
      },
      {
        "id" : "609d9a11-28de-4483-8f3b-8c4f461300f2",
        "parentId" : "d1df1842-367e-432e-b391-eb76ff81a3fc",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Something like this should be sufficient https://github.com/flutter/flutter/blob/d3fd62c8433ab9bf4e6b7312096cea1ab98b543f/packages/flutter/test/material/text_field_test.dart#L1032",
        "createdAt" : "2020-09-02T23:53:00Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "4aac8234-e949-42d7-a166-6459282e824c",
        "parentId" : "d1df1842-367e-432e-b391-eb76ff81a3fc",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "The thing is, `EditableText` doesn't show the handles on its own. Instead, it takes a `showSelectionHandles` property. This test is only making sure that `EditableText` reports the change correctly. The rest is on `SelectableText` and `material/TextField` to take the selection change and pass the correct value for `showSelectionHandles` (which they already do, and they have tests for that).",
        "createdAt" : "2020-09-02T23:53:34Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "a2da9fb7-02b6-4eab-9632-269bdca77f32",
        "parentId" : "d1df1842-367e-432e-b391-eb76ff81a3fc",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Maybe I'll add a test that includes the entire interaction between `EditableText` and `material/TextField`?",
        "createdAt" : "2020-09-02T23:55:10Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "612a7e0f-af12-4af0-a20c-7da48fbc975a",
        "parentId" : "d1df1842-367e-432e-b391-eb76ff81a3fc",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I think you can just use textfield/selectabletext to test directly, after all, we care about they do not show the handle but not how editabletext ineract with textfield to make that happen. ",
        "createdAt" : "2020-09-03T16:36:26Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "af3ddea1-b109-43f7-8614-0d406c0e6f6b",
        "parentId" : "d1df1842-367e-432e-b391-eb76ff81a3fc",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Thanks for the suggestions! I wrote a test for `selectable_text` and `material/text_field` to make sure they don't show handles under these circumstances.\r\n\r\n@chunhtai do you think I should remove the `editable_text` test that I had initially?",
        "createdAt" : "2020-09-03T20:26:24Z",
        "updatedAt" : "2020-09-08T18:07:03Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "3015927d-53e1-4db3-a0c1-67621b4d98db",
        "parentId" : "d1df1842-367e-432e-b391-eb76ff81a3fc",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I think we can keep it",
        "createdAt" : "2020-09-09T18:03:16Z",
        "updatedAt" : "2020-09-09T18:03:16Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "055ac891823d1598f32d0fc258fe0cb1ee3c8c97",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1435,1439 @@      // On web, the only way a text field can be updated from the engine is if\n      // a keyboard is used.\n      expect(selectionCause, SelectionChangedCause.keyboard);\n    }\n  });"
  },
  {
    "id" : "6b3b1fc7-799d-441b-bd13-33cdca73d7c6",
    "prId" : 65754,
    "prUrl" : "https://github.com/flutter/flutter/pull/65754#pullrequestreview-487979303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89ac69a1-09cd-47c3-961b-3300e62ffd7b",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "This is tricky, good call testing this case.",
        "createdAt" : "2020-09-14T17:09:59Z",
        "updatedAt" : "2020-09-17T02:13:00Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "a88c992056c222a87ef2f79b97734caccc2569a0",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +4822,4826 @@\n    // Currently `_receivedRemoteTextEditingValue` equals 'I will be modified by the formatter.',\n    // setEditingState will be called when set the [controller.value] to `_receivedRemoteTextEditingValue` by local.\n    setState(() {\n      controller.text = 'I will be modified by the formatter.';"
  },
  {
    "id" : "93b52b58-460c-419f-acc7-63949dcb279c",
    "prId" : 66864,
    "prUrl" : "https://github.com/flutter/flutter/pull/66864#pullrequestreview-505358139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87cc01f0-c55c-46dd-a5c5-4cc797e14912",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "Should the `inputFormatters` be applied? \r\nThis happens to be the scene we discussed above\r\n ```This is a bit questionable. For example if inputFormatters is updated and the same TextEditingValue is received a second time it should probably not shortcircuit.```\r\n\r\nIf the answer is yes and the iOS platform always returns this value, is it possible to cause an endless loop?\r\n\r\nI think the answer depends on the situation. If it is the value sent back immediately (like iOS), it should not be applied, but if it is the user input later, it should be applied.\r\n\r\nWe really can’t let the plug-in send back the value to the framework, which will make the problem very tricky.\r\n\r\n",
        "createdAt" : "2020-09-30T06:29:41Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "322c83ed-d8f7-4570-9013-d74ae44faeb7",
        "parentId" : "87cc01f0-c55c-46dd-a5c5-4cc797e14912",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "With https://github.com/flutter/engine/pull/20160 the ios input plugin should never send values back if the change is initiated by the framework.",
        "createdAt" : "2020-10-03T00:41:43Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "e185d463-6112-4fce-9409-4905e23bf9f7",
        "parentId" : "87cc01f0-c55c-46dd-a5c5-4cc797e14912",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "I see.\r\nIn addition, should the `inputFormatters` be applied here?",
        "createdAt" : "2020-10-09T02:02:50Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "ddbc01b4-16de-481c-ba7e-51fa7b2539f3",
        "parentId" : "87cc01f0-c55c-46dd-a5c5-4cc797e14912",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I'm not sure. In theory it should. I'll go find out if there's practically reasons about the current input formatter implementation, and open a new PR if there's anything needs changing.",
        "createdAt" : "2020-10-09T04:37:23Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "306832f8225f09e732fb06db5755c9ac5a3fa2f8",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +4886,4890 @@      // If by coincidence the text input plugin sends the same value back,\n      // do nothing.\n      state.updateEditingValue(const TextEditingValue(text: 'remote listener onChanged listener'));\n      expect(controller.text, 'remote listener onChanged listener');\n      expect(tester.testTextInput.log, isEmpty);"
  },
  {
    "id" : "8c17e508-4d04-47fe-a3dc-70ca98f109c9",
    "prId" : 66864,
    "prUrl" : "https://github.com/flutter/flutter/pull/66864#pullrequestreview-505310375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa5b3766-de02-4bc1-a38f-a78079b337e3",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "This appears to just be the same test case of the previous, although I'll be pleased to hear that I'm missing something :-).",
        "createdAt" : "2020-09-30T06:36:41Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "fa6d4be2-e08f-4a38-9060-d11aeda96585",
        "parentId" : "fa5b3766-de02-4bc1-a38f-a78079b337e3",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "It's not exactly the same as the previous \"input from text input plugin\" test, as it tests the `textEditingValue` setter call path instead of `updateEditingValue`",
        "createdAt" : "2020-10-05T06:26:18Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "da65df85-bf51-4c62-a7d6-8b60884472ab",
        "parentId" : "fa5b3766-de02-4bc1-a38f-a78079b337e3",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "I see.",
        "createdAt" : "2020-10-09T02:03:53Z",
        "updatedAt" : "2020-10-12T18:28:27Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      }
    ],
    "commit" : "306832f8225f09e732fb06db5755c9ac5a3fa2f8",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +4892,4896 @@\n    testWidgets('input from text selection menu', (WidgetTester tester) async {\n      await tester.pumpWidget(widget);\n\n      // Connect."
  },
  {
    "id" : "29a8f7e7-eba6-4ffc-aa8b-3bc76fe9a62e",
    "prId" : 68086,
    "prUrl" : "https://github.com/flutter/flutter/pull/68086#pullrequestreview-517075194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39711591-616d-464b-b879-247ea7f30855",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Good idea testing a complex character like this!",
        "createdAt" : "2020-10-26T18:49:16Z",
        "updatedAt" : "2020-12-09T05:32:37Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a9483aefebd985569a08e5c0c022198e32f1b3",
    "line" : 284,
    "diffHunk" : "@@ -1,1 +6722,6726 @@\n    testWidgets('composing range handled correctly when it\\'s overflowed', (WidgetTester tester) async {\n      const String string = '👨‍👩‍👦0123456';\n\n      await setupWidget(tester, LengthLimitingTextInputFormatter(maxLength));"
  },
  {
    "id" : "556daa12-ade4-4a3f-b682-6733680ccd91",
    "prId" : 68638,
    "prUrl" : "https://github.com/flutter/flutter/pull/68638#pullrequestreview-524889207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0faae308-ebec-4c66-bb5a-0ce5f1b6c232",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "This diff is confusing, but what I did was add the test on the next line and group it with the following existing test.",
        "createdAt" : "2020-11-06T06:41:00Z",
        "updatedAt" : "2020-12-01T00:18:21Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "7652554c0ebfa6a6ce79635149ce7bcb02323d4e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +5567,5571 @@  });\n\n  group('TextEditingController', () {\n    testWidgets('TextEditingController.text set to empty string clears field', (WidgetTester tester) async {\n      final TextEditingController controller = TextEditingController();"
  },
  {
    "id" : "ee5ed033-baca-4874-93be-4f7ae52a0ff7",
    "prId" : 68775,
    "prUrl" : "https://github.com/flutter/flutter/pull/68775#pullrequestreview-515174206",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55464495-f8ae-4c70-a1c4-2a840781e834",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "This is a pretty clever way to test this without actually being able to tap on the software keyboard 👍 ",
        "createdAt" : "2020-10-22T22:54:43Z",
        "updatedAt" : "2020-10-22T22:55:47Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "59333cc8bf477e38e04cf1837878d6c9995c01c5",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +5451,5455 @@\n    expect(log.length, 1);\n    expect(\n      log[0],\n      isMethodCall('TextInput.setEditingState', arguments: <String, dynamic>{"
  },
  {
    "id" : "b885cabe-cd50-4051-a274-fca47616b41a",
    "prId" : 75032,
    "prUrl" : "https://github.com/flutter/flutter/pull/75032#pullrequestreview-582724246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e444a6e-81fa-47c1-8102-dea1326d9818",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "This behavior appeared to be incorrect based on my observations on Mac.  The correct behavior should be to move the uppermost offset, not necessarily the extent.  So I updated the test and made Flutter match the observed behavior.\r\n\r\nOn Windows and Ubuntu, I observed that this key combination did nothing, but I left Flutter's behavior alone, which is to do the same thing as Mac.  I'll keep this in mind as we continue to work on desktop text editing and will consider getting rid of these shortcuts.",
        "createdAt" : "2021-02-03T19:27:26Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814f0bc8f0ce7e92a723214edbe338470e4304e",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +4113,4117 @@        const TextSelection(\n          baseOffset: 0,\n          extentOffset: 72,\n          affinity: TextAffinity.downstream,\n        ),"
  },
  {
    "id" : "0f3abeae-996e-412f-88f4-844eac7914ff",
    "prId" : 75032,
    "prUrl" : "https://github.com/flutter/flutter/pull/75032#pullrequestreview-592417734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8160efd-257c-4e7a-8664-3b44e7dc1c83",
        "parentId" : null,
        "authorId" : "453b79ec-af0f-4bfb-aeee-353eabb6c798",
        "body" : "@justinmc what's the reason that the key event should be ignored on the web platform?",
        "createdAt" : "2021-02-17T01:15:54Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "453b79ec-af0f-4bfb-aeee-353eabb6c798",
        "tags" : [
        ]
      },
      {
        "id" : "12eed547-1395-48d4-843f-0f27ded412ef",
        "parentId" : "a8160efd-257c-4e7a-8664-3b44e7dc1c83",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Flutter web lets the browser handle text editing, so it doesn't listen to any of these things.\r\n\r\nThis could be a problem for users that add their own Intents or Shortcuts now that I think about it.  I've added a comment at https://github.com/flutter/flutter/pull/75032#discussion_r577779699 to discuss more.",
        "createdAt" : "2021-02-17T16:59:00Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814f0bc8f0ce7e92a723214edbe338470e4304e",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +7194,7198 @@  }, skip: kIsWeb);\n\n  testWidgets('ignore key event from web platform', (WidgetTester tester) async {\n    final TextEditingController controller = TextEditingController(\n      text: 'test\\ntest',"
  }
]