[
  {
    "id" : "4bcdfb61-dc5c-42d5-9dc9-e47052151dd0",
    "prId" : 7430,
    "prUrl" : "https://github.com/flutter/flutter/pull/7430#pullrequestreview-16051952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7e659ec-a323-46f0-8550-5432bca78422",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "one thing we should test one day is global key duplication across different build phases in the same frame, via layout builders.",
        "createdAt" : "2017-01-11T01:23:49Z",
        "updatedAt" : "2017-01-11T04:28:21Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6763d043bfccf89089b9199d882605e8d29677d",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@  });\n\n  testWidgets('GlobalKey duplication', (WidgetTester tester) async {\n    Key key = new GlobalKey(debugLabel: 'problematic');\n"
  },
  {
    "id" : "9d498051-3212-4f19-aced-81e0babf1487",
    "prId" : 42640,
    "prUrl" : "https://github.com/flutter/flutter/pull/42640#pullrequestreview-303665037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97767c96-8b00-46f1-b791-bf034da1d742",
        "parentId" : null,
        "authorId" : "b7f7a0f6-1a85-41e8-885c-39eab9f63c4c",
        "body" : "I'm unsure on how to set this `debugBuildingDirtyElements` to true, the doc said that this flag was made public so that test framework can change it, but the flag itself is a protected field.\r\nAny pointers on how to do this properly is appreciated, but if this is acceptable, then great!\r\n",
        "createdAt" : "2019-10-17T23:44:16Z",
        "updatedAt" : "2019-10-24T18:09:16Z",
        "lastEditedBy" : "b7f7a0f6-1a85-41e8-885c-39eab9f63c4c",
        "tags" : [
        ]
      },
      {
        "id" : "5c23de77-abac-4d4c-b02c-5d25c513eec9",
        "parentId" : "97767c96-8b00-46f1-b791-bf034da1d742",
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "I can't think of a better way to test this.  You could just add an extra comment explaining that you have to test it this way.",
        "createdAt" : "2019-10-18T04:57:15Z",
        "updatedAt" : "2019-10-24T18:09:16Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cbc5c303e17b1f1c90c0fdcf2f5496a9f60ab7f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +662,666 @@    /// ignore here is required for testing purpose because changing the flag properly is hard\n    // ignore: invalid_use_of_protected_member\n    tester.binding.debugBuildingDirtyElements = true;\n    FlutterError error;\n    try {"
  },
  {
    "id" : "a239111a-a754-4e58-a6f5-349aa42fa7a7",
    "prId" : 46183,
    "prUrl" : "https://github.com/flutter/flutter/pull/46183#pullrequestreview-327882671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3d67bcd-5a87-4b93-8db2-c7dff0c8743e",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "an additional exception was previously throw because the tree building was halted half way through, and the element with global key does not fully transition to the new place. Now, the glabol key reserve will not stop tree building until it finalizes, so those elements will be cleaned up.\r\n\r\nI think the second exception is redundant as long as we have first exception. ",
        "createdAt" : "2019-12-05T22:02:07Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "504b623069c8868bf1fcabca0a54a284b889dfca",
    "line" : 373,
    "diffHunk" : "@@ -1,1 +856,860 @@    ));\n    FlutterError.onError = oldHandler;\n    expect(count, 1);\n  });\n"
  },
  {
    "id" : "749486f3-cce7-436b-9a6e-f44d4f3ec133",
    "prId" : 46183,
    "prUrl" : "https://github.com/flutter/flutter/pull/46183#pullrequestreview-339029179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c5320c5-e140-48f3-a832-4487ab09ec52",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ditto",
        "createdAt" : "2020-01-03T09:25:38Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "0df19350-1dea-4f3a-8d48-e2db78d56d95",
        "parentId" : "1c5320c5-e140-48f3-a832-4487ab09ec52",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(checking that the rebuild happens before the relayout -- looking at this closer, i'm not sure it actually is)",
        "createdAt" : "2020-01-03T09:26:21Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6b2968cb-4179-45f0-bf40-1bb0ca6fdac6",
        "parentId" : "1c5320c5-e140-48f3-a832-4487ab09ec52",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I don't think it can happen after relayout, rebuild happens in build phase while relayout happens in layout phase. I will try to come up with the check anyway though.",
        "createdAt" : "2020-01-04T01:48:20Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "7e1d62d5-e661-4d45-85dc-c28a0e873805",
        "parentId" : "1c5320c5-e140-48f3-a832-4487ab09ec52",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "there's actually no such thing as a build phase and a layout phase. It's a white lie we tell people to give them an intuition of how things work. The reality is that build and layout are interleaved. That's actually the whole point of a LayoutBuilder. It builds, then stops the build at that point, waits until it's laid out, stops the layout at that point, builds again, then lays out.",
        "createdAt" : "2020-01-04T07:34:51Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a1b4cde6-057e-4ea8-b603-1d9afa54b016",
        "parentId" : "1c5320c5-e140-48f3-a832-4487ab09ec52",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "yes, you are right. I added the check to make sure the build order matches expectation",
        "createdAt" : "2020-01-07T04:48:35Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "504b623069c8868bf1fcabca0a54a284b889dfca",
    "line" : 268,
    "diffHunk" : "@@ -1,1 +319,323 @@        },\n      )\n    );\n    expect(rebuiltKeyOfSecondChildBeforeLayout, key2);\n    expect(rebuiltKeyOfSecondChildAfterLayout, key3);"
  },
  {
    "id" : "6b3a2bab-a22f-4548-9df3-d17bb2506414",
    "prId" : 46183,
    "prUrl" : "https://github.com/flutter/flutter/pull/46183#pullrequestreview-337999754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1437b363-edfc-40dd-a2a9-8ea749e07b07",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "same here",
        "createdAt" : "2020-01-03T09:27:14Z",
        "updatedAt" : "2020-01-30T18:09:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "504b623069c8868bf1fcabca0a54a284b889dfca",
    "line" : 482,
    "diffHunk" : "@@ -1,1 +965,969 @@\n    final _StatefulState state = tester.firstState(find.byType(_Stateful).at(1));\n    state.rebuild();\n\n    await tester.pumpWidget("
  },
  {
    "id" : "7b47ff0d-19a0-4a33-aa93-f3bcbb3be2dd",
    "prId" : 49925,
    "prUrl" : "https://github.com/flutter/flutter/pull/49925#pullrequestreview-351864504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59b8a89c-1498-4d19-99a0-2b5c2243bfba",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "nit: blank line between tests",
        "createdAt" : "2020-02-01T04:20:53Z",
        "updatedAt" : "2020-02-01T04:25:43Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "15720cb9f66332590724a98cf0e28842fc2b5b6d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +741,745 @@  });\n\n  testWidgets('StatefulElement subclass can decorate State.build', (WidgetTester tester) async {\n    bool isDidChangeDependenciesDecorated;\n    bool isBuildDecorated;"
  },
  {
    "id" : "1c9e67c5-9002-4b6f-ab13-b1cb64d9d5ed",
    "prId" : 58204,
    "prUrl" : "https://github.com/flutter/flutter/pull/58204#pullrequestreview-422027276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f6d383a-a5b2-4fda-900d-b6fae4ecd42e",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I am surprised this is not allowed. What if there is an inherited widget that both container and _StatefulLeaf depend on. When the inherited widget mark both them dirty, the container rebuilt without the _StatefulLeaf?",
        "createdAt" : "2020-05-29T17:33:24Z",
        "updatedAt" : "2020-06-02T20:45:41Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "a35b89c8-df72-47f1-a62f-3320c986cec8",
        "parentId" : "4f6d383a-a5b2-4fda-900d-b6fae4ecd42e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm not sure what you think should be allowed? Can you elaborate?\r\n\r\nMy intent was for this to test the error message that is reported as a result of a bad `visitChildren`.",
        "createdAt" : "2020-05-30T23:06:32Z",
        "updatedAt" : "2020-06-02T20:45:41Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "55cd603f-2b8c-4180-bc60-f415170bb89d",
        "parentId" : "4f6d383a-a5b2-4fda-900d-b6fae4ecd42e",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Oh Nvm, I was confused at the setup, I think this is fine. We should update the test title to be a bit more clear though.",
        "createdAt" : "2020-06-01T17:12:28Z",
        "updatedAt" : "2020-06-02T20:45:41Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a00bd8a951ec0cddb9735af2a0804e36e7ac3c0",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1434,1438 @@    (key.currentState as _StatefulLeafState).markNeedsBuild();\n    await tester.pumpWidget(Container());\n    final dynamic exception = tester.takeException();\n    expect(\n      exception.message,"
  },
  {
    "id" : "56dfc6a8-4627-48da-8f72-4d2cd0b22c05",
    "prId" : 59219,
    "prUrl" : "https://github.com/flutter/flutter/pull/59219#pullrequestreview-428519810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33e6fc11-2ddf-47e6-850a-72dc7f673d10",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This looks like it could have been masking a bug. Wow.",
        "createdAt" : "2020-06-11T00:46:39Z",
        "updatedAt" : "2020-06-11T00:48:48Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4b2b8ac7768ff6dcb3b8a9f605fd67495f4713d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1346,1350 @@              debugDoingBuildOnBuild = context.debugDoingBuild;\n            },\n            onDispose: (BuildContext context) {\n              debugDoingBuildOnDispose = context.debugDoingBuild;\n            },"
  }
]