[
  {
    "id" : "571b39f9-b27c-4849-81a2-db0388f84004",
    "prId" : 54394,
    "prUrl" : "https://github.com/flutter/flutter/pull/54394#pullrequestreview-391612586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "679068c3-3ebf-4af0-9edd-5f34fda162b5",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Not clear why this transformation is needed (what's the point of `nonconst(100.0)`?). Doesn't seem to improve the clarity of the original code and I'm sure we don't care about the performance difference :-).",
        "createdAt" : "2020-04-10T14:22:44Z",
        "updatedAt" : "2020-04-10T19:11:31Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "0b77d9d9-4f33-4822-a424-8047d06c068a",
        "parentId" : "679068c3-3ebf-4af0-9edd-5f34fda162b5",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Without `nonconst` `SizedBox` should be made const. Doing that breaks the test on L603 with the following error:\r\n\r\n```\r\n══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\r\nThe following StateError was thrown running a test:\r\nBad state: Too many elements\r\n\r\nWhen the exception was thrown, this was the stack:\r\n#0      Iterable.single (dart:core/iterable.dart:556:24)\r\n#1      WidgetController.renderObject (package:flutter_test/src/controller.dart:207:30)\r\n#2      main.<anonymous closure> (file:///home/a14n/flutter/flutter/packages/flutter/test/widgets/single_child_scroll_view_test.dart:603:12)\r\n<asynchronous suspension>\r\n#3      main.<anonymous closure> (file:///home/a14n/flutter/flutter/packages/flutter/test/widgets/single_child_scroll_view_test.dart)\r\n#4      testWidgets.<anonymous closure>.<anonymous closure> (package:flutter_test/src/widget_tester.dart:140:29)\r\n<asynchronous suspension>\r\n#5      testWidgets.<anonymous closure>.<anonymous closure> (package:flutter_test/src/widget_tester.dart)\r\n#6      TestWidgetsFlutterBinding._runTestBody (package:flutter_test/src/binding.dart:703:19)\r\n<asynchronous suspension>\r\n#9      TestWidgetsFlutterBinding._runTest (package:flutter_test/src/binding.dart:683:14)\r\n#10     AutomatedTestWidgetsFlutterBinding.runTest.<anonymous closure> (package:flutter_test/src/binding.dart:1083:24)\r\n#16     AutomatedTestWidgetsFlutterBinding.runTest (package:flutter_test/src/binding.dart:1080:15)\r\n#17     testWidgets.<anonymous closure> (package:flutter_test/src/widget_tester.dart:133:24)\r\n#18     Declarer.test.<anonymous closure>.<anonymous closure>.<anonymous closure> (package:test_api/src/backend/declarer.dart:172:27)\r\n<asynchronous suspension>\r\n#19     Declarer.test.<anonymous closure>.<anonymous closure>.<anonymous closure> (package:test_api/src/backend/declarer.dart)\r\n#20     Invoker.waitForOutstandingCallbacks.<anonymous closure> (package:test_api/src/backend/invoker.dart:246:15)\r\n#25     Invoker.waitForOutstandingCallbacks (package:test_api/src/backend/invoker.dart:243:5)\r\n#26     Declarer.test.<anonymous closure>.<anonymous closure> (package:test_api/src/backend/declarer.dart:170:33)\r\n#31     Declarer.test.<anonymous closure> (package:test_api/src/backend/declarer.dart:169:13)\r\n#32     Invoker._onRun.<anonymous closure>.<anonymous closure>.<anonymous closure>.<anonymous closure> (package:test_api/src/backend/invoker.dart:400:30)\r\n(elided 31 frames from class _FakeAsync, class _RawReceivePortImpl, class _Timer, dart:async, dart:async-patch, and package:stack_trace)\r\n\r\nThe test description was:\r\n  Nested SingleChildScrollView showOnScreen\r\n════════════════════════════════════════════════════════════════════════════════════════════════════\r\nTest failed. See exception logs above.\r\nThe test description was: Nested SingleChildScrollView showOnScreen\r\n\r\n✖ Nested SingleChildScrollView showOnScreen\r\n```\r\n\r\n> Doesn't seem to improve the clarity of the original code and I'm sure we don't care about the performance difference :-).\r\n\r\nThere's an upcoming lint to detect those empty Containers. So we should change this code.",
        "createdAt" : "2020-04-10T14:39:31Z",
        "updatedAt" : "2020-04-10T19:11:31Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "b1c23eb3-c4a6-4b22-99d6-d17dc9f8d3cb",
        "parentId" : "679068c3-3ebf-4af0-9edd-5f34fda162b5",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The test needs a different Container (now SizedBox) in every cell of its 10x10 grid, otherwise it's not possible to distinguish individual children. I think it would be better to either use `nonconst SizedBox(...)` with a comment that explains what's going on, or add an ignore analyzer rule comment (once the new rule lands) with the same comment.",
        "createdAt" : "2020-04-10T15:12:31Z",
        "updatedAt" : "2020-04-10T19:11:31Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "35f9db46-81d5-47ef-84b3-f282cb1cb27b",
        "parentId" : "679068c3-3ebf-4af0-9edd-5f34fda162b5",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "`nonconst` was designed to address this case and avoid an `// ignore: prefer_const_constructors`. Looking at other places where `nonconst` is used, it looks really similar to this case.",
        "createdAt" : "2020-04-10T15:29:45Z",
        "updatedAt" : "2020-04-10T19:11:31Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "41b80850-fcea-4e2f-8fc8-7059b564f8df",
        "parentId" : "679068c3-3ebf-4af0-9edd-5f34fda162b5",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "OK. It's the first time I've ever seen it, so if there's a convention, I'll bow to it. Please add a comment that explains what's up, for future developers who (like me) haven't run into this idiom before.",
        "createdAt" : "2020-04-10T16:04:25Z",
        "updatedAt" : "2020-04-10T19:11:31Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "de5b296d-57d9-4c3d-b081-996e74b406e6",
        "parentId" : "679068c3-3ebf-4af0-9edd-5f34fda162b5",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Comment added",
        "createdAt" : "2020-04-10T19:11:41Z",
        "updatedAt" : "2020-04-10T19:11:42Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f32c164885ade57ffcbb65dbd88baddd3c7a138",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +584,588 @@                        // nonconst is used below to avoid const constructor and to force a new instance\n                        return SizedBox(\n                          height: nonconst(100.0),\n                          width: 100.0,\n                        );"
  }
]