[
  {
    "id" : "66633eef-6624-4452-acdd-c0baf2ccd130",
    "prId" : 62350,
    "prUrl" : "https://github.com/flutter/flutter/pull/62350#pullrequestreview-456139749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d85d44d-d3ba-4446-89e5-b22517d2d3d6",
        "parentId" : null,
        "authorId" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "body" : "Nit: Should probably be consistent with keeping/omitting the `.0` for doubles.",
        "createdAt" : "2020-07-27T20:45:39Z",
        "updatedAt" : "2020-07-29T19:22:16Z",
        "lastEditedBy" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "tags" : [
        ]
      },
      {
        "id" : "06e190ab-ffb8-4040-a87a-5ae6f9ca0e40",
        "parentId" : "6d85d44d-d3ba-4446-89e5-b22517d2d3d6",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I find that omitting the `.0` makes code easier to read however it was necessary to introduce one in these expressions so that they eval to doubles instead of ints. I realize that it's inconsistent but I've tried to be consistent about that.",
        "createdAt" : "2020-07-27T21:13:46Z",
        "updatedAt" : "2020-07-29T19:22:16Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd0ee57fd9bdb1f913c709410aff6e9516b25e5a",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +79,83 @@    await tester.pumpWidget(buildFrame(spacing: 10, textDirection: TextDirection.ltr));\n    expect(tester.getRect(find.byKey(child1Key)), const Rect.fromLTRB(0, 8, 48, 56));\n    expect(tester.getRect(find.byKey(child2Key)), const Rect.fromLTRB(10.0 + 48, 0, 10.0 + 112, 64));\n    expect(tester.getRect(find.byKey(child3Key)), const Rect.fromLTRB(10.0 + 112 + 10.0, 16, 10.0 + 10.0 + 144, 48));\n"
  },
  {
    "id" : "dc140ef2-663d-4bff-b5f0-b3a3580fad1a",
    "prId" : 62350,
    "prUrl" : "https://github.com/flutter/flutter/pull/62350#pullrequestreview-456138925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76e1bded-04b4-4d5b-89cd-b029750b172d",
        "parentId" : null,
        "authorId" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "body" : "Nit: Unnecessary new line",
        "createdAt" : "2020-07-27T20:46:15Z",
        "updatedAt" : "2020-07-29T19:22:16Z",
        "lastEditedBy" : "92ae747d-96c4-4999-86e1-78218702f6b6",
        "tags" : [
        ]
      },
      {
        "id" : "9cc07aba-ade5-43a1-b2cc-449d49799b5c",
        "parentId" : "76e1bded-04b4-4d5b-89cd-b029750b172d",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "üëç",
        "createdAt" : "2020-07-27T21:12:26Z",
        "updatedAt" : "2020-07-29T19:22:16Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd0ee57fd9bdb1f913c709410aff6e9516b25e5a",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +233,237 @@    await tester.pumpWidget(buildFrame(maxWidth: 800));\n    expect(tester.getSize(find.byType(OverflowBar)).height, 75); // 75 = max(50, 25, 75)\n\n    await tester.pumpWidget(buildFrame(maxWidth: 150));\n    expect(tester.getSize(find.byType(OverflowBar)).height, 166); // 166 = 50 + 8 + 25 + 8 + 75"
  }
]