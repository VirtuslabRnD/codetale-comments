[
  {
    "id" : "778ccd78-a2d7-438a-bc7a-9bdad9b50eb7",
    "prId" : 33354,
    "prUrl" : "https://github.com/flutter/flutter/pull/33354#pullrequestreview-242877803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5224de7c-bcc5-4a57-81b1-54cc7dc60762",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "You should be able to use the `@Tags` annotation here too:\r\n\r\n```dart\r\n@Tags(['web_unimplemented'])\r\n```",
        "createdAt" : "2019-05-28T19:33:15Z",
        "updatedAt" : "2019-06-10T21:07:00Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b0215937713551c992cc97d731e9e2fd1f501ec",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3,7 @@// found in the LICENSE file.\n\n@TestOn('!chrome')\nimport 'dart:typed_data';\n"
  },
  {
    "id" : "73fbc062-e5cc-419c-bbd9-00a5cc578acf",
    "prId" : 62694,
    "prUrl" : "https://github.com/flutter/flutter/pull/62694#pullrequestreview-500784299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39da80f0-3980-4aed-9ff1-0585d8bcad85",
        "parentId" : null,
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "I think we should not use nullable types other than L21.\r\n`MessageCodec.encodeMessage` takes `T` instead of `T?`. I think in most cases `T` is a non-nullable type, which means `encodeMessage` will seldom get a null. If we really want to make sure that `MessageCodec` does not crash with nullable types, L21 is sufficient.",
        "createdAt" : "2020-10-01T22:40:47Z",
        "updatedAt" : "2020-10-06T23:30:02Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "c4bff4e9-8391-442a-a11a-4c9ddb3f25c8",
        "parentId" : "39da80f0-3980-4aed-9ff1-0585d8bcad85",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Same goes to platform_channel_test",
        "createdAt" : "2020-10-01T22:48:04Z",
        "updatedAt" : "2020-10-06T23:30:02Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "22098f6e-3576-4ff3-9d5a-9d13632bcf6c",
        "parentId" : "39da80f0-3980-4aed-9ff1-0585d8bcad85",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Well, but the problem is that the `StringCodec` is defined as `MessageCodec<String?>` and `BinaryCodec` is defined as a `MessageCodec<ByteData?>`, and the implementation does want to be able to return null for messages that are null. I tried making `MessageCodec<String>` be the base of `StringCodec`, but that had a cascade effect on anything using messages, and is a much bigger PR. I'm not even sure it's the right thing: there may be places where having a null message makes sense. Applies to `platform_channel_test` too.",
        "createdAt" : "2020-10-01T23:22:37Z",
        "updatedAt" : "2020-10-06T23:30:02Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "de8a4470-2510-442c-9a05-8d36df99ff7d",
        "parentId" : "39da80f0-3980-4aed-9ff1-0585d8bcad85",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "That makes sense. Thanks!",
        "createdAt" : "2020-10-01T23:36:19Z",
        "updatedAt" : "2020-10-06T23:30:02Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "70934da2e7b8e26f7c1051fe87990ba3fb4b201b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +25,29 @@  });\n  group('String codec', () {\n    const MessageCodec<String?> string = StringCodec();\n    test('should encode and decode simple messages', () {\n      checkEncodeDecode<String?>(string, null);"
  }
]