[
  {
    "id" : "8f573c3d-7cbb-44d6-ad69-07d64c4885a4",
    "prId" : 18374,
    "prUrl" : "https://github.com/flutter/flutter/pull/18374#pullrequestreview-129008027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52a7aee8-f754-4173-9537-62abb771ba09",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It would be useful to have a variable height items test where the item being dragged is as big as the list. Of course tests that scroll will be needed for that.",
        "createdAt" : "2018-06-15T00:48:59Z",
        "updatedAt" : "2018-07-27T21:53:36Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b7da79f94c3608f17f7d697d06fe07e887a9fad",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@import 'package:flutter/material.dart';\n\nvoid main() {\n  group('$ReorderableListView', () {\n    const double itemHeight = 48.0;"
  },
  {
    "id" : "9e9fd33c-8cdb-4a5b-84ca-e98bebce200d",
    "prId" : 41338,
    "prUrl" : "https://github.com/flutter/flutter/pull/41338#pullrequestreview-293911247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af587e4f-de30-4f52-832d-5e281f95079d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Please leave a comment with all `// ignore:` explaining why this has to be ignored as per our style guide: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#comment-all-ignores",
        "createdAt" : "2019-09-26T16:37:37Z",
        "updatedAt" : "2019-09-26T23:01:34Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "510cdd1c-4fd0-410e-83d4-9e17f32a790a",
        "parentId" : "af587e4f-de30-4f52-832d-5e281f95079d",
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "The comment a few lines above (\"Rebuild with distinct key objects\") is meant to be that comment. I can make it more explicit if it's not clear.\r\n\r\nAlternatively, I could create some other key type that doesn't have a const constructor at all, but it seemed a bit heavyweight for this.",
        "createdAt" : "2019-09-26T18:13:38Z",
        "updatedAt" : "2019-09-26T23:01:34Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef80efc9481d79da896280d3703ff4438f451d34",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +687,691 @@              // Deliberately avoid the const constructor below to ensure keys are\n              // distinct objects.\n              _Stateful(key: ObjectKey('B')), // ignore:prefer_const_constructors\n              _Stateful(key: ObjectKey('C')), // ignore:prefer_const_constructors\n              _Stateful(key: ObjectKey('A')), // ignore:prefer_const_constructors"
  },
  {
    "id" : "11f36cb7-4dda-45cf-aaea-763aff40e027",
    "prId" : 49148,
    "prUrl" : "https://github.com/flutter/flutter/pull/49148#pullrequestreview-356147277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65121828-e773-45d9-a906-8ffe94ccb7d8",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "We should check to see if the initial scroll offset was applied:\r\n```dart\r\n        // Check initial scroll offset of first list item relative to\r\n        // the offset of the list view.\r\n        Offset listViewTopLeft = tester.getTopLeft(\r\n          find.byType(ReorderableListView),\r\n        );\r\n        Offset firstBoxTopLeft = tester.getTopLeft(\r\n          find.byKey(firstBox),\r\n        );\r\n        expect(firstBoxTopLeft.dy, listViewTopLeft.dy - 10.0);\r\n```",
        "createdAt" : "2020-02-10T18:04:16Z",
        "updatedAt" : "2020-02-11T17:24:03Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      }
    ],
    "commit" : "92a55561cf27bd49379196873200acfdb0d92a23",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +287,291 @@          ),\n        );\n\n        // Check initial scroll offset of first list item relative to\n        // the offset of the list view."
  },
  {
    "id" : "dc58ddba-c4e6-43ac-b6d8-703d2d4f695d",
    "prId" : 49148,
    "prUrl" : "https://github.com/flutter/flutter/pull/49148#pullrequestreview-356328944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "801f6d7c-df34-4280-a3a1-cb77800ccb2a",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "You will also want to test dragging the list view and seeing if the controller's offset values update with changes on the screen. I did this one since it's a little odd. The first 20px of dragging seems to be ignored by the `ReorderableListView`:\r\n```dart\r\n        // Drag the UI to see if the scroll controller updates accordingly\r\n        await tester.drag(\r\n          find.text('B'),\r\n          const Offset(0.0, -100.0),\r\n        );\r\n        listViewTopLeft = tester.getTopLeft(\r\n          find.byType(ReorderableListView),\r\n        );\r\n        firstBoxTopLeft = tester.getTopLeft(\r\n          find.byKey(firstBox),\r\n        );\r\n        // Initial scroll controller offset: 40.0\r\n        // Drag UI by 100.0 upwards vertically\r\n        // First 20.0 px always ignored, so scroll offset is only\r\n        // shifted by 80.0.\r\n        // Final offset: 40.0 + 80.0 = 120.0\r\n        expect(customController.offset, 120.0);\r\n```",
        "createdAt" : "2020-02-10T18:08:25Z",
        "updatedAt" : "2020-02-11T17:24:03Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      },
      {
        "id" : "5bc1ebfb-1a69-4e1d-91a6-3227f798bdb6",
        "parentId" : "801f6d7c-df34-4280-a3a1-cb77800ccb2a",
        "authorId" : "aa7d8a9f-47b2-4099-922e-076c245f926d",
        "body" : "You've taught me A LOT about the capabilities of flutter's testing library. Man lol, I need to go back over the docs a bit because a lot of this is new to me.",
        "createdAt" : "2020-02-10T23:02:07Z",
        "updatedAt" : "2020-02-11T17:24:03Z",
        "lastEditedBy" : "aa7d8a9f-47b2-4099-922e-076c245f926d",
        "tags" : [
        ]
      }
    ],
    "commit" : "92a55561cf27bd49379196873200acfdb0d92a23",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +322,326 @@        expect(customController.offset, 120.0);\n      });\n\n      testWidgets('Still builds when no PrimaryScrollController is available', (WidgetTester tester) async {\n        final Widget reorderableList = ReorderableListView("
  },
  {
    "id" : "289aec57-abd4-4388-b5eb-4af2c7658ca6",
    "prId" : 49148,
    "prUrl" : "https://github.com/flutter/flutter/pull/49148#pullrequestreview-356346539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05702b96-826c-4144-ba73-e9320b6ea8d9",
        "parentId" : null,
        "authorId" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "body" : "nit: prefer to have the `child` or `children` property to be the last property specified for `Widget`s. ie.\r\n```dart\r\nRow(\r\n  // all properties here\r\n  // ...\r\n  children: [\r\n    // children widgets here\r\n  ],\r\n)\r\n```",
        "createdAt" : "2020-02-10T23:47:31Z",
        "updatedAt" : "2020-02-11T17:24:03Z",
        "lastEditedBy" : "8214f119-d2d3-484d-aea2-02799ab41da5",
        "tags" : [
        ]
      }
    ],
    "commit" : "92a55561cf27bd49379196873200acfdb0d92a23",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +277,281 @@                  scrollController: customController,\n                  onReorder: (int oldIndex, int newIndex) { },\n                  children: const <Widget>[\n                    SizedBox(width: 100.0, height: 100.0, child: Text('C'), key: firstBox),\n                    SizedBox(width: 100.0, height: 100.0, child: Text('B'), key: secondBox),"
  },
  {
    "id" : "db3d9679-a620-419c-bcea-4adfef633e58",
    "prId" : 64855,
    "prUrl" : "https://github.com/flutter/flutter/pull/64855#pullrequestreview-484572510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fad4348-fb3a-4902-a93b-d2212f1224c0",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Is this the same test as previous one?",
        "createdAt" : "2020-09-08T20:09:43Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "19957a50-b800-4c87-9a7d-d463660840e7",
        "parentId" : "8fad4348-fb3a-4902-a93b-d2212f1224c0",
        "authorId" : "cabb37d6-f870-4dcb-9a86-bf99c1476a0a",
        "body" : "Yes. One is for''vertical mode\" and the other is for \"horizontal mode\"",
        "createdAt" : "2020-09-08T22:44:30Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "cabb37d6-f870-4dcb-9a86-bf99c1476a0a",
        "tags" : [
        ]
      },
      {
        "id" : "3f032a38-8824-436f-811e-52645a9bc50d",
        "parentId" : "8fad4348-fb3a-4902-a93b-d2212f1224c0",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I see, but then you will need to set scrollDirection to vertical in this test, right?",
        "createdAt" : "2020-09-08T22:53:39Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "eeb107ca-326f-41e5-816c-e2280a4c1f21",
        "parentId" : "8fad4348-fb3a-4902-a93b-d2212f1224c0",
        "authorId" : "cabb37d6-f870-4dcb-9a86-bf99c1476a0a",
        "body" : "That's right. I'll apply it right away. üëç ",
        "createdAt" : "2020-09-09T00:07:05Z",
        "updatedAt" : "2020-09-09T00:13:03Z",
        "lastEditedBy" : "cabb37d6-f870-4dcb-9a86-bf99c1476a0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f8b8ccb246ba786488ee75de21e16124471f2cb",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +801,805 @@      });\n\n      testWidgets('Preserves children states when rebuilt', (WidgetTester tester) async {\n        const Key firstBox = Key('key');\n        Widget build() {"
  },
  {
    "id" : "1f660c05-f54f-415d-91e5-d47dd7471f97",
    "prId" : 65080,
    "prUrl" : "https://github.com/flutter/flutter/pull/65080#pullrequestreview-486335401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7981985-f870-430e-b7a7-276353f09158",
        "parentId" : null,
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Combine `kNonDraggingListHeight` and `kDraggingListHeight` to simplify code.",
        "createdAt" : "2020-09-10T21:51:08Z",
        "updatedAt" : "2020-09-12T02:22:11Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "058a685047ed192fbce49bb1d6ef80917fd55bfd",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +178,182 @@        }\n\n        const double kDraggingListHeight = 292.0;\n        // Drag a normal text item\n        expect(getContentElement().size.height, kDraggingListHeight);"
  },
  {
    "id" : "fa9286b2-00e2-4098-b9ef-c91d436035b7",
    "prId" : 74842,
    "prUrl" : "https://github.com/flutter/flutter/pull/74842#pullrequestreview-577905203",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "688ffb2a-03de-49a3-ae55-4b8023aafe0b",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Should confirm that the last 6 items are visible here, i.e. we _really_ autoscrolled to the end.",
        "createdAt" : "2021-01-27T22:36:53Z",
        "updatedAt" : "2021-01-28T01:17:29Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "76cc7628-37d8-42ef-9e44-76ecb3d192f8",
        "parentId" : "688ffb2a-03de-49a3-ae55-4b8023aafe0b",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Good idea. Thx.",
        "createdAt" : "2021-01-28T01:01:31Z",
        "updatedAt" : "2021-01-28T01:17:29Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b00c94a2744fe3b6ac25c7b6083f306da7c8fab4",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1312,1316 @@    }\n\n    // Drag back to off the top of the list, which should autoscroll until\n    // we hit the beginning of the list. This should cause the first item's\n    // entry to be rebuilt. However, the contents should not be in both places."
  }
]