[
  {
    "id" : "640d4075-d8ea-4364-86e9-3faca8a64ff6",
    "prId" : 8307,
    "prUrl" : "https://github.com/flutter/flutter/pull/8307#pullrequestreview-23059960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "927d78b7-65c4-4263-bdf0-8b5b26304fe6",
        "parentId" : null,
        "authorId" : "29909713-5424-4233-a02b-b02672141af4",
        "body" : "I see you've added the isFirst check in two places.  Does this test cover both (assuming your goal was to test both)?",
        "createdAt" : "2017-02-21T20:15:36Z",
        "updatedAt" : "2017-02-21T20:43:18Z",
        "lastEditedBy" : "29909713-5424-4233-a02b-b02672141af4",
        "tags" : [
        ]
      },
      {
        "id" : "450862ce-9c81-4bc7-8ea9-dbb04bb03041",
        "parentId" : "927d78b7-65c4-4263-bdf0-8b5b26304fe6",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Nope.  The first one (in the Route base class) is really more documentation that code.  We don't have any non-abstract Route subclasses that don't override that method.",
        "createdAt" : "2017-02-21T20:17:07Z",
        "updatedAt" : "2017-02-21T20:43:18Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "eca0cebe114627f41f3d9dc28d4d6dc688eb6ab2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +118,122 @@  });\n\n  testWidgets('Cannot pop the initial route', (WidgetTester tester) async {\n    await tester.pumpWidget(new MaterialApp(home: new Text('Home')));\n"
  },
  {
    "id" : "277d7864-9ab9-463c-91ee-74a1b9d7ba5b",
    "prId" : 12180,
    "prUrl" : "https://github.com/flutter/flutter/pull/12180#pullrequestreview-65586939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edcaf5c1-0737-492f-bd74-b8fae2f4adfe",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "What I meant was a test that actually verified that the Text of, say, an AppBar widget, or of a FlatButton, actually grew.",
        "createdAt" : "2017-09-26T17:07:58Z",
        "updatedAt" : "2017-10-02T20:02:31Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d6451d68-7efe-4e95-9695-934475570388",
        "parentId" : "edcaf5c1-0737-492f-bd74-b8fae2f4adfe",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Well, but shouldn't that be tested by a different test?  Seems like as long as the textScaleFactor changes in the media query, then this code has done its job.  Looks like the MediaQuery and Text/AppBar/FlatButton tests don't really do that kind of testing, however.  I'll see if I can add something there.",
        "createdAt" : "2017-09-26T21:25:01Z",
        "updatedAt" : "2017-10-02T20:02:31Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "96f59452-893c-43dd-8d62-782e6c0af21e",
        "parentId" : "edcaf5c1-0737-492f-bd74-b8fae2f4adfe",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't mind how many tests you write or how you split it up. :-)\r\n\r\nUntil now we've not done anything with textScaleFactor, so it's completely untested. We should verify that widgets get bigger when the font is scaled. We can test this as one end-to-end test or many tests that check each link in the chain, either way is fine by me.",
        "createdAt" : "2017-09-26T22:45:38Z",
        "updatedAt" : "2017-10-02T20:02:31Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e55d0491-6343-48bb-b09f-3b4f75f65f52",
        "parentId" : "edcaf5c1-0737-492f-bd74-b8fae2f4adfe",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "So, I tried adding a test to text_test.dart, and I'm perplexed.  Why does this fail at the expect for `largeSize.height`?  It thinks that text with scale factor 3.0 is the same size as text with a scale of 1.0 (14 px).\r\n\r\n```dart\r\n  testWidgets('Text respects textScaleFactor', (WidgetTester tester) async {\r\n    await tester.pumpWidget(const Center(\r\n        child: const Text('Hello', textScaleFactor: 3.0, textDirection: TextDirection.ltr)\r\n    ));\r\n\r\n    final RichText text = tester.firstWidget(find.byType(RichText));\r\n    expect(text.textScaleFactor, 3.0);\r\n    final Size largeSize = tester.getSize(find.byType(RichText));\r\n    expect(largeSize.height, equals(3.0 * 14.0));\r\n  });\r\n```\r\nIs this some issue with the Linux engine vs the regular engine?  Because text is clearly scaled on a device.  I just can't see how paragraph layout could work on the tests if it can't reliably determine the text size.\r\n\r\nNote that this doesn't even involve MediaQuery, so it doesn't have anything to do with that.",
        "createdAt" : "2017-09-26T22:51:25Z",
        "updatedAt" : "2017-10-02T20:02:31Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "328ab607-49a1-4061-ad9e-49be5c0c0a24",
        "parentId" : "edcaf5c1-0737-492f-bd74-b8fae2f4adfe",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Turns out that this is a bug in the way the default font size is handled. I fixed it and added some more tests.",
        "createdAt" : "2017-09-27T15:32:40Z",
        "updatedAt" : "2017-10-02T20:02:31Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9873770cdfc3e35457185073cfed7e047edf2776",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +314,318 @@        return new Container();\n      }),\n    ));\n    expect(textScaleFactor, isNotNull);\n    expect(textScaleFactor, equals(1.0));"
  }
]