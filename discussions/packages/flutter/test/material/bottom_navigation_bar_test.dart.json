[
  {
    "id" : "0f4a4e3c-e15b-445b-a439-be3ae9ebf2d4",
    "prId" : 13431,
    "prUrl" : "https://github.com/flutter/flutter/pull/13431#pullrequestreview-82036573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "044b81d2-a3be-4d7c-8941-5e8be6d5ba8b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "`<not a real comment>Ha, you even called this 'additional' padding here :)</>`",
        "createdAt" : "2017-12-07T23:46:49Z",
        "updatedAt" : "2017-12-08T01:54:06Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "8123745e-592b-4ddd-8cc5-c4ac9a2807e1",
        "parentId" : "044b81d2-a3be-4d7c-8941-5e8be6d5ba8b",
        "authorId" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "body" : "Stole the name and used it in place of `bottomPadding` internally.",
        "createdAt" : "2017-12-08T00:19:22Z",
        "updatedAt" : "2017-12-08T01:54:06Z",
        "lastEditedBy" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "03f80ead7b66ff8cafb61f2fd1de0563e5a183fb",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +90,94 @@\n    const double labelBottomMargin = 8.0; // _kBottomMargin in implementation.\n    const double additionalPadding = 40.0 - labelBottomMargin;\n    const double expectedHeight = kBottomNavigationBarHeight + additionalPadding;\n    expect(tester.getSize(find.byType(BottomNavigationBar)).height, expectedHeight);"
  },
  {
    "id" : "249c2e14-73fa-4d13-ac21-110f3d710ccc",
    "prId" : 22264,
    "prUrl" : "https://github.com/flutter/flutter/pull/22264#pullrequestreview-171814619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "439f9eac-c1eb-4f71-b016-4e1d3218968c",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "afaik you shouldn't need the duration in this call to `pump()` - does the test fail without it?",
        "createdAt" : "2018-11-05T16:51:59Z",
        "updatedAt" : "2018-11-07T13:41:01Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "3368b6a7-4d00-4321-9200-535fe1812ed6",
        "parentId" : "439f9eac-c1eb-4f71-b016-4e1d3218968c",
        "authorId" : "f2dcbaa2-d76d-46f1-bcd5-89a9dd5b21b2",
        "body" : "So `.pumpAndSettle()` has a default duration of 100ms, but `.pump()` doesn't have a default duration. Whenever I did it without defining a duration, all the goldens generated were the same image, and they were all the first frame. So it seems that without a duration, the animation never occurs because it loops through them all instantly and never tests past the first frame.",
        "createdAt" : "2018-11-05T23:53:05Z",
        "updatedAt" : "2018-11-07T13:41:01Z",
        "lastEditedBy" : "f2dcbaa2-d76d-46f1-bcd5-89a9dd5b21b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "212519b2aaeb5c726500f6af451a6ade80d86c90",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +825,829 @@\n    for (int pump = 0; pump < 8; pump++) {\n      await tester.pump(const Duration(milliseconds: 30));\n      await expectLater(\n        find.byType(BottomNavigationBar),"
  },
  {
    "id" : "e8d3b041-571b-4758-8c21-7df56f2b3a1a",
    "prId" : 31018,
    "prUrl" : "https://github.com/flutter/flutter/pull/31018#pullrequestreview-228432158",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df22e606-ac10-4515-9c74-2eb3eb5c278a",
        "parentId" : null,
        "authorId" : "6cff55ea-5671-4703-a864-79795e21a275",
        "body" : "Why does this test look at a transform matrix? Is there a less implementation-specific way to test the font size ratio?",
        "createdAt" : "2019-04-17T14:23:46Z",
        "updatedAt" : "2019-05-02T03:00:26Z",
        "lastEditedBy" : "6cff55ea-5671-4703-a864-79795e21a275",
        "tags" : [
        ]
      },
      {
        "id" : "90040c4a-d92b-4b65-b750-3dda3e7f9c4b",
        "parentId" : "df22e606-ac10-4515-9c74-2eb3eb5c278a",
        "authorId" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "body" : "We have to do this because the fontsize for unselected text items is never actually updated. The animations are accomplished smoothly by applying a transform to the text widgets. \r\n\r\nThe only way that I know of to verify the size of the unselected text items is to verify that the transform is correctly applied.",
        "createdAt" : "2019-04-17T20:27:47Z",
        "updatedAt" : "2019-05-02T03:00:26Z",
        "lastEditedBy" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "tags" : [
        ]
      },
      {
        "id" : "7ad295d9-0a5b-4f23-8f22-46d0de88ae84",
        "parentId" : "df22e606-ac10-4515-9c74-2eb3eb5c278a",
        "authorId" : "209f805a-621a-40dd-b493-fb897c4b0bcb",
        "body" : "I wish they were just lerping.",
        "createdAt" : "2019-04-18T18:11:19Z",
        "updatedAt" : "2019-05-02T03:00:26Z",
        "lastEditedBy" : "209f805a-621a-40dd-b493-fb897c4b0bcb",
        "tags" : [
        ]
      }
    ],
    "commit" : "67cfd5a3e3d9827808c619505367bd4641946874",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +194,198 @@    final TextStyle selectedFontStyle = tester.renderObject<RenderParagraph>(find.text('AC')).text.style;\n    expect(selectedFontStyle.fontSize, equals(selectedTextStyle.fontSize));\n    expect(\n      tester.firstWidget<Transform>(find.ancestor(of: find.text('Alarm'), matching: find.byType(Transform))).transform,\n      equals(Matrix4.diagonal3(Vector3.all(unselectedTextStyle.fontSize / selectedTextStyle.fontSize))),"
  },
  {
    "id" : "64a0530a-4132-46b9-a450-5ad0ea74307b",
    "prId" : 31018,
    "prUrl" : "https://github.com/flutter/flutter/pull/31018#pullrequestreview-229242437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ed20a60-80db-422d-9515-1b23dde477f8",
        "parentId" : null,
        "authorId" : "209f805a-621a-40dd-b493-fb897c4b0bcb",
        "body" : "I was told you can drop the `.0` now if the analyzer can figure out the type implicitly.",
        "createdAt" : "2019-04-18T18:01:50Z",
        "updatedAt" : "2019-05-02T03:00:26Z",
        "lastEditedBy" : "209f805a-621a-40dd-b493-fb897c4b0bcb",
        "tags" : [
        ]
      },
      {
        "id" : "94b0dc76-3f1f-43c5-8ace-e203911b5473",
        "parentId" : "0ed20a60-80db-422d-9515-1b23dde477f8",
        "authorId" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "body" : "Dart supports this feature, but as far as I have seen, the flutter framework code has not switched over to this pattern yet. I'd imagine it will be done as a bulk change similar to when the `new` keyword became optional.  ",
        "createdAt" : "2019-04-22T20:56:59Z",
        "updatedAt" : "2019-05-02T03:00:26Z",
        "lastEditedBy" : "b050a012-8ac0-4fb8-8058-231ac0263df1",
        "tags" : [
        ]
      }
    ],
    "commit" : "67cfd5a3e3d9827808c619505367bd4641946874",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +126,130 @@\n  testWidgets('Custom selected and unselected font styles', (WidgetTester tester) async {\n    const TextStyle selectedTextStyle = TextStyle(fontWeight: FontWeight.w200, fontSize: 18.0);\n    const TextStyle unselectedTextStyle = TextStyle(fontWeight: FontWeight.w600, fontSize: 12.0);\n"
  },
  {
    "id" : "ff5890c6-a944-413e-9b1c-4303c4e3f7d6",
    "prId" : 59127,
    "prUrl" : "https://github.com/flutter/flutter/pull/59127#pullrequestreview-439340325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff2c2439-47f7-4dd9-8973-eabd0a483769",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I am surprised that this works because the test doesn't turn on semantics. Maybe I am missing something...",
        "createdAt" : "2020-06-29T16:44:50Z",
        "updatedAt" : "2020-08-13T21:19:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "46ba29eb-86dc-461d-8b05-b1c4ec82c3ad",
        "parentId" : "ff2c2439-47f7-4dd9-8973-eabd0a483769",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Oh, wait. I think a while ago we turned on semantics by default for all tests. That's why the test is probably fine with this.",
        "createdAt" : "2020-06-29T16:49:36Z",
        "updatedAt" : "2020-08-13T21:19:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "e0cb366d-5026-4180-aace-319666b28c09",
        "parentId" : "ff2c2439-47f7-4dd9-8973-eabd0a483769",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The test probably fails if you turn semantics off for it here: https://github.com/flutter/flutter/blob/812c189de8a2d09cb6f52dc1f5186b33f451f837/packages/flutter_test/lib/src/widget_tester.dart#L116",
        "createdAt" : "2020-06-29T17:07:40Z",
        "updatedAt" : "2020-08-13T21:19:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d707ca7f9ce2f866b0a58a44977e5fd43d584c0",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +1143,1147 @@    expect(find.text(label), findsOneWidget);\n    await tester.longPress(find.text(label));\n    expect(find.text(label), findsNWidgets(2));\n    expect(tester.getSize(find.text(label).last), equals(const Size(42.0, 14.0)));\n    await tester.pumpAndSettle(const Duration(seconds: 2));"
  }
]