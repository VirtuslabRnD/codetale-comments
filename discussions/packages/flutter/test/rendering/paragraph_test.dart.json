[
  {
    "id" : "942a96e8-386b-461b-9271-94b8e7b26e4d",
    "prId" : 10954,
    "prUrl" : "https://github.com/flutter/flutter/pull/10954#pullrequestreview-46308160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1967dfbf-1a13-46d0-bde4-c0010858a4cf",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "can you add a TODO(ianh) to fix this?",
        "createdAt" : "2017-06-24T00:43:43Z",
        "updatedAt" : "2017-06-27T17:06:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a67ca05f-ae7a-4514-b014-9743d5f5a2c8",
        "parentId" : "1967dfbf-1a13-46d0-bde4-c0010858a4cf",
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "Added TODO(jacobr) because I'm about to send you a CL that incidentally fixes this issue.",
        "createdAt" : "2017-06-26T16:07:02Z",
        "updatedAt" : "2017-06-27T17:06:48Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b8706b3fb91c40482dbb32e5b5620bd30fc1e97",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +197,201 @@        '   ║ TextSpan:\\n'\n        '   ║   \"I polished up that handle so carefullee\\n'\n        'That now I am the Ruler of the Queen\\'s Navee!\"\\n'\n        '   ╚═══════════\\n'\n        '\\n',"
  },
  {
    "id" : "3b88573f-d6be-4a03-a057-b2d10b495e72",
    "prId" : 12180,
    "prUrl" : "https://github.com/flutter/flutter/pull/12180#pullrequestreview-65737294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56a7b439-c90c-4dd0-8f74-46170abf22fc",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(I personally prefer `i += 1`, but that's not a Flutter style issue. Feel free to leave it as `++i`.)",
        "createdAt" : "2017-09-27T18:19:20Z",
        "updatedAt" : "2017-10-02T20:02:31Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f78bdc64-e557-4118-a6b7-3eda41ed2b5e",
        "parentId" : "56a7b439-c90c-4dd0-8f74-46170abf22fc",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "You learned loops from python, didn't you... I'm a C++ guy, so `++i` is the right answer. :-)",
        "createdAt" : "2017-09-27T23:20:37Z",
        "updatedAt" : "2017-10-02T20:02:31Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "0c58c887-1623-444e-85b6-419aec958273",
        "parentId" : "56a7b439-c90c-4dd0-8f74-46170abf22fc",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I learnt from Pascal, where it's spelt `Inc(Index);`. :-)\r\n\r\nI'm averse to `++i` because it looks like an expression but is a statement with an effect. In general I prefer expressions to be side-effect free, because side-effects are a bug factory.",
        "createdAt" : "2017-09-28T02:17:49Z",
        "updatedAt" : "2017-10-02T20:02:31Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9873770cdfc3e35457185073cfed7e047edf2776",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +260,264 @@    final List<ui.TextBox> boxes = <ui.TextBox>[];\n    final String text = testSpan.toStringDeep();\n    for (int i = 0; i < text.length; ++i) {\n      boxes.addAll(paragraph.getBoxesForSelection(\n          new TextSelection(baseOffset: i, extentOffset: i + 1)"
  },
  {
    "id" : "bec5b0d7-20ee-43dd-8393-e528fe7b924d",
    "prId" : 12612,
    "prUrl" : "https://github.com/flutter/flutter/pull/12612#pullrequestreview-71712696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba5483ed-33bc-42c7-b4bf-0bcc80de4a4f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this seems wrong to me. Why would 26 be the right answer?\r\nThis just seems like a bug in libtxt.",
        "createdAt" : "2017-10-24T23:50:58Z",
        "updatedAt" : "2017-10-24T23:50:58Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8961f9a1-2415-428b-9cdf-9490ebee7e73",
        "parentId" : "ba5483ed-33bc-42c7-b4bf-0bcc80de4a4f",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "libtxt doesn't track the height of each individual glyph in a line.\r\n\r\nThe rectangle returned by libtxt's version of getBoxesForRange will have a height matching the height of the entire line (similar to the rectangle typically used when highlighting a selection in a browser or text editor)\r\n",
        "createdAt" : "2017-10-24T23:57:53Z",
        "updatedAt" : "2017-10-24T23:57:53Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      },
      {
        "id" : "de2939b8-1721-4de4-bbb8-3298cd234072",
        "parentId" : "ba5483ed-33bc-42c7-b4bf-0bcc80de4a4f",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "It's not each glyph per se, it's each text span (notice how \"b\" and \"c\" in this test have the same box). We're going to need to track that so that we can draw backgrounds behind each span of text.\r\n\r\nIt presumably does track the height of each text span since the height of each text span is just the fontSize of that span. The bottom of the rectangle is baseline+descent, the top is baseline-ascent.",
        "createdAt" : "2017-10-25T00:25:14Z",
        "updatedAt" : "2017-10-25T00:25:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "02ef6fae101d0889047aaf714e63b34962849230",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +275,279 @@    // TODO: remove this when Blink is replaced.\n    expect(boxes[0].toRect().width, anyOf(14.0, 13.0));\n    expect(boxes[0].toRect().height, anyOf(13.0, 26.0));\n    expect(boxes[1].toRect().width, anyOf(27.0, 26.0));\n    expect(boxes[1].toRect().height, 26.0);"
  },
  {
    "id" : "40cea7a2-f4a1-43f4-92e3-2ac9f550ddc6",
    "prId" : 14004,
    "prUrl" : "https://github.com/flutter/flutter/pull/14004#pullrequestreview-87729237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d92f7c32-b489-481c-b6bb-87449d17dc4d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "btw, you can use moreOrLessEquals instead of closeTo if you don't want to specify the 0.0001 explicitly (up to you)",
        "createdAt" : "2018-01-10T04:20:35Z",
        "updatedAt" : "2018-01-10T04:20:35Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecfc2937f35b2887ac5eea3815053ee98a5d62a9",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +273,277 @@    // text rendering is replaced.\n    expect(boxes[0].toRect().width, anyOf(14.0, 13.0));\n    expect(boxes[0].toRect().height, closeTo(13.0, 0.0001));\n    expect(boxes[1].toRect().width, anyOf(27.0, 26.0));\n    expect(boxes[1].toRect().height, closeTo(26.0, 0.0001));"
  },
  {
    "id" : "c6d7f7fb-424b-481e-bab6-55687d8569c6",
    "prId" : 65150,
    "prUrl" : "https://github.com/flutter/flutter/pull/65150#pullrequestreview-484648099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38a95873-5655-460c-81c1-abe2cb7398a3",
        "parentId" : null,
        "authorId" : "85bfbd30-560e-4ca6-a9a6-c98071096909",
        "body" : "Per @Hixie suggestion I updated this test to be more strict in comparing expected value.",
        "createdAt" : "2020-09-09T04:13:03Z",
        "updatedAt" : "2020-09-09T14:44:08Z",
        "lastEditedBy" : "85bfbd30-560e-4ca6-a9a6-c98071096909",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed6604d42cefda4c750baa91bb1fc17ef979a7c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +45,49 @@\n    final double height5 = paragraph.getFullHeightForCaret(const TextPosition(offset: 5));\n    expect(height5, equals(10.0));\n  });\n"
  },
  {
    "id" : "8a9bfdd7-f520-4f0b-9095-0234eea775d3",
    "prId" : 87183,
    "prUrl" : "https://github.com/flutter/flutter/pull/87183#pullrequestreview-717826013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0471591-d7fa-4ccd-89ea-29519a656e52",
        "parentId" : null,
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Thank you for these tests! If you have the time, it would be great to also add a version of this test with the values at default tight, just to ensure the baseline values are different than when the property is set to max.",
        "createdAt" : "2021-07-29T05:58:21Z",
        "updatedAt" : "2021-07-29T05:58:21Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "85cd8685-df92-4182-9781-bb808ec8ab99",
        "parentId" : "c0471591-d7fa-4ccd-89ea-29519a656e52",
        "authorId" : "56bfac58-1da2-4832-9b1d-20a2dfb4a4d7",
        "body" : "Done! I created a separate test that does this with the default parameters, but I ended up changing the font-size to 5 instead of 8 because of an issue with floating-point rounding when using 8. Specifically, if you run the old test but with tight boxes, then the second box should have top 1.6 and bottom 9.6, but (at least on my machine) they come out as 1.5999999046325684 etc. instead. With font-size 5 this doesn't seem to happen. This makes the `expect(boxes[1], ...)` check more awkward. Let me know if you'd prefer to keep the font-size 8 version, with some `moreOrLessEquals` tests instead.",
        "createdAt" : "2021-07-29T08:23:31Z",
        "updatedAt" : "2021-07-29T08:23:31Z",
        "lastEditedBy" : "56bfac58-1da2-4832-9b1d-20a2dfb4a4d7",
        "tags" : [
        ]
      },
      {
        "id" : "c9643697-0438-4fab-973b-b8fd17c09c43",
        "parentId" : "c0471591-d7fa-4ccd-89ea-29519a656e52",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Changing to 5 is fine! As long as it is tested :)",
        "createdAt" : "2021-07-29T08:41:07Z",
        "updatedAt" : "2021-07-29T08:41:07Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "19585fc7093505cac0b2240618362e4741f639e8",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +211,215 @@    final List<ui.TextBox> boxes = paragraph.getBoxesForSelection(\n      const TextSelection(baseOffset: 0, extentOffset: 36),\n      boxHeightStyle: ui.BoxHeightStyle.max,\n      boxWidthStyle: ui.BoxWidthStyle.max,\n    );"
  }
]