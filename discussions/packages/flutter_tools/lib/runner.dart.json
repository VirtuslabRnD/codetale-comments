[
  {
    "id" : "a4245bb3-654b-44c7-86e8-d4410018315c",
    "prId" : 34081,
    "prUrl" : "https://github.com/flutter/flutter/pull/34081#pullrequestreview-247457361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fc21013-89fc-49e9-89a6-30d21d559044",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "This will make the outer call to `runZoned()` return null, correct?  Should we wrap that null in a non-zero synthetic exit code?",
        "createdAt" : "2019-06-08T05:18:44Z",
        "updatedAt" : "2019-06-10T05:40:16Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "04e4ebb9-e198-410a-be56-63059804f768",
        "parentId" : "3fc21013-89fc-49e9-89a6-30d21d559044",
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "I don't think so: `_handleToolError` invoked from this `onError` handler will terminate the flutter with exit code derived from what kind error the `error` is(ToolExit, ProcessExit, something unexpected).\r\n\r\nIf we end up in `onError`, then `runZoned()` returned a future that never completes because of unhandled exception.",
        "createdAt" : "2019-06-09T05:41:29Z",
        "updatedAt" : "2019-06-10T05:40:16Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      },
      {
        "id" : "19dd6e66-48ca-4324-a88b-74a1f7cbc8ed",
        "parentId" : "3fc21013-89fc-49e9-89a6-30d21d559044",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "It'll call `exit()`, but that can be [overridden for tests](https://github.com/flutter/flutter/blob/d198e3871f966259bc1fee375260f5a6032e99d1/packages/flutter_tools/lib/src/base/io.dart#L101).  I'm just curious what the return value of `run()` will be in that case.",
        "createdAt" : "2019-06-09T06:04:21Z",
        "updatedAt" : "2019-06-10T05:40:16Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "c4ab1689-ce5f-4a62-bed5-b1128d68c530",
        "parentId" : "3fc21013-89fc-49e9-89a6-30d21d559044",
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "we only end up in `onError` through async callback/flow, and that flow won't affect `runZoned` return-value. We might have used `Completer` or something similar to communicate between this callback and method that `runZoned` is executing, but that seems unnecessary - we can simply exit the tool.",
        "createdAt" : "2019-06-10T05:45:46Z",
        "updatedAt" : "2019-06-10T05:46:17Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      }
    ],
    "commit" : "2507a0207abb4d14592cb2ed1019dda671c041eb",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +67,71 @@      }\n    }, onError: (Object error, StackTrace stackTrace) async {\n      await _handleToolError(\n          error, stackTrace, verbose, args, reportCrashes, getVersion);\n    });"
  },
  {
    "id" : "338bcb07-3af3-4484-ad1c-d8d3622396f0",
    "prId" : 34081,
    "prUrl" : "https://github.com/flutter/flutter/pull/34081#pullrequestreview-247456545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d925719-0999-469c-821b-14f41f9d5721",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "We should replicate the case this is guarding against in a test.",
        "createdAt" : "2019-06-09T06:04:47Z",
        "updatedAt" : "2019-06-10T05:40:16Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "04732e3e-11ad-48ff-987f-c42f0b591cbb",
        "parentId" : "3d925719-0999-469c-821b-14f41f9d5721",
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "Done",
        "createdAt" : "2019-06-10T05:41:00Z",
        "updatedAt" : "2019-06-10T05:41:00Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      }
    ],
    "commit" : "2507a0207abb4d14592cb2ed1019dda671c041eb",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +58,62 @@\n    String getVersion() => flutterVersion ?? FlutterVersion.instance.getVersionString(redactUnknownBranches: true);\n    return await runZoned<Future<int>>(() async {\n      try {\n        await runner.run(args);"
  },
  {
    "id" : "8287f6d5-94fe-4303-898c-d4eccd2ff6e1",
    "prId" : 45360,
    "prUrl" : "https://github.com/flutter/flutter/pull/45360#pullrequestreview-321203599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2be44e06-f194-4567-9285-eabedb184ac2",
        "parentId" : null,
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "Keeping this vanilla and bland: something Bad is happening.",
        "createdAt" : "2019-11-21T21:36:17Z",
        "updatedAt" : "2019-11-26T18:58:24Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "6003b5142de0bd09c5c7110137c59c4eeb57c988",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +138,142 @@      return _exit(1);\n    } catch (error) {\n      stderr.writeln(\n        'Unable to generate crash report due to secondary error: $error\\n'\n            'please let us know at https://github.com/flutter/flutter/issues.',"
  }
]