[
  {
    "id" : "6f07c6a3-81ac-408e-ac60-008d03c8688f",
    "prId" : 51246,
    "prUrl" : "https://github.com/flutter/flutter/pull/51246#pullrequestreview-363801237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f416cb8-0835-424f-ab94-8f70b8381fc0",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Rather than using the global file system, I would inject a fileSystem instance in the constructor. We've been trying to update many of the tool interfaces to work this way, because it makes it easier to tell what these classes depend on for testing",
        "createdAt" : "2020-02-25T00:09:59Z",
        "updatedAt" : "2020-02-25T21:23:12Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "3130a411-465d-4c5d-b857-03705b4548e0",
        "parentId" : "3f416cb8-0835-424f-ab94-8f70b8381fc0",
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "Done. Should I do the same thing for the stand-alone solution file utility function (as a parameter of the function)? It's a bit ugly as I'd need to plumb it through some helper calls, unless I wrap the whole thing in a class (which I can certainly do if that's the preferred structure going forward).",
        "createdAt" : "2020-02-25T00:33:22Z",
        "updatedAt" : "2020-02-25T21:23:12Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      },
      {
        "id" : "bc270f8a-8139-4486-979f-ed27d4108294",
        "parentId" : "3f416cb8-0835-424f-ab94-8f70b8381fc0",
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "Sorry, didn't see your later messages until now. Will rework this now.",
        "createdAt" : "2020-02-25T00:42:12Z",
        "updatedAt" : "2020-02-25T21:23:12Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      }
    ],
    "commit" : "cee5566b34e6130bdb32beb27ac6895d525ac368",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@/// A utility class for interacting with Visual Studio project files (e.g.,\n/// .vcxproj).\nclass VisualStudioProject {\n  /// Creates a project object from the project file at [file].\n  VisualStudioProject(this.file, {"
  },
  {
    "id" : "26eed548-e538-4f03-b284-d85c2e54590b",
    "prId" : 51246,
    "prUrl" : "https://github.com/flutter/flutter/pull/51246#pullrequestreview-363798162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df4acf06-0ac7-4f0d-aa87-2f81540460c2",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I would cache the `guid` and `name` fields and lazily calculate them on demand. The usual pattern is something like:\r\n\r\n```\r\nString _field;\r\nString get field {\r\n  return _filed ??= _computeField();\r\n}\r\n```",
        "createdAt" : "2020-02-25T00:11:17Z",
        "updatedAt" : "2020-02-25T21:23:12Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "194e4793-709f-4a3a-837e-3b95a348e2d5",
        "parentId" : "df4acf06-0ac7-4f0d-aa87-2f81540460c2",
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "Done. (The guid caching won't actually cache on failure, but failure should only happen if someone has done something truly bizarre to their project file so I didn't think it was worth trying to optimize that failure case.)",
        "createdAt" : "2020-02-25T00:38:29Z",
        "updatedAt" : "2020-02-25T21:23:12Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      }
    ],
    "commit" : "cee5566b34e6130bdb32beb27ac6895d525ac368",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@\n  /// Returns the ProjectGuid for the project, or null if it's not present.\n  String get guid {\n    return _guid ??= _findGuid();\n  }"
  }
]