[
  {
    "id" : "25572792-593c-4314-8130-89f7413c926a",
    "prId" : 4324,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "827c844f-af03-4025-834e-6a92eb370ab7",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "If we make the host port optional, then when we do forwarding we can bind to whatever's available, and the bound port returned in the json result.\n",
        "createdAt" : "2016-06-02T18:39:11Z",
        "updatedAt" : "2016-06-02T20:04:18Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "92c6b829-f678-433c-b6d4-6f049cf752e9",
        "parentId" : "827c844f-af03-4025-834e-6a92eb370ab7",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "done\n",
        "createdAt" : "2016-06-02T20:03:11Z",
        "updatedAt" : "2016-06-02T20:04:18Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8b221d315805c450f295723c8e34fe5bf74a453",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +408,412 @@    int devicePort = args['devicePort'];\n\n    if (args['hostPort'] is! int)\n      throw 'hostPort is required';\n    int hostPort = args['hostPort'];"
  },
  {
    "id" : "c9de2df3-4385-4bf9-948b-9ba751465afd",
    "prId" : 4385,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3f35533-d9ca-4eec-b07a-d6a006f0ca80",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I'd either use type names (`int`, `String`, `bool`) or their semantic names (integer, string, boolean), but I wouldn't mix them. I think I prefer type names.\n",
        "createdAt" : "2016-06-07T17:57:31Z",
        "updatedAt" : "2016-06-07T19:04:09Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "e00a4dab-edd1-4aff-a047-0b14e6c0303d",
        "parentId" : "a3f35533-d9ca-4eec-b07a-d6a006f0ca80",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "renamed to be type names\n",
        "createdAt" : "2016-06-07T18:39:14Z",
        "updatedAt" : "2016-06-07T19:04:09Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f613119e8734c5ef67436670ee7049bcb3674acb",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +217,221 @@    dynamic val = args[name];\n    if (val != null && val is! int)\n      throw \"$name is not an int\";\n    return val;\n  }"
  },
  {
    "id" : "6103b0f8-ace6-4e9c-a343-68e9f43ff124",
    "prId" : 4385,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4721ffc6-f36a-486c-82f3-d93e59b96aab",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "This looks like a good place to keep connectivity info also, such as observatory/diagnostic ports and log streams.\n",
        "createdAt" : "2016-06-07T18:01:16Z",
        "updatedAt" : "2016-06-07T19:04:09Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "c8e75731-a7c1-4740-b0d4-4c0c13ce0946",
        "parentId" : "4721ffc6-f36a-486c-82f3-d93e59b96aab",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Much of that is stored in the `RunAndStayResident` class, which is the common code between the `flutter run` and the daemon mode's `app.start`.\n",
        "createdAt" : "2016-06-07T18:45:36Z",
        "updatedAt" : "2016-06-07T19:04:09Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f613119e8734c5ef67436670ee7049bcb3674acb",
    "line" : 411,
    "diffHunk" : "@@ -1,1 +555,559 @@\n/// A running application, started by this daemon.\nclass AppInstance {\n  AppInstance(this.id, [this.runner]);\n"
  },
  {
    "id" : "8c600b40-c377-46d8-b1a5-02f0f31da80e",
    "prId" : 4513,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7490223b-f6ba-4d2e-8cd0-5e6c5b0ee74e",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Looks like `stop` can simply call `cancel`.\n",
        "createdAt" : "2016-06-13T16:35:18Z",
        "updatedAt" : "2016-06-13T19:56:16Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "d96c27f5-b084-4495-b1d8-662f56b754e6",
        "parentId" : "7490223b-f6ba-4d2e-8cd0-5e6c5b0ee74e",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "done! (moved into a common _sendFinished() method)\n",
        "createdAt" : "2016-06-13T19:54:06Z",
        "updatedAt" : "2016-06-13T19:56:16Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ae1eddf84c9115fcd83061db1cb509036db4f6",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +652,656 @@  void stop({ bool showElapsedTime: false }) {\n    _sendFinished();\n  }\n\n  @override"
  },
  {
    "id" : "3085c81f-a66b-414a-b60d-e25e79573ee1",
    "prId" : 5321,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "Hot mode makes the distinction between reload and restart and that really matters for the user experience. Can this distinction be made here?\n",
        "createdAt" : "2016-08-10T20:37:46Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "b6121d12-45c1-4e01-bfb6-1fcc832e041f",
        "parentId" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Yup, we can parameterize the `app.restart` call; I can add that in this PR.\n",
        "createdAt" : "2016-08-11T14:21:09Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "46815842-29f5-4447-a879-5982b672c8d8",
        "parentId" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "So some other notes on this. Hot mode needs to keep a state machine (I am in the process of implementing this now) of what is currently supported by the running program:\n- restart is always supported\n\nafter a start/restart:\n- initially hot reload is supported\n- if the isolate hits an unhandled exception, hot reload is disabled until the application is restarted\n\nThe IDE will need to react by dimming/undimming the reload button depending on the state. How do you want the runner to advertise to the IDE the changes in these states over time?\n",
        "createdAt" : "2016-08-11T14:40:28Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "dbf1bff3-87fe-41de-9338-e6b515e9306c",
        "parentId" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "When a user issues a reload, that will be when the state could change from supported ==> not supported? The response from an app.restart command is currently just a boolean. We could change that to a more structured response: bool for success, a message if there's a failure (`Unsupported change to ...`), and another bool to say whether any future reloads will succeed. It would then be up to the user (or the IDE) to issue a restart in order to reset the hot reload state.\n",
        "createdAt" : "2016-08-11T14:58:58Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "a8960c6d-a0e5-4bb4-9982-a0726bde01a6",
        "parentId" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "That seems simplest - adding more info to the return value of app.restart. We could instead fire async events - like we do for the debug port value, or stdout messages. But that would probably only make sense if the state could change at any time.\n",
        "createdAt" : "2016-08-11T15:00:42Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "1328f285-dced-4270-b7fd-c363665c802b",
        "parentId" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "An isolate can hit an unhandled exception error at anytime, when that happens reload needs to be disabled until a full restart occurs.\n",
        "createdAt" : "2016-08-11T15:48:04Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      }
    ],
    "commit" : "679b9015d65f5c0f15720e04e2f983266a218a49",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +340,344 @@    }\n\n    bool supportsRestart = hotMode ? device.supportsHotMode : device.supportsRestart;\n\n    AppInstance app = new AppInstance(_getNextAppId(), runner);"
  },
  {
    "id" : "d1b1c0ca-82e4-4a72-8b6b-b3bd5a204c3d",
    "prId" : 6992,
    "prUrl" : "https://github.com/flutter/flutter/pull/6992#pullrequestreview-9909265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5bb97a8-d817-408e-9b30-5329378f41e8",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "Just send the Uri. The port can be derived from it.",
        "createdAt" : "2016-11-23T03:19:15Z",
        "updatedAt" : "2016-11-28T14:58:13Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "077e5252-f969-4dcf-bd1e-63ea545e739f",
        "parentId" : "c5bb97a8-d817-408e-9b30-5329378f41e8",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "We need to send the port for a while for compatibility with old clients; sending both gives a grace period where old can work with new and vice versa.",
        "createdAt" : "2016-11-23T16:23:22Z",
        "updatedAt" : "2016-11-28T14:58:13Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "4f7b15a3-dfc9-4d04-816a-099529995dd9",
        "parentId" : "c5bb97a8-d817-408e-9b30-5329378f41e8",
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "Acknowledged. Let's file a bug about legacy clients and add a TODO here.",
        "createdAt" : "2016-11-23T17:24:45Z",
        "updatedAt" : "2016-11-28T14:58:13Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      }
    ],
    "commit" : "d83f0cc539f01b79dd8c6ebc558c09127dedf870",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +360,364 @@      connectionInfoCompleter.future.then((DebugConnectionInfo info) {\n        Map<String, dynamic> params = <String, dynamic>{\n          'port': info.httpUri.port,\n          'wsUri': info.wsUri.toString(),\n        };"
  },
  {
    "id" : "f37ccc3a-6707-43c3-acc3-f4917cdb7c16",
    "prId" : 7061,
    "prUrl" : "https://github.com/flutter/flutter/pull/7061#pullrequestreview-10873848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a81f7d0d-7c21-48bc-9322-336c5f7df7e6",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "I forget if this is for the future or CL or not but you only need to pass 1 Uri here. Everything else (scheme differences, ports) can be derived on the other end.",
        "createdAt" : "2016-11-29T17:10:42Z",
        "updatedAt" : "2016-12-01T01:11:37Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "c6bdbf24-5d22-4286-848f-e1d9749c95d7",
        "parentId" : "a81f7d0d-7c21-48bc-9322-336c5f7df7e6",
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "Future work. https://github.com/flutter/flutter/issues/7050",
        "createdAt" : "2016-11-30T23:32:33Z",
        "updatedAt" : "2016-12-01T01:11:37Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4d39b0379cdd667e3822d069709d6d2c6c6d947",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +360,364 @@      connectionInfoCompleter.future.then((DebugConnectionInfo info) {\n        Map<String, dynamic> params = <String, dynamic>{\n          'port': info.httpUri.port,\n          'wsUri': info.wsUri.toString(),\n        };"
  },
  {
    "id" : "69eef1e8-e6c4-451b-af69-c9d868156ec0",
    "prId" : 7183,
    "prUrl" : "https://github.com/flutter/flutter/pull/7183#pullrequestreview-11877569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c4c3233-4a44-430e-aade-e51eae3045fd",
        "parentId" : null,
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "This line and the `print(...` statement above seem to be at odds...\r\none bypasses the zone while the other does not.\r\n\r\nShould this line be `printError(...` rather than `stderr.writeln` so that the zone captures the output?\r\nOr should the `print(...` statement above be `stdout.writeln` so that it bypasses the zone?",
        "createdAt" : "2016-12-07T17:48:50Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      },
      {
        "id" : "fef354a5-6950-4c5c-bead-66acef807cab",
        "parentId" : "4c4c3233-4a44-430e-aade-e51eae3045fd",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "It's asymmetric. I would like the first statement to read `stdout.writeln` - for symmetry with the next one - but I need it to be a print(), so we can capture print output in a zone when running tests, in order to test this functionality.",
        "createdAt" : "2016-12-07T19:29:25Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "481ba4db-2555-4025-98bb-d9193c2768fb",
        "parentId" : "4c4c3233-4a44-430e-aade-e51eae3045fd",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "I'll add a comment to that effect?",
        "createdAt" : "2016-12-07T19:30:16Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "387f4a127c43e4cdcc478c45f482ae58ecb824b9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +235,239 @@          print(message.message);\n        } else if (message.level == 'error') {\n          stderr.writeln(message.message);\n          if (message.stackTrace != null)\n            stderr.writeln(message.stackTrace.toString().trimRight());"
  },
  {
    "id" : "477a2fe1-e937-4a9f-883a-29952bbb997b",
    "prId" : 7183,
    "prUrl" : "https://github.com/flutter/flutter/pull/7183#pullrequestreview-11877424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd369d52-ee97-4372-bc3e-c38d92683e69",
        "parentId" : null,
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "ditto.",
        "createdAt" : "2016-12-07T17:48:53Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      },
      {
        "id" : "114c90ec-e33f-45af-a230-aff54cb0d752",
        "parentId" : "cd369d52-ee97-4372-bc3e-c38d92683e69",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "ditto :)",
        "createdAt" : "2016-12-07T19:29:37Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "387f4a127c43e4cdcc478c45f482ae58ecb824b9",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +237,241 @@          stderr.writeln(message.message);\n          if (message.stackTrace != null)\n            stderr.writeln(message.stackTrace.toString().trimRight());\n        }\n      } else {"
  },
  {
    "id" : "c1b1aae9-106e-4141-b577-3af6f8ac62b7",
    "prId" : 7183,
    "prUrl" : "https://github.com/flutter/flutter/pull/7183#pullrequestreview-11856612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2e5bf9f-97cb-498c-a6f9-86ee028ce92f",
        "parentId" : null,
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "Similar to my earlier comment about `print(...` and `stderr.writeln(...`, should this statement be `stdout.writeln(...`?",
        "createdAt" : "2016-12-07T17:53:17Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "387f4a127c43e4cdcc478c45f482ae58ecb824b9",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +729,733 @@  void printStatus(String message, { bool emphasis: false, bool newline: true, String ansiAlternative }) {\n    if (logToStdout) {\n      print(message);\n    } else {\n      _sendLogEvent(<String, dynamic>{ 'log': message });"
  },
  {
    "id" : "f36d6a11-3712-42ee-a6e3-3c233d9e5cd3",
    "prId" : 7554,
    "prUrl" : "https://github.com/flutter/flutter/pull/7554#pullrequestreview-17709997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4580165-1d16-4fc8-9518-a871bd7a3d70",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "What is a `CommandHandler`? Is it something specified on the command-line?",
        "createdAt" : "2017-01-20T00:45:23Z",
        "updatedAt" : "2017-01-20T16:25:08Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "d923d8ee-2617-443a-a92b-e2f1eb83ab94",
        "parentId" : "d4580165-1d16-4fc8-9518-a871bd7a3d70",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "It's a typedef used specifically for the daemon protocol's domains to handle json-rpc calls.",
        "createdAt" : "2017-01-20T16:17:37Z",
        "updatedAt" : "2017-01-20T16:25:08Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c970c125e8f7ec598ab7d9896cb5a492e2e0dd",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +282,286 @@    registerHandler('start', start);\n    registerHandler('restart', restart);\n    registerHandler('callServiceExtension', callServiceExtension);\n    registerHandler('stop', stop);\n    registerHandler('discover', discover);"
  },
  {
    "id" : "d50415e1-dfae-43e8-8f9a-928c19e95137",
    "prId" : 9617,
    "prUrl" : "https://github.com/flutter/flutter/pull/9617#pullrequestreview-34974524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97224f30-76eb-4e3c-ba9b-1ed41d828817",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why are we using a map here instead of a structured class? it would have caught this problem.",
        "createdAt" : "2017-04-26T21:13:23Z",
        "updatedAt" : "2017-04-26T21:13:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "22715e6a-d1b8-4847-a336-ee3d2a82c071",
        "parentId" : "97224f30-76eb-4e3c-ba9b-1ed41d828817",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "@Hixie so that it's natively encodable into JSON, which is apparently how we communicate info to our IntelliJ plugin",
        "createdAt" : "2017-04-26T21:23:30Z",
        "updatedAt" : "2017-04-26T21:23:30Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "296a7782-cd9e-4f06-8dfc-20cf72bb2fb4",
        "parentId" : "97224f30-76eb-4e3c-ba9b-1ed41d828817",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "mmmm k :-)",
        "createdAt" : "2017-04-26T22:00:59Z",
        "updatedAt" : "2017-04-26T22:00:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe434b3752eff4c5b27710c2707ead18482a3903",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +656,660 @@    'name': device.name,\n    'platform': getNameForTargetPlatform(await device.targetPlatform),\n    'emulator': await device.isLocalEmulator,\n  };\n}"
  },
  {
    "id" : "97b8ce38-f38d-4bee-ad8f-b9400c5e3aa6",
    "prId" : 10207,
    "prUrl" : "https://github.com/flutter/flutter/pull/10207#pullrequestreview-39278151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23d0962b-e4dd-41cd-b072-812971b6242c",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "This will send either a string, list, map, ToolExit, ... We should make this more uniform for the sake of clients.\r\n\r\nPerhaps always send a `{'type':..., 'message': ..., 'exitCode':...}` map? If it's a `ToolExit` object, 'message' can be populated with obj.message, else it would be populated w/ `'$error'`. How does that sound?\r\n\r\n",
        "createdAt" : "2017-05-19T18:41:59Z",
        "updatedAt" : "2017-05-19T19:14:21Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "9b813d5c-5091-4e9b-8d7f-7c754934e885",
        "parentId" : "23d0962b-e4dd-41cd-b072-812971b6242c",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "There are other places in here where we were already returning `{'error': _toJsonable(error)}`.  How 'bout I update `_toJsonable()` to be error-aware?",
        "createdAt" : "2017-05-19T18:49:45Z",
        "updatedAt" : "2017-05-19T19:14:21Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "20669589-ab7a-43fe-84fe-83f66ce75ac6",
        "parentId" : "23d0962b-e4dd-41cd-b072-812971b6242c",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Ah, I see those other places now. Instead of the structured error result, what if we update `_toJsonable()` for `ToolExit` to be:\r\n\r\n```\r\nif (obj is ToolExit) return obj.message:\r\n```\r\n\r\nthat way the `error` field in the various places are consistently strings?\r\n",
        "createdAt" : "2017-05-19T18:54:35Z",
        "updatedAt" : "2017-05-19T19:14:21Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "4ad6b3a5-1207-4434-91f3-7e0e50d1cac5",
        "parentId" : "23d0962b-e4dd-41cd-b072-812971b6242c",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "If the plugin will only ever show these errors in the console, that works fine.  If and when we ever want to add more semantic error handling in the plugin, we may want to revisit our error encoding.",
        "createdAt" : "2017-05-19T19:13:43Z",
        "updatedAt" : "2017-05-19T19:14:21Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f613d7d93933e83948da98f071d75d9664bfcab",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +418,422 @@        _sendAppEvent(app, 'stop');\n      } catch (error) {\n        _sendAppEvent(app, 'stop', <String, dynamic>{'error': _toJsonable(error)});\n      } finally {\n        fs.currentDirectory = cwd;"
  },
  {
    "id" : "33486a0b-a795-4e9b-a6d5-b72d194044ed",
    "prId" : 10402,
    "prUrl" : "https://github.com/flutter/flutter/pull/10402#pullrequestreview-41854149",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2aa1fd5a-c2cb-4b4e-9ddf-ca7d764ca3ff",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't really understand this class. What is the logToParent option for? It seems to make the entire class just act like the provided parent, in which case, why bother creating the object at all?",
        "createdAt" : "2017-06-01T19:46:36Z",
        "updatedAt" : "2017-06-02T21:35:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c5b682de-9e00-4698-b5e7-3b394295bddc",
        "parentId" : "2aa1fd5a-c2cb-4b4e-9ddf-ca7d764ca3ff",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "`logToParent` changes the behavior to use the parent to handle all stdout. This is valuable for IntelliJ's implementation of the `flutter run -v` option - previously we weren't passing trace level messages to the IDEs. An equivalent change would be to keep the current behavior - not add logToParent - but change to pass all message levels (including trace) to IDEs.\r\n\r\n> why bother creating the object at all?\r\n\r\nWith or without those changes, this class sends progress messages to the IDE, so it can use that info to provide nice, integrated progress UIs.\r\n",
        "createdAt" : "2017-06-01T20:52:35Z",
        "updatedAt" : "2017-06-02T21:35:23Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "ad4f26c2-26bf-4255-bf7f-0d043de0d82f",
        "parentId" : "2aa1fd5a-c2cb-4b4e-9ddf-ca7d764ca3ff",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Would it make sense to have two subclasses of _AppRunLogger, one for when you want to send all events to the IDE, and one for when you only want to send progress events to the IDE but want status, error, and trace events to instead be logged to the console?\r\n\r\nI still don't really understand what this is for.\r\n\r\nThe actual change (from logToStdout to having an explicit parent) seems like an improvement, I'm just stuck on the underlying code that you're changing here.",
        "createdAt" : "2017-06-01T21:59:49Z",
        "updatedAt" : "2017-06-02T21:35:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8bb7a110-6473-48e5-8f6b-02cf42d1d222",
        "parentId" : "2aa1fd5a-c2cb-4b4e-9ddf-ca7d764ca3ff",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Re: two loggers, that's totally doable - and I do agree that the current state is a bit confusing.\r\n\r\nThe main value this class adds is letting IDEs convert the spinner progress info available in the CLI to progress mechanisms that make more sense in the IDE (indeterminate progress bars). And what I'm trying to do w/ this change is to plumb more of the verbose info through, so people can use the equivalent of `flutter run -v` to help diagnose when there are issues launching apps.\r\n\r\n> The actual change (from logToStdout to having an explicit parent) seems like an improvement\r\n\r\nlgtm then, or should I work on specialized _AppRunLogger subclasses?",
        "createdAt" : "2017-06-02T17:05:19Z",
        "updatedAt" : "2017-06-02T21:35:23Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "f824fe62-ceb4-4c52-a240-e1b88dd45512",
        "parentId" : "2aa1fd5a-c2cb-4b4e-9ddf-ca7d764ca3ff",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "You should at a minimum leave a TODO mentioning that it might make sense to refactor this code.",
        "createdAt" : "2017-06-02T18:42:14Z",
        "updatedAt" : "2017-06-02T21:35:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b60dbaa404db081c858f3c9c4ae2e2071ca7d9b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +768,772 @@}\n\n/// A [Logger] which sends log messages to a listening daemon client.\n///\n/// This class can either:"
  },
  {
    "id" : "55814f5c-e481-4758-b708-04dc6a0c1f5e",
    "prId" : 18905,
    "prUrl" : "https://github.com/flutter/flutter/pull/18905#pullrequestreview-132893941",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f55cbd6a-8c8a-4a40-a482-7597cf1d68bb",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Technically not a breaking change, just adding API.",
        "createdAt" : "2018-06-28T14:28:51Z",
        "updatedAt" : "2018-06-28T14:29:07Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "739dc8d8-d2de-4bd5-9e79-c7471d85d5ce",
        "parentId" : "f55cbd6a-8c8a-4a40-a482-7597cf1d68bb",
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "I think on an earlier PR we changed from adding 0.0.1 to 0.1.0 because it was a new feature, so I though this was better safe than sorry (though I suspect I'm the only person doing anything with this number right now). LMK if you want me to change it though; I'm not shipping anything relying on it for at least a few weeks.",
        "createdAt" : "2018-06-28T15:16:47Z",
        "updatedAt" : "2018-06-28T15:16:47Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      },
      {
        "id" : "86c798f5-370e-4476-96bc-3fa282111ade",
        "parentId" : "f55cbd6a-8c8a-4a40-a482-7597cf1d68bb",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "No, IntelliJ isn't using the number - no need to change it back. Technically, removing API would be breaking, adding to existing is generally not.",
        "createdAt" : "2018-06-28T15:20:23Z",
        "updatedAt" : "2018-06-28T15:20:23Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "48a7d10f25ed0a799483f2a40dfe570650ee8c02",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +29,33 @@import '../vmservice.dart';\n\nconst String protocolVersion = '0.4.0';\n\n/// A server process command. This command will start up a long-lived server."
  },
  {
    "id" : "2459a852-e8ab-472f-a56f-f724980d9018",
    "prId" : 19007,
    "prUrl" : "https://github.com/flutter/flutter/pull/19007#pullrequestreview-134125065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b533478-c6f4-4efb-8baa-fd493a16c737",
        "parentId" : null,
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "`then<void>`?",
        "createdAt" : "2018-07-03T06:10:36Z",
        "updatedAt" : "2018-07-03T20:22:13Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      },
      {
        "id" : "ab1cf8f4-1b5a-4bce-9f40-a2b7238056f5",
        "parentId" : "0b533478-c6f4-4efb-8baa-fd493a16c737",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "I think we want `dynamic` here, to match what we get from `_handlers[command](args)`.",
        "createdAt" : "2018-07-03T18:40:58Z",
        "updatedAt" : "2018-07-03T20:22:13Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b192f55d3b20da852fe9e6c6a780b88b5ecbc413",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +189,193 @@        return _handlers[command](args);\n      throw 'command not understood: $name.$command';\n    }).then<dynamic>((dynamic result) {\n      if (result == null) {\n        _send(<String, dynamic>{'id': id});"
  },
  {
    "id" : "cc639936-3a9e-4356-81c7-6203b96463c9",
    "prId" : 19007,
    "prUrl" : "https://github.com/flutter/flutter/pull/19007#pullrequestreview-134125065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "348ff4c8-e22b-445e-8957-777442b3a490",
        "parentId" : null,
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "`_runInZone<void>`?",
        "createdAt" : "2018-07-03T06:11:46Z",
        "updatedAt" : "2018-07-03T20:22:13Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      },
      {
        "id" : "3a527db1-de95-48cd-8bbf-0ececb4921fb",
        "parentId" : "348ff4c8-e22b-445e-8957-777442b3a490",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Hmm, at runtime, this seemed to want a `Null`.",
        "createdAt" : "2018-07-03T18:41:59Z",
        "updatedAt" : "2018-07-03T20:22:13Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b192f55d3b20da852fe9e6c6a780b88b5ecbc413",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +402,406 @@    });\n\n    await app._runInZone<Null>(this, () async {\n      try {\n        await runner.run("
  },
  {
    "id" : "5100d66d-8ce7-428a-9fd1-11c8aa3a66fc",
    "prId" : 27197,
    "prUrl" : "https://github.com/flutter/flutter/pull/27197#pullrequestreview-197315148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26d66dbb-bef9-4c60-a97d-4a7b7156490e",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "/cc @devoncarew ",
        "createdAt" : "2019-01-28T22:49:21Z",
        "updatedAt" : "2019-01-28T22:49:22Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "c7b4e41f-22c5-4ae1-94e9-0a830fe32bba",
        "parentId" : "26d66dbb-bef9-4c60-a97d-4a7b7156490e",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "👍 ",
        "createdAt" : "2019-01-28T23:38:44Z",
        "updatedAt" : "2019-01-28T23:38:44Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a277c1135be8176a4b9b1d2e2d06c48b8cdbf9b6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +785,789 @@    @required Duration timeout,\n    String progressId,\n    bool multilineOutput = false,\n    int progressIndicatorPadding = kDefaultStatusPadding,\n  }) {"
  },
  {
    "id" : "61b54502-271c-4e9b-9d29-d069773f0107",
    "prId" : 28341,
    "prUrl" : "https://github.com/flutter/flutter/pull/28341#pullrequestreview-207040288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20431ec6-56bf-4c54-85dc-37efd55623c1",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "I don't believe that this change preserves the `if (flutterDesktopEnabled) {` check below.",
        "createdAt" : "2019-02-22T18:32:55Z",
        "updatedAt" : "2019-02-25T21:11:54Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "74231d46-66ea-4e97-8f2a-44f8c23789c1",
        "parentId" : "20431ec6-56bf-4c54-85dc-37efd55623c1",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I think we could move that check into the deviceManager, since we've disabled those discoverers when the condition is false anyway",
        "createdAt" : "2019-02-22T18:48:54Z",
        "updatedAt" : "2019-02-25T21:11:54Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "5b748329-7902-48f8-a74d-4ffc91b6d467",
        "parentId" : "20431ec6-56bf-4c54-85dc-37efd55623c1",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Sounds good. I just want to make sure that we don't start reporting desktop devices until we know what the best way to present them in IDEs is.\r\n",
        "createdAt" : "2019-02-22T18:56:59Z",
        "updatedAt" : "2019-02-25T21:11:54Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "8c784f6c-6375-4a94-a5bb-f2b58efbebd6",
        "parentId" : "20431ec6-56bf-4c54-85dc-37efd55623c1",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Sounds good.",
        "createdAt" : "2019-02-22T21:42:54Z",
        "updatedAt" : "2019-02-25T21:11:54Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9773fec85ab5b75cc1b38666da24c6d91fe96d55",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +583,587 @@    // Use the device manager discovery so that client provided device types\n    // are usable via the daemon protocol.\n    deviceManager.deviceDiscoverers.forEach(addDeviceDiscoverer);\n  }\n"
  },
  {
    "id" : "a1fe8cb8-507e-49a1-b34b-92e3c61016ce",
    "prId" : 33472,
    "prUrl" : "https://github.com/flutter/flutter/pull/33472#pullrequestreview-243543299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "173566a4-eb2d-48ef-b56a-5c7d5cf5242b",
        "parentId" : null,
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "Maybe leave a TODO with a bug reference for replacing this with a solution based on metadata rather than folders once that's available?",
        "createdAt" : "2019-05-28T23:11:12Z",
        "updatedAt" : "2019-05-29T22:19:42Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      },
      {
        "id" : "cb9ec037-8336-446d-a2f0-23b9940c3d02",
        "parentId" : "173566a4-eb2d-48ef-b56a-5c7d5cf5242b",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Done",
        "createdAt" : "2019-05-29T22:13:04Z",
        "updatedAt" : "2019-05-29T22:19:42Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d73e8139fcab954ec1e97c34207d19b38f202b8c",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +315,319 @@      // that has been implemented.\n      final FlutterProject flutterProject = FlutterProject.fromDirectory(fs.directory(projectRoot));\n      if (flutterProject.linux.existsSync()) {\n        result.add('linux');\n      }"
  },
  {
    "id" : "0c5aa112-e8f5-4d51-a590-2ce374569900",
    "prId" : 33472,
    "prUrl" : "https://github.com/flutter/flutter/pull/33472#pullrequestreview-243239199",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68dacb08-8571-4f01-806d-5256a5fbc616",
        "parentId" : null,
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "Should we also check the platform we're running on, so if someone commits a `macos` folder it doesn't cause it to show up as a target if you clone and try to run on Windows?",
        "createdAt" : "2019-05-29T07:15:39Z",
        "updatedAt" : "2019-05-29T22:19:42Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      },
      {
        "id" : "55f64491-88d5-474e-bc0d-a32b0bd5dd96",
        "parentId" : "68dacb08-8571-4f01-806d-5256a5fbc616",
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "In that case the project supports macos, but no device would support windows, so the filtering would happen on the device side.",
        "createdAt" : "2019-05-29T12:48:29Z",
        "updatedAt" : "2019-05-29T22:19:42Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      },
      {
        "id" : "668b465d-23d2-4660-ac90-5f1315da24c9",
        "parentId" : "68dacb08-8571-4f01-806d-5256a5fbc616",
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "Ah yeah, that makes sense (and would match if we have metadata - you might load a project that claims it can target macOS but you're running on Windows) 👍 ",
        "createdAt" : "2019-05-29T12:57:56Z",
        "updatedAt" : "2019-05-29T22:19:42Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d73e8139fcab954ec1e97c34207d19b38f202b8c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +318,322 @@        result.add('linux');\n      }\n      if (flutterProject.macos.existsSync()) {\n        result.add('macos');\n      }"
  },
  {
    "id" : "529f2d4b-6eed-4cdb-be21-7d67a057ae79",
    "prId" : 33472,
    "prUrl" : "https://github.com/flutter/flutter/pull/33472#pullrequestreview-243545508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d250cb40-b11e-4af8-a4aa-0efe00f3f53a",
        "parentId" : null,
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "It might be worth writing a warning or something (the daemon has some logging options) so something shows up in the logs if people raise issues about the editor not showing what they'd expect.",
        "createdAt" : "2019-05-29T07:16:36Z",
        "updatedAt" : "2019-05-29T22:19:42Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      },
      {
        "id" : "163f2287-315e-4b01-af04-7d6f09ef124e",
        "parentId" : "d250cb40-b11e-4af8-a4aa-0efe00f3f53a",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Done",
        "createdAt" : "2019-05-29T22:19:44Z",
        "updatedAt" : "2019-05-29T22:19:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d73e8139fcab954ec1e97c34207d19b38f202b8c",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +345,349 @@        'error': true,\n      });\n      // On any sort of failure, fall back to Android and iOS for backwards\n      // comparability.\n      return <String, Object>{"
  },
  {
    "id" : "c5d9ed7a-c70a-4f8d-b1da-ce4ae8de79d2",
    "prId" : 33472,
    "prUrl" : "https://github.com/flutter/flutter/pull/33472#pullrequestreview-243915178",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2584f31a-84f4-4dfd-8aac-f3bcc4bc91b3",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Can we target a specific exception here?  We should avoid generalized catches....",
        "createdAt" : "2019-05-30T16:56:19Z",
        "updatedAt" : "2019-05-30T16:56:20Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "ebf4f9c4-1867-4784-93fb-78621761ba8a",
        "parentId" : "2584f31a-84f4-4dfd-8aac-f3bcc4bc91b3",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I see now - we want the consumer get the exception and not crash.  Ok.",
        "createdAt" : "2019-05-30T17:11:03Z",
        "updatedAt" : "2019-05-30T17:11:04Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "d73e8139fcab954ec1e97c34207d19b38f202b8c",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +339,343 @@        'platforms': result,\n      };\n    } catch (err, stackTrace) {\n      sendEvent('log', <String, dynamic>{\n        'log': 'Failed to parse project metadata',"
  },
  {
    "id" : "39f7c4bc-fa1d-4a0f-98d0-126b3445c028",
    "prId" : 33472,
    "prUrl" : "https://github.com/flutter/flutter/pull/33472#pullrequestreview-243909470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3a984cf-99c0-4c85-bc51-fef0279c07d2",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "What about a package project that only uses Dart code and, in theory, should just support all platforms? e.g. `flutter_svg`",
        "createdAt" : "2019-05-30T16:57:45Z",
        "updatedAt" : "2019-05-30T16:57:45Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "4a57e563-5f19-4aee-b2dd-a2d328d9926e",
        "parentId" : "e3a984cf-99c0-4c85-bc51-fef0279c07d2",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "(Or is this only for app projects?)",
        "createdAt" : "2019-05-30T16:58:01Z",
        "updatedAt" : "2019-05-30T16:58:01Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "a4a92ffc-2dab-4860-b5c3-4301d2ad00f7",
        "parentId" : "e3a984cf-99c0-4c85-bc51-fef0279c07d2",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "This is only for apps that you would launch via the IDE",
        "createdAt" : "2019-05-30T16:59:31Z",
        "updatedAt" : "2019-05-30T16:59:32Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d73e8139fcab954ec1e97c34207d19b38f202b8c",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +336,340 @@        result.add('fuchsia');\n      }\n      return <String, Object>{\n        'platforms': result,\n      };"
  },
  {
    "id" : "3fe40b27-5068-453e-9941-455efa62f6e4",
    "prId" : 55376,
    "prUrl" : "https://github.com/flutter/flutter/pull/55376#pullrequestreview-449741660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "753fb781-d985-4766-b46f-a24f5e4bab68",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "you can remove reloadMethod - I'm going to be building this functionality into the regular hot reload instead",
        "createdAt" : "2020-07-13T19:18:39Z",
        "updatedAt" : "2020-07-15T12:53:08Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "5a650749-00bc-4307-bb86-724ee3f08b38",
        "parentId" : "753fb781-d985-4766-b46f-a24f5e4bab68",
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "That method is currently published [in the docs](https://github.com/flutter/flutter/blob/10571920c0fba5a56c4142b38df82d1671ae9f0b/packages/flutter_tools/doc/daemon.md#appreloadmethod) so removing it may be a breaking change? (I don't know who would've used it though)",
        "createdAt" : "2020-07-14T08:17:22Z",
        "updatedAt" : "2020-07-15T12:53:08Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      },
      {
        "id" : "25e1751b-dc7c-4aa1-bc2e-8203eb55dcba",
        "parentId" : "753fb781-d985-4766-b46f-a24f5e4bab68",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I would be surprised if anyone is using it, but it could be mapped to hot reload for backwards compat. Doesn't need to be solved in this PR.",
        "createdAt" : "2020-07-14T14:32:20Z",
        "updatedAt" : "2020-07-15T12:53:08Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "4682608c-cec8-4c8d-9317-1c8088bfe316",
        "parentId" : "753fb781-d985-4766-b46f-a24f5e4bab68",
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "sgtm - I'll do in a separate PR once this one's done!",
        "createdAt" : "2020-07-14T14:52:52Z",
        "updatedAt" : "2020-07-15T12:53:08Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      },
      {
        "id" : "0aaa85ce-b111-4299-8a9a-8f1ebd9bb61c",
        "parentId" : "753fb781-d985-4766-b46f-a24f5e4bab68",
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "I was taking a look at removing `reloadMethod`, but it looks like there is a lot of code relating to this (for ex. arguments passed to `device.connect` and VM service calls in `vmservice.dart`. It's not clear how much of this should go (whether it's just the daemon call, or everything related to it everywhere).\r\n\r\nIf it's easier for you to do this when you're building that functionality into regular hot reload, I'm happy to leave it for you 😄",
        "createdAt" : "2020-07-16T11:01:22Z",
        "updatedAt" : "2020-07-16T11:01:23Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9eecbeadfb2857852a479f1f75d643a8ab0f080c",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +1308,1312 @@\nenum OperationType {\n  reloadMethod,\n  reload,\n  restart"
  }
]