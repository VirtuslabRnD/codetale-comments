[
  {
    "id" : "25572792-593c-4314-8130-89f7413c926a",
    "prId" : 4324,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "827c844f-af03-4025-834e-6a92eb370ab7",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "If we make the host port optional, then when we do forwarding we can bind to whatever's available, and the bound port returned in the json result.\n",
        "createdAt" : "2016-06-02T18:39:11Z",
        "updatedAt" : "2016-06-02T20:04:18Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "92c6b829-f678-433c-b6d4-6f049cf752e9",
        "parentId" : "827c844f-af03-4025-834e-6a92eb370ab7",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "done\n",
        "createdAt" : "2016-06-02T20:03:11Z",
        "updatedAt" : "2016-06-02T20:04:18Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8b221d315805c450f295723c8e34fe5bf74a453",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +408,412 @@    int devicePort = args['devicePort'];\n\n    if (args['hostPort'] is! int)\n      throw 'hostPort is required';\n    int hostPort = args['hostPort'];"
  },
  {
    "id" : "c9de2df3-4385-4bf9-948b-9ba751465afd",
    "prId" : 4385,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3f35533-d9ca-4eec-b07a-d6a006f0ca80",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I'd either use type names (`int`, `String`, `bool`) or their semantic names (integer, string, boolean), but I wouldn't mix them. I think I prefer type names.\n",
        "createdAt" : "2016-06-07T17:57:31Z",
        "updatedAt" : "2016-06-07T19:04:09Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "e00a4dab-edd1-4aff-a047-0b14e6c0303d",
        "parentId" : "a3f35533-d9ca-4eec-b07a-d6a006f0ca80",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "renamed to be type names\n",
        "createdAt" : "2016-06-07T18:39:14Z",
        "updatedAt" : "2016-06-07T19:04:09Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f613119e8734c5ef67436670ee7049bcb3674acb",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +217,221 @@    dynamic val = args[name];\n    if (val != null && val is! int)\n      throw \"$name is not an int\";\n    return val;\n  }"
  },
  {
    "id" : "6103b0f8-ace6-4e9c-a343-68e9f43ff124",
    "prId" : 4385,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4721ffc6-f36a-486c-82f3-d93e59b96aab",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "This looks like a good place to keep connectivity info also, such as observatory/diagnostic ports and log streams.\n",
        "createdAt" : "2016-06-07T18:01:16Z",
        "updatedAt" : "2016-06-07T19:04:09Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "c8e75731-a7c1-4740-b0d4-4c0c13ce0946",
        "parentId" : "4721ffc6-f36a-486c-82f3-d93e59b96aab",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Much of that is stored in the `RunAndStayResident` class, which is the common code between the `flutter run` and the daemon mode's `app.start`.\n",
        "createdAt" : "2016-06-07T18:45:36Z",
        "updatedAt" : "2016-06-07T19:04:09Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f613119e8734c5ef67436670ee7049bcb3674acb",
    "line" : 411,
    "diffHunk" : "@@ -1,1 +555,559 @@\n/// A running application, started by this daemon.\nclass AppInstance {\n  AppInstance(this.id, [this.runner]);\n"
  },
  {
    "id" : "8c600b40-c377-46d8-b1a5-02f0f31da80e",
    "prId" : 4513,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7490223b-f6ba-4d2e-8cd0-5e6c5b0ee74e",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Looks like `stop` can simply call `cancel`.\n",
        "createdAt" : "2016-06-13T16:35:18Z",
        "updatedAt" : "2016-06-13T19:56:16Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "d96c27f5-b084-4495-b1d8-662f56b754e6",
        "parentId" : "7490223b-f6ba-4d2e-8cd0-5e6c5b0ee74e",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "done! (moved into a common _sendFinished() method)\n",
        "createdAt" : "2016-06-13T19:54:06Z",
        "updatedAt" : "2016-06-13T19:56:16Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ae1eddf84c9115fcd83061db1cb509036db4f6",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +652,656 @@  void stop({ bool showElapsedTime: false }) {\n    _sendFinished();\n  }\n\n  @override"
  },
  {
    "id" : "3085c81f-a66b-414a-b60d-e25e79573ee1",
    "prId" : 5321,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "Hot mode makes the distinction between reload and restart and that really matters for the user experience. Can this distinction be made here?\n",
        "createdAt" : "2016-08-10T20:37:46Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "b6121d12-45c1-4e01-bfb6-1fcc832e041f",
        "parentId" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Yup, we can parameterize the `app.restart` call; I can add that in this PR.\n",
        "createdAt" : "2016-08-11T14:21:09Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "46815842-29f5-4447-a879-5982b672c8d8",
        "parentId" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "So some other notes on this. Hot mode needs to keep a state machine (I am in the process of implementing this now) of what is currently supported by the running program:\n- restart is always supported\n\nafter a start/restart:\n- initially hot reload is supported\n- if the isolate hits an unhandled exception, hot reload is disabled until the application is restarted\n\nThe IDE will need to react by dimming/undimming the reload button depending on the state. How do you want the runner to advertise to the IDE the changes in these states over time?\n",
        "createdAt" : "2016-08-11T14:40:28Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "dbf1bff3-87fe-41de-9338-e6b515e9306c",
        "parentId" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "When a user issues a reload, that will be when the state could change from supported ==> not supported? The response from an app.restart command is currently just a boolean. We could change that to a more structured response: bool for success, a message if there's a failure (`Unsupported change to ...`), and another bool to say whether any future reloads will succeed. It would then be up to the user (or the IDE) to issue a restart in order to reset the hot reload state.\n",
        "createdAt" : "2016-08-11T14:58:58Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "a8960c6d-a0e5-4bb4-9982-a0726bde01a6",
        "parentId" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "That seems simplest - adding more info to the return value of app.restart. We could instead fire async events - like we do for the debug port value, or stdout messages. But that would probably only make sense if the state could change at any time.\n",
        "createdAt" : "2016-08-11T15:00:42Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "1328f285-dced-4270-b7fd-c363665c802b",
        "parentId" : "ec185339-1fe2-4227-8309-4ae72eee67a4",
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "An isolate can hit an unhandled exception error at anytime, when that happens reload needs to be disabled until a full restart occurs.\n",
        "createdAt" : "2016-08-11T15:48:04Z",
        "updatedAt" : "2016-08-11T16:37:39Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      }
    ],
    "commit" : "679b9015d65f5c0f15720e04e2f983266a218a49",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +340,344 @@    }\n\n    bool supportsRestart = hotMode ? device.supportsHotMode : device.supportsRestart;\n\n    AppInstance app = new AppInstance(_getNextAppId(), runner);"
  },
  {
    "id" : "d1b1c0ca-82e4-4a72-8b6b-b3bd5a204c3d",
    "prId" : 6992,
    "prUrl" : "https://github.com/flutter/flutter/pull/6992#pullrequestreview-9909265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5bb97a8-d817-408e-9b30-5329378f41e8",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "Just send the Uri. The port can be derived from it.",
        "createdAt" : "2016-11-23T03:19:15Z",
        "updatedAt" : "2016-11-28T14:58:13Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "077e5252-f969-4dcf-bd1e-63ea545e739f",
        "parentId" : "c5bb97a8-d817-408e-9b30-5329378f41e8",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "We need to send the port for a while for compatibility with old clients; sending both gives a grace period where old can work with new and vice versa.",
        "createdAt" : "2016-11-23T16:23:22Z",
        "updatedAt" : "2016-11-28T14:58:13Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "4f7b15a3-dfc9-4d04-816a-099529995dd9",
        "parentId" : "c5bb97a8-d817-408e-9b30-5329378f41e8",
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "Acknowledged. Let's file a bug about legacy clients and add a TODO here.",
        "createdAt" : "2016-11-23T17:24:45Z",
        "updatedAt" : "2016-11-28T14:58:13Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      }
    ],
    "commit" : "d83f0cc539f01b79dd8c6ebc558c09127dedf870",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +360,364 @@      connectionInfoCompleter.future.then((DebugConnectionInfo info) {\n        Map<String, dynamic> params = <String, dynamic>{\n          'port': info.httpUri.port,\n          'wsUri': info.wsUri.toString(),\n        };"
  },
  {
    "id" : "f37ccc3a-6707-43c3-acc3-f4917cdb7c16",
    "prId" : 7061,
    "prUrl" : "https://github.com/flutter/flutter/pull/7061#pullrequestreview-10873848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a81f7d0d-7c21-48bc-9322-336c5f7df7e6",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "I forget if this is for the future or CL or not but you only need to pass 1 Uri here. Everything else (scheme differences, ports) can be derived on the other end.",
        "createdAt" : "2016-11-29T17:10:42Z",
        "updatedAt" : "2016-12-01T01:11:37Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "c6bdbf24-5d22-4286-848f-e1d9749c95d7",
        "parentId" : "a81f7d0d-7c21-48bc-9322-336c5f7df7e6",
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "Future work. https://github.com/flutter/flutter/issues/7050",
        "createdAt" : "2016-11-30T23:32:33Z",
        "updatedAt" : "2016-12-01T01:11:37Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4d39b0379cdd667e3822d069709d6d2c6c6d947",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +360,364 @@      connectionInfoCompleter.future.then((DebugConnectionInfo info) {\n        Map<String, dynamic> params = <String, dynamic>{\n          'port': info.httpUri.port,\n          'wsUri': info.wsUri.toString(),\n        };"
  },
  {
    "id" : "69eef1e8-e6c4-451b-af69-c9d868156ec0",
    "prId" : 7183,
    "prUrl" : "https://github.com/flutter/flutter/pull/7183#pullrequestreview-11877569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c4c3233-4a44-430e-aade-e51eae3045fd",
        "parentId" : null,
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "This line and the `print(...` statement above seem to be at odds...\r\none bypasses the zone while the other does not.\r\n\r\nShould this line be `printError(...` rather than `stderr.writeln` so that the zone captures the output?\r\nOr should the `print(...` statement above be `stdout.writeln` so that it bypasses the zone?",
        "createdAt" : "2016-12-07T17:48:50Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      },
      {
        "id" : "fef354a5-6950-4c5c-bead-66acef807cab",
        "parentId" : "4c4c3233-4a44-430e-aade-e51eae3045fd",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "It's asymmetric. I would like the first statement to read `stdout.writeln` - for symmetry with the next one - but I need it to be a print(), so we can capture print output in a zone when running tests, in order to test this functionality.",
        "createdAt" : "2016-12-07T19:29:25Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "481ba4db-2555-4025-98bb-d9193c2768fb",
        "parentId" : "4c4c3233-4a44-430e-aade-e51eae3045fd",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "I'll add a comment to that effect?",
        "createdAt" : "2016-12-07T19:30:16Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "387f4a127c43e4cdcc478c45f482ae58ecb824b9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +235,239 @@          print(message.message);\n        } else if (message.level == 'error') {\n          stderr.writeln(message.message);\n          if (message.stackTrace != null)\n            stderr.writeln(message.stackTrace.toString().trimRight());"
  },
  {
    "id" : "477a2fe1-e937-4a9f-883a-29952bbb997b",
    "prId" : 7183,
    "prUrl" : "https://github.com/flutter/flutter/pull/7183#pullrequestreview-11877424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd369d52-ee97-4372-bc3e-c38d92683e69",
        "parentId" : null,
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "ditto.",
        "createdAt" : "2016-12-07T17:48:53Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      },
      {
        "id" : "114c90ec-e33f-45af-a230-aff54cb0d752",
        "parentId" : "cd369d52-ee97-4372-bc3e-c38d92683e69",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "ditto :)",
        "createdAt" : "2016-12-07T19:29:37Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "387f4a127c43e4cdcc478c45f482ae58ecb824b9",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +237,241 @@          stderr.writeln(message.message);\n          if (message.stackTrace != null)\n            stderr.writeln(message.stackTrace.toString().trimRight());\n        }\n      } else {"
  },
  {
    "id" : "c1b1aae9-106e-4141-b577-3af6f8ac62b7",
    "prId" : 7183,
    "prUrl" : "https://github.com/flutter/flutter/pull/7183#pullrequestreview-11856612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2e5bf9f-97cb-498c-a6f9-86ee028ce92f",
        "parentId" : null,
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "Similar to my earlier comment about `print(...` and `stderr.writeln(...`, should this statement be `stdout.writeln(...`?",
        "createdAt" : "2016-12-07T17:53:17Z",
        "updatedAt" : "2016-12-07T20:36:47Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "387f4a127c43e4cdcc478c45f482ae58ecb824b9",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +729,733 @@  void printStatus(String message, { bool emphasis: false, bool newline: true, String ansiAlternative }) {\n    if (logToStdout) {\n      print(message);\n    } else {\n      _sendLogEvent(<String, dynamic>{ 'log': message });"
  },
  {
    "id" : "f36d6a11-3712-42ee-a6e3-3c233d9e5cd3",
    "prId" : 7554,
    "prUrl" : "https://github.com/flutter/flutter/pull/7554#pullrequestreview-17709997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4580165-1d16-4fc8-9518-a871bd7a3d70",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "What is a `CommandHandler`? Is it something specified on the command-line?",
        "createdAt" : "2017-01-20T00:45:23Z",
        "updatedAt" : "2017-01-20T16:25:08Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "d923d8ee-2617-443a-a92b-e2f1eb83ab94",
        "parentId" : "d4580165-1d16-4fc8-9518-a871bd7a3d70",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "It's a typedef used specifically for the daemon protocol's domains to handle json-rpc calls.",
        "createdAt" : "2017-01-20T16:17:37Z",
        "updatedAt" : "2017-01-20T16:25:08Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c970c125e8f7ec598ab7d9896cb5a492e2e0dd",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +282,286 @@    registerHandler('start', start);\n    registerHandler('restart', restart);\n    registerHandler('callServiceExtension', callServiceExtension);\n    registerHandler('stop', stop);\n    registerHandler('discover', discover);"
  },
  {
    "id" : "d50415e1-dfae-43e8-8f9a-928c19e95137",
    "prId" : 9617,
    "prUrl" : "https://github.com/flutter/flutter/pull/9617#pullrequestreview-34974524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97224f30-76eb-4e3c-ba9b-1ed41d828817",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why are we using a map here instead of a structured class? it would have caught this problem.",
        "createdAt" : "2017-04-26T21:13:23Z",
        "updatedAt" : "2017-04-26T21:13:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "22715e6a-d1b8-4847-a336-ee3d2a82c071",
        "parentId" : "97224f30-76eb-4e3c-ba9b-1ed41d828817",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "@Hixie so that it's natively encodable into JSON, which is apparently how we communicate info to our IntelliJ plugin",
        "createdAt" : "2017-04-26T21:23:30Z",
        "updatedAt" : "2017-04-26T21:23:30Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "296a7782-cd9e-4f06-8dfc-20cf72bb2fb4",
        "parentId" : "97224f30-76eb-4e3c-ba9b-1ed41d828817",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "mmmm k :-)",
        "createdAt" : "2017-04-26T22:00:59Z",
        "updatedAt" : "2017-04-26T22:00:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe434b3752eff4c5b27710c2707ead18482a3903",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +656,660 @@    'name': device.name,\n    'platform': getNameForTargetPlatform(await device.targetPlatform),\n    'emulator': await device.isLocalEmulator,\n  };\n}"
  },
  {
    "id" : "97b8ce38-f38d-4bee-ad8f-b9400c5e3aa6",
    "prId" : 10207,
    "prUrl" : "https://github.com/flutter/flutter/pull/10207#pullrequestreview-39278151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23d0962b-e4dd-41cd-b072-812971b6242c",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "This will send either a string, list, map, ToolExit, ... We should make this more uniform for the sake of clients.\r\n\r\nPerhaps always send a `{'type':..., 'message': ..., 'exitCode':...}` map? If it's a `ToolExit` object, 'message' can be populated with obj.message, else it would be populated w/ `'$error'`. How does that sound?\r\n\r\n",
        "createdAt" : "2017-05-19T18:41:59Z",
        "updatedAt" : "2017-05-19T19:14:21Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "9b813d5c-5091-4e9b-8d7f-7c754934e885",
        "parentId" : "23d0962b-e4dd-41cd-b072-812971b6242c",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "There are other places in here where we were already returning `{'error': _toJsonable(error)}`.  How 'bout I update `_toJsonable()` to be error-aware?",
        "createdAt" : "2017-05-19T18:49:45Z",
        "updatedAt" : "2017-05-19T19:14:21Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "20669589-ab7a-43fe-84fe-83f66ce75ac6",
        "parentId" : "23d0962b-e4dd-41cd-b072-812971b6242c",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Ah, I see those other places now. Instead of the structured error result, what if we update `_toJsonable()` for `ToolExit` to be:\r\n\r\n```\r\nif (obj is ToolExit) return obj.message:\r\n```\r\n\r\nthat way the `error` field in the various places are consistently strings?\r\n",
        "createdAt" : "2017-05-19T18:54:35Z",
        "updatedAt" : "2017-05-19T19:14:21Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "4ad6b3a5-1207-4434-91f3-7e0e50d1cac5",
        "parentId" : "23d0962b-e4dd-41cd-b072-812971b6242c",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "If the plugin will only ever show these errors in the console, that works fine.  If and when we ever want to add more semantic error handling in the plugin, we may want to revisit our error encoding.",
        "createdAt" : "2017-05-19T19:13:43Z",
        "updatedAt" : "2017-05-19T19:14:21Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f613d7d93933e83948da98f071d75d9664bfcab",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +418,422 @@        _sendAppEvent(app, 'stop');\n      } catch (error) {\n        _sendAppEvent(app, 'stop', <String, dynamic>{'error': _toJsonable(error)});\n      } finally {\n        fs.currentDirectory = cwd;"
  }
]