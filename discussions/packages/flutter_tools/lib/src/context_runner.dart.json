[
  {
    "id" : "69bb1d75-06e0-4c92-b67c-638ed3d6687e",
    "prId" : 20758,
    "prUrl" : "https://github.com/flutter/flutter/pull/20758#pullrequestreview-152317464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f857866-31d6-4b7f-8698-3e73ab1cf235",
        "parentId" : null,
        "authorId" : "b0e8e5f4-24fc-402d-ba63-9576e63321dc",
        "body" : "What's the difference between a validator and a workflow?",
        "createdAt" : "2018-08-28T03:22:13Z",
        "updatedAt" : "2018-09-05T00:09:13Z",
        "lastEditedBy" : "b0e8e5f4-24fc-402d-ba63-9576e63321dc",
        "tags" : [
        ]
      },
      {
        "id" : "7a7f6e0e-2a8c-478c-8e2d-c7c9bf95c71a",
        "parentId" : "0f857866-31d6-4b7f-8698-3e73ab1cf235",
        "authorId" : "7d2aad3d-f2a9-4735-885f-bde7c192b37b",
        "body" : "Currently, the workflow just checks whether we should run the validators associated with it.\r\n\r\nI thought it'd be strange to split a validator and have only one of them with the workflow attached. If it'd be better to keep the workflow on the validator, I don't mind undoing this part of the change. ",
        "createdAt" : "2018-08-31T23:18:04Z",
        "updatedAt" : "2018-09-05T00:09:13Z",
        "lastEditedBy" : "7d2aad3d-f2a9-4735-885f-bde7c192b37b",
        "tags" : [
        ]
      },
      {
        "id" : "b8f60e00-e8b9-4059-a4f0-0d242487b40b",
        "parentId" : "0f857866-31d6-4b7f-8698-3e73ab1cf235",
        "authorId" : "b0e8e5f4-24fc-402d-ba63-9576e63321dc",
        "body" : "I didn't mean for you to undo this change but it would be good to have a better explanation of Validator vs Workflow in comments. \r\n\r\nSo a workflow is just a collection of validators then?\r\n\r\nThis is confusing because down below, you have a list of workflows and a list of validators in the same class. Are these just validators that don't belong to any workflow?",
        "createdAt" : "2018-09-04T13:38:49Z",
        "updatedAt" : "2018-09-05T00:09:13Z",
        "lastEditedBy" : "b0e8e5f4-24fc-402d-ba63-9576e63321dc",
        "tags" : [
        ]
      },
      {
        "id" : "6f828632-7107-4165-b113-73b3d00efb0a",
        "parentId" : "0f857866-31d6-4b7f-8698-3e73ab1cf235",
        "authorId" : "7d2aad3d-f2a9-4735-885f-bde7c192b37b",
        "body" : "I'm more or less breaking the old, implicit relationship where a workflow is-a validator (both workflow classes were also validators and DoctorValidatorProvider also made that assumption), so they're now two totally separate classes. A validator is still a validator (checks for installed software and generates doctor output), while a workflow checks if the environment is one where we can list or launch devices. \r\n\r\nThe only relation between validators and workflows now is that we use Workflow.appliesToHostPlatform to decide whether to add a validator to the validator list (skipping the iOS validator if we're not on Mac).\r\n\r\nThe validators in the provider are effectively the same as they used to be. The new workflows list is there because I can no longer have the validators list do double duty, so I'm explicitly listing them instead of using the old code that got them implicitly by checking which validators were also workflows.\r\n\r\nWorkflow might be a bad name for it now, since the class scope is a lot smaller now that the validator methods have been pulled out. But I don't know what would be a good, unconfusing name.",
        "createdAt" : "2018-09-05T00:07:56Z",
        "updatedAt" : "2018-09-05T00:09:13Z",
        "lastEditedBy" : "7d2aad3d-f2a9-4735-885f-bde7c192b37b",
        "tags" : [
        ]
      },
      {
        "id" : "854423ba-ecd4-459a-ada4-4c68fb0c1e2f",
        "parentId" : "0f857866-31d6-4b7f-8698-3e73ab1cf235",
        "authorId" : "b0e8e5f4-24fc-402d-ba63-9576e63321dc",
        "body" : "Got it. Thanks for the context.",
        "createdAt" : "2018-09-05T02:36:05Z",
        "updatedAt" : "2018-09-05T02:36:05Z",
        "lastEditedBy" : "b0e8e5f4-24fc-402d-ba63-9576e63321dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9a202c5b776259092834626423b33cc31d76efc",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +48,52 @@      AndroidStudio: AndroidStudio.latestValid,\n      AndroidWorkflow: () => new AndroidWorkflow(),\n      AndroidValidator: () => new AndroidValidator(),\n      Artifacts: () => new CachedArtifacts(),\n      AssetBundleFactory: () => AssetBundleFactory.defaultInstance,"
  },
  {
    "id" : "e0fb8d8e-c668-4625-8a1d-7aba22d0ccff",
    "prId" : 61139,
    "prUrl" : "https://github.com/flutter/flutter/pull/61139#pullrequestreview-446585253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffd47f40-bcb6-42f9-b1fe-bbccb5f85cd8",
        "parentId" : null,
        "authorId" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "body" : "wow...",
        "createdAt" : "2020-07-09T16:45:08Z",
        "updatedAt" : "2020-07-10T15:36:05Z",
        "lastEditedBy" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "tags" : [
        ]
      },
      {
        "id" : "669e0f1a-398c-4552-9562-861e4b127784",
        "parentId" : "ffd47f40-bcb6-42f9-b1fe-bbccb5f85cd8",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "yeah, I think it might be better to pull out each discovery instance, and then inject them into the constructor? Then the devicemanager is just responsible for ... managing the devices, and not creating the world",
        "createdAt" : "2020-07-09T17:16:19Z",
        "updatedAt" : "2020-07-10T15:36:05Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "d73de543-0dd3-4426-acf7-fb413e9985f0",
        "parentId" : "ffd47f40-bcb6-42f9-b1fe-bbccb5f85cd8",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "this will have to wait for a google3 roll, there are some updates needed internally",
        "createdAt" : "2020-07-10T17:46:16Z",
        "updatedAt" : "2020-07-10T17:46:16Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ceecde47390ba14a296e7e1f6084e066bb3738a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +125,129 @@      ),\n      DevFSConfig: () => DevFSConfig(),\n      DeviceManager: () => FlutterDeviceManager(\n        logger: globals.logger,\n        processManager: globals.processManager,"
  },
  {
    "id" : "d690f118-6a86-4e8d-85ba-11a146a3cb74",
    "prId" : 64745,
    "prUrl" : "https://github.com/flutter/flutter/pull/64745#pullrequestreview-481346658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08ed2173-858c-466b-9657-0bbc613c5228",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "If you mirror the way the `ErrorHandlingFileSystem` is set up:\r\n\r\nhttps://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/globals.dart#L66\r\n\r\nthen tests that inject their own `ProcessManager` should also get wrapped in the `ErrorHandlingProcessManager`.",
        "createdAt" : "2020-09-02T21:14:23Z",
        "updatedAt" : "2020-09-02T21:14:31Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "bb73494b-db54-4ad2-b0c2-8d0ff2ee2561",
        "parentId" : "08ed2173-858c-466b-9657-0bbc613c5228",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "That seems like the opposite of what I want - if a test specifies a regular process manager it should get a regular process manager. This would match the behavior of the non-context tests",
        "createdAt" : "2020-09-02T21:25:08Z",
        "updatedAt" : "2020-09-02T21:25:08Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "b8bfbb4b-6574-48f9-bf85-0ee77471e7b2",
        "parentId" : "08ed2173-858c-466b-9657-0bbc613c5228",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "If we have tests with a mock process manager where the mock process manager throws a `ProcessException` with one of the errors now caught by the `ErrorHandlingProcessManager`, those tests are now testing something that can't actually happen.",
        "createdAt" : "2020-09-02T22:12:04Z",
        "updatedAt" : "2020-09-02T22:12:04Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "af9c4950-1f7c-4536-b075-7f75f1e461fd",
        "parentId" : "08ed2173-858c-466b-9657-0bbc613c5228",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "that's true for context injected tests, but I don't think that we should require all of the context free tests to use the error handling filesystem/process manager.\r\n\r\ntesting cases that can't happen is definitely not idea - we should be able to handle this in code review by pointing out when something is redundant with the error_handling_io lib.\r\n\r\nI'm more worried about tests which build up a large amount of injected interfaces being hard to understand for new contributors. Why does this process exception become a tool exit here, but not here? Or what instance am I actually using.",
        "createdAt" : "2020-09-02T22:17:15Z",
        "updatedAt" : "2020-09-02T22:17:16Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e03d1aa00239b5a1ed1d807fbde7f635df3c6d1b",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +218,222 @@      ),\n      ProcessInfo: () => ProcessInfo(),\n      ProcessManager: () => ErrorHandlingProcessManager(\n        delegate: const LocalProcessManager(),\n        platform: globals.platform,"
  },
  {
    "id" : "3ab586e2-17ac-42ec-9581-07c7adfad6bd",
    "prId" : 67274,
    "prUrl" : "https://github.com/flutter/flutter/pull/67274#pullrequestreview-502485800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5774abf7-f43b-43c6-bafd-9d56862623f0",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I thought we were trying to avoid adding new globals to the context and instead providing ctor initialization. Is that not possible for some reason in this case, or are we not trying to do that anymore?",
        "createdAt" : "2020-10-05T21:37:49Z",
        "updatedAt" : "2020-10-05T21:37:49Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "8c9d2e90-4261-445c-8990-c1526db11d5b",
        "parentId" : "5774abf7-f43b-43c6-bafd-9d56862623f0",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "The initialization of the flutter commands still needs some work, but eventually yet.",
        "createdAt" : "2020-10-05T21:46:54Z",
        "updatedAt" : "2020-10-05T21:46:54Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "01e175d3-f3e7-4e92-9083-dfdc26f0de40",
        "parentId" : "5774abf7-f43b-43c6-bafd-9d56862623f0",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "err \"eventually yes\"",
        "createdAt" : "2020-10-05T21:47:00Z",
        "updatedAt" : "2020-10-05T21:47:02Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "f31baa1f-db6d-4e7e-8e57-d91188ff6842",
        "parentId" : "5774abf7-f43b-43c6-bafd-9d56862623f0",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Can we just introduce this into the ctors of the necessary commands in this patch rather than introducing more work to refactor?",
        "createdAt" : "2020-10-05T22:00:03Z",
        "updatedAt" : "2020-10-05T22:00:04Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "31b781f1-b897-407b-8dbb-d0ebb66869dd",
        "parentId" : "5774abf7-f43b-43c6-bafd-9d56862623f0",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I considered that but it is not feasible until https://github.com/flutter/flutter/pull/67275 and others have been completed and initialization of the tool is moved out of the flutter command",
        "createdAt" : "2020-10-05T22:49:51Z",
        "updatedAt" : "2020-10-05T22:49:51Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "4989592c-b684-4837-a159-37af6e069edb",
        "parentId" : "5774abf7-f43b-43c6-bafd-9d56862623f0",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Ok. LGTM",
        "createdAt" : "2020-10-05T23:22:26Z",
        "updatedAt" : "2020-10-05T23:22:26Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "8692dbd9e6bdc2be91941c17dadf982461a0ca4d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +184,188 @@        platform: globals.platform,\n      ),\n      LocalEngineLocator: () => LocalEngineLocator(\n        userMessages: userMessages,\n        logger: globals.logger,"
  }
]