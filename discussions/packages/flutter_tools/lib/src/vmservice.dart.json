[
  {
    "id" : "de5dc067-97f5-4fb4-9dc5-e08416f09cec",
    "prId" : 6992,
    "prUrl" : "https://github.com/flutter/flutter/pull/6992#pullrequestreview-10319191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f43c65e6-1423-4793-ac75-bf82e39347f7",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "this constructor should take a single uri",
        "createdAt" : "2016-11-23T14:42:02Z",
        "updatedAt" : "2016-11-28T14:58:13Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "29c5eda9-d27e-4519-b42d-97bb0c5baec8",
        "parentId" : "f43c65e6-1423-4793-ac75-bf82e39347f7",
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "ditto.",
        "createdAt" : "2016-11-28T13:59:54Z",
        "updatedAt" : "2016-11-28T14:58:13Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "d83f0cc539f01b79dd8c6ebc558c09127dedf870",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +15,19 @@/// A connection to the Dart VM Service.\nclass VMService {\n  VMService._(this.peer, this.httpAddress, this.wsAddress) {\n    _vm = new VM._empty(this);\n"
  },
  {
    "id" : "0aa1b40f-3cd6-42a4-9a7e-29dc14575265",
    "prId" : 7823,
    "prUrl" : "https://github.com/flutter/flutter/pull/7823#pullrequestreview-19917480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a872185-fdd5-4d64-a6cf-3dfd13ced544",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "do you want to let people pass in timeoutFatal here so it cna be forwarded to invokeRpcRaw?",
        "createdAt" : "2017-02-02T23:02:51Z",
        "updatedAt" : "2017-02-02T23:26:14Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "e4b40573-d265-4086-a3ca-7e5959bc4e47",
        "parentId" : "6a872185-fdd5-4d64-a6cf-3dfd13ced544",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "No, because I don't know what to return if it timed out but is not fatal.",
        "createdAt" : "2017-02-02T23:25:40Z",
        "updatedAt" : "2017-02-02T23:26:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef44c442f54a153346cc362d705f7b34e6fd67",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +594,598 @@  Future<ServiceObject> invokeRpc(String method, {\n    Map<String, dynamic> params: const <String, dynamic>{},\n    Duration timeout,\n  }) async {\n    Map<String, dynamic> response = await invokeRpcRaw("
  },
  {
    "id" : "13a3efc7-f7df-4592-ad5f-9d1313c77b7f",
    "prId" : 7823,
    "prUrl" : "https://github.com/flutter/flutter/pull/7823#pullrequestreview-19913018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5ee7b87-592a-4661-a49f-6b0dd4bb34b4",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "same about timeoutFatal",
        "createdAt" : "2017-02-02T23:03:46Z",
        "updatedAt" : "2017-02-02T23:26:14Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef44c442f54a153346cc362d705f7b34e6fd67",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +765,769 @@\n  /// Invoke the RPC and return a ServiceObject response.\n  Future<ServiceObject> invokeRpc(String method, Map<String, dynamic> params) async {\n    return getFromMap(await invokeRpcRaw(method, params: params));\n  }"
  },
  {
    "id" : "79199383-80bb-4a17-82b6-ce69efb64a04",
    "prId" : 7825,
    "prUrl" : "https://github.com/flutter/flutter/pull/7825#pullrequestreview-19882787",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47c01443-7b2a-4dde-aa98-9d6436e2d294",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "I believe it was simply an error that these two methods did not match the signatures specified by Map<String, dynamic>",
        "createdAt" : "2017-02-02T20:29:14Z",
        "updatedAt" : "2017-02-03T03:17:28Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f0db74a09b1718c5f5e89c7b606c00e74b396fe",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +889,893 @@  bool containsKey(Object k) => _map.containsKey(k);\n  @override\n  void forEach(void f(String key, dynamic value)) => _map.forEach(f);\n  @override\n  dynamic putIfAbsent(String key, dynamic ifAbsent()) => _map.putIfAbsent(key, ifAbsent);"
  },
  {
    "id" : "f3779260-9caf-4ac8-8d39-537b1d377382",
    "prId" : 7825,
    "prUrl" : "https://github.com/flutter/flutter/pull/7825#pullrequestreview-19883256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "513d491f-08d9-4363-a333-8704bc23e346",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "the changes in this file are fine",
        "createdAt" : "2017-02-02T20:31:33Z",
        "updatedAt" : "2017-02-03T03:17:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f0db74a09b1718c5f5e89c7b606c00e74b396fe",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +894,898 @@  @override\n  void remove(Object key) => _map.remove(key);\n  @override\n  dynamic operator [](Object k) => _map[k];\n  @override"
  },
  {
    "id" : "15c11689-41af-4b44-a6fc-87295a3bd130",
    "prId" : 9495,
    "prUrl" : "https://github.com/flutter/flutter/pull/9495#pullrequestreview-33814118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5df0fc64-a55b-44a3-a571-a2097c8c9431",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Looks like arg for `complete()` is optional. We could omit the `null` here, or specify it for clarity.",
        "createdAt" : "2017-04-20T16:06:13Z",
        "updatedAt" : "2017-04-20T16:06:13Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "cba85342300e58ea2951694dfdd326ecac8e4c6b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1126,1130 @@        printTrace('Isolate is runnable.');\n        if (!completer.isCompleted)\n          completer.complete(null);\n      }\n    });"
  },
  {
    "id" : "4e340a8d-87d1-484d-ac76-1044670d16bc",
    "prId" : 11229,
    "prUrl" : "https://github.com/flutter/flutter/pull/11229#pullrequestreview-50394558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00d60a65-d09d-4d98-8fc4-e1e336978da5",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Can you explain what the 'reloadSources' service is here?",
        "createdAt" : "2017-07-16T18:25:25Z",
        "updatedAt" : "2017-07-17T19:24:27Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "1b88fa02-c9e7-4f44-b8df-70d4df19d5dc",
        "parentId" : "00d60a65-d09d-4d98-8fc4-e1e336978da5",
        "authorId" : "f8e9d80a-74e7-4358-8bf2-117ab0de4a3a",
        "body" : "done",
        "createdAt" : "2017-07-17T17:48:57Z",
        "updatedAt" : "2017-07-17T19:24:27Z",
        "lastEditedBy" : "f8e9d80a-74e7-4358-8bf2-117ab0de4a3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "31412acfa96c22fe22d4dbb0ce2412128004b16f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +25,29 @@_OpenChannel _openChannel = _defaultOpenChannel;\n\n/// A function that reacts to the invocation of the 'reloadSources' service.\n///\n/// The VM Service Protocol allows clients to register custom services that"
  },
  {
    "id" : "0c84385d-dd1a-4b33-a7b7-a4e7d7fb9ea6",
    "prId" : 16698,
    "prUrl" : "https://github.com/flutter/flutter/pull/16698#pullrequestreview-113278318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26571ed9-c860-4b4f-9889-a2d896ed9c09",
        "parentId" : null,
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "Use of `Future<Stream<T>>` should never be necessary?",
        "createdAt" : "2018-04-18T06:55:10Z",
        "updatedAt" : "2018-04-18T07:29:15Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      },
      {
        "id" : "e73afb04-5806-48b6-a533-ff6ad8f55a40",
        "parentId" : "26571ed9-c860-4b4f-9889-a2d896ed9c09",
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "Interesting, I didn't know that. Why? What if we are not able to provide `Stream` right away? (which is basically the case here)",
        "createdAt" : "2018-04-18T06:58:06Z",
        "updatedAt" : "2018-04-18T07:29:15Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      },
      {
        "id" : "0e7f2b62-d645-4ea0-ac44-013c85c03d63",
        "parentId" : "26571ed9-c860-4b4f-9889-a2d896ed9c09",
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "I may be wrong of course, but I actually think any use of `Future<Stream<T>>` should result in a linter warning. One should always be able to just return a `Stream<T>` immediately and then delay the first event on that stream.",
        "createdAt" : "2018-04-18T06:59:36Z",
        "updatedAt" : "2018-04-18T07:29:15Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      },
      {
        "id" : "a1f35b3a-d6df-4072-9ee7-84858fb51b37",
        "parentId" : "26571ed9-c860-4b4f-9889-a2d896ed9c09",
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "Sure, but how do you represent the case where a method that returns `Stream` actually have to `await` for something else? In our case we want to say `(await vmService.onTimelineEvent).listen` to indicate that we don't want continue with rest of `runFromSource` until we get the stream, which happens after vm confirms it received the event subscription.",
        "createdAt" : "2018-04-18T07:05:04Z",
        "updatedAt" : "2018-04-18T07:29:15Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      },
      {
        "id" : "18879cd2-6446-4409-b87e-ebd77a5c9803",
        "parentId" : "26571ed9-c860-4b4f-9889-a2d896ed9c09",
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "I'd probably contend that the method does two things and should be split.",
        "createdAt" : "2018-04-18T07:10:05Z",
        "updatedAt" : "2018-04-18T07:29:15Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      },
      {
        "id" : "b71492c5-e73e-4af6-93df-f9c728f25ca0",
        "parentId" : "26571ed9-c860-4b4f-9889-a2d896ed9c09",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "When the method that returns a `Stream` has to await something else, the right solution is to use `async*` and `yield`.",
        "createdAt" : "2018-04-18T15:10:32Z",
        "updatedAt" : "2018-04-18T15:10:32Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "08008c1b-3973-48a0-8ba6-b0d54c17324f",
        "parentId" : "26571ed9-c860-4b4f-9889-a2d896ed9c09",
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "I don't think that is the issue here. We want to await an asynchronous stream setup operation before calling runInView. I think it should be done in its own method, separate from the Stream getters",
        "createdAt" : "2018-04-18T15:30:04Z",
        "updatedAt" : "2018-04-18T15:30:04Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      },
      {
        "id" : "3fe85114-e600-4487-9333-dd9156990aa8",
        "parentId" : "26571ed9-c860-4b4f-9889-a2d896ed9c09",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Just for cleanliness' sake, I sent https://github.com/flutter/flutter/pull/16711",
        "createdAt" : "2018-04-18T15:44:12Z",
        "updatedAt" : "2018-04-18T15:44:13Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd085a5a73baeccb9d3ae1574d7c5cf4d0e89fa6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +176,180 @@\n  // Events\n  Future<Stream<ServiceEvent>> get onDebugEvent => onEvent('Debug');\n  Future<Stream<ServiceEvent>> get onExtensionEvent => onEvent('Extension');\n  // IsolateStart, IsolateRunnable, IsolateExit, IsolateUpdate, ServiceExtensionAdded"
  },
  {
    "id" : "7cb876f5-1e32-41ce-a422-3d22600dc783",
    "prId" : 16785,
    "prUrl" : "https://github.com/flutter/flutter/pull/16785#pullrequestreview-114085123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbc58988-d160-4d10-960d-825df977c87c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This means if the error was something like a CompilerError, we'll retry anyway, which is a bit weird. But I guess we're seeing a lot of different kinds of errors here?",
        "createdAt" : "2018-04-20T16:49:45Z",
        "updatedAt" : "2018-04-20T16:49:46Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "80de6e8c-5f9a-4b5e-a034-0137f5b75008",
        "parentId" : "fbc58988-d160-4d10-960d-825df977c87c",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "We can get both `SocketException` and `WebSocketException`, which for some reason don't extend one another.  So I could have added two catch blocks, but I went with just a global catch.  Lemme know if you think I should change it.",
        "createdAt" : "2018-04-20T16:58:27Z",
        "updatedAt" : "2018-04-20T16:58:27Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "03f8d219-76e1-4354-8841-155c516dd7b6",
        "parentId" : "fbc58988-d160-4d10-960d-825df977c87c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "As a general rule I prefer not doing global catches because they tend to swallow real errors. In this case it's not a huge deal since the real errors will still get noisily printed to the console and eventually result in a failure. I'll leave it up to you which way you want to go on this.",
        "createdAt" : "2018-04-20T17:11:31Z",
        "updatedAt" : "2018-04-20T17:11:31Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1ad2b9f3-843d-4551-a503-715770af562e",
        "parentId" : "fbc58988-d160-4d10-960d-825df977c87c",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "What we really want here is Java multi-catch ability:\r\n\r\n```dart\r\n} on io.SocketExceptiojn, io.WebSocketException catch (e) {\r\n  ...\r\n}\r\n```\r\n\r\nBut that doesn't exist.  Given the limited scope of what's in this try/catch, I'm fine with leaving it as-is, but I don't feel strongly either way.",
        "createdAt" : "2018-04-20T18:40:04Z",
        "updatedAt" : "2018-04-20T18:40:04Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a6f8e3084848845662905fe8e8ee3d301a70c07",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +55,59 @@      socket = await io.WebSocket.connect(uri.toString());\n    } catch (e) {\n      printTrace('Exception attempting to connect to observatory: $e');\n      printTrace('This was attempt #$attempts. Will retry in $delay.');\n      await new Future<Null>.delayed(delay);"
  },
  {
    "id" : "0948a5e9-50b0-4691-866e-f953e57ddb25",
    "prId" : 19007,
    "prUrl" : "https://github.com/flutter/flutter/pull/19007#pullrequestreview-134125065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "834081f1-8d3e-4a3d-9157-99a18e01ab82",
        "parentId" : null,
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "`Future<void>`?",
        "createdAt" : "2018-07-03T06:36:13Z",
        "updatedAt" : "2018-07-03T20:22:13Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      },
      {
        "id" : "fc764251-52e2-4512-b50b-de3e5ea146eb",
        "parentId" : "834081f1-8d3e-4a3d-9157-99a18e01ab82",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "I really don't know if we're returning `null` or `void` here.",
        "createdAt" : "2018-07-03T18:59:53Z",
        "updatedAt" : "2018-07-03T20:22:13Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b192f55d3b20da852fe9e6c6a780b88b5ecbc413",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +259,263 @@  bool get isClosed => _peer.isClosed;\n\n  Future<Null> get done async {\n    await _peer.done;\n  }"
  },
  {
    "id" : "2ff5c872-5a68-4091-82a4-16c7352d50a8",
    "prId" : 23529,
    "prUrl" : "https://github.com/flutter/flutter/pull/23529#pullrequestreview-169023926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aebf9d2c-36cb-4229-95fd-f62088ac70de",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Curious: is there a reason why `i++` is less desirable?",
        "createdAt" : "2018-10-26T19:39:46Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "9dde70dd-7684-4282-9cc5-3457e9c2120e",
        "parentId" : "aebf9d2c-36cb-4229-95fd-f62088ac70de",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "in this case, not really. In the general case, `++` suffix can be less efficient (since it has to store the value, then increment it, then use it), so `++` prefix is preferred. But that's ugly. So I pre-emptively turn `++` into the equivalent `+= 1` to make people more comfortable with `+= 1` so that the issue of `++` prefix can go away. :-)",
        "createdAt" : "2018-10-26T22:53:17Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d58c923fd1a46e9ea37d5cf3a42b4eb2fc81026",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +388,392 @@\nvoid _upgradeList(List<dynamic> list, ServiceObjectOwner owner) {\n  for (int i = 0; i < list.length; i += 1) {\n    final Object v = list[i];\n    if ((v is Map<String, dynamic>) && _isServiceMap(v)) {"
  },
  {
    "id" : "6df2fb3a-fafa-4af9-911d-9f1f7dd092b0",
    "prId" : 23529,
    "prUrl" : "https://github.com/flutter/flutter/pull/23529#pullrequestreview-169024043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91d3454d-4f6d-435a-a566-6953b0703e66",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "`@visibleForTesting`?",
        "createdAt" : "2018-10-26T19:40:59Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "995df00e-4034-4de3-ab6a-4072fa8eff73",
        "parentId" : "91d3454d-4f6d-435a-a566-6953b0703e66",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Does it matter in this case?",
        "createdAt" : "2018-10-26T22:53:56Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d58c923fd1a46e9ea37d5cf3a42b4eb2fc81026",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +106,110 @@/// A connection to the Dart VM Service.\nclass VMService {\n  VMService(\n    this._peer,\n    this.httpAddress,"
  },
  {
    "id" : "c8f94c8d-2d9f-47c7-9d7a-485f09d1b3ea",
    "prId" : 23529,
    "prUrl" : "https://github.com/flutter/flutter/pull/23529#pullrequestreview-169024169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "594114e0-d886-4f1b-aa1f-d5dcdf535aa1",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Should/can this be `List<Object>` too, since you change `dynamic` to `Object` below?",
        "createdAt" : "2018-10-26T19:41:48Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "ddbf9945-02e4-455f-a11c-9d99a4285d6f",
        "parentId" : "594114e0-d886-4f1b-aa1f-d5dcdf535aa1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think the JSON logic creates `List<dynamic>`s, not `List<Object>`s.",
        "createdAt" : "2018-10-26T22:54:29Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d58c923fd1a46e9ea37d5cf3a42b4eb2fc81026",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +387,391 @@}\n\nvoid _upgradeList(List<dynamic> list, ServiceObjectOwner owner) {\n  for (int i = 0; i < list.length; i += 1) {\n    final Object v = list[i];"
  },
  {
    "id" : "bf876a2a-6941-4588-92ea-cccc32d5cbba",
    "prId" : 23529,
    "prUrl" : "https://github.com/flutter/flutter/pull/23529#pullrequestreview-169024852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc12f097-71d8-4f66-9eb4-afbde1411803",
        "parentId" : null,
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "Similarly, can we avoid awaiting in this method and instead let caller await if it decided it needed to?",
        "createdAt" : "2018-10-26T19:51:36Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      },
      {
        "id" : "0a092bd2-9cc9-443d-a0b0-7dbcfbb832ff",
        "parentId" : "bc12f097-71d8-4f66-9eb4-afbde1411803",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "The return value of this method will be a future that will complete when all the futures have completed.  It's still up to the caller to await the future returned by this method or not.",
        "createdAt" : "2018-10-26T19:54:16Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "0e01cb0d-aaa5-4eb3-ac2f-b89b77d52ba1",
        "parentId" : "bc12f097-71d8-4f66-9eb4-afbde1411803",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "`await future; ...rest of method...` is exactly equivalent to `return future.then(...rest of method...)`.",
        "createdAt" : "2018-10-26T22:58:13Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d58c923fd1a46e9ea37d5cf3a42b4eb2fc81026",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +960,964 @@        ));\n      }\n      await Future.wait(futures);\n      if (_viewCache.values.isNotEmpty || !waitForViews)\n        return;"
  },
  {
    "id" : "dab2af3e-3f4f-41b2-adf6-4df8927ea531",
    "prId" : 23529,
    "prUrl" : "https://github.com/flutter/flutter/pull/23529#pullrequestreview-169024995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2df49baf-76f5-4387-a79b-11416d086fa7",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Add a comment explaining that upon completion of this RPC, `_viewCache` will be updated.",
        "createdAt" : "2018-10-26T20:04:13Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "888d5abc-19fc-4067-99cf-a6ffc6e308fa",
        "parentId" : "2df49baf-76f5-4387-a79b-11416d086fa7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "done",
        "createdAt" : "2018-10-26T22:59:07Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d58c923fd1a46e9ea37d5cf3a42b4eb2fc81026",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +954,958 @@        // When the future returned by invokeRpc() below returns,\n        // the _viewCache will have been updated.\n        futures.add(vmService.vm.invokeRpc<ServiceObject>(\n          '_flutter.listViews',\n          timeout: kLongRequestTimeout,"
  },
  {
    "id" : "48c41976-cb35-4e70-9251-4b5e32631671",
    "prId" : 23529,
    "prUrl" : "https://github.com/flutter/flutter/pull/23529#pullrequestreview-169025667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0faa9711-909d-4804-83b1-53f02f5aaf31",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Can `listViews` ever legitimately turn up no `FlutterView` instances?  If so, we'll retry here until we eventually fail, even though there was no failure...",
        "createdAt" : "2018-10-26T20:05:16Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "b98ac118-348c-4f9d-8dca-700b3dd98ff5",
        "parentId" : "0faa9711-909d-4804-83b1-53f02f5aaf31",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Though I guess that's what `waitForViews` is for (why why it defaults to `false`)?",
        "createdAt" : "2018-10-26T20:06:10Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "6c6385e0-94ec-43ed-a09b-b7f847997408",
        "parentId" : "0faa9711-909d-4804-83b1-53f02f5aaf31",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't know the answer to your first question, but if so, I don't know how we would distinguish that case from the normal case where we don't want to return until we have a view.\r\n\r\nThe argument defaults to false so as to not change the default behaviour in the regular case; only in the specific case where I believe we definitely need a view did I set it to true.",
        "createdAt" : "2018-10-26T23:03:28Z",
        "updatedAt" : "2018-10-27T22:36:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d58c923fd1a46e9ea37d5cf3a42b4eb2fc81026",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +961,965 @@      }\n      await Future.wait(futures);\n      if (_viewCache.values.isNotEmpty || !waitForViews)\n        return;\n      failCount += 1;"
  },
  {
    "id" : "5baa4ff5-084c-43d6-a1fa-fe49fb2ff5c6",
    "prId" : 43725,
    "prUrl" : "https://github.com/flutter/flutter/pull/43725#pullrequestreview-308618164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ffb896f-82f7-4949-ad0f-1127edeffe71",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "throw invalid parameters on the parameters that are required so I know what to pass.\r\n",
        "createdAt" : "2019-10-29T15:42:05Z",
        "updatedAt" : "2019-10-29T15:47:07Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "8edef8b6f1c4a88c30846847963a00987a10673f",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +147,151 @@      // to change to a more efficient implementation in the future.\n      _peer.registerMethod('reloadMethod', (rpc.Parameters params) async {\n        final String isolateId = params['isolateId'].value;\n        final String libraryId = params['library'].value;\n        final String classId = params['class'].value;"
  },
  {
    "id" : "50fecf53-1727-4c90-8040-f7dced94805f",
    "prId" : 53957,
    "prUrl" : "https://github.com/flutter/flutter/pull/53957#pullrequestreview-387624298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efc2054f-1d61-4873-8060-5e2d039b28f7",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "This was the missing line that broke the routing test. Without it, we don't detect when the vm service goes down.",
        "createdAt" : "2020-04-03T22:56:38Z",
        "updatedAt" : "2020-04-03T22:56:39Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e97591e56d4e7fb7a13e0c940e65774db3186ef",
    "line" : 366,
    "diffHunk" : "@@ -1,1 +361,365 @@      primary.close();\n      secondary.close();\n      streamClosedCompleter.complete();\n    }, onError: (dynamic error, StackTrace stackTrace) {\n      primary.addError(error, stackTrace);"
  },
  {
    "id" : "e8b2681d-1f67-4405-b2bf-6463840e3cf8",
    "prId" : 54132,
    "prUrl" : "https://github.com/flutter/flutter/pull/54132#pullrequestreview-390235992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3af6cd00-0ef7-4871-9cac-cfee796b115e",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Missing check for is completed. The old VM service might have been OK with being torn down multiple times though, not sure. At any rate I can't repro the test failure anymore",
        "createdAt" : "2020-04-07T17:53:05Z",
        "updatedAt" : "2020-04-08T18:43:53Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "18b0cb59-3959-4225-8729-9a84a9750f64",
        "parentId" : "3af6cd00-0ef7-4871-9cac-cfee796b115e",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "If we're trying to tear it down twice, could we also be trying to use it after closing it in some other way?",
        "createdAt" : "2020-04-07T22:04:36Z",
        "updatedAt" : "2020-04-08T18:43:53Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "9ca35a3f-8c97-4e8c-a4d4-52768a2f109e",
        "parentId" : "3af6cd00-0ef7-4871-9cac-cfee796b115e",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I've looked into it a bit more and I'm not certain - I can't consistently repro the crash. I think the stream logic is just too complicated right now, and should be a bit simpler once I no longer need to duplicate events",
        "createdAt" : "2020-04-08T18:41:57Z",
        "updatedAt" : "2020-04-08T18:43:53Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "678945f61bf7ec2c70e779b5e8eb0ba02dfd7896",
    "line" : 376,
    "diffHunk" : "@@ -1,1 +372,376 @@      log: null,\n      disposeHandler: () async {\n        if (!streamClosedCompleter.isCompleted) {\n          streamClosedCompleter.complete();\n        }"
  }
]