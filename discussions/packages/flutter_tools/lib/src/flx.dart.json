[
  {
    "id" : "1ed125f3-2b94-4967-ba89-cd696e1a519c",
    "prId" : 1624,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25a5b4ca-d44e-4c31-9b80-98efc21cfbf1",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "We may want to promote this file to the `lib/` dir (instead of being in `lib/src/`). `lib/` is API public, and `src/` means internal impl. It'll make it easier for us to know which APIs to be careful about.\n\nIf we do that, we should demote some things which are currently library public in this file to private.\n",
        "createdAt" : "2016-02-04T23:16:36Z",
        "updatedAt" : "2016-02-04T23:47:35Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "09d090f8-c785-48ac-9af5-2337d40c8142",
        "parentId" : "25a5b4ca-d44e-4c31-9b80-98efc21cfbf1",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Good idea.  I'll do it as a follow-on CL to keep the diff more sane (the splitting of the API vs the rejiggering of files)\n",
        "createdAt" : "2016-02-04T23:22:15Z",
        "updatedAt" : "2016-02-04T23:47:35Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "4a3af487-7b79-4352-963b-5fe702abd1da",
        "parentId" : "25a5b4ca-d44e-4c31-9b80-98efc21cfbf1",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Sounds good. If you're using the API, we want to make refactorings of the public API much more mindful, which I think means promoting the public api bits to `lib/`.\n",
        "createdAt" : "2016-02-04T23:26:13Z",
        "updatedAt" : "2016-02-04T23:47:35Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0379df5c7748a66aa98ab929065c94bd0e4d3c2",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +249,253 @@/// This may be called by external build toolchains, so practice caution\n/// when changing this method signature (alert flutter-dev).\nFuture<int> assemble({\n  Map manifestDescriptor: const {},\n  ArchiveFile snapshotFile: null,"
  },
  {
    "id" : "c5c8e02c-92aa-4b6d-ba98-40ac7851b492",
    "prId" : 1649,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d25dfe6f-fdad-404d-ac57-123f5ebcb068",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Too bad the type checker can't enforce these.\n",
        "createdAt" : "2016-02-06T06:06:17Z",
        "updatedAt" : "2016-02-06T06:06:17Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "ff21beee-dfbf-47fa-8295-5086640aca6a",
        "parentId" : "d25dfe6f-fdad-404d-ac57-123f5ebcb068",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This is actually magic syntax for the analyzer as of 1.14.\n",
        "createdAt" : "2016-02-06T06:45:42Z",
        "updatedAt" : "2016-02-06T06:45:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd8078b06693079c95714057baf4f9e592026b4",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +100,104 @@}\n\nIterable/*<T>*/ _generateValues/*<T>*/(\n  Map/*<String, T>*/ assetDescriptor,\n  String key,"
  },
  {
    "id" : "181a1587-9fd0-44db-9025-f9c7bf5e57ba",
    "prId" : 2876,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e913bf73-ebcf-4b47-bb70-aea21e11486a",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We might want to produce a good error message if the manifest doesn't match the expected schema.\n",
        "createdAt" : "2016-03-24T18:26:59Z",
        "updatedAt" : "2016-03-24T18:26:59Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "f17b68d2d3be915d6066fdc7ab016a25340a2a53",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +86,90 @@  if (manifestDescriptor.containsKey('fonts')) {\n    for (Map<String, dynamic> family in manifestDescriptor['fonts']) {\n      List<Map<String, dynamic>> fonts = family['fonts'];\n      if (fonts == null) continue;\n"
  },
  {
    "id" : "adda102a-9c2a-46f6-ba79-4b926019d0a5",
    "prId" : 3004,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65b2f327-ca21-498b-becd-8bf926f6407c",
        "parentId" : null,
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "Just looking at the comments, it's not so clear to me what the difference is between base and source.  I'm starting to think we should do a pass over Asset and come up with somewhat better names and documentation for these fields.\n",
        "createdAt" : "2016-03-30T19:50:41Z",
        "updatedAt" : "2016-03-30T19:50:41Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      },
      {
        "id" : "0b0d8241-e682-4125-b3c0-c01121b37e24",
        "parentId" : "65b2f327-ca21-498b-becd-8bf926f6407c",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Yup, from the one use of `source`, it looks like it's an alternative to `relativePath` (or what had been called `key`). +1 to a refactor and re-alignment\n",
        "createdAt" : "2016-03-30T19:52:49Z",
        "updatedAt" : "2016-03-30T19:52:49Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "b14c5673-6125-45b4-babd-9e395f697b04",
        "parentId" : "65b2f327-ca21-498b-becd-8bf926f6407c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Can you file a bug to track this? Thanks.\n",
        "createdAt" : "2016-03-31T21:44:32Z",
        "updatedAt" : "2016-03-31T21:44:43Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "38909380-2dcb-4be5-96ea-1ba8c1a4a4b4",
        "parentId" : "65b2f327-ca21-498b-becd-8bf926f6407c",
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "https://github.com/flutter/flutter/issues/3031\n",
        "createdAt" : "2016-03-31T22:10:18Z",
        "updatedAt" : "2016-03-31T22:10:18Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd0b832a33a1b53e1f5fa303a703b04fc03e2521",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +47,51 @@\n  /// Where the resource is on disk realtive to [base].\n  final String relativePath;\n\n  final String source;"
  },
  {
    "id" : "7e645216-9bcd-419a-a5cc-52c3b9a722af",
    "prId" : 4984,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9bf6bc7-2ef9-4f77-985a-a5c22fb8da33",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Should we de-dupe here? Get some normalized fingerprint of the license text and remove duplicates based on that fingerprint?\n",
        "createdAt" : "2016-07-21T15:47:00Z",
        "updatedAt" : "2016-07-21T15:47:00Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "51804bcd-17df-4446-bf0d-259d794eac96",
        "parentId" : "f9bf6bc7-2ef9-4f77-985a-a5c22fb8da33",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "It does do basic deduping (that's why I use the Set). In a future patch I'll try to do normalisation too, but that's legally sensitive.\n",
        "createdAt" : "2016-07-21T16:09:16Z",
        "updatedAt" : "2016-07-21T16:09:16Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0f0d0c966eb81a578c9798fb5b93e25e0be7b9e",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +222,226 @@\n  final List<String> combinedLicensesList = packageLicenses.toList();\n  combinedLicensesList.sort();\n\n  final String combinedLicenses = combinedLicensesList.join(_licenseSeparator);"
  },
  {
    "id" : "bc11ad02-eefb-4e87-a4cb-2d517c985d37",
    "prId" : 4984,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b488379-295d-4f80-96d5-8d121eefe2b5",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "I didn't know you could operate on a string that way (`*`) -\n",
        "createdAt" : "2016-07-21T15:47:24Z",
        "updatedAt" : "2016-07-21T15:47:24Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0f0d0c966eb81a578c9798fb5b93e25e0be7b9e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +201,205 @@}\n\nfinal String _licenseSeparator = '\\n' + ('-' * 80) + '\\n';\n\n/// Returns a ZipEntry representing the license file."
  },
  {
    "id" : "c7869a8c-99b1-4ac9-a26d-083a20767db8",
    "prId" : 8754,
    "prUrl" : "https://github.com/flutter/flutter/pull/8754#pullrequestreview-26703101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60c7415e-6a61-46b5-8ff6-69c6e52be217",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "To build a script snapshot (as is done here) any gen_snapshot binary should be sufficient. In non-local-engine mode, we return gen_snapshot in profile mode for example. Specifying debug mode here feels wrong.",
        "createdAt" : "2017-03-14T00:05:38Z",
        "updatedAt" : "2017-03-14T00:52:35Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "46082972-05c3-4363-a952-829f46eb2f7d",
        "parentId" : "60c7415e-6a61-46b5-8ff6-69c6e52be217",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "gen_snapshot will be found at different paths in the local engine output depending on which build mode the engine is targeting.  A script snapshot implies debug mode, so this passes BuildMode.debug\r\n",
        "createdAt" : "2017-03-14T00:21:41Z",
        "updatedAt" : "2017-03-14T00:52:35Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      },
      {
        "id" : "d9daad57-be27-40cd-8c38-ba7de273ad27",
        "parentId" : "60c7415e-6a61-46b5-8ff6-69c6e52be217",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Got it. I think this will break getting the artifact in the non-local engine mode because that code currently does not support the combination of `mode != null` and `targetPlatform == null`.",
        "createdAt" : "2017-03-14T00:28:38Z",
        "updatedAt" : "2017-03-14T00:52:35Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "e4d31668-f8e7-4995-b434-c286bcec1b82",
        "parentId" : "60c7415e-6a61-46b5-8ff6-69c6e52be217",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "Ah, now I see.  This was working for a non-local engine when I tested it, but there's an assert in CachedArtifacts.getArtifactPath that would fail if the mode is non-null.  (Gradle doesn't run flutter_tools with asserts on)\r\n\r\nAny objection to removing the assert?\r\nBuild modes can be useful for host platforms given that binary paths will change based on the build mode\r\n",
        "createdAt" : "2017-03-14T00:48:18Z",
        "updatedAt" : "2017-03-14T00:52:35Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      },
      {
        "id" : "517b9d77-bee0-44f3-a889-c8feb2ff0b62",
        "parentId" : "60c7415e-6a61-46b5-8ff6-69c6e52be217",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Sounds good.",
        "createdAt" : "2017-03-14T00:51:06Z",
        "updatedAt" : "2017-03-14T00:52:35Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "2979a6056257a7324f577949bf9f0a9e4a4da3be",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +37,41 @@  assert(snapshotPath != null);\n  assert(packages != null);\n  final String snapshotterPath = artifacts.getArtifactPath(Artifact.genSnapshot, null, BuildMode.debug);\n  final String vmSnapshotData = artifacts.getArtifactPath(Artifact.vmSnapshotData);\n  final String isolateSnapshotData = artifacts.getArtifactPath(Artifact.isolateSnapshotData);"
  },
  {
    "id" : "cf3c39e3-ab4c-4ea8-8fce-c012fd0f1087",
    "prId" : 13859,
    "prUrl" : "https://github.com/flutter/flutter/pull/13859#pullrequestreview-86446006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ed3d5a-f297-4586-9e83-9c18fb7ed591",
        "parentId" : null,
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "This would require changes in engine's dart_init.cc(line 89) so that correct platform.dill is picked up from the archive.",
        "createdAt" : "2018-01-03T17:56:18Z",
        "updatedAt" : "2018-01-03T17:56:18Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      },
      {
        "id" : "2d97e66e-4438-4975-a2ee-9f40ca5ab1e5",
        "parentId" : "77ed3d5a-f297-4586-9e83-9c18fb7ed591",
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "Scratch that. Like you explained, the file will be put into archive under `_kPlatformKernelKey` name.",
        "createdAt" : "2018-01-03T18:04:19Z",
        "updatedAt" : "2018-01-03T18:04:19Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      }
    ],
    "commit" : "9482ebe8201a1501bfbb09f483d91ea2f1aaa29e",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +134,138 @@  if (kernelContent != null) {\n    final String platformKernelDill = strongMode ?\n        artifacts.getArtifactPath(Artifact.platformKernelStrongDill) :\n        artifacts.getArtifactPath(Artifact.platformKernelDill);\n    zipBuilder.entries[_kKernelKey] = kernelContent;"
  }
]