[
  {
    "id" : "cc76a111-d861-4d50-b4c5-752dd4aaa12a",
    "prId" : 8435,
    "prUrl" : "https://github.com/flutter/flutter/pull/8435#pullrequestreview-24107786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eae31bb5-b3a5-42bf-ad21-a5fe51452e84",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "general question- how do we handle ordering issues with these shutdown hooks?",
        "createdAt" : "2017-02-27T22:05:19Z",
        "updatedAt" : "2017-02-27T23:24:51Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      }
    ],
    "commit" : "eeff8d3c99d7311df4e9debaf22bf2fbe83576fc",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +39,43 @@  RecordingFileSystem fileSystem = new RecordingFileSystem(\n      delegate: _kLocalFs, destination: dir);\n  addShutdownHook(() async {\n    await fileSystem.recording.flush();\n    context.setVariable(FileSystem, originalFileSystem);"
  },
  {
    "id" : "930603e2-0ae7-4011-a3b4-564f0bf1b21c",
    "prId" : 39145,
    "prUrl" : "https://github.com/flutter/flutter/pull/39145#pullrequestreview-279246641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aeb53cb7-9e1c-4af8-9329-e2bc9593175f",
        "parentId" : null,
        "authorId" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "body" : "rather than a callback closure, what if this instead was a optional boolean argument `shouldOverwrite` that defaulted to `true`?",
        "createdAt" : "2019-08-23T21:53:05Z",
        "updatedAt" : "2019-08-28T18:40:52Z",
        "lastEditedBy" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "tags" : [
        ]
      },
      {
        "id" : "b76a9b73-3960-4307-bf78-37ff38100b24",
        "parentId" : "aeb53cb7-9e1c-4af8-9329-e2bc9593175f",
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "I thought about it. I ended up going with a callback because I see this as a generic utility--someone may want to filter based on other criteria. ",
        "createdAt" : "2019-08-23T22:26:34Z",
        "updatedAt" : "2019-08-28T18:40:52Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "8f71712e-6f24-43f8-8a11-465ab89505d6",
        "parentId" : "aeb53cb7-9e1c-4af8-9329-e2bc9593175f",
        "authorId" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "body" : ":+1: ",
        "createdAt" : "2019-08-23T22:28:21Z",
        "updatedAt" : "2019-08-28T18:40:52Z",
        "lastEditedBy" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c28abbb914c1e2567f542014660da681f359549",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +73,77 @@  Directory destDir,\n  {\n    bool shouldCopyFile(File srcFile, File destFile),\n    void onFileCopied(File srcFile, File destFile),\n  }"
  },
  {
    "id" : "b4ec7972-e77e-4abb-87f1-46cc7b8a7838",
    "prId" : 39145,
    "prUrl" : "https://github.com/flutter/flutter/pull/39145#pullrequestreview-279245623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88d90406-9066-4d8d-ac16-abc213dc48b9",
        "parentId" : null,
        "authorId" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "body" : "is `onFileCopied` supposed to be passed on to recursive calls? It seems in the old version it was not.",
        "createdAt" : "2019-08-23T21:55:09Z",
        "updatedAt" : "2019-08-28T18:40:52Z",
        "lastEditedBy" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "tags" : [
        ]
      },
      {
        "id" : "fd626080-3c11-4251-bf06-0ffb4aad9753",
        "parentId" : "88d90406-9066-4d8d-ac16-abc213dc48b9",
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "Based on the original description of this function, it looks like it was a bug :)",
        "createdAt" : "2019-08-23T22:23:17Z",
        "updatedAt" : "2019-08-28T18:40:52Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "4b038e14-a7a8-4dbc-b99b-fcc5f0fdc78d",
        "parentId" : "88d90406-9066-4d8d-ac16-abc213dc48b9",
        "authorId" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "body" : "sgtm",
        "createdAt" : "2019-08-23T22:23:40Z",
        "updatedAt" : "2019-08-28T18:40:52Z",
        "lastEditedBy" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c28abbb914c1e2567f542014660da681f359549",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +97,101 @@        destDir.fileSystem.directory(newPath),\n        shouldCopyFile: shouldCopyFile,\n        onFileCopied: onFileCopied,\n      );\n    } else {"
  },
  {
    "id" : "a8d1c3df-fbb3-4bbd-8a2f-6a1e91be0dbd",
    "prId" : 44065,
    "prUrl" : "https://github.com/flutter/flutter/pull/44065#pullrequestreview-310815074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6666d9b9-dca1-4b4e-87ce-8871eb249928",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "These 2 different APIs have different granularity so if entity is modified within a second of referenceFile was, the result will be wrong and all kinds of crazy things can happen. ",
        "createdAt" : "2019-11-03T12:49:13Z",
        "updatedAt" : "2019-11-06T21:29:23Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "755758aa24744a153463ed56b7ce53b4c175c624",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +174,178 @@  }\n  return referenceFile.existsSync()\n      && referenceFile.statSync().modified.isAfter(entity.statSync().modified);\n}\n"
  },
  {
    "id" : "fb05cbc2-8648-4956-9ec4-fb9dd2a7df21",
    "prId" : 55513,
    "prUrl" : "https://github.com/flutter/flutter/pull/55513#pullrequestreview-412161696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0178c36f-5989-4189-b124-ffab1d2f7541",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "It looks like we're blowing away the entire temp here, is that safe to do? Are there issues with tracking the individual temp entries we create?",
        "createdAt" : "2020-05-14T16:28:24Z",
        "updatedAt" : "2020-05-14T20:22:36Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "0333be45-1f15-4ba3-a209-f48267dc09a9",
        "parentId" : "0178c36f-5989-4189-b124-ffab1d2f7541",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "It's not the entire system temp. Maybe it's a bad variable name. Below, the `systemTempDirectory` getter returns a fresh entry under `/tmp`, like `/tmp/flutter_tools.abcxyz`, then the rest of the tool creates `/tmp` entries under that, like `/tmp/flutter_tools.abcxyz/flutter_build_stuff.123456`. Right before exiting because of a signal or otherwise, this code deletes `/tmp/flutter_tools.abcxyz`.",
        "createdAt" : "2020-05-14T17:43:52Z",
        "updatedAt" : "2020-05-14T20:22:36Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "84a84b86-e305-4153-b2b5-fcbcd40f2472",
        "parentId" : "0178c36f-5989-4189-b124-ffab1d2f7541",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Ahh okay, that makes more sense.",
        "createdAt" : "2020-05-14T17:53:33Z",
        "updatedAt" : "2020-05-14T20:22:36Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "f3f1eb8d-4cb3-4e25-b535-3a7f900caee0",
        "parentId" : "0178c36f-5989-4189-b124-ffab1d2f7541",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Promoted my response to a code comment.",
        "createdAt" : "2020-05-14T20:23:00Z",
        "updatedAt" : "2020-05-14T20:23:00Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "445edc63-6409-4c8f-89c1-f37bcdd12db6",
        "parentId" : "0178c36f-5989-4189-b124-ffab1d2f7541",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "One potential issue on windows is that we may fail to delete if there is a process holding onto just one of those files. ",
        "createdAt" : "2020-05-14T20:23:58Z",
        "updatedAt" : "2020-05-14T20:23:58Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "2030a800-dd91-428b-a675-fc4ae8873fda",
        "parentId" : "0178c36f-5989-4189-b124-ffab1d2f7541",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "... I think",
        "createdAt" : "2020-05-14T20:24:03Z",
        "updatedAt" : "2020-05-14T20:24:03Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "c765d742-49d9-4184-883b-966d72cc1f97",
        "parentId" : "0178c36f-5989-4189-b124-ffab1d2f7541",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Yes, that can happen. That's the reason for the `try {} catch {}`. On the flip side, on other platforms, we may see integration test failures if the tool is pulling the rug out from underneath another process.",
        "createdAt" : "2020-05-14T20:31:20Z",
        "updatedAt" : "2020-05-14T20:31:20Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a6a8f976c80c5d69c00e8dd95dcd2f1daf25cef",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +191,195 @@  final List<ProcessSignal> _fatalSignals;\n\n  void _tryToDeleteTemp() {\n    try {\n      if (_systemTemp?.existsSync() ?? false) {"
  },
  {
    "id" : "a2d80f9b-53ac-4eec-92a5-86565085eae9",
    "prId" : 71601,
    "prUrl" : "https://github.com/flutter/flutter/pull/71601#pullrequestreview-544126383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebea53a7-d678-4539-ba5c-8389e2b784f5",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Other callers (were there any?) of `getUniqueFile()` were probably not expecting the file to be created by the call. Do you need to change any of the callsites?\r\n\r\nDo you need to update any unit tests for `getUniqueFile()` for the change in behavior?",
        "createdAt" : "2020-12-03T16:11:59Z",
        "updatedAt" : "2020-12-03T16:12:46Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b984ca76b0ccea6df84e9f5aaa8c9565ff2de86",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +104,108 @@      final File file = fs.file(_fileSystem.path.join(dir.path, name));\n      if (!file.existsSync()) {\n        file.createSync(recursive: true);\n        return file;\n      }"
  },
  {
    "id" : "94a34338-1d46-4d1d-a9dc-951ae7e26d10",
    "prId" : 76020,
    "prUrl" : "https://github.com/flutter/flutter/pull/76020#pullrequestreview-592691386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0de5e89d-629a-4585-83d1-77bac206896d",
        "parentId" : null,
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "Example of a link falling through to the exception: https://github.com/flutter/flutter/issues/35170  ",
        "createdAt" : "2021-02-17T22:40:00Z",
        "updatedAt" : "2021-02-17T22:40:00Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "7696d398a7cde7e3970e05163a67b5183f3a274b",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +151,155 @@  for (final FileSystemEntity entity in srcDir.listSync()) {\n    final String newPath = destDir.fileSystem.path.join(destDir.path, entity.basename);\n    if (entity is Link) {\n      final Link newLink = destDir.fileSystem.link(newPath);\n      newLink.createSync(entity.targetSync());"
  },
  {
    "id" : "12d146cb-38d8-4ace-a60a-a4c7cf5ef7ba",
    "prId" : 77432,
    "prUrl" : "https://github.com/flutter/flutter/pull/77432#pullrequestreview-605706939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b2bd0ef-3001-4c30-86a1-2bebdd2253f6",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "This is fairly simple and only used in the resident runners and tests, I lifted it out to avoid needing to inject fs utils.",
        "createdAt" : "2021-03-06T01:03:15Z",
        "updatedAt" : "2021-03-06T01:03:16Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fb6de1ab7031c5fd9cb1966c7d78d8a9de7f215",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +111,115 @@/// Return a relative path if [fullPath] is contained by the cwd, else return an\n/// absolute path.\nString getDisplayPath(String fullPath, FileSystem fileSystem) {\n  final String cwd = fileSystem.currentDirectory.path + fileSystem.path.separator;\n  return fullPath.startsWith(cwd) ? fullPath.substring(cwd.length) : fullPath;"
  }
]