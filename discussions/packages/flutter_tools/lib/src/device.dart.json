[
  {
    "id" : "32ef5208-d66d-4dd0-897b-0017a383a805",
    "prId" : 715,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "984d6cbc-1ab4-4e65-8d66-a14aeef3ddcd",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Late to the party, but String has a padLeft method that could help here:\n\n```\n=> n.toString().padLeft(n, '0');\n```\n",
        "createdAt" : "2015-12-04T03:35:44Z",
        "updatedAt" : "2015-12-04T03:35:44Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4feaa71a99b2baa4fc644ee7df944e3198bbb3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +854,858 @@  }\n\n  static String _threeDigits(int n) {\n    if (n >= 100) return \"$n\";\n    if (n >= 10) return \"0$n\";"
  },
  {
    "id" : "f0373d28-8ac5-4709-8be8-f27b8cbe8dde",
    "prId" : 871,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2e0c4ba-bcec-4cd0-9882-505f16c94a7e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "not that it matters here but in general hasMatch() followed by firstMatch() is duplication of potentially significant effort.\n",
        "createdAt" : "2015-12-10T19:26:58Z",
        "updatedAt" : "2015-12-10T19:26:58Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "30e9ef38-19fc-402e-892c-38a6d407c9db",
        "parentId" : "c2e0c4ba-bcec-4cd0-9882-505f16c94a7e",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, these regexps are also pretty redundant.  We could probably match them at once.\n",
        "createdAt" : "2015-12-10T19:27:45Z",
        "updatedAt" : "2015-12-10T19:27:45Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd68f08b7c1326bf76b7eeeee2c4d6a6046e51ba",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +558,562 @@        );\n      } else if (offlineRegex.hasMatch(line)) {\n        Match match = offlineRegex.firstMatch(line);\n        String deviceID = match[1];\n        logging.warning('Device $deviceID is offline.');"
  },
  {
    "id" : "2c88113b-ff5e-4cc3-a02b-85d358252fe5",
    "prId" : 1091,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a5773f-685b-4d60-bb25-a0c67fbca883",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "`<String>[...]` here and below.\n",
        "createdAt" : "2016-01-06T21:32:19Z",
        "updatedAt" : "2016-01-06T21:32:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d783718ba06c578365cdc51ea96ce02abbb1976",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +892,896 @@    // Careful: Android's date command is super-lame, any arguments are taken as\n    // attempts to set the timezone and will screw your device.\n    String output = runCheckedSync(adbCommandForDevice(['shell', 'date'])).trim();\n    // format: Fri Dec 18 13:22:07 PST 2015\n    // intl doesn't handle timezones: https://github.com/dart-lang/intl/issues/93"
  },
  {
    "id" : "c288d99b-2a55-4609-be39-aebfe97199ca",
    "prId" : 1113,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07465b5b-226f-425f-bc3f-13732113ac76",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "`<String>['forward', portString, portString]`\n",
        "createdAt" : "2016-01-07T18:43:26Z",
        "updatedAt" : "2016-01-07T18:43:26Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3615827f0e42389633c63050302ab20b3dd61bc9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +774,778 @@    String portString = 'tcp:$_observatoryPort';\n    try {\n      runCheckedSync(adbCommandForDevice(['forward', portString, portString]));\n    } catch (e) {\n      logging.warning('Unable to forward observatory port ($_observatoryPort):\\n$e');"
  },
  {
    "id" : "4b9d9da0-e16b-4d3d-867a-5e4bca9dfece",
    "prId" : 1249,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0abbd649-22c5-491e-bc28-a12314196d98",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "no braces around one-line if statements\n",
        "createdAt" : "2016-01-16T20:43:00Z",
        "updatedAt" : "2016-01-16T20:43:00Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8672a40c1958c1471c52345e5707a6e3a4ee445",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +351,355 @@    List<IOSSimulator> devices = [];\n    String id = _getRunningSimulatorID(mockIOS);\n    if (id != null) {\n      devices.add(new IOSSimulator(id: id));\n    }"
  },
  {
    "id" : "b59262eb-c723-4c6f-a01c-e389f4826a59",
    "prId" : 2474,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2349562-dcca-4fa5-9b2f-86dfb0b68aa3",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "`onLines`?\n",
        "createdAt" : "2016-03-07T23:05:27Z",
        "updatedAt" : "2016-03-08T18:38:29Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "ca0e1ea6-c81e-4401-88ae-3d8609132551",
        "parentId" : "f2349562-dcca-4fa5-9b2f-86dfb0b68aa3",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "We use onFoo for things that are callbacks. This is a Stream, so \"lines\" seems fine.\n",
        "createdAt" : "2016-03-07T23:06:59Z",
        "updatedAt" : "2016-03-08T18:38:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8803cecea1b8897bb5a3a6bfe0d75fdc3236cc6f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +196,200 @@  /// A broadcast stream where each element in the string is a line of log\n  /// output.\n  Stream<String> get lines;\n\n  /// Start reading logs from the device."
  },
  {
    "id" : "89011d68-b933-4d9a-961b-1e8131d4bf75",
    "prId" : 15266,
    "prUrl" : "https://github.com/flutter/flutter/pull/15266#pullrequestreview-102176223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3822e98-5559-472f-a7d8-6f0f07c5dd6f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this is a weird name for a method that returns if something is an emulator. Maybe `isEmulatorAndSupportsHardwareRendering` or some such? Or assert that `isLocalEmulator` is true, and only call it when it's true, and document that it only works for emulators?",
        "createdAt" : "2018-03-08T01:16:28Z",
        "updatedAt" : "2018-03-08T03:12:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "69811b86-6c7b-46e5-8d47-4904829e96ec",
        "parentId" : "d3822e98-5559-472f-a7d8-6f0f07c5dd6f",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Addressed this by adding an assertion that the device is an emulator and only calling inside of the device.isLocalEmulator branch",
        "createdAt" : "2018-03-08T03:12:41Z",
        "updatedAt" : "2018-03-08T03:12:41Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "802280b54f1d5a1007f2f48d4c5dd156e62031e9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +194,198 @@\n  /// Whether the device is a simulator on a platform which supports hardware rendering.\n  Future<bool> get supportsHardwareRendering async {\n    assert(await isLocalEmulator);\n    switch (await targetPlatform) {"
  },
  {
    "id" : "9f429213-5dc0-40e2-9598-19417da22eff",
    "prId" : 26201,
    "prUrl" : "https://github.com/flutter/flutter/pull/26201#pullrequestreview-190040415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53854bb3-f522-46ab-8422-38c999181c95",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Should the 'supportsX' fields be pulled out to a separate class like \"DeviceCapabilities\"?",
        "createdAt" : "2019-01-07T22:43:32Z",
        "updatedAt" : "2019-01-07T23:43:13Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "cb4dc58f-66a2-44c9-b45e-c461478525a1",
        "parentId" : "53854bb3-f522-46ab-8422-38c999181c95",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Sounds like a good idea, done",
        "createdAt" : "2019-01-07T23:37:11Z",
        "updatedAt" : "2019-01-07T23:43:13Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b524dc885844f0b92b7c0f3d0217369f4dddaa1e",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +280,284 @@  /// Whether flutter applications running on this device can be terminated\n  /// from the vmservice.\n  bool get supportsStopApp => true;\n\n  /// Whether the device supports taking screenshots of a running flutter"
  },
  {
    "id" : "73d51b72-bd89-4fe2-a8b6-14d37c7a0cd8",
    "prId" : 26511,
    "prUrl" : "https://github.com/flutter/flutter/pull/26511#pullrequestreview-196482090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "339f4a95-0a94-4f22-ae34-578a89c65b33",
        "parentId" : null,
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "I added a `NoopPortForwarder` previously for flutter-tester - the implementation is basically the same, though mine throws if you call `forward` with two different port numbers. Should we merge them? Is it safe to let this one throw if someone calls it trying to map ports too?\r\n\r\nhttps://github.com/flutter/flutter/blob/789376b830d08e7a4ee27f47861d2d473eac728d/packages/flutter_tools/lib/src/tester/flutter_tester.dart#L236",
        "createdAt" : "2019-01-25T12:20:12Z",
        "updatedAt" : "2019-01-25T12:20:13Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcfa792dba77b1d13951addf41f4808dba77c4ed",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +464,468 @@\n// A portforwarder which does not support forwarding ports.\nclass NoOpDevicePortForwarder implements DevicePortForwarder {\n  const NoOpDevicePortForwarder();\n"
  },
  {
    "id" : "d7cb218c-dd4d-472a-9065-720c240572fb",
    "prId" : 35709,
    "prUrl" : "https://github.com/flutter/flutter/pull/35709#pullrequestreview-259072302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3ff4eb0-9efd-4bf7-90f4-db2d8dea3a49",
        "parentId" : null,
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "why not check if the device is supported in `device.isSupportedForProject` ?",
        "createdAt" : "2019-07-08T15:32:50Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "e2e0a318-54d4-4db0-b4bd-1a2278a8921e",
        "parentId" : "d3ff4eb0-9efd-4bf7-90f4-db2d8dea3a49",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I'm not sure what you mean - we do check if the device is supported in `device.isSupportedForProject` ?",
        "createdAt" : "2019-07-08T15:36:13Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "51121abc-e58b-4027-bce5-b57d08a17b39",
        "parentId" : "d3ff4eb0-9efd-4bf7-90f4-db2d8dea3a49",
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "I was wondering why not using `device.isSupportedForProject` to skip `web` and `fuchsia`.",
        "createdAt" : "2019-07-08T16:19:30Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "f12b6fe9-eb81-4eec-8703-4b617da9bf66",
        "parentId" : "d3ff4eb0-9efd-4bf7-90f4-db2d8dea3a49",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "We only remove `web` and `fuchsia` when `hasSpecifiedAllDevices` is true. This is because the all devices flag will attempt to share a frontend_server instance, which may fail with these devices since they require differently configured compilers than mobile or desktop.",
        "createdAt" : "2019-07-08T16:25:35Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "1e554bea-5eaa-4816-9201-62894178a3fd",
        "parentId" : "d3ff4eb0-9efd-4bf7-90f4-db2d8dea3a49",
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "Thanks for the clarification. maybe that can be in comment? 🙂",
        "createdAt" : "2019-07-08T18:10:46Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f69ee3eff798c72af2ce6e726378a6b0da662fe",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +203,207 @@      devices = <Device>[\n        for (Device device in devices)\n          if (device.isSupportedForProject(flutterProject))\n            device\n      ];"
  },
  {
    "id" : "05680506-2f66-4970-aef5-79922522d855",
    "prId" : 35709,
    "prUrl" : "https://github.com/flutter/flutter/pull/35709#pullrequestreview-259069433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2eef4244-393a-4e44-909e-dba050285af3",
        "parentId" : null,
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "The method comment needs updating; the part about only filtering if --all is not specified is out of date.",
        "createdAt" : "2019-07-08T18:14:32Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f69ee3eff798c72af2ce6e726378a6b0da662fe",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +181,185 @@  /// device connected, then filter out unsupported devices and prioritize\n  /// ephemeral devices.\n  Future<List<Device>> findTargetDevices(FlutterProject flutterProject) async {\n    List<Device> devices = await getDevices().toList();\n"
  },
  {
    "id" : "65a911e4-7a52-424c-b656-8a35e505cc31",
    "prId" : 39541,
    "prUrl" : "https://github.com/flutter/flutter/pull/39541#pullrequestreview-281824974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8b15c7c-162d-4f38-85cf-616df8f0484e",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "What will this do if I'm in a flutter project that doesn't have desktop or web folders, but I have the options on in config?",
        "createdAt" : "2019-08-30T03:28:26Z",
        "updatedAt" : "2019-08-30T03:28:40Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "c4a002b9-7b99-482a-94e0-5251a4aecba2",
        "parentId" : "b8b15c7c-162d-4f38-85cf-616df8f0484e",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Both options?",
        "createdAt" : "2019-08-30T03:43:03Z",
        "updatedAt" : "2019-08-30T03:43:03Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "cd7e0e98-ba30-4aa9-8e9d-d4d8a65bfc65",
        "parentId" : "b8b15c7c-162d-4f38-85cf-616df8f0484e",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "it should display \"no supported devices for project\"",
        "createdAt" : "2019-08-30T04:35:29Z",
        "updatedAt" : "2019-08-30T04:35:29Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a83c4aa35f4603ade0c59835dddf5d344372f53e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +191,195 @@            device\n      ];\n    } else if (devices.length == 1 &&\n             !hasSpecifiedDeviceId &&\n             !isDeviceSupportedForProject(devices.single, flutterProject)) {"
  },
  {
    "id" : "a88bc260-ccd7-46dc-a69a-018a73e4f95c",
    "prId" : 39541,
    "prUrl" : "https://github.com/flutter/flutter/pull/39541#pullrequestreview-282777924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "458bc925-9172-475d-9d37-7259980651b0",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Could you just change the `devices.length > 1` above to `>=` ?",
        "createdAt" : "2019-09-03T06:17:05Z",
        "updatedAt" : "2019-09-03T06:17:06Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a83c4aa35f4603ade0c59835dddf5d344372f53e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +191,195 @@            device\n      ];\n    } else if (devices.length == 1 &&\n             !hasSpecifiedDeviceId &&\n             !isDeviceSupportedForProject(devices.single, flutterProject)) {"
  },
  {
    "id" : "75a32ea2-decc-47c7-a884-c2a003c4b584",
    "prId" : 42026,
    "prUrl" : "https://github.com/flutter/flutter/pull/42026#pullrequestreview-299036468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43be77fd-d563-4469-8dbc-23a5c636f525",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Nit: add a doc comment on all of the non-override dispose methods",
        "createdAt" : "2019-10-07T20:38:54Z",
        "updatedAt" : "2019-10-08T23:58:11Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "7ca5e1e3-bd39-42b7-b9be-d3e687c5e35f",
        "parentId" : "43be77fd-d563-4469-8dbc-23a5c636f525",
        "authorId" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "body" : "done",
        "createdAt" : "2019-10-08T20:41:47Z",
        "updatedAt" : "2019-10-08T23:58:11Z",
        "lastEditedBy" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "tags" : [
        ]
      }
    ],
    "commit" : "f54b0ad975cb48bea99429fedf4785b35503bf6c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +479,483 @@  ///\n  /// For example log readers or port forwarders.\n  void dispose() {}\n}\n"
  },
  {
    "id" : "b913a5ce-be4c-4659-81f0-b1ec7b8f3e2f",
    "prId" : 51015,
    "prUrl" : "https://github.com/flutter/flutter/pull/51015#pullrequestreview-360815008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "150908c8-700d-4096-9785-bf4b6257b3ed",
        "parentId" : null,
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "@zanderso in https://github.com/flutter/flutter/pull/49854#discussion_r373673837:\r\n> This could return a `Stream` if we're actually getting results bit-by-bit [...] or if this is implementing an interface that requires it to be a `Stream`, but otherwise we should probably prefer `Future<List>`, or `Future<Iterable>`.\r\n> \r\n> (`async*` `Stream`s also can have some surprising behavior. IIRC they don't interact well with `FakeAsync` for tests.)",
        "createdAt" : "2020-02-19T03:02:16Z",
        "updatedAt" : "2020-02-19T03:02:16Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab27eba8a27f26ea04757b20a23fe4c37f073465",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +133,137 @@\n  /// Return the list of all connected devices.\n  Future<List<Device>> getAllConnectedDevices() async {\n    final List<List<Device>> devices = await Future.wait<List<Device>>(<Future<List<Device>>>[\n      for (final DeviceDiscovery discoverer in _platformDiscoverers)"
  },
  {
    "id" : "a2f61833-b8a4-4316-b679-fcb9b542fef0",
    "prId" : 56531,
    "prUrl" : "https://github.com/flutter/flutter/pull/56531#pullrequestreview-420464037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05869d70-23c1-4941-baea-8b11b488db29",
        "parentId" : null,
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "This needs a test.",
        "createdAt" : "2020-05-28T20:24:39Z",
        "updatedAt" : "2020-06-03T10:30:10Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d8449fcd9dc643d7671ae124f93c8730a74f100",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +551,555 @@  }\n\n  static List<String> devicesPlatformTypes(List<Device> devices) {\n    return devices\n        .map("
  },
  {
    "id" : "8aebb7b6-1614-4dd0-9aa9-078edc63ea96",
    "prId" : 57349,
    "prUrl" : "https://github.com/flutter/flutter/pull/57349#pullrequestreview-436039333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "773e9ed1-e17a-4b6b-ab34-f81580ab9637",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "this will throw a formatException if the result is not a valid number. Use `int.tryParse` and check for null. On an invalid result, either exit or prompt again",
        "createdAt" : "2020-06-09T18:59:39Z",
        "updatedAt" : "2020-06-29T21:46:42Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "1f15a4a7-6a6f-4f9c-a915-e4e18582f73b",
        "parentId" : "773e9ed1-e17a-4b6b-ab34-f81580ab9637",
        "authorId" : "06554381-0cd2-405b-96da-99239edfb58a",
        "body" : "I'm a little confused here, as I understand, promptForCharInput from the terminal class already takes care of this with the acceptedCharacters list. When an invalid input is provided by the user this already prompt again. So I don't see how this could generate an invalid result. Am I mistaken?",
        "createdAt" : "2020-06-16T21:21:23Z",
        "updatedAt" : "2020-06-29T21:46:42Z",
        "lastEditedBy" : "06554381-0cd2-405b-96da-99239edfb58a",
        "tags" : [
        ]
      },
      {
        "id" : "c0849d5a-35a0-4226-a288-a5b1557896e1",
        "parentId" : "773e9ed1-e17a-4b6b-ab34-f81580ab9637",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Ahh you're right, good catch",
        "createdAt" : "2020-06-23T18:16:50Z",
        "updatedAt" : "2020-06-29T21:46:42Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fd16d0f1a7a8bf934380f18d9aef96ba5ac6c78",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +276,280 @@    _displayDeviceOptions(devices);\n    final String userInput =  await _readUserInput(devices.length);\n    return devices[int.parse(userInput)];\n  }\n"
  },
  {
    "id" : "2d20e82a-11c5-4616-bdf3-c6a1f9045bc8",
    "prId" : 58137,
    "prUrl" : "https://github.com/flutter/flutter/pull/58137#pullrequestreview-419716864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efc174dd-4ffa-43c5-9a6c-76dc95bb8017",
        "parentId" : null,
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "g3 PollingDeviceDiscovery subclasses don't override `startPolling` or `stopPolling`.",
        "createdAt" : "2020-05-28T01:26:07Z",
        "updatedAt" : "2020-06-01T18:31:45Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "29bdefb568206cb40f4dc577d2928dc78b71d11a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +300,304 @@  Future<List<Device>> pollingGetDevices({ Duration timeout });\n\n  Future<void> startPolling() async {\n    if (_timer == null) {\n      deviceNotifier ??= ItemListNotifier<Device>();"
  },
  {
    "id" : "fbdd3990-f815-4edb-99ad-92d1a875a77c",
    "prId" : 58137,
    "prUrl" : "https://github.com/flutter/flutter/pull/58137#pullrequestreview-420569439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cabbf9a-10b6-4069-a970-e8a9db92d3c1",
        "parentId" : null,
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "Renamed `_items` -> `deviceNotifier`",
        "createdAt" : "2020-05-28T23:59:21Z",
        "updatedAt" : "2020-06-01T18:31:45Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "29bdefb568206cb40f4dc577d2928dc78b71d11a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +294,298 @@  @protected\n  @visibleForTesting\n  ItemListNotifier<Device> deviceNotifier;\n\n  Timer _timer;"
  },
  {
    "id" : "2bab807f-a1fe-45ef-8c90-42d49a3b6eca",
    "prId" : 58137,
    "prUrl" : "https://github.com/flutter/flutter/pull/58137#pullrequestreview-432743020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33a33b77-d047-4d2f-91c6-39a61685544d",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Shouldn't this be async now?",
        "createdAt" : "2020-06-17T20:18:42Z",
        "updatedAt" : "2020-06-17T20:18:42Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "29bdefb568206cb40f4dc577d2928dc78b71d11a",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +352,356 @@  }\n\n  void dispose() => stopPolling();\n\n  @override"
  },
  {
    "id" : "0493adfa-2eeb-4664-a037-6fab2862b88e",
    "prId" : 58815,
    "prUrl" : "https://github.com/flutter/flutter/pull/58815#pullrequestreview-425666344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5adb6a90-602e-4299-aec1-cea90e329d91",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : " dartdoc should have a newline between the top level comment and additional comments:\r\n\r\n```\r\n/// Check if a version of the given app is already installed.\r\n///\r\n/// Specify [userIdentifier] to check if installed for a particular user (Android only)\r\n```",
        "createdAt" : "2020-06-05T22:40:00Z",
        "updatedAt" : "2020-06-05T23:32:37Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "682ed70854112f51e4bab3d4c6f08c6e079b30fc",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +413,417 @@  /// Check if a version of the given app is already installed.\n  ///\n  /// Specify [userIdentifier] to check if installed for a particular user (Android only).\n  Future<bool> isAppInstalled(\n    covariant ApplicationPackage app, {"
  },
  {
    "id" : "d8efadde-2b4e-4de1-bc2c-ad2bf0374d25",
    "prId" : 58887,
    "prUrl" : "https://github.com/flutter/flutter/pull/58887#pullrequestreview-426418301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "386db9d0-7e2b-4eec-8665-c4015d32924a",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Provided a default here for the google3 roll",
        "createdAt" : "2020-06-08T16:37:32Z",
        "updatedAt" : "2020-06-08T16:37:32Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7484f764bc45a9d9df3335f788f5ede6c3f9f97",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +403,407 @@  /// For example, some emulator architectures cannot run profile or\n  /// release builds.\n  FutureOr<bool> supportsRuntimeMode(BuildMode buildMode) => true;\n\n  /// Whether the device is a simulator on a platform which supports hardware rendering."
  },
  {
    "id" : "8d7d479c-ebb2-4616-baa6-22cb51c954ad",
    "prId" : 62070,
    "prUrl" : "https://github.com/flutter/flutter/pull/62070#pullrequestreview-453784100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4355b5d5-6dcb-425c-8164-26e5fb9b356c",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "The edge case Zach mentioned is a bit more obvious when streams aren't used. In this case, after  `Future.any` completes the first future, the second future may still complete w/error. That would cause an unhandled exception to be thrown into the zone.\r\n\r\nYou could simulate this a similar 2 discoverer setup where one throws an error after another turn.",
        "createdAt" : "2020-07-22T23:34:24Z",
        "updatedAt" : "2020-07-23T01:12:24Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "05d12a41-5bea-4bb3-b36c-60ff43752427",
        "parentId" : "4355b5d5-6dcb-425c-8164-26e5fb9b356c",
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "Done, added test for this as well.",
        "createdAt" : "2020-07-23T01:12:29Z",
        "updatedAt" : "2020-07-23T01:12:29Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ceede6ba30851a501708cd80ce8188587e5c4e0",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +140,144 @@\n    // Wait for an exact match, or for all discoverers to return results.\n    await Future.any<dynamic>(<Future<dynamic>>[\n      exactMatchCompleter.future,\n      Future.wait<List<Device>>(futureDevices),"
  },
  {
    "id" : "5b5cb7b2-bdac-4823-a930-24ccb0c5213d",
    "prId" : 62070,
    "prUrl" : "https://github.com/flutter/flutter/pull/62070#pullrequestreview-454410774",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49c71afa-aaae-429f-8a1a-4592b8655412",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I think this is almost the behavior we want, thought it's not quite the same as before. Previously if a discoverer crashed, we would surface that and go straight to crash logging. Especially if we don't match an exact device, knowing that some discovery has crashed is probably important, but I don't think that it should stop users from running on unrelated devices.\r\n\r\nUnsure what the right solution is.",
        "createdAt" : "2020-07-23T02:38:14Z",
        "updatedAt" : "2020-07-23T02:38:14Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "7465225f-2b76-4132-aa36-cf35ad810e3b",
        "parentId" : "49c71afa-aaae-429f-8a1a-4592b8655412",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Maybe if there is any error, and the target device isn't found, print an error directing the user to `flutter devices` or `flutter doctor --verbose`.",
        "createdAt" : "2020-07-23T04:31:08Z",
        "updatedAt" : "2020-07-23T04:31:09Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "b754b1a7-295a-4f4a-934f-0c8a052ffb79",
        "parentId" : "49c71afa-aaae-429f-8a1a-4592b8655412",
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "I was happy with the old crashing behavior so we'd at least see it, but I'm still missing something related to why it matters if it's unhandled and thrown into the zone.\r\n\r\n> That would cause an unhandled exception to be thrown into the zone.",
        "createdAt" : "2020-07-23T17:50:27Z",
        "updatedAt" : "2020-07-23T17:50:48Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      },
      {
        "id" : "4b1ce863-30ba-4b45-8bc1-0786f4a3425a",
        "parentId" : "49c71afa-aaae-429f-8a1a-4592b8655412",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I was actually wrong about this. Future.any will explicitly discard errors thrown by future's other than the first. I think what you have here is good",
        "createdAt" : "2020-07-23T18:55:41Z",
        "updatedAt" : "2020-07-23T18:55:41Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ceede6ba30851a501708cd80ce8188587e5c4e0",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +135,139 @@        }, onError: (dynamic error, StackTrace stackTrace) {\n          // Return matches from other discoverers even if one fails.\n          globals.printTrace('Ignored error discovering $deviceId: $error');\n        })\n    ];"
  },
  {
    "id" : "475ed16c-1bed-41a5-936c-e69e78eab6c9",
    "prId" : 64834,
    "prUrl" : "https://github.com/flutter/flutter/pull/64834#pullrequestreview-478082262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fe72407-9db5-405e-bc34-9fe311bd1d15",
        "parentId" : null,
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "This has the side effect of repopulating the `devices` cache, with the `timeout` duration.  We decided to do this in https://github.com/flutter/flutter/pull/51678#discussion_r387157291 to avoid google3 breakages.",
        "createdAt" : "2020-08-29T00:39:44Z",
        "updatedAt" : "2020-09-02T18:44:09Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "94691ccf0cef7580374def0be00355cff5843cd2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +213,217 @@    if (timeout != null) {\n      // Reset the cache with the specified timeout.\n      await refreshAllConnectedDevices(timeout: timeout);\n    }\n"
  },
  {
    "id" : "59914e45-e2bb-4777-a039-4961521aa062",
    "prId" : 66696,
    "prUrl" : "https://github.com/flutter/flutter/pull/66696#pullrequestreview-496903271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2afd2221-87c4-4f49-97bd-ab16526946e7",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Most of these methods do not need to be async - this made it much easier to fix the disabled test",
        "createdAt" : "2020-09-25T22:51:55Z",
        "updatedAt" : "2020-10-03T00:13:15Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f743bdfc5d921d528753a0ffb0010906c756939c",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +436,440 @@  Future<List<Device>> pollingGetDevices({ Duration timeout });\n\n  void startPolling() {\n    if (_timer == null) {\n      deviceNotifier ??= ItemListNotifier<Device>();"
  }
]