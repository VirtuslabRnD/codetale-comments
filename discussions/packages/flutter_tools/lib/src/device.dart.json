[
  {
    "id" : "32ef5208-d66d-4dd0-897b-0017a383a805",
    "prId" : 715,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "984d6cbc-1ab4-4e65-8d66-a14aeef3ddcd",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Late to the party, but String has a padLeft method that could help here:\n\n```\n=> n.toString().padLeft(n, '0');\n```\n",
        "createdAt" : "2015-12-04T03:35:44Z",
        "updatedAt" : "2015-12-04T03:35:44Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4feaa71a99b2baa4fc644ee7df944e3198bbb3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +854,858 @@  }\n\n  static String _threeDigits(int n) {\n    if (n >= 100) return \"$n\";\n    if (n >= 10) return \"0$n\";"
  },
  {
    "id" : "f0373d28-8ac5-4709-8be8-f27b8cbe8dde",
    "prId" : 871,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2e0c4ba-bcec-4cd0-9882-505f16c94a7e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "not that it matters here but in general hasMatch() followed by firstMatch() is duplication of potentially significant effort.\n",
        "createdAt" : "2015-12-10T19:26:58Z",
        "updatedAt" : "2015-12-10T19:26:58Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "30e9ef38-19fc-402e-892c-38a6d407c9db",
        "parentId" : "c2e0c4ba-bcec-4cd0-9882-505f16c94a7e",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, these regexps are also pretty redundant.  We could probably match them at once.\n",
        "createdAt" : "2015-12-10T19:27:45Z",
        "updatedAt" : "2015-12-10T19:27:45Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd68f08b7c1326bf76b7eeeee2c4d6a6046e51ba",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +558,562 @@        );\n      } else if (offlineRegex.hasMatch(line)) {\n        Match match = offlineRegex.firstMatch(line);\n        String deviceID = match[1];\n        logging.warning('Device $deviceID is offline.');"
  },
  {
    "id" : "2c88113b-ff5e-4cc3-a02b-85d358252fe5",
    "prId" : 1091,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a5773f-685b-4d60-bb25-a0c67fbca883",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "`<String>[...]` here and below.\n",
        "createdAt" : "2016-01-06T21:32:19Z",
        "updatedAt" : "2016-01-06T21:32:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d783718ba06c578365cdc51ea96ce02abbb1976",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +892,896 @@    // Careful: Android's date command is super-lame, any arguments are taken as\n    // attempts to set the timezone and will screw your device.\n    String output = runCheckedSync(adbCommandForDevice(['shell', 'date'])).trim();\n    // format: Fri Dec 18 13:22:07 PST 2015\n    // intl doesn't handle timezones: https://github.com/dart-lang/intl/issues/93"
  },
  {
    "id" : "c288d99b-2a55-4609-be39-aebfe97199ca",
    "prId" : 1113,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07465b5b-226f-425f-bc3f-13732113ac76",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "`<String>['forward', portString, portString]`\n",
        "createdAt" : "2016-01-07T18:43:26Z",
        "updatedAt" : "2016-01-07T18:43:26Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3615827f0e42389633c63050302ab20b3dd61bc9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +774,778 @@    String portString = 'tcp:$_observatoryPort';\n    try {\n      runCheckedSync(adbCommandForDevice(['forward', portString, portString]));\n    } catch (e) {\n      logging.warning('Unable to forward observatory port ($_observatoryPort):\\n$e');"
  },
  {
    "id" : "4b9d9da0-e16b-4d3d-867a-5e4bca9dfece",
    "prId" : 1249,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0abbd649-22c5-491e-bc28-a12314196d98",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "no braces around one-line if statements\n",
        "createdAt" : "2016-01-16T20:43:00Z",
        "updatedAt" : "2016-01-16T20:43:00Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8672a40c1958c1471c52345e5707a6e3a4ee445",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +351,355 @@    List<IOSSimulator> devices = [];\n    String id = _getRunningSimulatorID(mockIOS);\n    if (id != null) {\n      devices.add(new IOSSimulator(id: id));\n    }"
  },
  {
    "id" : "b59262eb-c723-4c6f-a01c-e389f4826a59",
    "prId" : 2474,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2349562-dcca-4fa5-9b2f-86dfb0b68aa3",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "`onLines`?\n",
        "createdAt" : "2016-03-07T23:05:27Z",
        "updatedAt" : "2016-03-08T18:38:29Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "ca0e1ea6-c81e-4401-88ae-3d8609132551",
        "parentId" : "f2349562-dcca-4fa5-9b2f-86dfb0b68aa3",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "We use onFoo for things that are callbacks. This is a Stream, so \"lines\" seems fine.\n",
        "createdAt" : "2016-03-07T23:06:59Z",
        "updatedAt" : "2016-03-08T18:38:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8803cecea1b8897bb5a3a6bfe0d75fdc3236cc6f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +196,200 @@  /// A broadcast stream where each element in the string is a line of log\n  /// output.\n  Stream<String> get lines;\n\n  /// Start reading logs from the device."
  },
  {
    "id" : "89011d68-b933-4d9a-961b-1e8131d4bf75",
    "prId" : 15266,
    "prUrl" : "https://github.com/flutter/flutter/pull/15266#pullrequestreview-102176223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3822e98-5559-472f-a7d8-6f0f07c5dd6f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this is a weird name for a method that returns if something is an emulator. Maybe `isEmulatorAndSupportsHardwareRendering` or some such? Or assert that `isLocalEmulator` is true, and only call it when it's true, and document that it only works for emulators?",
        "createdAt" : "2018-03-08T01:16:28Z",
        "updatedAt" : "2018-03-08T03:12:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "69811b86-6c7b-46e5-8d47-4904829e96ec",
        "parentId" : "d3822e98-5559-472f-a7d8-6f0f07c5dd6f",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Addressed this by adding an assertion that the device is an emulator and only calling inside of the device.isLocalEmulator branch",
        "createdAt" : "2018-03-08T03:12:41Z",
        "updatedAt" : "2018-03-08T03:12:41Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "802280b54f1d5a1007f2f48d4c5dd156e62031e9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +194,198 @@\n  /// Whether the device is a simulator on a platform which supports hardware rendering.\n  Future<bool> get supportsHardwareRendering async {\n    assert(await isLocalEmulator);\n    switch (await targetPlatform) {"
  },
  {
    "id" : "9f429213-5dc0-40e2-9598-19417da22eff",
    "prId" : 26201,
    "prUrl" : "https://github.com/flutter/flutter/pull/26201#pullrequestreview-190040415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53854bb3-f522-46ab-8422-38c999181c95",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Should the 'supportsX' fields be pulled out to a separate class like \"DeviceCapabilities\"?",
        "createdAt" : "2019-01-07T22:43:32Z",
        "updatedAt" : "2019-01-07T23:43:13Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "cb4dc58f-66a2-44c9-b45e-c461478525a1",
        "parentId" : "53854bb3-f522-46ab-8422-38c999181c95",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Sounds like a good idea, done",
        "createdAt" : "2019-01-07T23:37:11Z",
        "updatedAt" : "2019-01-07T23:43:13Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b524dc885844f0b92b7c0f3d0217369f4dddaa1e",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +280,284 @@  /// Whether flutter applications running on this device can be terminated\n  /// from the vmservice.\n  bool get supportsStopApp => true;\n\n  /// Whether the device supports taking screenshots of a running flutter"
  },
  {
    "id" : "73d51b72-bd89-4fe2-a8b6-14d37c7a0cd8",
    "prId" : 26511,
    "prUrl" : "https://github.com/flutter/flutter/pull/26511#pullrequestreview-196482090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "339f4a95-0a94-4f22-ae34-578a89c65b33",
        "parentId" : null,
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "I added a `NoopPortForwarder` previously for flutter-tester - the implementation is basically the same, though mine throws if you call `forward` with two different port numbers. Should we merge them? Is it safe to let this one throw if someone calls it trying to map ports too?\r\n\r\nhttps://github.com/flutter/flutter/blob/789376b830d08e7a4ee27f47861d2d473eac728d/packages/flutter_tools/lib/src/tester/flutter_tester.dart#L236",
        "createdAt" : "2019-01-25T12:20:12Z",
        "updatedAt" : "2019-01-25T12:20:13Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcfa792dba77b1d13951addf41f4808dba77c4ed",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +464,468 @@\n// A portforwarder which does not support forwarding ports.\nclass NoOpDevicePortForwarder implements DevicePortForwarder {\n  const NoOpDevicePortForwarder();\n"
  },
  {
    "id" : "d7cb218c-dd4d-472a-9065-720c240572fb",
    "prId" : 35709,
    "prUrl" : "https://github.com/flutter/flutter/pull/35709#pullrequestreview-259072302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3ff4eb0-9efd-4bf7-90f4-db2d8dea3a49",
        "parentId" : null,
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "why not check if the device is supported in `device.isSupportedForProject` ?",
        "createdAt" : "2019-07-08T15:32:50Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "e2e0a318-54d4-4db0-b4bd-1a2278a8921e",
        "parentId" : "d3ff4eb0-9efd-4bf7-90f4-db2d8dea3a49",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I'm not sure what you mean - we do check if the device is supported in `device.isSupportedForProject` ?",
        "createdAt" : "2019-07-08T15:36:13Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "51121abc-e58b-4027-bce5-b57d08a17b39",
        "parentId" : "d3ff4eb0-9efd-4bf7-90f4-db2d8dea3a49",
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "I was wondering why not using `device.isSupportedForProject` to skip `web` and `fuchsia`.",
        "createdAt" : "2019-07-08T16:19:30Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "f12b6fe9-eb81-4eec-8703-4b617da9bf66",
        "parentId" : "d3ff4eb0-9efd-4bf7-90f4-db2d8dea3a49",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "We only remove `web` and `fuchsia` when `hasSpecifiedAllDevices` is true. This is because the all devices flag will attempt to share a frontend_server instance, which may fail with these devices since they require differently configured compilers than mobile or desktop.",
        "createdAt" : "2019-07-08T16:25:35Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "1e554bea-5eaa-4816-9201-62894178a3fd",
        "parentId" : "d3ff4eb0-9efd-4bf7-90f4-db2d8dea3a49",
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "Thanks for the clarification. maybe that can be in comment? 🙂",
        "createdAt" : "2019-07-08T18:10:46Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f69ee3eff798c72af2ce6e726378a6b0da662fe",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +203,207 @@      devices = <Device>[\n        for (Device device in devices)\n          if (device.isSupportedForProject(flutterProject))\n            device\n      ];"
  },
  {
    "id" : "05680506-2f66-4970-aef5-79922522d855",
    "prId" : 35709,
    "prUrl" : "https://github.com/flutter/flutter/pull/35709#pullrequestreview-259069433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2eef4244-393a-4e44-909e-dba050285af3",
        "parentId" : null,
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "The method comment needs updating; the part about only filtering if --all is not specified is out of date.",
        "createdAt" : "2019-07-08T18:14:32Z",
        "updatedAt" : "2019-07-08T19:44:39Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f69ee3eff798c72af2ce6e726378a6b0da662fe",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +181,185 @@  /// device connected, then filter out unsupported devices and prioritize\n  /// ephemeral devices.\n  Future<List<Device>> findTargetDevices(FlutterProject flutterProject) async {\n    List<Device> devices = await getDevices().toList();\n"
  },
  {
    "id" : "65a911e4-7a52-424c-b656-8a35e505cc31",
    "prId" : 39541,
    "prUrl" : "https://github.com/flutter/flutter/pull/39541#pullrequestreview-281824974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8b15c7c-162d-4f38-85cf-616df8f0484e",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "What will this do if I'm in a flutter project that doesn't have desktop or web folders, but I have the options on in config?",
        "createdAt" : "2019-08-30T03:28:26Z",
        "updatedAt" : "2019-08-30T03:28:40Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "c4a002b9-7b99-482a-94e0-5251a4aecba2",
        "parentId" : "b8b15c7c-162d-4f38-85cf-616df8f0484e",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Both options?",
        "createdAt" : "2019-08-30T03:43:03Z",
        "updatedAt" : "2019-08-30T03:43:03Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "cd7e0e98-ba30-4aa9-8e9d-d4d8a65bfc65",
        "parentId" : "b8b15c7c-162d-4f38-85cf-616df8f0484e",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "it should display \"no supported devices for project\"",
        "createdAt" : "2019-08-30T04:35:29Z",
        "updatedAt" : "2019-08-30T04:35:29Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a83c4aa35f4603ade0c59835dddf5d344372f53e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +191,195 @@            device\n      ];\n    } else if (devices.length == 1 &&\n             !hasSpecifiedDeviceId &&\n             !isDeviceSupportedForProject(devices.single, flutterProject)) {"
  },
  {
    "id" : "a88bc260-ccd7-46dc-a69a-018a73e4f95c",
    "prId" : 39541,
    "prUrl" : "https://github.com/flutter/flutter/pull/39541#pullrequestreview-282777924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "458bc925-9172-475d-9d37-7259980651b0",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Could you just change the `devices.length > 1` above to `>=` ?",
        "createdAt" : "2019-09-03T06:17:05Z",
        "updatedAt" : "2019-09-03T06:17:06Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a83c4aa35f4603ade0c59835dddf5d344372f53e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +191,195 @@            device\n      ];\n    } else if (devices.length == 1 &&\n             !hasSpecifiedDeviceId &&\n             !isDeviceSupportedForProject(devices.single, flutterProject)) {"
  },
  {
    "id" : "75a32ea2-decc-47c7-a884-c2a003c4b584",
    "prId" : 42026,
    "prUrl" : "https://github.com/flutter/flutter/pull/42026#pullrequestreview-299036468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43be77fd-d563-4469-8dbc-23a5c636f525",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Nit: add a doc comment on all of the non-override dispose methods",
        "createdAt" : "2019-10-07T20:38:54Z",
        "updatedAt" : "2019-10-08T23:58:11Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "7ca5e1e3-bd39-42b7-b9be-d3e687c5e35f",
        "parentId" : "43be77fd-d563-4469-8dbc-23a5c636f525",
        "authorId" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "body" : "done",
        "createdAt" : "2019-10-08T20:41:47Z",
        "updatedAt" : "2019-10-08T23:58:11Z",
        "lastEditedBy" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "tags" : [
        ]
      }
    ],
    "commit" : "f54b0ad975cb48bea99429fedf4785b35503bf6c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +479,483 @@  ///\n  /// For example log readers or port forwarders.\n  void dispose() {}\n}\n"
  },
  {
    "id" : "b913a5ce-be4c-4659-81f0-b1ec7b8f3e2f",
    "prId" : 51015,
    "prUrl" : "https://github.com/flutter/flutter/pull/51015#pullrequestreview-360815008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "150908c8-700d-4096-9785-bf4b6257b3ed",
        "parentId" : null,
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "@zanderso in https://github.com/flutter/flutter/pull/49854#discussion_r373673837:\r\n> This could return a `Stream` if we're actually getting results bit-by-bit [...] or if this is implementing an interface that requires it to be a `Stream`, but otherwise we should probably prefer `Future<List>`, or `Future<Iterable>`.\r\n> \r\n> (`async*` `Stream`s also can have some surprising behavior. IIRC they don't interact well with `FakeAsync` for tests.)",
        "createdAt" : "2020-02-19T03:02:16Z",
        "updatedAt" : "2020-02-19T03:02:16Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab27eba8a27f26ea04757b20a23fe4c37f073465",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +133,137 @@\n  /// Return the list of all connected devices.\n  Future<List<Device>> getAllConnectedDevices() async {\n    final List<List<Device>> devices = await Future.wait<List<Device>>(<Future<List<Device>>>[\n      for (final DeviceDiscovery discoverer in _platformDiscoverers)"
  },
  {
    "id" : "a2f61833-b8a4-4316-b679-fcb9b542fef0",
    "prId" : 56531,
    "prUrl" : "https://github.com/flutter/flutter/pull/56531#pullrequestreview-420464037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05869d70-23c1-4941-baea-8b11b488db29",
        "parentId" : null,
        "authorId" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "body" : "This needs a test.",
        "createdAt" : "2020-05-28T20:24:39Z",
        "updatedAt" : "2020-06-03T10:30:10Z",
        "lastEditedBy" : "7aa08a6b-0a3c-421c-b2e6-22899e9af9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d8449fcd9dc643d7671ae124f93c8730a74f100",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +551,555 @@  }\n\n  static List<String> devicesPlatformTypes(List<Device> devices) {\n    return devices\n        .map("
  }
]