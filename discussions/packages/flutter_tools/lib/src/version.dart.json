[
  {
    "id" : "634c87d8-362b-4be1-9ef6-8976c10cd166",
    "prId" : 10760,
    "prUrl" : "https://github.com/flutter/flutter/pull/10760#pullrequestreview-44664444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aecd47bf-0961-416e-ae1a-84368bf37e8a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "It looks ok in this case but as a general rule prefer to put the //ignore at the end of the offending line rather than before it",
        "createdAt" : "2017-06-16T06:47:16Z",
        "updatedAt" : "2017-06-16T06:47:16Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "227b3a0a-8b11-42b8-8e8d-4e4dd717b89f",
        "parentId" : "aecd47bf-0961-416e-ae1a-84368bf37e8a",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "May be a bug. Doesn't seem to actually work on multi-line expressions when it's like:\r\n```\r\naFutureReturningFunction(\r\n  a,\r\n  b\r\n); // ignore: unawaited_futures\r\n```",
        "createdAt" : "2017-06-16T18:59:24Z",
        "updatedAt" : "2017-06-16T18:59:24Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "67f061bd-3dbb-4a2b-9833-72f16c642b3f",
        "parentId" : "aecd47bf-0961-416e-ae1a-84368bf37e8a",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "cc @leafpetersen but maybe try:\r\n\r\n```\r\naFutureReturningFunction( // ignore: unawaited_futures\r\n  a,\r\n  b\r\n);\r\n```",
        "createdAt" : "2017-06-16T21:07:22Z",
        "updatedAt" : "2017-06-16T21:07:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ee0081cc3ded3064246499f78421ce5041901e2",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +259,263 @@      final DateTime remoteFrameworkCommitDate = DateTime.parse(await FlutterVersion.fetchRemoteFrameworkCommitDate(branch));\n      // fire and forget since nothing subsequent depends on it. Hope there's a flush/sync mechanism.\n      // ignore: unawaited_futures\n      versionCheckStamp.store(\n        newTimeVersionWasChecked: _clock.now(),"
  },
  {
    "id" : "141bfa91-b45c-467d-b802-723f32b121ce",
    "prId" : 10760,
    "prUrl" : "https://github.com/flutter/flutter/pull/10760#pullrequestreview-44602993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7c84cf0-45ff-4261-ab41-f5ac014eb666",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This hope seems optimistic...\r\n\r\ncc @yjbanov did you mean to not wait for this future?",
        "createdAt" : "2017-06-16T06:47:51Z",
        "updatedAt" : "2017-06-16T06:47:51Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7d487ff6-cc15-44c8-8570-0070812e5bc5",
        "parentId" : "f7c84cf0-45ff-4261-ab41-f5ac014eb666",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Looks like a bug. I think we should `await`. I usually leave a comment if I'm dropping a `Future` on the floor intentionally.",
        "createdAt" : "2017-06-16T16:15:59Z",
        "updatedAt" : "2017-06-16T16:17:02Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ee0081cc3ded3064246499f78421ce5041901e2",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +258,262 @@      final String branch = _channel == 'alpha' ? 'alpha' : 'master';\n      final DateTime remoteFrameworkCommitDate = DateTime.parse(await FlutterVersion.fetchRemoteFrameworkCommitDate(branch));\n      // fire and forget since nothing subsequent depends on it. Hope there's a flush/sync mechanism.\n      // ignore: unawaited_futures\n      versionCheckStamp.store("
  },
  {
    "id" : "87fd15f7-c142-4d2b-a343-284169af7711",
    "prId" : 10760,
    "prUrl" : "https://github.com/flutter/flutter/pull/10760#pullrequestreview-44635852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ca14dbb-1788-4d1e-8224-8a7a86674bee",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "feel free to just inline the future-returning calls in the Future.wait call, fwiw.",
        "createdAt" : "2017-06-16T06:48:23Z",
        "updatedAt" : "2017-06-16T06:48:23Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6c873446-700a-442c-8df9-59b68c8bc475",
        "parentId" : "7ca14dbb-1788-4d1e-8224-8a7a86674bee",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "sent a follow up #10786\r\nDo wish this syntax was more succinct/readable though",
        "createdAt" : "2017-06-16T18:45:11Z",
        "updatedAt" : "2017-06-16T18:45:12Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ee0081cc3ded3064246499f78421ce5041901e2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +214,218 @@      );\n      await Future.wait<Null>(<Future<Null>>[\n        saveWarningStampFuture,\n        new Future<Null>.delayed(kPauseToLetUserReadTheMessage),\n      ]);"
  }
]