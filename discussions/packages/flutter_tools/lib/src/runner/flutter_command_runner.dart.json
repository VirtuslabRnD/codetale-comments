[
  {
    "id" : "33530eb8-99c3-47ed-a9b4-f138ef06f86a",
    "prId" : 2625,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "541c0102-b8f2-4557-8a1a-c061b2827b98",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "You may be able to remove the flutterRoot = '../..' code from create_test now.\n",
        "createdAt" : "2016-03-11T23:55:07Z",
        "updatedAt" : "2016-03-11T23:55:07Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "404d9f77-8444-4ba7-a9cb-bfa4b223a7e4",
        "parentId" : "541c0102-b8f2-4557-8a1a-c061b2827b98",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "turns out that test doesn't go through this codepath :-(\n",
        "createdAt" : "2016-03-11T23:59:19Z",
        "updatedAt" : "2016-03-11T23:59:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6b82b6fa93a1fe0c9447cee911e30121a2a6706",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +151,155 @@      return Platform.environment[kFlutterRootEnvironmentVariableName];\n    try {\n      if (Platform.script.scheme == 'data')\n        return '../..'; // we're running as a test\n      String script = Platform.script.toFilePath();"
  },
  {
    "id" : "f47a3489-96a9-4d1d-9b87-8bc406867afb",
    "prId" : 3368,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80f8adea-c229-450c-af00-a6ec722b6377",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Honestly at this point why not just walk the entire repo, rather than just dev, examples, and packages. If we're worried about finding pubspec.yamls in bin/cache, we could be _really_ clever and at each level skip any directories mentioned in .gitignore files. Or, skip any directories that contain a magic sentinel like \".do_not_analyze\", and put that in bin/cache alongside the other magical files we have there.\n",
        "createdAt" : "2016-04-15T23:44:49Z",
        "updatedAt" : "2016-04-16T02:12:32Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6a1f8bfe-b01e-4fa5-aba8-0a9a5057db11",
        "parentId" : "80f8adea-c229-450c-af00-a6ec722b6377",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Yeah, scanning the whole repo will probably prevent future problems. `.analysis_options` files let you ignore directories, but those files are not read if they don't live next to a pubspec. We could use `.gitignore` files. That might have issues where you don't want directories analyzed, but you do want them committed to git. I've run into that w/ known bad libs (used for testing). Plus any file opening and glob matching may be more work than I want to do during the scan.\n\nHard-coded exclusions, or marker files as you suggest, might be the simplest solutions here. I'll take another look at this.\n",
        "createdAt" : "2016-04-16T01:51:54Z",
        "updatedAt" : "2016-04-16T02:12:32Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "0f76167b-d07f-4b66-a783-272e7b64197e",
        "parentId" : "80f8adea-c229-450c-af00-a6ec722b6377",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "`.dartignore`?\n",
        "createdAt" : "2016-04-16T01:53:10Z",
        "updatedAt" : "2016-04-16T02:12:32Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "858c587a94922ad5ca6f46d539814d8fa3208b94",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +411,415 @@        return entity is Directory ? _gatherProjectPaths(entity.path) : <String>[];\n      });\n  }\n}"
  },
  {
    "id" : "a0ae99bb-97dc-411a-ad59-e78deebb7fbd",
    "prId" : 3870,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6276478f-9263-4132-8825-21a9d65638e2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "shouldn't we get rid of all the other redundant options too?\n",
        "createdAt" : "2016-05-11T22:03:37Z",
        "updatedAt" : "2016-05-11T22:34:11Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "39e8edfb-c780-40de-8e0e-ad15306159e5",
        "parentId" : "6276478f-9263-4132-8825-21a9d65638e2",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "This is a step toward eliminating BuildConfigurations and cleaning up how we locate artifacts used during the build process.\n\nThese other flags will disappear when BuildConfigurations are gone.\n",
        "createdAt" : "2016-05-11T22:08:08Z",
        "updatedAt" : "2016-05-11T22:34:11Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "572dd58462e99b831f61bca4ea72fe64ee4f9cd7",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +92,96 @@    argParser.addOption('host-debug-build-path',\n        hide: !verboseHelp,\n        help:\n            'Path to your host Debug out directory (i.e. the one that runs on your workstation, not a device),\\n'\n            'if you are building Flutter locally.\\n'"
  },
  {
    "id" : "5f029e71-9a86-4e46-9c5f-fb92704842d3",
    "prId" : 3870,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f5ecc14-1330-4b2f-8768-2566d47bcb1b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "shouldn't we get rid of this at the same time?\n",
        "createdAt" : "2016-05-11T22:07:13Z",
        "updatedAt" : "2016-05-11T22:34:11Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "266804f7-3955-4f89-bf7c-9715b1ae78da",
        "parentId" : "7f5ecc14-1330-4b2f-8768-2566d47bcb1b",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "This is still used to find target-specific tools\n(A future PR will use --engine-build to locate these and will remove --engine-debug/--engine-release)\n",
        "createdAt" : "2016-05-11T22:20:10Z",
        "updatedAt" : "2016-05-11T22:34:11Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "572dd58462e99b831f61bca4ea72fe64ee4f9cd7",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +232,236 @@\n      if (globalResults.wasParsed('engine-release'))\n        ToolConfiguration.instance.engineRelease = globalResults['engine-release'];\n      if (globalResults.wasParsed('engine-debug'))\n        ToolConfiguration.instance.engineRelease = !globalResults['engine-debug'];"
  },
  {
    "id" : "b708906a-60bb-42e4-ac7b-04dabc75de7e",
    "prId" : 3870,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6755678-a782-4821-b87d-877853ec9868",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "It's confusing that we have two distinct canonical places where we store the enginePath, the ToolConfiguration and the Command. Is there any reason not to combine these into one?\n",
        "createdAt" : "2016-05-11T22:11:26Z",
        "updatedAt" : "2016-05-11T22:34:11Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7108ee69-0868-4b57-a0b8-24c348fc8a36",
        "parentId" : "a6755678-a782-4821-b87d-877853ec9868",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "This will be centralized in ToolConfiguration.  enginePath is obsolete and will be removed along with BuildConfigurations.\n",
        "createdAt" : "2016-05-11T22:20:48Z",
        "updatedAt" : "2016-05-11T22:34:11Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "572dd58462e99b831f61bca4ea72fe64ee4f9cd7",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +228,232 @@    // Set up the tooling configuration.\n    if (enginePath != null) {\n      ToolConfiguration.instance.engineSrcPath = enginePath;\n      ToolConfiguration.instance.engineBuildPath = _findEngineBuildPath(globalResults, enginePath);\n"
  },
  {
    "id" : "0d1e7f8f-8d6f-48ab-a741-c13f919995c9",
    "prId" : 3879,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3d7c3cf-a74a-41fc-bd4b-45babf565cb8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this simplification is great.\n",
        "createdAt" : "2016-05-13T06:37:10Z",
        "updatedAt" : "2016-05-13T06:37:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d7aef2bf83b16f6355427ad45c6e6f8381986ed",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +74,78 @@            'Name of a build output within the engine out directory, if you are building Flutter locally.\\n'\n            'Use this to select a specific version of the engine if you have built multiple engine targets.\\n'\n            'This path is relative to --local-engine-src-path/out.');\n  }\n"
  },
  {
    "id" : "758a54c4-52a0-42d4-9fe9-ab0991791e69",
    "prId" : 4476,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52fa453b-a4a2-4a47-96f0-6f7461769590",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "is `await` needed here?\n",
        "createdAt" : "2016-06-09T06:17:54Z",
        "updatedAt" : "2016-06-13T20:08:21Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "37c9c7b7-a6ce-492f-9e98-145d4994fe30",
        "parentId" : "52fa453b-a4a2-4a47-96f0-6f7461769590",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The super function returns a `Future<Foo>`, but we're in an async block so conceptually we're returning a `Foo`. Hence the await. I don't think it practice it makes any difference, I just like my types to match. :-)\n",
        "createdAt" : "2016-06-10T23:02:32Z",
        "updatedAt" : "2016-06-13T20:08:21Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "caac36722dfc8cc81fce2c6f737b010157192cab",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +179,183 @@    }\n\n    return await super.runCommand(globalResults);\n  }\n"
  },
  {
    "id" : "3502575b-0b3d-4361-8896-5caf865f58d8",
    "prId" : 4528,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dec4b4a1-915a-423b-b26d-c75d31744bd1",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "We may want to re-write `getRepoPackages()` (above) in terms of these roots rather than flutterRoot. \n",
        "createdAt" : "2016-06-11T04:59:34Z",
        "updatedAt" : "2016-06-13T18:27:21Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "08161df2-66b3-4487-a896-182ff54f0c32",
        "parentId" : "dec4b4a1-915a-423b-b26d-c75d31744bd1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I looked at doing that, but I'm not sure it really helps.\n",
        "createdAt" : "2016-06-13T18:28:28Z",
        "updatedAt" : "2016-06-13T18:28:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "32d832b5d0bde1d73f8689b26408ce5b13378fb2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +266,270 @@\n  /// Get the entry-points we want to analyze in the Flutter repo.\n  List<Directory> getRepoAnalysisEntryPoints() {\n    String rootPath = path.absolute(Cache.flutterRoot);\n    return <Directory>["
  },
  {
    "id" : "3ae54977-1657-4b6e-8e3b-9521a3a0c22f",
    "prId" : 8435,
    "prUrl" : "https://github.com/flutter/flutter/pull/8435#pullrequestreview-24115347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9f6229a-e98b-41a9-821d-906ac69857f8",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "These will never be presented to the user?",
        "createdAt" : "2017-02-27T22:07:19Z",
        "updatedAt" : "2017-02-27T23:24:51Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "c4c0bc05-7811-4116-9a42-7f9e9d327c75",
        "parentId" : "c9f6229a-e98b-41a9-821d-906ac69857f8",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Correct.  A script to create golden files will use it, and `--bug-report` wraps it, but users won't be directly exposed to it.",
        "createdAt" : "2017-02-27T22:42:31Z",
        "updatedAt" : "2017-02-27T23:24:51Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "eeff8d3c99d7311df4e9debaf22bf2fbe83576fc",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +103,107 @@            'This path is relative to --local-engine-src-path/out.');\n    argParser.addOption('record-to',\n        hide: true,\n        help:\n            'Enables recording of process invocations (including stdout and stderr of all such invocations),\\n'"
  },
  {
    "id" : "0af8dd5a-d51c-4941-b664-7d949e2211cf",
    "prId" : 18031,
    "prUrl" : "https://github.com/flutter/flutter/pull/18031#pullrequestreview-125526598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2887c0cf-e5fa-4ab2-bb50-19f19f6d7d05",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "`Check for updates to Flutter when running a command.`?",
        "createdAt" : "2018-05-30T18:04:14Z",
        "updatedAt" : "2018-05-31T14:49:09Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "de6853f1-3810-4331-82af-60733385cb4d",
        "parentId" : "2887c0cf-e5fa-4ab2-bb50-19f19f6d7d05",
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "I wasn't sure if that would be misleading, since this doesn't actually cause an update check, it just makes the original warning not appear if there's no new version. It's possible you can pass `--update-check` and it still won't tell you there's an update for 30 days(?). We could of course probably reduce that period now we have this change?",
        "createdAt" : "2018-05-31T14:46:36Z",
        "updatedAt" : "2018-05-31T14:49:09Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      },
      {
        "id" : "cf41afcb-75a7-4ce6-98ad-aba0c124a922",
        "parentId" : "2887c0cf-e5fa-4ab2-bb50-19f19f6d7d05",
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "That said, we might want to review the logic a little if we do reduce that period, to ensure if someone has an unreliable update check, they're not suddenly seeing the warning way more often. Probably we need two dates - one for how old it needs to be for us to do the check, and another for how long before we warn the user their version is old if we couldn't verify there was a new one. The first should probably be < 7 days but the second probably still wants to be > 30 days. Possibly that all comes under #14920.",
        "createdAt" : "2018-06-01T10:11:10Z",
        "updatedAt" : "2018-06-01T10:11:10Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      },
      {
        "id" : "e3fce422-de47-4087-b466-b3ea5b8d112e",
        "parentId" : "2887c0cf-e5fa-4ab2-bb50-19f19f6d7d05",
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "@devoncarew Landing this as-is for now, but happy to tweak text if you have an opinion on the above.",
        "createdAt" : "2018-06-04T11:04:33Z",
        "updatedAt" : "2018-06-04T11:04:33Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      }
    ],
    "commit" : "15fbe6ccf3487451a4883989c3ade3376573ef82",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +76,80 @@        defaultsTo: true,\n        hide: !verboseHelp,\n        help: 'Allow Flutter to check for updates when this command runs.');\n    argParser.addFlag('suppress-analytics',\n        negatable: false,"
  },
  {
    "id" : "5ba3b547-2a8b-48d9-8d8b-979da5dd4385",
    "prId" : 19243,
    "prUrl" : "https://github.com/flutter/flutter/pull/19243#pullrequestreview-136860009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ead95cf-7796-4ac4-a287-f758a2438ef7",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "can you explain the purpose of this change?",
        "createdAt" : "2018-07-12T00:19:48Z",
        "updatedAt" : "2018-07-14T02:31:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "168c76c5-782d-4951-9635-88d567d558cc",
        "parentId" : "3ead95cf-7796-4ac4-a287-f758a2438ef7",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, the `CommandRunner` from the `args` package calls `argParser.parse(args)` where this calls `tryArgsCompletion(args, argParser)`.  This is where the completion package hooks into things in order to interrogate the `argParser` and do its magic.",
        "createdAt" : "2018-07-12T00:39:57Z",
        "updatedAt" : "2018-07-14T02:31:28Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "3ec28b7a-b2ab-48de-8e82-4362107b8b90",
        "parentId" : "3ead95cf-7796-4ac4-a287-f758a2438ef7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Can you include a big comment that explains all this? Thanks.",
        "createdAt" : "2018-07-12T18:36:39Z",
        "updatedAt" : "2018-07-14T02:31:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "45390ade-18b8-42c6-8dba-3030b54303aa",
        "parentId" : "3ead95cf-7796-4ac4-a287-f758a2438ef7",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I already did...or are you saying it isn't big/explain-y enough?",
        "createdAt" : "2018-07-12T21:52:22Z",
        "updatedAt" : "2018-07-14T02:31:28Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "c23b30a0-1b35-48f4-aa39-973c4eb7abfe",
        "parentId" : "3ead95cf-7796-4ac4-a287-f758a2438ef7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think I was reviewing an older copy of the PR.",
        "createdAt" : "2018-07-12T23:05:11Z",
        "updatedAt" : "2018-07-14T02:31:28Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7743f1674b4dc78bbd152725922cb9419fda246",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +201,205 @@    }\n  }\n\n  @override\n  Future<Null> run(Iterable<String> args) {"
  }
]