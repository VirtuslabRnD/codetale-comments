[
  {
    "id" : "f79dbdae-dcec-43a1-ae00-25f68d8e5bc5",
    "prId" : 4105,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c7e1b38-06e2-4034-931e-af4e54fe3086",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Shouldn't all build artifacts go in `build` for easier debugging?\n",
        "createdAt" : "2016-05-26T00:22:28Z",
        "updatedAt" : "2016-05-26T16:53:32Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "eeb3b0bb-b17b-4243-a257-c9798973b9ff",
        "parentId" : "1c7e1b38-06e2-4034-931e-af4e54fe3086",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "This is the pattern that the current `flutter refresh` command uses. We may want to put more things into `build/`, and use a temp dir less often. I'd still want most of the build artifacts in `build/` to be semantic wrt to the user - something that they would understand and identify as useful to their project.\n",
        "createdAt" : "2016-05-26T16:32:31Z",
        "updatedAt" : "2016-05-26T16:53:32Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb809040db8e27f4b6cd48e0f1c0614da535ba0c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +365,369 @@    Observatory observatory\n  }) async {\n    Directory tempDir = await Directory.systemTemp.createTemp('flutter_tools');\n\n    try {"
  },
  {
    "id" : "070a0403-a542-4165-97be-152e91be7783",
    "prId" : 5740,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3100c246-0287-43eb-b2c6-ade29ce3fe5b",
        "parentId" : null,
        "authorId" : "df09570d-f308-4f19-8dc7-0346024a77a6",
        "body" : "Maybe this error message should include info from `result.stderr`?\n",
        "createdAt" : "2016-09-05T19:06:51Z",
        "updatedAt" : "2016-09-26T19:07:46Z",
        "lastEditedBy" : "df09570d-f308-4f19-8dc7-0346024a77a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "404a015191136ef61f6883d72945bfde39085526",
    "line" : null,
    "diffHunk" : "@@ -1,1 +75,79 @@          _properties = parseAdbDeviceProperties(result.stdout);\n        } else {\n          printError('Error retrieving device properties for $name.');\n        }\n      } catch (error) {"
  },
  {
    "id" : "561b45bd-9e7b-46f9-ae86-b34e80921af5",
    "prId" : 5740,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1700dc4e-67e8-450c-a382-aac1665771ee",
        "parentId" : null,
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "Is there any additional error information we should provide here? exitCode?\n",
        "createdAt" : "2016-09-06T13:46:28Z",
        "updatedAt" : "2016-09-26T19:07:46Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "404a015191136ef61f6883d72945bfde39085526",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +75,79 @@          _properties = parseAdbDeviceProperties(result.stdout);\n        } else {\n          printError('Error retrieving device properties for $name.');\n        }\n      } catch (error) {"
  },
  {
    "id" : "f385f9f4-0b13-4faf-ab94-41ab2047deae",
    "prId" : 6521,
    "prUrl" : "https://github.com/flutter/flutter/pull/6521#pullrequestreview-6036220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "487539a0-2295-475e-a4e8-023b1ddc1840",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Perhaps we should change the contract for `getAdbDevices()` to throw an exception if we have an error listing devices? As a get method, we should be able to call it w/o side effects. Instead of printing an error here, that would likely be the responsibility of a caller of the method.\n\nI'm not sure who calls getAdbDevices, where the best place to print the error would be, and which other callers would have to be made aware that getAdbDevices could now throw...\n",
        "createdAt" : "2016-10-27T08:29:37Z",
        "updatedAt" : "2016-10-27T08:29:37Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "87bba95d-fbcb-4868-9bb8-4670ec55d27f",
        "parentId" : "487539a0-2295-475e-a4e8-023b1ddc1840",
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "That was my initial thought as well and I considered throwing an exception. Looking at call sites for this method, I realized it's not really an exception, but rather additional information for the user. This method is used by higher level functions to gather information about devices, and this method (and others) are already calling `printError` as a sidecar way to provide additional information to the user.\n\nThat said, I agree that `printError` here (and elsewhere throughout this method and others) is not ideal in that it prevents calling methods from choosing how to present this additional information to the user.\n",
        "createdAt" : "2016-10-27T09:48:04Z",
        "updatedAt" : "2016-10-27T09:48:04Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      },
      {
        "id" : "aef2e200-f35c-49c1-bb83-4c21cbad5687",
        "parentId" : "487539a0-2295-475e-a4e8-023b1ddc1840",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Sorry, I didn't look at the rest of the impl of this method. It looks like we're already calling `printError()` here when we hit issues. Longer term we may want to instead return a more structured result from this method; definitely not necessary for this PR!\n",
        "createdAt" : "2016-10-27T11:05:00Z",
        "updatedAt" : "2016-10-27T11:05:00Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "48bc62377ef4b68c1cc6abe9f83634f5eed21724",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +636,640 @@  // Check for error messages from adb\n  if (!text.contains('List of devices')) {\n    printError(text);\n    return <AndroidDevice>[];\n  }"
  },
  {
    "id" : "f21058f7-8a82-47c7-800d-b2fe749039d7",
    "prId" : 6594,
    "prUrl" : "https://github.com/flutter/flutter/pull/6594#pullrequestreview-6493590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "396d3670-ad11-418a-9841-2b740ac44d84",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "This `runCheckedSync` may mean that we don't get a spinner during the install. We'd need to change this to a async process call (and change the containing method signature to a Future result).\n",
        "createdAt" : "2016-10-31T18:07:46Z",
        "updatedAt" : "2016-10-31T18:07:46Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "64138cce-e708-4da8-9228-943a5d8724e6",
        "parentId" : "396d3670-ad11-418a-9841-2b740ac44d84",
        "authorId" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "body" : "Correct. Will tackle in a subsequent PR.\n",
        "createdAt" : "2016-10-31T18:13:56Z",
        "updatedAt" : "2016-10-31T18:13:56Z",
        "lastEditedBy" : "ef18e386-81c5-4d21-83a1-6dee4f1a6e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f09b9fe0526c60d163e868c8fa840f52c554165",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +241,245 @@\n    Status status = logger.startProgress('Installing ${apk.apkPath}...');\n    String installOut = runCheckedSync(adbCommandForDevice(<String>['install', '-r', apk.apkPath]));\n    status.stop(showElapsedTime: true);\n    RegExp failureExp = new RegExp(r'^Failure.*$', multiLine: true);"
  },
  {
    "id" : "aa55bb4d-c47f-4de7-9983-632a5015e75b",
    "prId" : 6630,
    "prUrl" : "https://github.com/flutter/flutter/pull/6630#pullrequestreview-6721164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e70283b-2d5f-420d-89df-3e7a197dcfd2",
        "parentId" : null,
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "Do these need to be printed?  Users can see them at any time by running logcat\n",
        "createdAt" : "2016-11-01T22:39:25Z",
        "updatedAt" : "2016-11-01T22:39:25Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      },
      {
        "id" : "6a857384-ec0f-4c61-b3d9-ff6ea8a4b4a7",
        "parentId" : "2e70283b-2d5f-420d-89df-3e7a197dcfd2",
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "I'm just being consistent with the existing behaviour: log messages that are ignored are still printed via printTrace. See the bottom of this function.\n",
        "createdAt" : "2016-11-01T22:43:42Z",
        "updatedAt" : "2016-11-01T22:43:42Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "e0fb7f46-90e5-46b3-96e9-4de54a7407d1",
        "parentId" : "2e70283b-2d5f-420d-89df-3e7a197dcfd2",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I added this yesterday. May have been a mistake. Feel free to remove that.\n",
        "createdAt" : "2016-11-01T22:49:53Z",
        "updatedAt" : "2016-11-01T22:49:53Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "847034be4c44ea7499d2141452591682b8465838",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +786,790 @@      if (time.isBefore(_timeOrigin)) {\n        // Ignore log messages before the origin.\n        printTrace('skipped old log line: $line');\n        return;\n      }"
  },
  {
    "id" : "c7703302-0d55-4583-a919-51c11ba98507",
    "prId" : 7061,
    "prUrl" : "https://github.com/flutter/flutter/pull/7061#pullrequestreview-10874340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87c04910-daab-4569-a211-ee0f768c444a",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "Throwing is nice here. +1",
        "createdAt" : "2016-11-30T23:36:38Z",
        "updatedAt" : "2016-12-01T01:11:37Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4d39b0379cdd667e3822d069709d6d2c6c6d947",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +267,271 @@      return hostPort;\n    } catch (e) {\n      throw new ToolExit(\n          'Unable to forward host port $hostPort to device port $devicePort: $e');\n    }"
  },
  {
    "id" : "f762e370-7e81-445e-b577-7173a7d095ad",
    "prId" : 7061,
    "prUrl" : "https://github.com/flutter/flutter/pull/7061#pullrequestreview-10874340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "675aa12e-8ab4-4a07-8da8-cfe1fd74e7be",
        "parentId" : null,
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "so this block is protected by an if statement but the similar block above isn't. I think you can get rid of the if statement here or is it possible to get an Observatory URI but not a Diagnostic URI?",
        "createdAt" : "2016-11-30T23:38:14Z",
        "updatedAt" : "2016-12-01T01:11:37Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      },
      {
        "id" : "5cf5f3c1-59b4-48c2-8bf9-9ac0d31fb517",
        "parentId" : "675aa12e-8ab4-4a07-8da8-cfe1fd74e7be",
        "authorId" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "body" : "Nevermind, I see that this is optional.",
        "createdAt" : "2016-11-30T23:38:49Z",
        "updatedAt" : "2016-12-01T01:11:37Z",
        "lastEditedBy" : "5a8dd24e-c20a-4956-a91a-c1198c83ac54",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4d39b0379cdd667e3822d069709d6d2c6c6d947",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +379,383 @@\n        Uri diagnosticLocalUri;\n        if (diagnosticDeviceUri != null) {\n          printTrace('Diagnostic Server Uri on device: $diagnosticDeviceUri');\n          int diagnosticLocalPort = await debuggingOptions.findBestDiagnosticPort();"
  },
  {
    "id" : "456c9103-86b2-455f-b438-eee23c9cdb90",
    "prId" : 8290,
    "prUrl" : "https://github.com/flutter/flutter/pull/8290#pullrequestreview-22906944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e0fbce1-c8dd-436e-8b79-347b20a6aaab",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Is this function still used?",
        "createdAt" : "2017-02-20T17:05:04Z",
        "updatedAt" : "2017-02-20T17:05:04Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "848a58d8-c41d-4c3b-a060-600ecbc04c2e",
        "parentId" : "6e0fbce1-c8dd-436e-8b79-347b20a6aaab",
        "authorId" : "dacba9b5-733a-4327-87ba-af0a979de161",
        "body" : "Yep, to write the SHA1 to the device during install. And we'll want to use that again, but correctly this time - #8295.",
        "createdAt" : "2017-02-21T09:15:52Z",
        "updatedAt" : "2017-02-21T09:15:52Z",
        "lastEditedBy" : "dacba9b5-733a-4327-87ba-af0a979de161",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd51c86aa68fc974c8b674a3de3a50d49026bd4d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +197,201 @@  }\n\n  String _getSourceSha1(ApplicationPackage app) {\n    AndroidApk apk = app;\n    File shaFile = fs.file('${apk.apkPath}.sha1');"
  },
  {
    "id" : "b8ad39ac-c366-4fae-9a28-5564bb96e502",
    "prId" : 10249,
    "prUrl" : "https://github.com/flutter/flutter/pull/10249#pullrequestreview-39566202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3510cea5-7edc-41d9-b072-5e9c84908a3f",
        "parentId" : null,
        "authorId" : "29909713-5424-4233-a02b-b02672141af4",
        "body" : "As we discussed, my understanding is this may be the wrong question for the tool to ask?\r\n\r\nWhat changes our engine config is:\r\n1.  Does the system have a GPU (if not, use --debug, software backend).\r\n2.  Do we have a --release binary for this architecture (x86, x64, etc.) . If not force --debug.",
        "createdAt" : "2017-05-22T19:24:37Z",
        "updatedAt" : "2017-05-22T19:24:37Z",
        "lastEditedBy" : "29909713-5424-4233-a02b-b02672141af4",
        "tags" : [
        ]
      },
      {
        "id" : "249a9bbd-0726-4cb1-b23c-f2dd41557d22",
        "parentId" : "3510cea5-7edc-41d9-b072-5e9c84908a3f",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "That's why I filed and referenced #10248, which tracks that problem.  There are other places where we use the `isLocalEmulator` property though (like in analytics), so this was still worthwhile.",
        "createdAt" : "2017-05-22T19:32:44Z",
        "updatedAt" : "2017-05-22T19:32:44Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1977a8d96b3523e3fb6da8fe52461185863ceea",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +111,115 @@        final String characteristics = await _getProperty('ro.build.characteristics');\n        printTrace('ro.build.characteristics = $characteristics');\n        _isLocalEmulator = characteristics != null && characteristics.contains('emulator');\n      }\n    }"
  },
  {
    "id" : "373ed9d5-87ea-4b4a-909e-3e6d770264cf",
    "prId" : 14394,
    "prUrl" : "https://github.com/flutter/flutter/pull/14394#pullrequestreview-93428621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3651aa6e-6f7f-4ab7-ac27-2a7a6823c730",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "What we really want to check here is `isLocalEmulator`, right?  In a world where we support x86 physical devices (such devices do exist), we'll need to support release builds on them.\r\n\r\nThat said, it's complicated because our detection of whether the device is an emulator is best-effort (e.g. https://github.com/flutter/flutter/issues/10203)",
        "createdAt" : "2018-01-31T19:20:10Z",
        "updatedAt" : "2018-01-31T21:09:56Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "a79c4baf-2eab-4efc-818e-6606b9ce35b1",
        "parentId" : "3651aa6e-6f7f-4ab7-ac27-2a7a6823c730",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "Currently we don't support AOT compilation modes on x86/x64",
        "createdAt" : "2018-01-31T21:57:19Z",
        "updatedAt" : "2018-01-31T21:57:19Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      },
      {
        "id" : "14871d3d-efbc-4df7-b407-6125ffc087dd",
        "parentId" : "3651aa6e-6f7f-4ab7-ac27-2a7a6823c730",
        "authorId" : "29909713-5424-4233-a02b-b02672141af4",
        "body" : "Dart could support x64 if needed: https://github.com/flutter/flutter/issues/9253 however x86 AOT would be some months/weeks of work I'm told.",
        "createdAt" : "2018-02-01T20:36:51Z",
        "updatedAt" : "2018-02-01T20:36:51Z",
        "lastEditedBy" : "29909713-5424-4233-a02b-b02672141af4",
        "tags" : [
        ]
      }
    ],
    "commit" : "31cc4ea51b5e1c9e84fdcf56a984db219408b523",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +360,364 @@\n    final TargetPlatform devicePlatform = await targetPlatform;\n    if (!(devicePlatform == TargetPlatform.android_arm ||\n          devicePlatform == TargetPlatform.android_arm64) &&\n        !debuggingOptions.buildInfo.isDebug) {"
  },
  {
    "id" : "bdc0a9d0-cc3b-41b0-80a0-9ec8a055e261",
    "prId" : 14394,
    "prUrl" : "https://github.com/flutter/flutter/pull/14394#pullrequestreview-93099189",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b8ec8b3-0abc-451d-843f-3d9ef4bce752",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Why not always pass the target platform to the `BuildInfo`?",
        "createdAt" : "2018-01-31T19:31:21Z",
        "updatedAt" : "2018-01-31T21:09:56Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "7e74a040-e790-4091-b3bc-afc6f1400dbb",
        "parentId" : "4b8ec8b3-0abc-451d-843f-3d9ef4bce752",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "This is for scenarios where we don't know the target platform until we discover what kind of device is attached",
        "createdAt" : "2018-01-31T21:57:56Z",
        "updatedAt" : "2018-01-31T21:57:56Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "31cc4ea51b5e1c9e84fdcf56a984db219408b523",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +369,373 @@    BuildInfo buildInfo = debuggingOptions.buildInfo;\n    if (devicePlatform == TargetPlatform.android_arm64)\n      buildInfo = buildInfo.withTargetPlatform(TargetPlatform.android_arm64);\n\n    if (!prebuiltApplication) {"
  },
  {
    "id" : "7a99f128-1283-4ecc-ba6c-ffd2316808da",
    "prId" : 14650,
    "prUrl" : "https://github.com/flutter/flutter/pull/14650#pullrequestreview-96357424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f4e3a8f-1943-4448-91aa-da2514120044",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "`debuggingOptions` can legally be `null` here. ",
        "createdAt" : "2018-02-14T01:01:18Z",
        "updatedAt" : "2018-02-14T01:01:18Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "69be05220c0fd6a55145c87af9759f44ba8607f8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +367,371 @@    }\n\n    BuildInfo buildInfo = debuggingOptions.buildInfo;\n    if (buildInfo.targetPlatform == null && devicePlatform == TargetPlatform.android_arm64)\n      buildInfo = buildInfo.withTargetPlatform(TargetPlatform.android_arm64);"
  },
  {
    "id" : "e065ad64-3d0a-46bb-9f84-58d163ec87c1",
    "prId" : 18488,
    "prUrl" : "https://github.com/flutter/flutter/pull/18488#pullrequestreview-129275525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfae1417-5fd9-4e29-ade0-6fac30a9d052",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "`assert(hostPort >= 0)`?",
        "createdAt" : "2018-06-15T15:53:08Z",
        "updatedAt" : "2018-06-15T19:52:56Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "b37a955c-d862-46c7-b39f-53c7cc774cf4",
        "parentId" : "bfae1417-5fd9-4e29-ade0-6fac30a9d052",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we don't guarantee that. We could audit all the call sites to make sure that the callers all check the range on the port, but as of right now we're depending on adb to do that.",
        "createdAt" : "2018-06-15T18:31:05Z",
        "updatedAt" : "2018-06-15T19:52:56Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "63971d0fe9721f30b827e58caf9d16ac4a941f84",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +857,861 @@  Future<int> forward(int devicePort, {int hostPort}) async {\n    hostPort ??= 0;\n    final RunResult process = await runCheckedAsync(device.adbCommandForDevice(\n      <String>['forward', 'tcp:$hostPort', 'tcp:$devicePort']\n    ));"
  }
]