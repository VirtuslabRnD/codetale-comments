[
  {
    "id" : "2c8b7cf5-2701-45fb-9ae7-a73e90eb0f32",
    "prId" : 54700,
    "prUrl" : "https://github.com/flutter/flutter/pull/54700#pullrequestreview-392558792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1962d1d0-9901-4a98-925f-bce9bb53d430",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Unlike the FakeProcessManager, this has to support both request/response and notifications. The latter have no corresponding request (like a log message, or isolate notification).\r\n\r\nCombining these two concepts as a `VmServiceExpectation` allows us to describe  a more complex operation like runInView, which we need to ack the streamListen, ack the runInView request, and then return an isolate runnable notification",
        "createdAt" : "2020-04-14T02:18:22Z",
        "updatedAt" : "2020-04-15T00:23:15Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a9329910887ae10a616fefa192dd1a2230af316",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +284,288 @@\n  testWithoutContext('runInView forwards arguments correctly', () async {\n    final FakeVmServiceHost fakeVmServiceHost = FakeVmServiceHost(\n      requests: <VmServiceExpectation>[\n        const FakeVmServiceRequest(method: 'streamListen', id: '1', params: <String, Object>{"
  },
  {
    "id" : "aaa2fc60-6730-487f-9d02-81d668fb6d45",
    "prId" : 78995,
    "prUrl" : "https://github.com/flutter/flutter/pull/78995#pullrequestreview-621339025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "069ba975-1306-4a8d-92b2-7932df63972e",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Are there any additional checks to add here around the async `registerService` calls being done after this await completes?",
        "createdAt" : "2021-03-24T20:22:32Z",
        "updatedAt" : "2021-03-29T17:24:02Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "15adf9a4-d041-443e-9276-286684885543",
        "parentId" : "069ba975-1306-4a8d-92b2-7932df63972e",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Sorry, not sure what you mean exactly",
        "createdAt" : "2021-03-24T20:33:33Z",
        "updatedAt" : "2021-03-29T17:24:02Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "c079dfb7-c768-45b4-abc3-24e8b3af8f52",
        "parentId" : "069ba975-1306-4a8d-92b2-7932df63972e",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "If the `Future`s returned by the `registerService` calls weren't being `await`ed, but this PR now `await`s them, then the behavior is a bit different, and I'm wondering if any additional checks can be put after this call to make sure it doesn't regress. If the premise is wrong, and the behavior isn't any different, then this comment can be ignored.",
        "createdAt" : "2021-03-24T20:48:55Z",
        "updatedAt" : "2021-03-29T17:24:02Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "c8e7aeaf-190a-42f4-bd6d-6f26ae2aa38c",
        "parentId" : "069ba975-1306-4a8d-92b2-7932df63972e",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Generally we assume that all of the futures will complete successfully, that isn't quite right. I updated this method so that it catches RPC errors and tool exits",
        "createdAt" : "2021-03-25T16:37:28Z",
        "updatedAt" : "2021-03-29T17:24:02Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "da0b638c8c9b7cad55f332fe6056b313e6375f04",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +185,189 @@  testWithoutContext('VMService returns correct FlutterVersion', () async {\n    final MockVMService mockVMService = MockVMService();\n    await setUpVmService(\n      null,\n      null,"
  },
  {
    "id" : "326ae3d6-a0a7-4142-aa0f-2292c9f65b60",
    "prId" : 78995,
    "prUrl" : "https://github.com/flutter/flutter/pull/78995#pullrequestreview-621459014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02c6252b-4848-4dd3-8a91-0b9b1e483149",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "I'm worried about my understanding of errors on Futures, and I'd feel a bit better if you wouldn't mind adding a test of registration failure when there's a flutterPrintStructuredErrorLogMethod as well.",
        "createdAt" : "2021-03-25T17:17:20Z",
        "updatedAt" : "2021-03-29T17:24:02Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "8c6b756b-b7a1-4c13-966c-99188986a990",
        "parentId" : "02c6252b-4848-4dd3-8a91-0b9b1e483149",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "That doesn't use a service registration, it listens to an event stream. If that fails we keep on trucking since not getting those events isn't fatal",
        "createdAt" : "2021-03-25T18:34:42Z",
        "updatedAt" : "2021-03-29T17:24:02Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "da0b638c8c9b7cad55f332fe6056b313e6375f04",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +141,145 @@  testWithoutContext('VmService throws tool exit on service registration failure.', () async {\n    final MockVMService mockVMService = MockVMService()\n      ..errorOnRegisterService = true;\n\n    await expectLater(() async => setUpVmService("
  }
]