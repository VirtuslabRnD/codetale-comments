[
  {
    "id" : "0f66cbc4-1800-4d92-8e89-0134d08619b7",
    "prId" : 37198,
    "prUrl" : "https://github.com/flutter/flutter/pull/37198#pullrequestreview-269111258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1539981-0988-43fd-bb3f-9645134654f1",
        "parentId" : null,
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "awesome test! Do you know what scenarios can cause this issue? ",
        "createdAt" : "2019-07-31T15:29:59Z",
        "updatedAt" : "2019-07-31T15:40:22Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      },
      {
        "id" : "d4727986-b5f7-4ac6-9cb4-a9b2be26f962",
        "parentId" : "c1539981-0988-43fd-bb3f-9645134654f1",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Yes. In `runner.run()`, if the call to `_handleToolError()` in the catch block throws an exception, it will be caught by the `onError` callback to `runZoned()`.",
        "createdAt" : "2019-07-31T15:36:43Z",
        "updatedAt" : "2019-07-31T15:40:22Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "454214a1-c8a2-4213-9e44-847726d870a5",
        "parentId" : "c1539981-0988-43fd-bb3f-9645134654f1",
        "authorId" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "body" : "I'm looking at the implementation of `_handleToolError()`. It looks like some state changed between the two invocations to `_handleToolError()`?",
        "createdAt" : "2019-07-31T15:50:18Z",
        "updatedAt" : "2019-07-31T15:50:19Z",
        "lastEditedBy" : "26bed5e6-ee43-49f6-93fd-a565b3ee8889",
        "tags" : [
        ]
      }
    ],
    "commit" : "189584a8af58b7dbeab67bec421c234b34eaaaa1",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +63,67 @@      // attempt.\n      final CrashingUsage crashingUsage = flutterUsage;\n      expect(crashingUsage.sentException, 'runCommand');\n    }, overrides: <Type, Generator>{\n      Platform: () => FakePlatform(environment: <String, String>{"
  },
  {
    "id" : "56ecbb7a-ac71-4f28-93b9-352ce9227eb4",
    "prId" : 58474,
    "prUrl" : "https://github.com/flutter/flutter/pull/58474#pullrequestreview-429870753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eb19b31-18d2-46fe-b452-c1767f133e30",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Does anything go wrong if you do `runCompleted.complete()` here instead?",
        "createdAt" : "2020-06-05T16:03:23Z",
        "updatedAt" : "2020-06-12T19:50:33Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "02f54e59-4185-46c2-888e-cb74b9b06b12",
        "parentId" : "8eb19b31-18d2-46fe-b452-c1767f133e30",
        "authorId" : "aaf574ee-27e1-486c-9e3e-6fd5c8dbffc6",
        "body" : "It seems to work, but it would be a bit more brittle.  If asynchronous work ever occurs after `FlutterCommand.runCommand()` returns, the test could pass when it should fail.",
        "createdAt" : "2020-06-05T16:24:37Z",
        "updatedAt" : "2020-06-12T19:50:33Z",
        "lastEditedBy" : "aaf574ee-27e1-486c-9e3e-6fd5c8dbffc6",
        "tags" : [
        ]
      },
      {
        "id" : "8e52b233-6b45-4698-a522-623e5d3c45f1",
        "parentId" : "8eb19b31-18d2-46fe-b452-c1767f133e30",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Sorry, I'm not quite getting it. Could you spell this out for me a bit more? What's the sequence of events that would be problematic?",
        "createdAt" : "2020-06-05T18:25:29Z",
        "updatedAt" : "2020-06-12T19:50:33Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "1aa43f20-f90c-44e8-a766-1ee7370f5b53",
        "parentId" : "8eb19b31-18d2-46fe-b452-c1767f133e30",
        "authorId" : "aaf574ee-27e1-486c-9e3e-6fd5c8dbffc6",
        "body" : "If `CrashingFlutterCommand.runCommand` completed `runCompleted` instead, the desired sequence of events would be:\r\n\r\n1. `CrashingFlutterCommand.runCommand` generates an asynchronous error.\r\n2. The `onError` callback from `runner.run`'s `runZoned` call fires.  We proceed down the crash reporting path. `WaitingCrashReporter` waits for `runCompleted`.\r\n3. `CrashingFlutterCommand.runCommand` continues, completes `runCompleted`, and returns.\r\n4. `runner.run` continues in its `try` block.\r\n5. `WaitingCrashReporter` is unblocked and successfully reports the crash.\r\n\r\nIf execution yields between steps 3 and 4, then step 5 could run first.  If step 5 runs before step 4, a regression where `runner.run`'s `try` block makes its own call to `exit()` would not be detected.",
        "createdAt" : "2020-06-05T18:47:25Z",
        "updatedAt" : "2020-06-12T19:50:33Z",
        "lastEditedBy" : "aaf574ee-27e1-486c-9e3e-6fd5c8dbffc6",
        "tags" : [
        ]
      },
      {
        "id" : "7ab1c414-1b16-4071-900b-745691429ae6",
        "parentId" : "8eb19b31-18d2-46fe-b452-c1767f133e30",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Okay, thanks. I understand the concern now. Other than a stray call in `analyze_continuously.dart`, the tool only calls `exit()` in `runner.dart` and `base/signals.dart`. We should guard against proliferating calls to exit with a more on-the-nose test, but not in this PR. For this PR, I think it would be best to move the `runCompleted` completer from `runner.dart` into the test.",
        "createdAt" : "2020-06-11T15:45:16Z",
        "updatedAt" : "2020-06-12T19:50:33Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "3fc5e9f5-3dc8-4d98-8031-9c838f0a7059",
        "parentId" : "8eb19b31-18d2-46fe-b452-c1767f133e30",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "I filed https://github.com/flutter/flutter/issues/59338",
        "createdAt" : "2020-06-12T16:14:19Z",
        "updatedAt" : "2020-06-12T19:50:33Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7222f36c364703f0bcac0ae2daf96e46186b735",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +230,234 @@    _completer.complete();\n\n    return FlutterCommandResult.success();\n  }\n}"
  }
]