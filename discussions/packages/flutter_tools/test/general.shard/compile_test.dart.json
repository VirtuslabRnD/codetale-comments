[
  {
    "id" : "1aacc5a7-b043-4d9f-9fe1-b1380ff86713",
    "prId" : 66405,
    "prUrl" : "https://github.com/flutter/flutter/pull/66405#pullrequestreview-493941644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4085b598-e714-4cd4-9839-5c65ad46f35b",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Updated to add test case for org-dartlang-app URI and to expect file URIs",
        "createdAt" : "2020-09-23T01:01:31Z",
        "updatedAt" : "2020-09-23T01:04:21Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f9225bdd4ef7cceff1b2b5152cbb48015a88c8f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +36,40 @@  });\n\n  testWithoutContext('toMultiRootPath maps different URIs', () async {\n    expect(toMultiRootPath(Uri.parse('file:///a/b/c'), 'scheme', <String>['/a/b'], false), 'scheme:///c');\n    expect(toMultiRootPath(Uri.parse('file:///d/b/c'), 'scheme', <String>['/a/b'], false), 'file:///d/b/c');"
  },
  {
    "id" : "2f60ef07-36e3-4b51-8241-c709ac65127d",
    "prId" : 77867,
    "prUrl" : "https://github.com/flutter/flutter/pull/77867#pullrequestreview-610277157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53297b93-e259-4887-8797-2ea7ec1ac97b",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Should there be a test for error count != 0?",
        "createdAt" : "2021-03-11T20:40:45Z",
        "updatedAt" : "2021-03-11T23:55:11Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "6797b1b1-6874-476d-b419-73199d64deca",
        "parentId" : "53297b93-e259-4887-8797-2ea7ec1ac97b",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "actually - do we generate an intentionally invalid dill for expression evaluation if there is a compile error? @aam ",
        "createdAt" : "2021-03-11T20:59:18Z",
        "updatedAt" : "2021-03-11T23:55:11Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "89d9236d-6aa1-4f72-8c28-927ff84b8502",
        "parentId" : "53297b93-e259-4887-8797-2ea7ec1ac97b",
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "There will be a dill file even if there were compilation errors yes",
        "createdAt" : "2021-03-11T22:18:56Z",
        "updatedAt" : "2021-03-11T23:55:11Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      },
      {
        "id" : "879e7399-e5cc-49bc-8991-e71beb26f29b",
        "parentId" : "53297b93-e259-4887-8797-2ea7ec1ac97b",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "OK - then we should definitely still read it so that the IDE can get the appropriate compilation errors from the attached device",
        "createdAt" : "2021-03-11T22:21:06Z",
        "updatedAt" : "2021-03-11T23:55:11Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f7ccb43fc2c2dae6e8e1d6b161f9572c73c48b2",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +38,42 @@    final CompilerOutput output = await stdoutHandler.compilerOutput.future;\n\n    expect(output.errorCount, 0);\n    expect(output.outputFilename, 'message');\n    expect(output.expressionData, <int>[1, 2, 3, 4]);"
  }
]