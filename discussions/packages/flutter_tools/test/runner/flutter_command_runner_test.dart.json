[
  {
    "id" : "82c2549b-6a60-41a0-b3a1-a424e727eab5",
    "prId" : 23891,
    "prUrl" : "https://github.com/flutter/flutter/pull/23891#pullrequestreview-171813328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6297bb9f-924c-4230-ac5b-e271ccb45720",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "This addition isn't used",
        "createdAt" : "2018-11-05T23:39:05Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "68ef2b21-082a-4715-a8c3-002a84ca923d",
        "parentId" : "6297bb9f-924c-4230-ac5b-e271ccb45720",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "It is used within the version.dart class.",
        "createdAt" : "2018-11-05T23:47:59Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "67d24ea6525a36a6c32f9374aba29aa98ac27d61",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +46,50 @@          'FLUTTER_ROOT': _kFlutterRoot,\n        },\n        version: '1 2 3 4 5',\n      );\n"
  },
  {
    "id" : "db7b40ed-6c40-4b7d-b19d-279ee885c2a2",
    "prId" : 23891,
    "prUrl" : "https://github.com/flutter/flutter/pull/23891#pullrequestreview-172160183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f403807f-76d7-45e3-8afb-556b43605acf",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "This will cause `GitTagVersion.determine()` to return `unknown`, which is the cause for the final version string to be \"0.0.0-unknown\".\r\n\r\nThe fact that it's going through this code path to get to the expected value will make this test very fragile.  I think this test can simply verify that we include the `'frameworkVersion'` key in the JSON, and that the value delegates to `frameworkVersion`.  To do this, you can write a local `FlutterVersion` implementation that extends from the real impl but overrides the `frameworkVersion` getter to return a known value.  Then in your test, you can simple expect that the requisite key exists in the JSON and that the matching value is your known value.",
        "createdAt" : "2018-11-05T23:55:47Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "e5ceeeb0-cf0d-4d9e-9d9e-f3e11d974db7",
        "parentId" : "f403807f-76d7-45e3-8afb-556b43605acf",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Do you mean a FlutterVersion mock?",
        "createdAt" : "2018-11-05T23:59:25Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "16b05ffc-8e30-47a7-9670-7c0cc920ebd1",
        "parentId" : "f403807f-76d7-45e3-8afb-556b43605acf",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Effectively, yes.  But unfortunately due to the way mocks work in mockito Dart, there's no way to say `when(...).thenCallRealMethod()`, which is what we really want.  If we had that, then we'd say:\r\n\r\n```dart\r\nwhen(mockVersion.frameworkVersion).thenReturn('foo');\r\nwhen(mockVersion.toJson()).thenCallRealMethod();\r\nMap<String, Object> json = mockVersion.toJson();\r\nexpect(json.containsKey('frameworkVersion'), isTrue);\r\nexpect(json['frameworkVersion'], 'foo');\r\n```\r\n\r\nInstead, we have to construct our own \"mock\" by extending `FlutterVersion` and overriding the `frameworkVersion` getter.",
        "createdAt" : "2018-11-06T00:16:55Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "d357b087-78b5-4191-af11-065f5e18deb9",
        "parentId" : "f403807f-76d7-45e3-8afb-556b43605acf",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "ok yah that makes sense",
        "createdAt" : "2018-11-06T00:18:29Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "f33fea9c-945d-4453-8097-1afb14525d31",
        "parentId" : "f403807f-76d7-45e3-8afb-556b43605acf",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "So it turns out you can't actually instance a `FlutterVersion` without giving those fake git responses. Because I don't think you can create a class and bypass the constructor?",
        "createdAt" : "2018-11-06T01:41:43Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "7129657a-6c5e-4712-b3fa-a851129a9b7f",
        "parentId" : "f403807f-76d7-45e3-8afb-556b43605acf",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Yeah, you'll either need to (a) still fake the git responses, or (b) override all methods called by `toJson()`.",
        "createdAt" : "2018-11-06T04:01:39Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "bd7825d8-0459-4ca3-a0e3-523e501e181d",
        "parentId" : "f403807f-76d7-45e3-8afb-556b43605acf",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Ok, so the fake git responses are fine? It's just the version response you didn't like?",
        "createdAt" : "2018-11-06T17:39:25Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "6e32d7c9-7430-4ea9-87ca-7107a7e1451f",
        "parentId" : "f403807f-76d7-45e3-8afb-556b43605acf",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "The fact that we're calling the real `frameworkVersion` getter makes the test fragile, which is what I don't like.  The best way forward is probably (b) (\"override all methods called by `toJson()`\").  Something like:\r\n\r\n```dart\r\nclass FlutterVersionForToJson extends FlutterVersion {\r\n  @override\r\n  String get frameworkVersion => 'frameworkVersion';\r\n\r\n  @override\r\n  String get channel => 'channel';\r\n\r\n  @override\r\n  String get repositoryUrl => 'repositoryUrl';\r\n\r\n  @override\r\n  String get frameworkRevision => 'frameworkRevision';\r\n\r\n  @override\r\n  String get frameworkCommitDate => 'frameworkCommitDate';\r\n\r\n  @override\r\n  String get engineRevision => 'engineRevision';\r\n\r\n  @override\r\n  String get dartSdkVersion => 'dartSdkVersion';\r\n}\r\n```\r\n\r\nThen you won't need the mock git stuff at all.",
        "createdAt" : "2018-11-06T17:59:35Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "28dd57e6-d1f0-4ebe-a4ed-a36abe80e7be",
        "parentId" : "f403807f-76d7-45e3-8afb-556b43605acf",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "But I think you will because I don't think you can initialize anything that inherits from `FlutterVersion` without going through that git stuff. Just to clarify, right now the mock git stuff doesn't have any meaningful response, it merely exists to not cause references to be null.",
        "createdAt" : "2018-11-06T18:16:32Z",
        "updatedAt" : "2018-11-07T00:03:10Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "67d24ea6525a36a6c32f9374aba29aa98ac27d61",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +95,99 @@          workingDirectory: Cache.flutterRoot)).thenReturn(result);\n        when(processManager.runSync('git describe --match v*.*.* --first-parent --long --tags'.split(' '),\n          workingDirectory: Cache.flutterRoot)).thenReturn(result);\n        when(processManager.runSync('git log -n 1 --pretty=format:%ad --date=iso'.split(' '),\n          workingDirectory: Cache.flutterRoot)).thenReturn(result);"
  }
]