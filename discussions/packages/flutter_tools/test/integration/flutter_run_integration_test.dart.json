[
  {
    "id" : "3254b914-2ad3-4b46-94bc-8a5622d6a239",
    "prId" : 18560,
    "prUrl" : "https://github.com/flutter/flutter/pull/18560#pullrequestreview-132090342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "226b545e-9902-495c-858d-e715a02f601c",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "`test_utils.dart`?",
        "createdAt" : "2018-06-26T15:57:45Z",
        "updatedAt" : "2018-06-26T16:06:07Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dd229b2b3a318d91c7243598a458d48bdb9f81a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@import '../src/context.dart';\nimport 'flutter_test_driver.dart';\nimport 'util.dart';\n\nDirectory _tempDir;"
  },
  {
    "id" : "67774a0f-a4bd-40d6-b592-0d3176c7b8b9",
    "prId" : 18560,
    "prUrl" : "https://github.com/flutter/flutter/pull/18560#pullrequestreview-132090342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a5e3c2b-daf1-4a09-a6f7-d992ef00f07e",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "`test_driver.dart`?",
        "createdAt" : "2018-06-26T15:57:53Z",
        "updatedAt" : "2018-06-26T16:06:07Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dd229b2b3a318d91c7243598a458d48bdb9f81a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@\nimport '../src/context.dart';\nimport 'flutter_test_driver.dart';\nimport 'util.dart';\n"
  },
  {
    "id" : "3dda5ebf-1076-46ad-9318-a989cfc506a6",
    "prId" : 18560,
    "prUrl" : "https://github.com/flutter/flutter/pull/18560#pullrequestreview-132090342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0837027f-7eee-489b-ae14-5b8c68abbd29",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "I normally see setUp and tearDown in the context of a group, not bare like this.",
        "createdAt" : "2018-06-26T15:58:44Z",
        "updatedAt" : "2018-06-26T16:06:07Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dd229b2b3a318d91c7243598a458d48bdb9f81a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +19,23 @@void main() {\n\n  setUp(() async {\n    _tempDir = await fs.systemTempDirectory.createTemp('test_app');\n    await _setupSampleProject();"
  },
  {
    "id" : "b73b7483-947c-4847-b2c8-d1a936407983",
    "prId" : 18560,
    "prUrl" : "https://github.com/flutter/flutter/pull/18560#pullrequestreview-132090342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24c28b2e-447b-4b75-9175-29be353ed1c0",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "If all the integration tests need the same setup and teardown, perhaps have a `testIntegration` test entrypoint? (instead of `test()` or `testUsingContext()`).\r\n\r\nAlso, are we using any of the functionality from `testUsingContext`? From memory, that setup may be more useful to the flutter_tools unit tests.\r\n",
        "createdAt" : "2018-06-26T16:01:00Z",
        "updatedAt" : "2018-06-26T16:06:07Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "f15d5b23-a6aa-4f46-8128-e49a0f31980e",
        "parentId" : "24c28b2e-447b-4b75-9175-29be353ed1c0",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Or, have integration tests defining in a class, with setup, test, and teardown methods subclasses can override? That could also be a place to put common utility functions, like `evaluateTrivialExpressions`",
        "createdAt" : "2018-06-26T16:02:46Z",
        "updatedAt" : "2018-06-26T16:06:07Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dd229b2b3a318d91c7243598a458d48bdb9f81a",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@  group('FlutterTesterDevice', () {\n\n    testUsingContext('can hot reload', () async {\n      await _flutter.run();\n      await _flutter.hotReload();"
  },
  {
    "id" : "8a8e2b98-18ef-4d28-b665-21b3c8775862",
    "prId" : 18560,
    "prUrl" : "https://github.com/flutter/flutter/pull/18560#pullrequestreview-132090342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "416e721b-fc56-4dd1-b232-3804c50badf4",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "For some (many?) of these skips, we should instead invert the test to expect failure. That means we'll be notifies by the CI when the issue is fixed.",
        "createdAt" : "2018-06-26T16:03:29Z",
        "updatedAt" : "2018-06-26T16:06:07Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dd229b2b3a318d91c7243598a458d48bdb9f81a",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +108,112 @@      await breakInTopLevelFunction(_flutter);\n      await evaluateTrivialExpressions();\n    }, skip: true); // https://github.com/flutter/flutter/issues/18678\n\n    testUsingContext('can evaluate trivial expressions in build method', () async {"
  }
]