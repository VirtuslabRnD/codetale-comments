[
  {
    "id" : "3fdbcf1f-3248-4ca2-9f3d-d444d3fea374",
    "prId" : 61411,
    "prUrl" : "https://github.com/flutter/flutter/pull/61411#pullrequestreview-448365931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc0bf1e9-d7c7-4ef9-ba1a-111c9cbb9fde",
        "parentId" : null,
        "authorId" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "body" : "Will this test pass on release branches?",
        "createdAt" : "2020-07-14T18:24:48Z",
        "updatedAt" : "2020-07-14T18:24:48Z",
        "lastEditedBy" : "7ae842f7-1029-4528-8bf6-8472584744ed",
        "tags" : [
        ]
      },
      {
        "id" : "c7401bb6-d4a1-4625-b937-2e5eef2645e8",
        "parentId" : "bc0bf1e9-d7c7-4ef9-ba1a-111c9cbb9fde",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Yes - because we need to create arguments before we know what the current flutter version is, all of the features are always displayed",
        "createdAt" : "2020-07-14T18:37:19Z",
        "updatedAt" : "2020-07-14T18:37:19Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "86fc5eb7c865828345a4403c3231a2033677a29b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +57,61 @@  });\n\n  test('flutter config contains all features', () async {\n    final String flutterBin = globals.fs.path.join(getFlutterRoot(), 'bin', 'flutter');\n    final ProcessResult result = await const LocalProcessManager().run(<String>["
  },
  {
    "id" : "48f787db-ae50-43cf-a5b9-4b47c955880c",
    "prId" : 62053,
    "prUrl" : "https://github.com/flutter/flutter/pull/62053#pullrequestreview-456184124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f27735f-3cf8-4e9a-b7de-b1e6bfd180e7",
        "parentId" : null,
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "This has been around forever, but it'd be really nice if we could suppress the non-JSON text like this when `--machine` is in the args ðŸ˜„",
        "createdAt" : "2020-07-22T18:38:08Z",
        "updatedAt" : "2020-07-28T16:01:59Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      },
      {
        "id" : "fc57dd87-f7a3-46bb-ab0a-5c7b210e4b66",
        "parentId" : "5f27735f-3cf8-4e9a-b7de-b1e6bfd180e7",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "It should be safe to write this to stderr too, right? I was looking at this a while back but that change ended being hard to land due to integration tests asserting stderr was empty",
        "createdAt" : "2020-07-22T19:15:28Z",
        "updatedAt" : "2020-07-28T16:01:59Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "a870586d-5905-4afa-bf76-a3d0ad7ed44c",
        "parentId" : "5f27735f-3cf8-4e9a-b7de-b1e6bfd180e7",
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "Hmmm, not sure.. I think there are probably many places that assume stderr is for errors. I think PowerShell may also (or at least used to?) print stderr in scary colors.. some common tool like Git was always causing my grief because it wrote some status messages to stderr and made it look like it'd crashed ðŸ˜ž\r\n",
        "createdAt" : "2020-07-22T19:32:44Z",
        "updatedAt" : "2020-07-28T16:01:59Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      },
      {
        "id" : "693cbdcb-60ed-4c0e-bb66-5405e7de9158",
        "parentId" : "5f27735f-3cf8-4e9a-b7de-b1e6bfd180e7",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "ack",
        "createdAt" : "2020-07-27T22:40:46Z",
        "updatedAt" : "2020-07-28T16:01:59Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6ee06ccf8ff460e41e320c31f5dc4b65f885e09",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +142,146 @@    final Map<String, Object> versionInfo = json.decode(result.stdout\n      .toString()\n      .replaceAll('Building flutter tool...', '')\n      .replaceAll('Waiting for another flutter command to release the startup lock...', '')\n      .trim()) as Map<String, Object>;"
  }
]