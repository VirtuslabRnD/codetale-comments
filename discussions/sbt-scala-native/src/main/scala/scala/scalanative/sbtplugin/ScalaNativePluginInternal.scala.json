[
  {
    "id" : "2e9cd177-871e-4243-8ad8-1275d03d79f1",
    "prId" : 2039,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/2039#pullrequestreview-541127240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a487af6-f40f-4331-bb09-ab79bea7815b",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "This assumes that we can keep reusing a `sharedScope` after it has been closed. That's typically not a guarantee that `close()`-able things give, so I don't think we should rely on it.\r\n\r\nConsider using a `var` to store `sharedScope`, and reset it to a new `Scope.unsafe()` after this `close()`.",
        "createdAt" : "2020-11-30T17:29:48Z",
        "updatedAt" : "2020-11-30T18:39:01Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "badd6b8867eba24d70695cc85d23fae5ad7fe368",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +77,81 @@      () => {\n        prev()\n        sharedScope.close()\n        sharedScope = Scope.unsafe()\n        testAdapters.getAndSet(Nil).foreach(_.close())"
  },
  {
    "id" : "ac8ae5d8-f814-49a6-abe0-5c0c59ad6e2a",
    "prId" : 1637,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1637#pullrequestreview-445757336",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90f2088e-6583-4420-bc39-56c70386e17c",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Looks like those changes are unrelated to this PR.",
        "createdAt" : "2020-07-08T14:48:42Z",
        "updatedAt" : "2020-08-05T16:19:45Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "c9de86b6-17e8-48ce-87db-af18c74ab8cb",
        "parentId" : "90f2088e-6583-4420-bc39-56c70386e17c",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "Yes, but I was trying to use the Boy Scout Rule. Also, I think having them all consistent and in the build tools rather than in the `sbt` plugin is a good change.",
        "createdAt" : "2020-07-09T16:00:22Z",
        "updatedAt" : "2020-08-05T16:19:45Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca74e914b77aad5432b0b9cc003d927c890b63b7",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +53,57 @@    nativeMode := Discover.mode(),\n    nativeLinkStubs := false,\n    nativeGC := Discover.GC(),\n    nativeLTO := Discover.LTO(),\n    nativeCheck := false,"
  },
  {
    "id" : "9202b732-d74e-4bcf-9521-0dbd61991edd",
    "prId" : 1117,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1117#pullrequestreview-90136530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e9caa6d-644f-4cb7-848b-3113543ba2b2",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Lets also add `SCALANATIVE_MODE` similarly to `SCALANATIVE_GC`. ",
        "createdAt" : "2018-01-19T11:24:35Z",
        "updatedAt" : "2018-01-19T15:14:40Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "fadde3a1-feb2-41d6-8aac-8d198dc88fc3",
        "parentId" : "5e9caa6d-644f-4cb7-848b-3113543ba2b2",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "Done.",
        "createdAt" : "2018-01-19T14:58:08Z",
        "updatedAt" : "2018-01-19T15:14:40Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b157db1b8667e1688b5f6f3d335d469d2faafa9",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +125,129 @@    nativeOptimizerReporter := tools.OptimizerReporter.empty,\n    nativeOptimizerReporter in NativeTest := (nativeOptimizerReporter in Test).value,\n    nativeGC := Option(System.getenv.get(\"SCALANATIVE_GC\")).getOrElse(\"boehm\"),\n    nativeGC in NativeTest := (nativeGC in Test).value\n  )"
  },
  {
    "id" : "afb8341f-de5a-4254-80aa-d304aa490506",
    "prId" : 1082,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1082#pullrequestreview-98414907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8154f7ca-55b2-48b6-87b5-8b831fd52e8e",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Shouldn't be necessary once we add `@link(\"pthread\")` on the extern object for pthread.",
        "createdAt" : "2018-02-13T16:35:06Z",
        "updatedAt" : "2018-02-22T05:23:44Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "2d28363c-3853-47ec-b836-120951786ee0",
        "parentId" : "8154f7ca-55b2-48b6-87b5-8b831fd52e8e",
        "authorId" : "a79847b3-f184-4eed-a75a-998c93d1ae98",
        "body" : "process_monitor.c doesn't compile on the travis server without this.",
        "createdAt" : "2018-02-22T00:42:19Z",
        "updatedAt" : "2018-02-22T05:23:44Z",
        "lastEditedBy" : "a79847b3-f184-4eed-a75a-998c93d1ae98",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecd37e5909a957621cdeef446c0e6c59b77bd151",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +391,395 @@          .map(_.name) ++ garbageCollector(gc).links\n      }\n      val linkopts  = links.map(\"-l\" + _) ++ linkingOpts ++ Seq(\"-lpthread\")\n      val targetopt = Seq(\"-target\", target)\n      val flags     = Seq(\"-o\", outpath.abs) ++ linkopts ++ targetopt"
  },
  {
    "id" : "ffaf2659-8408-41bf-8add-6bfb2e7bb765",
    "prId" : 726,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/726#pullrequestreview-39435049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acce97fa-9934-46a2-89d9-b13702fcfdb8",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Needs an sbt doc page update to mention this. ",
        "createdAt" : "2017-05-22T10:31:35Z",
        "updatedAt" : "2017-05-26T19:58:23Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "e178312c9ed14cff70f46cd7ef3ea62a9cf51246",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +500,504 @@    case value =>\n      throw new MessageOnlyException(\n        \"nativeGC can be either \\\"none\\\", \\\"boehm\\\" or \\\"immix\\\", not: \" + value)\n  }\n"
  },
  {
    "id" : "e4261554-d488-4898-8be7-892801babfd6",
    "prId" : 725,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/725#pullrequestreview-43110466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f47fa307-8697-4b22-b223-ea8edbae1605",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "It seems like all settings/keys that we document should be here. Why are `nativeCompileOptions`, `nativeLinkingOptions`, `nativeClang`, `nativeClangPP` not there? ",
        "createdAt" : "2017-06-09T09:08:56Z",
        "updatedAt" : "2017-06-09T09:09:10Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "9201753f-6c29-440e-8b37-98d946dae04c",
        "parentId" : "f47fa307-8697-4b22-b223-ea8edbae1605",
        "authorId" : "8ea77260-a6ff-49da-9900-245920bdc998",
        "body" : "They are, I think you've been tricked by the folded diff. All the keys in global scope are:\r\n`nativeWarnOldJVM`, `nativeClang`, `nativeClangPP`, `nativeCompileOptions`, `nativeLinkingOptions`, `nativeMode`, `nativeLinkerReporter`, `nativeOptimizerReporter`, `nativeLogger`, and `nativeGC`.",
        "createdAt" : "2017-06-09T09:37:16Z",
        "updatedAt" : "2017-06-09T09:37:16Z",
        "lastEditedBy" : "8ea77260-a6ff-49da-9900-245920bdc998",
        "tags" : [
        ]
      },
      {
        "id" : "9fa7df7c-8bee-4d2b-a5a8-81326b1ba44b",
        "parentId" : "f47fa307-8697-4b22-b223-ea8edbae1605",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Indeed, folded diff is very misleading here.",
        "createdAt" : "2017-06-09T09:39:13Z",
        "updatedAt" : "2017-06-09T09:39:13Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ff53b81575763b53a781b246fb75d8b6f341f29",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +161,165 @@    nativeLogger := streams.value.log,\n    nativeGC := \"boehm\"\n  )\n\n  lazy val scopedSettings = Seq("
  },
  {
    "id" : "3e1c3bcc-7b15-4f97-a0f8-64d33d252988",
    "prId" : 714,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/714#pullrequestreview-37529033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f467fda-d916-488c-ad6f-1c4c2c3163dd",
        "parentId" : null,
        "authorId" : "d1cbb5a4-1605-48d2-8efe-eeb6295c931f",
        "body" : "Looks like this is a fix of #692",
        "createdAt" : "2017-05-09T07:37:29Z",
        "updatedAt" : "2017-05-16T18:46:28Z",
        "lastEditedBy" : "d1cbb5a4-1605-48d2-8efe-eeb6295c931f",
        "tags" : [
        ]
      },
      {
        "id" : "d48dcbac-0b5e-422c-af0f-6aef5e1274ca",
        "parentId" : "4f467fda-d916-488c-ad6f-1c4c2c3163dd",
        "authorId" : "8ea77260-a6ff-49da-9900-245920bdc998",
        "body" : "Yup, I mentioned it in the commit message, but forgot to in the PR description. Thanks!",
        "createdAt" : "2017-05-09T07:38:19Z",
        "updatedAt" : "2017-05-16T18:46:28Z",
        "lastEditedBy" : "8ea77260-a6ff-49da-9900-245920bdc998",
        "tags" : [
        ]
      },
      {
        "id" : "62a7c917-b96b-4872-b859-f4b8dcaaa08d",
        "parentId" : "4f467fda-d916-488c-ad6f-1c4c2c3163dd",
        "authorId" : "ca2e508a-23b5-4798-bad8-acc20e21d0d5",
        "body" : "Note that `sys.error` will be deprecated in 2.13: https://github.com/scala/scala/pull/5677. It's better to use `throw new RuntimeException` instead.",
        "createdAt" : "2017-05-11T09:45:37Z",
        "updatedAt" : "2017-05-16T18:46:28Z",
        "lastEditedBy" : "ca2e508a-23b5-4798-bad8-acc20e21d0d5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1413c57457b47f24aafed82dc38f607959f73cb5",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +247,251 @@            val result = Process(compilec, cwd) ! logger\n            if (result != 0) {\n              sys.error(\"Failed to compile native library runtime code.\")\n            }\n        }"
  },
  {
    "id" : "7f056c79-7e4a-4634-af02-3931550c174e",
    "prId" : 653,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/653#pullrequestreview-34007752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "863220e4-ab18-4c3f-a2f1-700bc8eb1bfe",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "We do want to keep `-O2` as code from runtime library should always be optimized, even in debug mode. ",
        "createdAt" : "2017-04-21T08:31:32Z",
        "updatedAt" : "2017-04-21T12:13:45Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "48c420e7-c6ed-45dd-9459-aeb0daa11d6d",
        "parentId" : "863220e4-ab18-4c3f-a2f1-700bc8eb1bfe",
        "authorId" : "d1cbb5a4-1605-48d2-8efe-eeb6295c931f",
        "body" : "In my experience `-O2` makes debugging harder and I'd expect that we want to ensure that the runtime library code itself is debug friendly when the user requests it, especially since it in some cases uses C wrappers.\r\n\r\nIf you insist that this is not the case, I think there is still a bug in that the optimization flag needs to be moved after the common flags to take effect.",
        "createdAt" : "2017-04-21T11:45:19Z",
        "updatedAt" : "2017-04-21T12:13:45Z",
        "lastEditedBy" : "d1cbb5a4-1605-48d2-8efe-eeb6295c931f",
        "tags" : [
        ]
      },
      {
        "id" : "1cf60e1a-382a-4cbf-9be1-474cd0c9f6c0",
        "parentId" : "863220e4-ab18-4c3f-a2f1-700bc8eb1bfe",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "This is not the case at the moment. Most of the C/C++ code we have out there are just simple wrappers without any logic whatsoever, there isn't anything to debug in there.",
        "createdAt" : "2017-04-21T11:47:28Z",
        "updatedAt" : "2017-04-21T12:13:45Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "c70944a1-36b3-4f27-8bcc-77e27abba698",
        "parentId" : "863220e4-ab18-4c3f-a2f1-700bc8eb1bfe",
        "authorId" : "d1cbb5a4-1605-48d2-8efe-eeb6295c931f",
        "body" : "OK, I've updated the fix to fix the order so setting `nativeMode` to debug doesn't override it.",
        "createdAt" : "2017-04-21T12:14:24Z",
        "updatedAt" : "2017-04-21T12:14:24Z",
        "lastEditedBy" : "d1cbb5a4-1605-48d2-8efe-eeb6295c931f",
        "tags" : [
        ]
      }
    ],
    "commit" : "139ca50b18848a3369ea42ccf50e9b761d86cf0a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +222,226 @@\n            val compiler = abs(if (isCppSource) clangpp else clang)\n            val flags    = (if (isCppSource) Seq(\"-std=c++11\") else Seq()) ++ opts\n            val compilec = Seq(compiler) ++ flags ++ Seq(\"-c\",\n                                                         path,"
  },
  {
    "id" : "afee6d09-179a-4b6b-85db-590d01960889",
    "prId" : 630,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/630#pullrequestreview-32310960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c8ccfbb-ed4e-41e6-9985-0adaa1a60dc6",
        "parentId" : null,
        "authorId" : "19142ef5-3d34-49b4-a25f-6b361a41847d",
        "body" : "Hum this undo the work for: https://github.com/scala-native/scala-native/issues/562",
        "createdAt" : "2017-04-11T15:27:00Z",
        "updatedAt" : "2017-04-12T09:19:47Z",
        "lastEditedBy" : "19142ef5-3d34-49b4-a25f-6b361a41847d",
        "tags" : [
        ]
      },
      {
        "id" : "749fe792-749c-41e7-8f63-74e1836c9c6a",
        "parentId" : "4c8ccfbb-ed4e-41e6-9985-0adaa1a60dc6",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Yes, it did not scale at all to the model where everything is a task. ",
        "createdAt" : "2017-04-11T15:28:19Z",
        "updatedAt" : "2017-04-12T09:19:47Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "ba11e3c4-f0d6-4461-b61b-e057dc369dd2",
        "parentId" : "4c8ccfbb-ed4e-41e6-9985-0adaa1a60dc6",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Actually, as tasks, they will get evaluated only if another task depending on them is executed. So it should be quite fine for #562.",
        "createdAt" : "2017-04-11T20:13:50Z",
        "updatedAt" : "2017-04-12T09:19:47Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "09933f51-f854-449b-9df8-584abb103166",
        "parentId" : "4c8ccfbb-ed4e-41e6-9985-0adaa1a60dc6",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "A bit of background: previously @MasseGuillaume suggested we make `nativeClang` a setting of type `Option[File]` instead of `File`. This seemed to be okey when most of the code was outside DSL world in helper functions. Now, when everything is a task, it's super annoying to deal with this option and it complicates code considerably. So instead, this PR goes with a simpler solution: making `nativeClang` to be a task.",
        "createdAt" : "2017-04-12T08:36:46Z",
        "updatedAt" : "2017-04-12T09:19:47Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "e791f07d668b442dbb5ec1d3c800fa193024ce2e",
    "line" : 302,
    "diffHunk" : "@@ -1,1 +117,121 @@    addCompilerPlugin(\n      \"org.scala-native\" % \"nscplugin\" % nativeVersion cross CrossVersion.full),\n    nativeClang := {\n      val clang = discover(\"clang\", clangVersions)\n      checkThatClangIsRecentEnough(clang)"
  },
  {
    "id" : "51f0d7d8-4604-4e30-a6fe-8e59ad83c404",
    "prId" : 630,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/630#pullrequestreview-32314311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b82c23d6-c9bb-4f4a-8696-adb79ddb3ab0",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "An interesting side effect of making everything an sbt task, is that every single part can be overriden. For example one can inject their own NIR passes into the optimizer driver if they are not afraid to use internal APIs.",
        "createdAt" : "2017-04-12T08:52:46Z",
        "updatedAt" : "2017-04-12T09:19:47Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "e791f07d668b442dbb5ec1d3c800fa193024ce2e",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +35,39 @@\n  val nativeOptimizerDriver =\n    taskKey[tools.OptimizerDriver](\"Pass manager for the optimizer.\")\n\n  val nativeWorkdir ="
  },
  {
    "id" : "46e3b630-9e5e-41fe-b4e5-898d376bb53e",
    "prId" : 583,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/583#pullrequestreview-30990060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1788298c-35b8-4601-b7b5-43f5727c07b5",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "This changes the stack trace in `printStackTrace` test. It should be updated with new reference. ",
        "createdAt" : "2017-04-05T08:56:10Z",
        "updatedAt" : "2017-04-05T12:15:23Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0ba817997e18702df4b2b71e306a06b7648808d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +150,154 @@      .map { path =>\n        val compiler = abs(if (path.endsWith(\".cpp\")) clangpp else clang)\n        val compilec = compiler +: \"-O2\" +: (includes :+ \"-c\" :+ path :+ \"-o\" :+ path + \".o\")\n        logger.running(compilec)\n        Process(compilec, cwd) ! logger"
  },
  {
    "id" : "d8b0726e-43c7-45e0-8240-51b88cd6d108",
    "prId" : 406,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/406#pullrequestreview-10214766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b77017c-2bcc-4406-a1fe-63aaf6a50e61",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "`compilerReporter` seems to be a massive overkill for this. Are there any lighter-weight abstractions in sbt for logging? ",
        "createdAt" : "2016-11-26T12:11:19Z",
        "updatedAt" : "2016-11-26T13:17:11Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "9dee1601-fb70-49e7-8dac-1d2bad45b203",
        "parentId" : "5b77017c-2bcc-4406-a1fe-63aaf6a50e61",
        "authorId" : "19142ef5-3d34-49b4-a25f-6b361a41847d",
        "body" : "Now it's a bit too much, but if we add position to linker error it will actually provide lots os things for free.",
        "createdAt" : "2016-11-26T12:36:29Z",
        "updatedAt" : "2016-11-26T13:17:11Z",
        "lastEditedBy" : "19142ef5-3d34-49b4-a25f-6b361a41847d",
        "tags" : [
        ]
      },
      {
        "id" : "51b9c114-41de-4a31-ac94-e277fc35db56",
        "parentId" : "5b77017c-2bcc-4406-a1fe-63aaf6a50e61",
        "authorId" : "19142ef5-3d34-49b4-a25f-6b361a41847d",
        "body" : "hum ok let's not use compilerReporter since we do not have position for linking errors right now.",
        "createdAt" : "2016-11-26T12:40:59Z",
        "updatedAt" : "2016-11-26T13:17:11Z",
        "lastEditedBy" : "19142ef5-3d34-49b4-a25f-6b361a41847d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3b96fdf83ada2341c08f79cbd400e3421bfcfeb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +79,83 @@      unresolved.map(u => sh\"$u\".toString).sorted.foreach { signature =>\n        logger.error(s\"cannot link: $signature\")\n      }\n\n      throw new MessageOnlyException(\"unable to link\")"
  }
]