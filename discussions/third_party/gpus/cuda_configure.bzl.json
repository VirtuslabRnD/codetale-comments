[
  {
    "id" : "16b82b24-f083-4f77-9626-fd87ea0ee090",
    "prId" : 43716,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43716#pullrequestreview-503025592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0d9b019-b276-4604-8eb2-b8ed47d61c31",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Can you please add a comment here on why we need this special logic (same text as the PR description is fine).",
        "createdAt" : "2020-10-05T00:55:15Z",
        "updatedAt" : "2020-10-06T14:27:51Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "d1fa28ff-7c81-4069-88d6-cfda751c6b50",
        "parentId" : "b0d9b019-b276-4604-8eb2-b8ed47d61c31",
        "authorId" : "8ff4e099-8cf6-4348-9db7-45b9bc9150c1",
        "body" : "Done.",
        "createdAt" : "2020-10-06T14:27:22Z",
        "updatedAt" : "2020-10-06T14:27:51Z",
        "lastEditedBy" : "8ff4e099-8cf6-4348-9db7-45b9bc9150c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "516de8eb2d542bcf1a9645ab4cd7231f2123e77a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +672,676 @@        # The libcudart soname in CUDA 11.x is versioned as 11.0 for backward compatability.\n        if int(cuda_major) == 11:\n          cudart_version = \"64_110\" if is_windows else \"11.0\"\n        else:\n          cudart_version = (\"64_%s\" if is_windows else \"%s\") % cuda_major"
  },
  {
    "id" : "6d7a46f6-3099-4c27-9778-ab09a9dfb286",
    "prId" : 39427,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/39427#pullrequestreview-412838995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae0ddf98-3b02-42ab-b982-f15296c1cb8e",
        "parentId" : null,
        "authorId" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "body" : "Could you extend the docstring to clarify the semantics of `exceptions`?",
        "createdAt" : "2020-05-15T17:33:05Z",
        "updatedAt" : "2020-05-15T19:55:51Z",
        "lastEditedBy" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "tags" : [
        ]
      }
    ],
    "commit" : "8dd28457699100145cad17aa4d44da81fddefda9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +809,813 @@)\"\"\" % (name, \"\\n\".join(outs), \" && \\\\\\n\".join(cmds))\n\ndef make_copy_dir_rule(repository_ctx, name, src_dir, out_dir, exceptions=None):\n    \"\"\"Returns a rule to recursively copy a directory.\n    If exceptions is not None, it must be a list of files or directories in "
  },
  {
    "id" : "8052e4b4-ea82-48fd-a4ab-2aedb12d66fd",
    "prId" : 37006,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/37006#pullrequestreview-363773526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e6c7f55-6674-4c59-b0e3-932a3cb11963",
        "parentId" : null,
        "authorId" : "6f904d11-bed6-4022-8971-4dbfb55561c0",
        "body" : "This should be sorted in alphabetical order for linter and code-style check.",
        "createdAt" : "2020-02-24T23:03:26Z",
        "updatedAt" : "2020-02-25T15:49:06Z",
        "lastEditedBy" : "6f904d11-bed6-4022-8971-4dbfb55561c0",
        "tags" : [
        ]
      },
      {
        "id" : "358a00a1-1aa4-4474-8dd3-425ea5c79374",
        "parentId" : "9e6c7f55-6674-4c59-b0e3-932a3cb11963",
        "authorId" : "cb7bbd70-3f59-4cde-883b-6292567e8dbd",
        "body" : "Resolved.",
        "createdAt" : "2020-02-24T23:25:38Z",
        "updatedAt" : "2020-02-25T15:49:06Z",
        "lastEditedBy" : "cb7bbd70-3f59-4cde-883b-6292567e8dbd",
        "tags" : [
        ]
      }
    ],
    "commit" : "aba8e45155224344d24d924d0ff0f6a0219d9b19",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +50,54 @@    \"raw_exec\",\n    \"read_dir\",\n    \"realpath\",\n    \"which\",\n)"
  },
  {
    "id" : "25ef0d23-e975-4457-8a02-6617f5ece2ac",
    "prId" : 28021,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/28021#pullrequestreview-229687047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "797a14d2-72bf-4f97-bd63-afb02e0c2433",
        "parentId" : null,
        "authorId" : "1223b96d-efd5-4254-9e4f-f359308f8df2",
        "body" : "Oops, sorry -- my fault.\r\n\r\nBut now you are not adding the 64_ prefix to cuda_lib_version for CUDA <10.1. Maybe it would be better to use separate variables for the version list and the version string.",
        "createdAt" : "2019-04-23T17:19:05Z",
        "updatedAt" : "2019-04-23T17:19:15Z",
        "lastEditedBy" : "1223b96d-efd5-4254-9e4f-f359308f8df2",
        "tags" : [
        ]
      }
    ],
    "commit" : "75982a4ed59454e9840e56deab7506ff87fa66a5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +698,702 @@        cuda_lib_version = (\"64_%s\" if is_windows else \"%s\") % cuda_version[0]\n    else:\n        cuda_lib_version = cuda_version\n\n"
  },
  {
    "id" : "b55ecee0-8f1d-4dc9-92f4-9cac6308e567",
    "prId" : 22950,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/22950#pullrequestreview-182623941",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2463abdb-eeb0-423f-b3e9-07375ce5e272",
        "parentId" : null,
        "authorId" : "5dee3e52-2371-46cb-b60c-52819cddc5d7",
        "body" : "Can you add `TMP` and `TMPDIR` here:\r\nhttps://github.com/tensorflow/tensorflow/blob/c2e2ecedfef715b8f756c5e2df4dab3b88531253/third_party/gpus/cuda_configure.bzl#L1569-L1574\r\n\r\nSo that when the environment variable changes, the CROSSTOOL will get reconfigured.",
        "createdAt" : "2018-12-07T10:06:00Z",
        "updatedAt" : "2019-02-23T01:24:01Z",
        "lastEditedBy" : "5dee3e52-2371-46cb-b60c-52819cddc5d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "347bc0084237c9240d567e47966784a230dc8fe3",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +155,159 @@  \"\"\"Return the UNIX tmp directory for nvcc to generate intermediate source files.\"\"\"\n  escaped_tmp_dir = escape_string(\n    get_env_var(repository_ctx, \"TMPDIR\", \"/tmp\"))\n  return escaped_tmp_dir + \"/nvcc_inter_files_tmp_dir\"\n"
  },
  {
    "id" : "01101de1-50f7-43c2-b9db-c9c9c9235930",
    "prId" : 7575,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/7575#pullrequestreview-28002870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a415802-cf44-4615-b5ab-f557e007e56e",
        "parentId" : null,
        "authorId" : "28fabc34-a1ac-4aba-988b-9c9e03232122",
        "body" : "This one modifies the behaviour in configure script, but does anything else depend on it?",
        "createdAt" : "2017-03-20T23:36:59Z",
        "updatedAt" : "2017-03-20T23:36:59Z",
        "lastEditedBy" : "28fabc34-a1ac-4aba-988b-9c9e03232122",
        "tags" : [
        ]
      },
      {
        "id" : "78a3f9f6-25bf-4cc6-bd46-7b8275b534b2",
        "parentId" : "5a415802-cf44-4615-b5ab-f557e007e56e",
        "authorId" : "28fabc34-a1ac-4aba-988b-9c9e03232122",
        "body" : "I found one usage here in this file.",
        "createdAt" : "2017-03-20T23:37:54Z",
        "updatedAt" : "2017-03-20T23:37:55Z",
        "lastEditedBy" : "28fabc34-a1ac-4aba-988b-9c9e03232122",
        "tags" : [
        ]
      },
      {
        "id" : "48c06a4d-db9e-4ac4-ad8f-3e9ec40e300c",
        "parentId" : "5a415802-cf44-4615-b5ab-f557e007e56e",
        "authorId" : "6724ef88-2ef6-44af-9a01-6a3e3e4d1ab6",
        "body" : "I added all the environment variable used in the cuda_configure.bzl script.",
        "createdAt" : "2017-03-21T00:59:48Z",
        "updatedAt" : "2017-03-21T00:59:49Z",
        "lastEditedBy" : "6724ef88-2ef6-44af-9a01-6a3e3e4d1ab6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6bd95e5dca757eddfa28eba5fc43bd66582d48c",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +830,834 @@    environ = [\n        _GCC_HOST_COMPILER_PATH,\n        \"TF_NEED_CUDA\",\n        _CUDA_TOOLKIT_PATH,\n        _CUDNN_INSTALL_PATH,"
  },
  {
    "id" : "a073f66f-3688-4ea0-9347-ffde3d509f20",
    "prId" : 5494,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/5494#pullrequestreview-8174417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6cf5ded-6587-4620-833d-8b662d50f2d2",
        "parentId" : null,
        "authorId" : "6724ef88-2ef6-44af-9a01-6a3e3e4d1ab6",
        "body" : "Same as before, using a map for extension/prefixes it would make the code a bit cleaner IMO\n",
        "createdAt" : "2016-11-10T10:30:31Z",
        "updatedAt" : "2016-11-30T09:18:46Z",
        "lastEditedBy" : "6724ef88-2ef6-44af-9a01-6a3e3e4d1ab6",
        "tags" : [
        ]
      },
      {
        "id" : "8cae3df7-c7ba-4f30-8026-20148599f440",
        "parentId" : "b6cf5ded-6587-4620-833d-8b662d50f2d2",
        "authorId" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "body" : "Done, though Linux would still need a special case since it follows a different naming convention wrt where the version is located in the name.\n",
        "createdAt" : "2016-11-11T10:21:59Z",
        "updatedAt" : "2016-11-30T09:18:46Z",
        "lastEditedBy" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfae1931365dae3354a8980829dfabcd59761232",
    "line" : null,
    "diffHunk" : "@@ -1,1 +289,293 @@  \"\"\"\n  if cpu_value == \"Linux\":\n    if static:\n      return \"lib%s.a\" % lib\n    else:"
  },
  {
    "id" : "01faa247-b372-4713-b766-1cc5dd3f1b89",
    "prId" : 5494,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/5494#pullrequestreview-8488481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02ee1feb-a1a5-43be-8155-cdc942c188f0",
        "parentId" : null,
        "authorId" : "6724ef88-2ef6-44af-9a01-6a3e3e4d1ab6",
        "body" : "To go further in the factorisation to diminish the number of if statement you could use templates in the map.\n\nNot sure it would give a nicer code though.\n",
        "createdAt" : "2016-11-11T10:28:07Z",
        "updatedAt" : "2016-11-30T09:18:46Z",
        "lastEditedBy" : "6724ef88-2ef6-44af-9a01-6a3e3e4d1ab6",
        "tags" : [
        ]
      },
      {
        "id" : "330032c1-30e9-49d7-a5b5-df62d60d9788",
        "parentId" : "02ee1feb-a1a5-43be-8155-cdc942c188f0",
        "authorId" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "body" : "We could add templates to the map, but there is still the corner case for Linux where the unversioned library does not have the period at the end (`libcudart.so.7.5` vs `libcudart.so`), which the other platforms do not have. Let's leave this as is for now.\n",
        "createdAt" : "2016-11-14T21:23:19Z",
        "updatedAt" : "2016-11-30T09:18:46Z",
        "lastEditedBy" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfae1931365dae3354a8980829dfabcd59761232",
    "line" : null,
    "diffHunk" : "@@ -1,1 +289,293 @@  \"\"\"\n  if cpu_value == \"Linux\":\n    if static:\n      return \"lib%s.a\" % lib\n    else:"
  },
  {
    "id" : "db5cc031-6855-4a39-b7bc-1643a4f56d87",
    "prId" : 3269,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3ccac4b-22f4-4104-b4c9-0788dc4d90ce",
        "parentId" : null,
        "authorId" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "body" : "Params that were previously configured using the `./configure` script prompts are now being passed using environment variables. For example:\n\n``` sh\nCUDA_VERSION=7.5 bazel test --config=cuda //tensorflow/...\n```\n\nThe problem with this is that changing the environment variables would not automatically trigger a re-fetch of the `@local_config_cuda` external repository.\n\nIs there a way to pass these values using command line flags and apply them using Bazel's configuration mechanism? I'm not sure how to do this with `config_setting` since it seems to only match specific values.\n",
        "createdAt" : "2016-07-11T10:47:55Z",
        "updatedAt" : "2016-08-20T09:45:56Z",
        "lastEditedBy" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "tags" : [
        ]
      },
      {
        "id" : "dc17035c-25ef-4c42-a6c9-87efd79a3bbe",
        "parentId" : "b3ccac4b-22f4-4104-b4c9-0788dc4d90ce",
        "authorId" : "6724ef88-2ef6-44af-9a01-6a3e3e4d1ab6",
        "body" : "This is WAI. I need to add an explicit option to bazel to invalidate. Maybe run bazel clean --expunge for now on ./configure script?\n",
        "createdAt" : "2016-07-11T11:42:17Z",
        "updatedAt" : "2016-08-20T09:45:56Z",
        "lastEditedBy" : "6724ef88-2ef6-44af-9a01-6a3e3e4d1ab6",
        "tags" : [
        ]
      },
      {
        "id" : "42955c46-a15f-4e5a-98d6-825cb157f19f",
        "parentId" : "b3ccac4b-22f4-4104-b4c9-0788dc4d90ce",
        "authorId" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "body" : "I have added the clean command to the configure script.\n\nIs it safe to use `--expunge_async` and then immediately run the fetch command? That is, does `--expunge_async` move/rename the root of the output directory and deletes asynchronously so that any new fetch/build commands that are run while the delete is still happening will be run in a clean output dir?\n",
        "createdAt" : "2016-07-28T09:05:30Z",
        "updatedAt" : "2016-08-20T09:45:57Z",
        "lastEditedBy" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "tags" : [
        ]
      },
      {
        "id" : "7a7e1307-eb1b-4242-9df2-cb312adb2b4c",
        "parentId" : "b3ccac4b-22f4-4104-b4c9-0788dc4d90ce",
        "authorId" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "body" : "According to the [User Manual](http://www.bazel.io/docs/bazel-user-manual.html#the-clean-command):\n\n> It is safe to invoke a Bazel command in the same client while the asynchronous expunge continues to run. Note, however, that this may introduce IO contention.\n\nMight be a better to not use `--expunge_async` in this case then.\n",
        "createdAt" : "2016-08-02T23:52:53Z",
        "updatedAt" : "2016-08-20T09:45:57Z",
        "lastEditedBy" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "tags" : [
        ]
      },
      {
        "id" : "fed8e5b7-113e-4276-8326-28fcb47a6f8c",
        "parentId" : "b3ccac4b-22f4-4104-b4c9-0788dc4d90ce",
        "authorId" : "6724ef88-2ef6-44af-9a01-6a3e3e4d1ab6",
        "body" : "Sorry yes it is better not to use the async version.\n\nGrrr. It is really hard to follow a code-review on that stuff.\n",
        "createdAt" : "2016-08-03T07:43:58Z",
        "updatedAt" : "2016-08-20T09:45:57Z",
        "lastEditedBy" : "6724ef88-2ef6-44af-9a01-6a3e3e4d1ab6",
        "tags" : [
        ]
      },
      {
        "id" : "7ac7b7eb-2fca-4ef0-93fb-c47a22290c34",
        "parentId" : "b3ccac4b-22f4-4104-b4c9-0788dc4d90ce",
        "authorId" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "body" : "Yeah, if GitHub had the ability to mark whether a comment is resolved, it would be much better. The way it tries to automatically hide \"outdated\" comments makes the review pretty confusing. :/\n",
        "createdAt" : "2016-08-03T07:56:08Z",
        "updatedAt" : "2016-08-20T09:45:57Z",
        "lastEditedBy" : "9c7e5968-9725-4d1a-a8f5-822e0c81a540",
        "tags" : [
        ]
      }
    ],
    "commit" : "353235e0b2b35f3df43f42ef84ca00ccda7a3a6d",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@  \"\"\"Finds the cuda toolkit directory.\"\"\"\n  cuda_toolkit_path = _DEFAULT_CUDA_TOOLKIT_PATH\n  if \"CUDA_TOOLKIT_PATH\" in repository_ctx.os.environ:\n    cuda_toolkit_path = repository_ctx.os.environ[\"CUDA_TOOLKIT_PATH\"].strip()\n  if not repository_ctx.path(cuda_toolkit_path).exists:"
  }
]