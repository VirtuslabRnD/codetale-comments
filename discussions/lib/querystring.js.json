[
  {
    "id" : "b7d6a307-e481-4676-8ee7-a13dda07a87f",
    "prId" : 1213,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7011dc6-984f-4a98-8ef3-763f0241b0b9",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "this is what encodeURIComponent does on any input\n",
        "createdAt" : "2015-03-20T01:36:36Z",
        "updatedAt" : "2015-03-20T01:48:27Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "0ae5a7d7-97db-4e5a-a5c4-a08e896ff316",
        "parentId" : "f7011dc6-984f-4a98-8ef3-763f0241b0b9",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I'm fine with that, it looks like if it's already a string, there's no performance penalty involved.\n",
        "createdAt" : "2015-03-20T01:41:14Z",
        "updatedAt" : "2015-03-20T01:48:27Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9aec2b7167a08dc88141fbe3be1c498f8c5b061",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +93,97 @@  // replaces encodeURIComponent\n  // http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.4\n  str = '' + str;\n  var len = str.length;\n  var out = '';"
  },
  {
    "id" : "390ef634-e4ef-4529-9edf-2eaadcda7ad4",
    "prId" : 10837,
    "prUrl" : "https://github.com/nodejs/node/pull/10837#pullrequestreview-16840822",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4434029-d602-44ef-8b68-0b753b41b0e8",
        "parentId" : null,
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "Also, to anyone who might ask why I didn't put this conditional in the `for` conditional and the `else` block immediately after the end of the `for` loop, it's because there is actually a 2% reduction in the performance increase for the 'fake escaped values' input. The results for the other inputs seem to be largely unaffected though.",
        "createdAt" : "2017-01-16T16:23:35Z",
        "updatedAt" : "2017-01-25T07:23:36Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bdcbdb1a085b35a3a50112a51781b31d8814294",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +48,52 @@\n  for (var inIndex = 0, outIndex = 0; ; inIndex++) {\n    if (inIndex < s.length) {\n      c = s.charCodeAt(inIndex);\n    } else {"
  },
  {
    "id" : "10b0c5bb-327b-4d72-8778-31b7fc67789e",
    "prId" : 10874,
    "prUrl" : "https://github.com/nodejs/node/pull/10874#pullrequestreview-17508830",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0a6260b-71b5-4b7c-8ced-e5f4ee89c634",
        "parentId" : null,
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "is there any reasonable perf impact moving to a switch?\r\ne.g. \r\n```\r\nswitch (typeof v) {\r\n  case 'string':\r\n    return v;\r\n  case 'boolean':\r\n    return String(v);\r\n  case 'number':\r\n    if (isFinite(v)) return String(v);\r\n  default:\r\n    return '';\r\n}\r\n```",
        "createdAt" : "2017-01-19T16:07:02Z",
        "updatedAt" : "2017-01-25T07:06:31Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "ea0ce186-6d08-4baf-9325-a886e2da1db2",
        "parentId" : "d0a6260b-71b5-4b7c-8ced-e5f4ee89c634",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I dunno, I didn't do anything with this particular function. However, I remember we switched away from that type of usage (no pun intended) because V8 optimizes `typeof xx === yyy` statements. Before we switched to separate `if` statements, [the code was storing the result of `typeof`](https://github.com/nodejs/node/commit/85a92a37ef76059a4733c8e9462ff8da733dfb9e) and that was causing a performance degredation. I suspect `switch(typeof v)` might have the same effect.",
        "createdAt" : "2017-01-19T16:25:16Z",
        "updatedAt" : "2017-01-25T07:06:31Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "dcac5294-5e98-44f0-aaee-1cfa8b1ca58b",
        "parentId" : "d0a6260b-71b5-4b7c-8ced-e5f4ee89c634",
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "fair enough :-)",
        "createdAt" : "2017-01-19T17:19:08Z",
        "updatedAt" : "2017-01-25T07:06:31Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      }
    ],
    "commit" : "2298bc4b1fdcdbe8f5fc8f405033e879fe9bcd4e",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +185,189 @@    return v ? 'true' : 'false';\n  return '';\n}\n\n"
  },
  {
    "id" : "fbeb0377-47a3-4361-af71-9c8d17456724",
    "prId" : 33669,
    "prUrl" : "https://github.com/nodejs/node/pull/33669#pullrequestreview-425551636",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09e200ad-abc1-4a1d-8cd5-ecd2f2a80c25",
        "parentId" : null,
        "authorId" : "4e9ef6b4-9a31-4818-a54f-a2b732308657",
        "body" : "Please add a test that verifies that it would break in case the user would manipulate encode.\r\n\r\n```js\r\nconst querystring = require('querystring');\r\nquerystring.encode = (arg) => {\r\n  assert.strictEqual(typeof arg, 'string');\r\n};\r\nquerystring.stringify({ bool: true });\r\n```",
        "createdAt" : "2020-05-31T14:10:08Z",
        "updatedAt" : "2020-06-12T22:22:01Z",
        "lastEditedBy" : "4e9ef6b4-9a31-4818-a54f-a2b732308657",
        "tags" : [
        ]
      },
      {
        "id" : "d50f2f76-6795-4883-af71-abc756b7d4f1",
        "parentId" : "09e200ad-abc1-4a1d-8cd5-ecd2f2a80c25",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I'm not sure what you're asking for that isn't already covered by existing tests?",
        "createdAt" : "2020-05-31T17:04:48Z",
        "updatedAt" : "2020-06-12T22:22:01Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "1e8b5a95-81af-46ca-bf25-2134b17ae52f",
        "parentId" : "09e200ad-abc1-4a1d-8cd5-ecd2f2a80c25",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "ping @BridgeAR ",
        "createdAt" : "2020-06-05T19:00:42Z",
        "updatedAt" : "2020-06-12T22:22:01Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b46793eeedd24e576fa1aa7982b436e5cd37edd",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +192,196 @@  }\n  const convert =\n    (encode === qsEscape ? encodeStringified : encodeStringifiedCustom);\n\n  if (obj !== null && typeof obj === 'object') {"
  },
  {
    "id" : "9d36f77f-0195-4fd9-98ac-30b9b0802d60",
    "prId" : 33669,
    "prUrl" : "https://github.com/nodejs/node/pull/33669#pullrequestreview-421511698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d7c41a3-1b97-4959-8c95-cf371bdfcc63",
        "parentId" : null,
        "authorId" : "4e9ef6b4-9a31-4818-a54f-a2b732308657",
        "body" : "This could be simplified to: \r\n\r\n```suggestion\r\n      let ks = encode(typeof k === 'string' ? k : '');\r\n```",
        "createdAt" : "2020-05-31T14:44:31Z",
        "updatedAt" : "2020-06-12T22:22:01Z",
        "lastEditedBy" : "4e9ef6b4-9a31-4818-a54f-a2b732308657",
        "tags" : [
        ]
      },
      {
        "id" : "f8be7dff-cd88-4830-a0f6-e33e8a1a539d",
        "parentId" : "3d7c41a3-1b97-4959-8c95-cf371bdfcc63",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "It's not quite the same since `encodeStringified()` can bypass `encode()` for empty strings for example.",
        "createdAt" : "2020-05-31T17:06:41Z",
        "updatedAt" : "2020-06-12T22:22:01Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b46793eeedd24e576fa1aa7982b436e5cd37edd",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +202,206 @@      const k = keys[i];\n      const v = obj[k];\n      let ks = convert(k, encode);\n      ks += eq;\n"
  }
]