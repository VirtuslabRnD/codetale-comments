[
  {
    "id" : "b11955f3-f8aa-441d-9bc8-4d97fdf1832e",
    "prId" : 36722,
    "prUrl" : "https://github.com/nodejs/node/pull/36722#pullrequestreview-560645985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09fbe341-52f0-4cd6-a6ad-00841c9415e6",
        "parentId" : null,
        "authorId" : "c3ceab3f-888d-458a-b746-dcf1dda07c9d",
        "body" : "What are your thoughts on using `for(;;)` over switching it to `ArrayPrototypeForEach`? From the performance point of view...",
        "createdAt" : "2021-01-01T17:28:05Z",
        "updatedAt" : "2021-01-13T14:52:25Z",
        "lastEditedBy" : "c3ceab3f-888d-458a-b746-dcf1dda07c9d",
        "tags" : [
        ]
      },
      {
        "id" : "713eee74-7e7e-47ba-89d5-c824bf74418a",
        "parentId" : "09fbe341-52f0-4cd6-a6ad-00841c9415e6",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "We would need to benchmark that, my guess is that both approaches are equivalent.",
        "createdAt" : "2021-01-01T18:12:45Z",
        "updatedAt" : "2021-01-13T14:52:25Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "0ddd5c45-06c9-4808-8aed-7afe9a009505",
        "parentId" : "09fbe341-52f0-4cd6-a6ad-00841c9415e6",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "According to our benchmark, this change doesn't impact Node.js performance. If you want, you can open a PR proposing to use a `for(;;)` loop instead, but tbh I'd be surprised if it mattered at all.",
        "createdAt" : "2021-01-02T17:19:41Z",
        "updatedAt" : "2021-01-13T14:52:25Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      }
    ],
    "commit" : "251a0ffd80b6698d1c53c37f7870fab7dd402584",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +806,810 @@  TypedArrayPrototypeFill(brotliInitParamsArray, -1);\n  if (opts?.params) {\n    ArrayPrototypeForEach(ObjectKeys(opts.params), (origKey) => {\n      const key = +origKey;\n      if (NumberIsNaN(key) || key < 0 || key > kMaxBrotliParam ||"
  }
]