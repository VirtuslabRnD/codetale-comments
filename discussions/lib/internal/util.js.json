[
  {
    "id" : "ed3b7ea7-00dd-4e68-8734-3f3da47add50",
    "prId" : 12442,
    "prUrl" : "https://github.com/nodejs/node/pull/12442#pullrequestreview-50672138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21aabdfb-9368-4bcb-82ff-889ec03709c9",
        "parentId" : null,
        "authorId" : "175f3bb7-9cf7-4e20-8143-804990c8cce6",
        "body" : "This catch may accidentally catch errors thrown from promiseReject if orig.call happened to be synchronous. E.g. the value was cached in memory and didn't need a remote lookup. promiseReject on line 264 will be a no-op in that case.\r\n\r\nIdeally if the execution hit line 253 and then 264, it should re-throw the error instead of no-oping. At least it could log a warning.",
        "createdAt" : "2017-07-18T16:23:59Z",
        "updatedAt" : "2017-07-18T16:24:30Z",
        "lastEditedBy" : "175f3bb7-9cf7-4e20-8143-804990c8cce6",
        "tags" : [
        ]
      },
      {
        "id" : "c3ba2945-3415-4760-b70b-14e84caea5f4",
        "parentId" : "21aabdfb-9368-4bcb-82ff-889ec03709c9",
        "authorId" : "459cdd07-be0b-4fbf-97b3-6bfcb04cffe8",
        "body" : "The existing way is definitely better; a function that returns a promise should never throw, only return a rejected promise.",
        "createdAt" : "2017-07-18T16:34:22Z",
        "updatedAt" : "2017-07-18T16:43:06Z",
        "lastEditedBy" : "459cdd07-be0b-4fbf-97b3-6bfcb04cffe8",
        "tags" : [
        ]
      },
      {
        "id" : "20a1c726-4536-4f19-8885-edf948cb8f4c",
        "parentId" : "21aabdfb-9368-4bcb-82ff-889ec03709c9",
        "authorId" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "body" : "@syrnick can you please open an issue about it? ",
        "createdAt" : "2017-07-18T16:39:46Z",
        "updatedAt" : "2017-07-18T16:39:46Z",
        "lastEditedBy" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "tags" : [
        ]
      },
      {
        "id" : "5433a87a-92c9-40f3-ae62-8ac1ee931194",
        "parentId" : "21aabdfb-9368-4bcb-82ff-889ec03709c9",
        "authorId" : "459cdd07-be0b-4fbf-97b3-6bfcb04cffe8",
        "body" : "(also, since a promise can only represent one value; `new Promise((resolve, reject) => { reject(1); reject(2); })` is supposed to have the second rejection be a noop, and does not throw the `2`, so it'd be important for `util.promisify` to maintain parity)",
        "createdAt" : "2017-07-18T16:42:53Z",
        "updatedAt" : "2017-07-18T16:42:53Z",
        "lastEditedBy" : "459cdd07-be0b-4fbf-97b3-6bfcb04cffe8",
        "tags" : [
        ]
      }
    ],
    "commit" : "faf6654ff75e0f275afddfd980387235c3ddf103",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +261,265 @@        }\n      });\n    } catch (err) {\n      promiseReject(promise, err);\n    }"
  },
  {
    "id" : "af6aad0a-66c5-4627-8b15-0a36dcc1bfa2",
    "prId" : 12442,
    "prUrl" : "https://github.com/nodejs/node/pull/12442#pullrequestreview-92802132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "def46f72-1fb9-47bd-979f-ff6ef09cfed0",
        "parentId" : null,
        "authorId" : "175f3bb7-9cf7-4e20-8143-804990c8cce6",
        "body" : "What's the motivation for keeping this private? It's obviously useful in a number of places. ",
        "createdAt" : "2018-01-31T01:18:40Z",
        "updatedAt" : "2018-01-31T01:18:40Z",
        "lastEditedBy" : "175f3bb7-9cf7-4e20-8143-804990c8cce6",
        "tags" : [
        ]
      },
      {
        "id" : "7998dc1e-04e6-404e-950e-e4abf2258941",
        "parentId" : "def46f72-1fb9-47bd-979f-ff6ef09cfed0",
        "authorId" : "459cdd07-be0b-4fbf-97b3-6bfcb04cffe8",
        "body" : "https://github.com/nodejs/node/pull/12442/files#diff-a43208147d795be6dd3517c53226e37dR280 ?",
        "createdAt" : "2018-01-31T01:36:18Z",
        "updatedAt" : "2018-01-31T01:36:18Z",
        "lastEditedBy" : "459cdd07-be0b-4fbf-97b3-6bfcb04cffe8",
        "tags" : [
        ]
      },
      {
        "id" : "8001b3a3-9f63-42eb-a139-df2ed457de63",
        "parentId" : "def46f72-1fb9-47bd-979f-ff6ef09cfed0",
        "authorId" : "175f3bb7-9cf7-4e20-8143-804990c8cce6",
        "body" : "but that's still on internal/util, not accessible to user code. The other one(kCustomPromisifiedSymbol) is available as `util.promisify.custom`.",
        "createdAt" : "2018-01-31T01:39:21Z",
        "updatedAt" : "2018-01-31T01:39:21Z",
        "lastEditedBy" : "175f3bb7-9cf7-4e20-8143-804990c8cce6",
        "tags" : [
        ]
      },
      {
        "id" : "015117f8-e8c8-435b-b2f7-abe4bf6c3eeb",
        "parentId" : "def46f72-1fb9-47bd-979f-ff6ef09cfed0",
        "authorId" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "body" : "@syrnick See #14007.",
        "createdAt" : "2018-01-31T04:11:23Z",
        "updatedAt" : "2018-01-31T04:11:23Z",
        "lastEditedBy" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "tags" : [
        ]
      }
    ],
    "commit" : "faf6654ff75e0f275afddfd980387235c3ddf103",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +222,226 @@\nconst kCustomPromisifiedSymbol = Symbol('util.promisify.custom');\nconst kCustomPromisifyArgsSymbol = Symbol('customPromisifyArgs');\n\nfunction promisify(orig) {"
  }
]