[
  {
    "id" : "c14829f5-26e2-4d49-858e-aae98ed6647d",
    "prId" : 37005,
    "prUrl" : "https://github.com/nodejs/node/pull/37005#pullrequestreview-572160208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "289af8a4-6142-4a6d-b7c1-71546339ddd2",
        "parentId" : null,
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "unrelated change?",
        "createdAt" : "2021-01-20T12:02:23Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "4563323d-cfd7-454f-a054-fcfec76e303c",
        "parentId" : "289af8a4-6142-4a6d-b7c1-71546339ddd2",
        "authorId" : "e56038a1-969b-45e4-9251-03873e734a44",
        "body" : "ThisÂ preserves theÂ originalÂ `value`, soÂ that itÂ can beÂ `applyBind`edÂ later.",
        "createdAt" : "2021-01-20T12:06:22Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "e56038a1-969b-45e4-9251-03873e734a44",
        "tags" : [
        ]
      },
      {
        "id" : "be338856-fb1f-4130-8bd0-3af98a722918",
        "parentId" : "289af8a4-6142-4a6d-b7c1-71546339ddd2",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "But you `applyBind` `desc.value`, not `value` ðŸ¤”",
        "createdAt" : "2021-01-20T12:07:53Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "2c5f40b6-9b64-48d2-a715-44c818d2e903",
        "parentId" : "289af8a4-6142-4a6d-b7c1-71546339ddd2",
        "authorId" : "e56038a1-969b-45e4-9251-03873e734a44",
        "body" : "Right, IÂ forgot toÂ fixÂ that afterÂ using <kbd>Ctrl+C</kbd> andÂ <kbd>Ctrl+V</kbd>.",
        "createdAt" : "2021-01-20T12:13:31Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "e56038a1-969b-45e4-9251-03873e734a44",
        "tags" : [
        ]
      }
    ],
    "commit" : "742342fa8a96ad74fbf3870bc953ec408cf7a9e8",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +101,105 @@      const { value } = desc;\n      if (typeof value === 'function') {\n        desc.value = value.bind(src);\n      }\n"
  },
  {
    "id" : "735fd793-fef2-4563-bd98-985d1938624c",
    "prId" : 37005,
    "prUrl" : "https://github.com/nodejs/node/pull/37005#pullrequestreview-572155147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c4c5c08-3f77-4ea7-8b73-5b5984245cfa",
        "parentId" : null,
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "unrelated change?",
        "createdAt" : "2021-01-20T12:02:51Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "a6b779e3-e522-42c8-ae40-aa0524e1b75a",
        "parentId" : "8c4c5c08-3f77-4ea7-8b73-5b5984245cfa",
        "authorId" : "e56038a1-969b-45e4-9251-03873e734a44",
        "body" : "[ditto](https://github.com/nodejs/node/pull/37005#discussion_r560910200)",
        "createdAt" : "2021-01-20T12:06:36Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "e56038a1-969b-45e4-9251-03873e734a44",
        "tags" : [
        ]
      }
    ],
    "commit" : "742342fa8a96ad74fbf3870bc953ec408cf7a9e8",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +124,128 @@      const { value } = desc;\n      if (typeof value === 'function') {\n        desc.value = uncurryThis(value);\n      }\n"
  },
  {
    "id" : "a0b46162-3649-4d81-889b-eee857745725",
    "prId" : 37005,
    "prUrl" : "https://github.com/nodejs/node/pull/37005#pullrequestreview-573310264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d70daba2-6c44-4d0a-b5c2-377e9e09496b",
        "parentId" : null,
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "Could you please add a comment like the `uncurryThis` one which explains this is equivalent to\r\n```js\r\nconst applyBind = (func) => (thisArg, args) => ReflectApply(func, thisArg, args);\r\n```",
        "createdAt" : "2021-01-20T12:16:47Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "a561ff6f-8e44-4290-9a4e-ce4a17b7e61e",
        "parentId" : "d70daba2-6c44-4d0a-b5c2-377e9e09496b",
        "authorId" : "e56038a1-969b-45e4-9251-03873e734a44",
        "body" : "Actually, itâ€™s closer to:\r\n```js\r\nconst applyBind = (func, ...rest) => {\r\n\tif (args.length > 0) {\r\n\t\tconst thisArg = rest[0];\r\n\t\treturn (args = []) => ReflectApply(func, thisArg, args);\r\n\t} else {\r\n\t\treturn (thisArg, args = []) => ReflectApply(func, thisArg, args);\r\n\t}\r\n}",
        "createdAt" : "2021-01-20T12:21:26Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "e56038a1-969b-45e4-9251-03873e734a44",
        "tags" : [
        ]
      },
      {
        "id" : "e401d2f7-a7e8-44be-857c-9228d34029b3",
        "parentId" : "d70daba2-6c44-4d0a-b5c2-377e9e09496b",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "BTW, shouldn't we prefer using `Reflect.apply` instead of `Function.prototype.apply`? I think if someone calls those methods without a argument array, it's almost certainly a bug, and using `Reflect.apply` would help spot that. Or is there a performance reason to use one or the other?",
        "createdAt" : "2021-01-20T13:47:20Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "07d49cbb-1b78-45c0-aa9e-0d7188e532bb",
        "parentId" : "d70daba2-6c44-4d0a-b5c2-377e9e09496b",
        "authorId" : "e56038a1-969b-45e4-9251-03873e734a44",
        "body" : "Well, `Reflect.apply` isnâ€™tÂ veryÂ optimised inÂ comparison toÂ boundÂ `Function.prototype.call` andÂ `Function.prototype.apply`Â calls.\r\n\r\nAlso, enginesÂ are ableÂ toÂ generate betterÂ code forÂ native boundÂ functions comparedÂ to arrowÂ functions thatÂ replicate theÂ behaviour ofÂ aÂ boundÂ function.",
        "createdAt" : "2021-01-20T15:47:02Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "e56038a1-969b-45e4-9251-03873e734a44",
        "tags" : [
        ]
      },
      {
        "id" : "88981db9-434a-47f6-9795-343052635986",
        "parentId" : "d70daba2-6c44-4d0a-b5c2-377e9e09496b",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "I meant to use `const { apply }  = Reflect` compared to `const { apply } = Function.prototype`.",
        "createdAt" : "2021-01-20T16:02:25Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "768d4a78-67d5-4ae7-a9f7-5e347043d2ad",
        "parentId" : "d70daba2-6c44-4d0a-b5c2-377e9e09496b",
        "authorId" : "e56038a1-969b-45e4-9251-03873e734a44",
        "body" : "ThatÂ wouldnâ€™tÂ work, sinceÂ then `applyBind(foo)` wouldÂ create aÂ function thatÂ roughlyÂ does: `(...args)Â =>Â Reflect.apply.call(foo,Â ...args)`, insteadÂ of `(...args)Â =>Â Reflect.apply(foo,Â ...args)`.",
        "createdAt" : "2021-01-20T16:07:05Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "e56038a1-969b-45e4-9251-03873e734a44",
        "tags" : [
        ]
      },
      {
        "id" : "1e22f702-5bc3-41a4-b5e7-9bae638eba86",
        "parentId" : "d70daba2-6c44-4d0a-b5c2-377e9e09496b",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "Gotcha, the equivalent would have to be:\r\n```suggestion\r\nconst applyBind = bind.bind(Reflect.apply, null);\r\n```\r\n\r\n> `Reflect.apply` isnâ€™t very optimised in comparison to bound `Function.prototype.call` and `Function.prototype.apply` calls.\r\n\r\nIs that generally true statement or is it specific to V8? When reading the spec, `Reflect.apply` seems to be doing less things than `Function.prototype.apply`, that's a bit counter-intuitive.",
        "createdAt" : "2021-01-20T17:25:38Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "5894fa5c-d6bb-4b5d-b596-ebdb74c4d9ee",
        "parentId" : "d70daba2-6c44-4d0a-b5c2-377e9e09496b",
        "authorId" : "e56038a1-969b-45e4-9251-03873e734a44",
        "body" : "> > `Reflect.apply` isnâ€™t very optimised in comparison to bound `Function.prototype.call` and `Function.prototype.apply` calls.\r\n> \r\n> Is that generally true statement or is it specific to V8?\r\n\r\nThatâ€™sÂ mostly specificÂ toÂ **V8**, butÂ IÂ assume thatÂ itÂ also appliesÂ toÂ other **C++**-basedÂ engines, sinceÂ **V8** hasnâ€™tÂ put asÂ muchÂ effort intoÂ optimising `Reflect` asÂ intoÂ optimising `Object` andÂ `Function` methods.\r\n\r\n**Refs:** <https://github.com/nodejs/node/pull/36740#issuecomment-753545365>",
        "createdAt" : "2021-01-21T13:09:21Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "e56038a1-969b-45e4-9251-03873e734a44",
        "tags" : [
        ]
      }
    ],
    "commit" : "742342fa8a96ad74fbf3870bc953ec408cf7a9e8",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +29,33 @@// It is using `bind.bind(apply)` to avoid using `Function.prototype.bind`\n// and `Function.prototype.apply` after it may have been mutated by users.\nconst applyBind = bind.bind(apply);\nprimordials.applyBind = applyBind;\n"
  },
  {
    "id" : "584861f4-9a65-41c8-8528-96186fadddc6",
    "prId" : 37005,
    "prUrl" : "https://github.com/nodejs/node/pull/37005#pullrequestreview-573507934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bac6d703-c85c-4fca-ac27-51913da83eb3",
        "parentId" : null,
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "```suggestion\r\n          value: applyBind(desc.value),\r\n```",
        "createdAt" : "2021-01-20T17:07:12Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "02bbcc19-4a4b-40a6-ad72-8bbb4642e9bf",
        "parentId" : "bac6d703-c85c-4fca-ac27-51913da83eb3",
        "authorId" : "e56038a1-969b-45e4-9251-03873e734a44",
        "body" : "ThisÂ isÂ done toÂ ensure thatÂ theÂ method staysÂ `static`â€‘like.",
        "createdAt" : "2021-01-21T12:50:12Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "e56038a1-969b-45e4-9251-03873e734a44",
        "tags" : [
        ]
      },
      {
        "id" : "0016dbe0-f4a8-41fb-a09e-d61b357fa1c8",
        "parentId" : "bac6d703-c85c-4fca-ac27-51913da83eb3",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "Gotcha! I think we should test those to ensure the implementation is correct â€“ and stays correct.\r\n\r\nShould it be `null` instead of `src` or it doesn't matter?\r\n```suggestion\r\n          value: applyBind(desc.value, null),\r\n```\r\nAlternatively, we could add a comment explaining why we put `src` as second parameter.",
        "createdAt" : "2021-01-21T16:26:42Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      }
    ],
    "commit" : "742342fa8a96ad74fbf3870bc953ec408cf7a9e8",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +85,89 @@          // to the object it was defined on,\n          // e.g.: `ArrayOfApply` gets a `this` of `Array`:\n          value: applyBind(desc.value, src),\n        });\n      }"
  },
  {
    "id" : "d7defb92-8735-45a3-b24c-5f4cb5a9cd72",
    "prId" : 37005,
    "prUrl" : "https://github.com/nodejs/node/pull/37005#pullrequestreview-573295073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a013eb1-5ba3-4007-8030-5e067dfea615",
        "parentId" : null,
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "```suggestion\r\n          value: applyBind(value),\r\n```",
        "createdAt" : "2021-01-20T17:07:23Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "2042fd88-d6a8-4747-a0dd-79832ebe47f5",
        "parentId" : "7a013eb1-5ba3-4007-8030-5e067dfea615",
        "authorId" : "e56038a1-969b-45e4-9251-03873e734a44",
        "body" : "SameÂ here, exceptÂ thisÂ one isÂ alsoÂ specified asÂ binding theÂ `this`.",
        "createdAt" : "2021-01-21T12:50:41Z",
        "updatedAt" : "2021-01-28T17:46:24Z",
        "lastEditedBy" : "e56038a1-969b-45e4-9251-03873e734a44",
        "tags" : [
        ]
      }
    ],
    "commit" : "742342fa8a96ad74fbf3870bc953ec408cf7a9e8",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +108,112 @@      if (varargsMethods.includes(name)) {\n        ReflectDefineProperty(dest, `${name}Apply`, {\n          value: applyBind(value, src),\n        });\n      }"
  }
]