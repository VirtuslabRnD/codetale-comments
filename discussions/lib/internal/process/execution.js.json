[
  {
    "id" : "e5034088-1129-4173-a8b2-ba3811575d81",
    "prId" : 26745,
    "prUrl" : "https://github.com/nodejs/node/pull/26745#pullrequestreview-217330704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a329dae-5745-43e1-a316-a05de6b81959",
        "parentId" : null,
        "authorId" : "71309cfe-d3e4-43df-adc9-4ff2752dd8f6",
        "body" : "this feels a little fragile, do we have a unit test around this specific behavior (I think it would be worthwhile because someone will eventually try removing this function).",
        "createdAt" : "2019-03-19T01:37:03Z",
        "updatedAt" : "2019-03-27T19:52:37Z",
        "lastEditedBy" : "71309cfe-d3e4-43df-adc9-4ff2752dd8f6",
        "tags" : [
        ]
      },
      {
        "id" : "f3151282-f186-4f68-829e-2c7b4c2ecabc",
        "parentId" : "0a329dae-5745-43e1-a316-a05de6b81959",
        "authorId" : "2be52d1c-c2eb-47e4-aee9-a127f02d3d62",
        "body" : "TBH I'm not sure off hand exactly how to test this behavior, any suggestions?\r\n\r\n/cc @guybedford ",
        "createdAt" : "2019-03-21T15:45:47Z",
        "updatedAt" : "2019-03-27T19:52:37Z",
        "lastEditedBy" : "2be52d1c-c2eb-47e4-aee9-a127f02d3d62",
        "tags" : [
        ]
      },
      {
        "id" : "a1623d2c-97a2-43bf-a6eb-cf6d103429b4",
        "parentId" : "0a329dae-5745-43e1-a316-a05de6b81959",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "yeah this is tested, we've had it for a really really long time, it's not added by this pr.",
        "createdAt" : "2019-03-21T15:53:59Z",
        "updatedAt" : "2019-03-27T19:52:37Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1094dbe19f31f7a69ad16d193748f610b159073",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +49,53 @@  });\n  // Handle any nextTicks added in the first tick of the program.\n  process._tickCallback();\n}\n"
  },
  {
    "id" : "9e6c873b-93ce-4501-b395-87f694b1437a",
    "prId" : 26745,
    "prUrl" : "https://github.com/nodejs/node/pull/26745#pullrequestreview-219526139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e244ee3a-abfb-4abc-967a-bd135ef7ac9d",
        "parentId" : null,
        "authorId" : "4e9ef6b4-9a31-4818-a54f-a2b732308657",
        "body" : "Non-blocking: Is it intentional that this does not use `async / await` but plain promises? I would rather use `async / await`.",
        "createdAt" : "2019-03-27T14:06:13Z",
        "updatedAt" : "2019-03-27T19:52:37Z",
        "lastEditedBy" : "4e9ef6b4-9a31-4818-a54f-a2b732308657",
        "tags" : [
        ]
      },
      {
        "id" : "e0427d73-37e6-4376-84db-1f98c8b06a9b",
        "parentId" : "e244ee3a-abfb-4abc-967a-bd135ef7ac9d",
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "There is an async function internally here, but note that the outer promise is not propagated.",
        "createdAt" : "2019-03-27T14:55:35Z",
        "updatedAt" : "2019-03-27T19:52:37Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      },
      {
        "id" : "721a478f-0435-4d76-87d0-2e66a566fe52",
        "parentId" : "e244ee3a-abfb-4abc-967a-bd135ef7ac9d",
        "authorId" : "4e9ef6b4-9a31-4818-a54f-a2b732308657",
        "body" : "I saw that the promise is not returned, it just seems cleaner to me if `evalModule` would be an async function as well so that it's possible to await `asyncESM.loaderPromise` and to use `try / catch` in there. Especially with the new async stack traces that only work when using `async / await`.",
        "createdAt" : "2019-03-27T15:00:46Z",
        "updatedAt" : "2019-03-27T19:52:37Z",
        "lastEditedBy" : "4e9ef6b4-9a31-4818-a54f-a2b732308657",
        "tags" : [
        ]
      },
      {
        "id" : "1c62f96b-a16d-440e-863e-c9448a83717b",
        "parentId" : "e244ee3a-abfb-4abc-967a-bd135ef7ac9d",
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "However it is done, we still need something to do the outer `.catch` handler, at least until we have an async bootstrap call from the C++ side (I did look into that in the early days of modules, but that broke a lot of things...!).\r\n\r\nSo the only `.then` we can save is the `loaderPromise` one but that would likely be at the cost of another wrapper I think.",
        "createdAt" : "2019-03-27T15:08:21Z",
        "updatedAt" : "2019-03-27T19:52:37Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1094dbe19f31f7a69ad16d193748f610b159073",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +37,41 @@  const { decorateErrorStack } = require('internal/util');\n  const asyncESM = require('internal/process/esm_loader');\n  asyncESM.loaderPromise.then(async (loader) => {\n    const { result } = await loader.eval(source);\n    if (require('internal/options').getOptionValue('--print')) {"
  }
]