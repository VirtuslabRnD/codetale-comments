[
  {
    "id" : "02524418-7052-4bbf-ab2f-1063c59d78fa",
    "prId" : 22381,
    "prUrl" : "https://github.com/nodejs/node/pull/22381#pullrequestreview-149513713",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26360b46-20aa-4ff7-9855-cc87f5852c7c",
        "parentId" : null,
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "Do these functions need to be closures? Could we not have them be globally/loader-level defined with another argument - \r\n\r\n```js\r\ninitializeImportMeta(meta, url) {\r\n  meta.url = url\r\n},\r\nimportModuleDynamically: loader.import.bind(loader)\r\n```",
        "createdAt" : "2018-08-25T09:06:44Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      },
      {
        "id" : "62297090-0d5b-4349-b3d1-bfa98a14fd23",
        "parentId" : "26360b46-20aa-4ff7-9855-cc87f5852c7c",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "that seems reasonable",
        "createdAt" : "2018-08-25T15:47:21Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c37df779cf944b5666fc72e2a27fbf2e745881f",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +45,49 @@    initializeImportMeta,\n    importModuleDynamically,\n  });\n  return {\n    module,"
  },
  {
    "id" : "16bca0d6-9ee6-4f23-848f-44796bd19dc8",
    "prId" : 22381,
    "prUrl" : "https://github.com/nodejs/node/pull/22381#pullrequestreview-150552362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "parentId" : null,
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "Could we not do something here where we have a default loader behaviour that is then overridden by the callbackMap for VM?\r\n\r\nThat would then avoid the need to call this set on each and every module in the base-level loader.",
        "createdAt" : "2018-08-26T12:53:35Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      },
      {
        "id" : "7c4a4b29-b181-4c6a-980d-c58f0430bead",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "I would not like any \"defaults\" or \"fallbacks\" because it opens the door for escaping contexts.",
        "createdAt" : "2018-08-26T13:46:21Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "a4926a9b-e740-4600-92cf-c1477f80474f",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "Can you explain how VM could \"lose track\" of something if we did this?",
        "createdAt" : "2018-08-26T13:49:31Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      },
      {
        "id" : "6bacca76-b4b8-411b-bd01-5d5c4fa96526",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "Well I'm not sure, people find all sorts of weird ways to do things. I can however say that we elimate all that by treating all the wraps the same. Is there any specific problem with the current design you want be to look at?",
        "createdAt" : "2018-08-26T13:54:03Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "c8ba501d-948c-4387-b7b4-b5e5b3cca41c",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "I just have a strong belief in doing minimal work, and aiming for the simplest possible implementation, especially when laying code foundations.",
        "createdAt" : "2018-08-26T13:55:49Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      },
      {
        "id" : "c4197a5e-85d7-41dc-bea6-ede1968a14e7",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "i would say that because all modules interact with this flow in the same way, it is already as simple as possible.",
        "createdAt" : "2018-08-26T22:40:55Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "45492d84-bfbe-4285-8e05-ac85ad257caa",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "This is creating a code dependency of the module loader on VM, which is a first. It is also running code to set modules in a map that wouldn't be necessary if the default loader was assumed.\r\n\r\nEvery piece of code should justify its existence based on its benefit, and I'm not sure I see what the strong benefit here is to setting ALL modules in a context map, when we only need to distinguish those modules that have unique contexts.",
        "createdAt" : "2018-08-27T13:15:40Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      },
      {
        "id" : "6bdda5b3-5235-4d5f-98ef-25b6a3ccd194",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "ModuleWrap and ContextifyScript are equally part of our VM infra so I don't really see your point here. Also this is scoped by script not context.",
        "createdAt" : "2018-08-27T14:28:20Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "f7681124-c239-4a08-8eb9-2addf227956e",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "body" : "> This is creating a code dependency of the module loader on VM, which is a first.\r\n\r\nI think it's important to clarify here that the module loader doesn't depend on the _bulk_ of the VM, only a single `WeakMap` that arguably can be put anywhere else, even under `lib/internal/modules/esm/` if that's preferred. In fact, the only reason why it's a `WeakMap` in the first place is because V8 doesn't have private instance variables yet.\r\n\r\nI also echo @devsnek's point about not treating the system loader any more special: IMO there should be no \"default\" behavior for a module â€“ though I am open to be convinced otherwise.",
        "createdAt" : "2018-08-27T14:43:45Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "tags" : [
        ]
      },
      {
        "id" : "ae8c3680-e7e7-4b20-930c-c7dbc67a0705",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "The base-level loader is privileged in the sense that it is the default code path for `node x`. So my argument here is that the default behaviour of `import('x')` should similarly assume the same code path, with opt-outs for overridden behaviours. I see no reason to individually bind the callbacks for dynamic import in the default loader, when it is plainly the default behaviour.\r\n\r\nI would be open to lowering the implementation of the context below VM, as yes, its the coupling to VM that I'm largely against here.",
        "createdAt" : "2018-08-27T15:06:36Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      },
      {
        "id" : "bd3faa34-6aba-4613-90ef-251e612cd5fd",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "my design principle is that because the base-level loader is privileged, getting to interact with it is also a privilege. i don't want things messing with it unless i explicitly want them to.",
        "createdAt" : "2018-08-28T16:03:09Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "f68f01a2-bc1d-45f0-ad8a-8e938eeee35b",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "So as mentioned my two concerns are:\r\n\r\n1. From a performance perspective we are unnecessarily tracking modules in a map, that could otherwise assume the base-level realm loader without sacrificing security.\r\n2. We are coupling the loader to vm\r\n\r\n(1) I can compromise on.\r\n\r\nBut (2) is what I would really like to avoid by either tackling (1) or by lowering the context code into a module other than vm.",
        "createdAt" : "2018-08-28T16:20:13Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      },
      {
        "id" : "33e78d07-57af-4763-9fcc-5d1c4caafc6e",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "@guybedford i can rename the file the map is in if you want. its not really coupled to \"vm\" in any other way, and like i said i consider ModuleWrap part of vm.",
        "createdAt" : "2018-08-28T16:27:03Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "e29e71a2-09bc-4395-88d1-338978dde9cd",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "Certainly it could be renamed `internal/modules/esm/module_context.js` or something like that.\r\n\r\nAnd the code on the C++ side that handles this callback is all in node_contextify right?",
        "createdAt" : "2018-08-28T16:39:30Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      },
      {
        "id" : "42737eaa-a8df-4705-b7ce-84d7e7857140",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "we call into JS from ModuleWrap::ImportModuleDyanmically",
        "createdAt" : "2018-08-28T16:58:57Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "c0dc8621-1942-4e88-8dbe-2a77e34cc25e",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "`callbackMap` is no longer in the `vm` namespace.",
        "createdAt" : "2018-08-29T11:42:52Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "6bfe7aa2-cfd5-4a14-a911-74d323cb95c8",
        "parentId" : "6d6c85cf-ccbc-4747-936c-ba9aa31b4ff4",
        "authorId" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "body" : "Nice, thanks",
        "createdAt" : "2018-08-29T13:12:10Z",
        "updatedAt" : "2018-10-06T22:33:46Z",
        "lastEditedBy" : "3b2df505-72aa-4ca9-add0-bc742e87c02b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c37df779cf944b5666fc72e2a27fbf2e745881f",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +45,49 @@    initializeImportMeta,\n    importModuleDynamically,\n  });\n  return {\n    module,"
  }
]