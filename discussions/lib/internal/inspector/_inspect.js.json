[
  {
    "id" : "9fb1e031-df9b-4029-a931-f29f850c8081",
    "prId" : 38161,
    "prUrl" : "https://github.com/nodejs/node/pull/38161#pullrequestreview-644094621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7961ff1f-2b48-45b5-ac6b-95b5366daf52",
        "parentId" : null,
        "authorId" : "4e8c77e8-10f9-4830-ac93-3bf7c9d321e2",
        "body" : "should we add a TODO here to re-enable ESLint on this file?",
        "createdAt" : "2021-04-25T05:51:11Z",
        "updatedAt" : "2021-04-25T08:51:58Z",
        "lastEditedBy" : "4e8c77e8-10f9-4830-ac93-3bf7c9d321e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a70f4fc9fc1aea543e4a205c59264f85c89d61d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +22,26 @@\n// TODO(trott): enable ESLint\n/* eslint-disable */\n\n'use strict';"
  },
  {
    "id" : "f1076dca-e007-473c-9743-8c816eabae5b",
    "prId" : 38406,
    "prUrl" : "https://github.com/nodejs/node/pull/38406#pullrequestreview-644316974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35719174-26d9-45d4-8453-62cc848e6634",
        "parentId" : null,
        "authorId" : "4e8c77e8-10f9-4830-ac93-3bf7c9d321e2",
        "body" : "Can we import this from the internal module (unless you're supposed to be using the global) ?",
        "createdAt" : "2021-04-26T06:54:49Z",
        "updatedAt" : "2021-04-29T10:06:48Z",
        "lastEditedBy" : "4e8c77e8-10f9-4830-ac93-3bf7c9d321e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f331a1894f00bd75be90106bb6854e702e4b25e2",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +83,87 @@\n  const retryDelay = 150;\n  const ac = new AbortController();\n  const { signal } = ac;\n"
  },
  {
    "id" : "f3c5ca3f-b9e1-4c22-81b5-50970483e206",
    "prId" : 38406,
    "prUrl" : "https://github.com/nodejs/node/pull/38406#pullrequestreview-648028758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7711463-c758-4c48-8a46-4d0e8d156732",
        "parentId" : null,
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "Should this go ahead and use `return await Promise` so that any possible error stack would include the `runScript` frame?",
        "createdAt" : "2021-04-27T21:47:14Z",
        "updatedAt" : "2021-04-29T10:06:48Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "7608617f-49e4-4a83-ae97-fa3d37ea255c",
        "parentId" : "e7711463-c758-4c48-8a46-4d0e8d156732",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "I'm not sure I follow, isn't `await <promise>` and `return <promise>` similar when it's the last expression on an `async` function?",
        "createdAt" : "2021-04-27T22:00:59Z",
        "updatedAt" : "2021-04-30T12:44:01Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "b8ff1681-9c37-4228-97e7-951a6c8a7048",
        "parentId" : "e7711463-c758-4c48-8a46-4d0e8d156732",
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "Yes and no. With `return <promise>` if `<promise>` rejects, the error stack trace will not include the wrapping async function (in this case `runScript`). However, when using `return await <promise>` the error stack *will* contain `runScript`.",
        "createdAt" : "2021-04-27T22:08:41Z",
        "updatedAt" : "2021-04-30T12:44:01Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "b4cdc65f-7894-4491-b64b-785a5ec9f873",
        "parentId" : "e7711463-c758-4c48-8a46-4d0e8d156732",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "Am I doing this wrong? It seems the stack trace does contain the wrapping function in the dummy test cases I've came up with..\r\n![V8 DevTools showing stack traces](https://user-images.githubusercontent.com/14309773/116319184-59f44800-a7b6-11eb-903d-5ef3780deefe.png)\r\n\r\nAlso with node:\r\n```console\r\n$ node -e '(async function runScripts(){return new Promise((_,r)=>{r(new Error)})})()'\r\n[eval]:1\r\n(async function runScripts(){return new Promise((_,r)=>{r(new Error)})})()\r\n                                                          ^\r\n\r\nError\r\n    at [eval]:1:59\r\n    at new Promise (<anonymous>)\r\n    at runScripts ([eval]:1:37)\r\n    at [eval]:1:73\r\n    at Script.runInThisContext (node:vm:131:12)\r\n    at Object.runInThisContext (node:vm:308:38)\r\n    at node:internal/process/execution:81:19\r\n    at [eval]-wrapper:6:22\r\n    at evalScript (node:internal/process/execution:80:60)\r\n    at node:internal/main/eval_string:27:3\r\n$ node -e '(async function runScripts(){return new Promise(()=>{throw new Error})})()' \r\n[eval]:1\r\n(async function runScripts(){return new Promise(()=>{throw new Error})})()\r\n                                                           ^\r\n\r\nError\r\n    at [eval]:1:60\r\n    at new Promise (<anonymous>)\r\n    at runScripts ([eval]:1:37)\r\n    at [eval]:1:73\r\n    at Script.runInThisContext (node:vm:131:12)\r\n    at Object.runInThisContext (node:vm:308:38)\r\n    at node:internal/process/execution:81:19\r\n    at [eval]-wrapper:6:22\r\n    at evalScript (node:internal/process/execution:80:60)\r\n    at node:internal/main/eval_string:27:3\r\n```",
        "createdAt" : "2021-04-27T22:15:31Z",
        "updatedAt" : "2021-04-30T12:44:01Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      },
      {
        "id" : "858da1fe-8992-4fb1-90c3-c629ffbb07d9",
        "parentId" : "e7711463-c758-4c48-8a46-4d0e8d156732",
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "~~Yeah looking at it again, in this particular case returning the Promise is ok~~ Actually no, because of the `await`. Here's the case that I was talking about:\r\n\r\n```js\r\nconst { setTimeout } = require('timers/promises');\r\n\r\nasync function foo() {\r\n  await setTimeout(100);\r\n  return Promise.reject(new Error('boom'));\r\n}\r\n\r\nasync function bar() {\r\n  return foo();\r\n}\r\n\r\n// vs.\r\n\r\nasync function bar2() {\r\n  return await foo();\r\n}\r\n```\r\n\r\nRunning `bar()` produces an error:\r\n\r\n```\r\n> Uncaught Error: boom\r\n    at foo (REPL33:4:23)\r\n```\r\n\r\nWhile running `bar2()` produces an error:\r\n\r\n```\r\n> Uncaught Error: boom\r\n    at foo (REPL33:4:23)\r\n    at async bar2 (REPL41:2:8)\r\n```\r\n\r\nThe key is the use of the `await` in `foo`... it separates everything that comes after it into a separate stack.",
        "createdAt" : "2021-04-27T22:23:37Z",
        "updatedAt" : "2021-04-30T12:44:01Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "dfd29206-069c-4d9c-b8ae-9a33892b0902",
        "parentId" : "e7711463-c758-4c48-8a46-4d0e8d156732",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "Seems like a V8 bug, interesting. Unless you feel strongly about this, I'm tempted to leave it as is until a linter rule comes to enforce it.",
        "createdAt" : "2021-04-29T10:08:05Z",
        "updatedAt" : "2021-04-29T10:08:05Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f331a1894f00bd75be90106bb6854e702e4b25e2",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +119,123 @@\n  let output = '';\n  return new Promise((resolve) => {\n    function waitForListenHint(text) {\n      output += text;"
  },
  {
    "id" : "86a7cb1d-8a20-4a5f-b2e0-acf9e9378493",
    "prId" : 38406,
    "prUrl" : "https://github.com/nodejs/node/pull/38406#pullrequestreview-646395086",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08ead249-f8ac-4df9-bb7f-070c006fdf39",
        "parentId" : null,
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "If `debug` is off the Promise here will never resolve. Is that what we want?",
        "createdAt" : "2021-04-27T21:47:59Z",
        "updatedAt" : "2021-04-29T10:06:48Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "187b2b86-1de6-46d3-8fe3-e97f90adedb5",
        "parentId" : "08ead249-f8ac-4df9-bb7f-070c006fdf39",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "Yes, it will be pending until another `data` event is emitted by `child.stderr` which will make `output` match the expected regex.",
        "createdAt" : "2021-04-27T21:58:16Z",
        "updatedAt" : "2021-04-30T12:44:01Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f331a1894f00bd75be90106bb6854e702e4b25e2",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +127,131 @@        const port = Number(debug[2]);\n        child.stderr.removeListener('data', waitForListenHint);\n        resolve([child, port, host]);\n      }\n    }"
  }
]