[
  {
    "id" : "f0464d34-05cb-427c-b6f9-fb44f7f675c8",
    "prId" : 1116,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0c7b5e0-2459-419f-a2b5-ebd0f53c323d",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "@cjihrig What was the motivation for disallowing an empty string?\n",
        "createdAt" : "2015-03-10T12:00:33Z",
        "updatedAt" : "2015-03-10T15:14:09Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "77f12bbe-06ad-491e-a383-612388cdc16a",
        "parentId" : "f0c7b5e0-2459-419f-a2b5-ebd0f53c323d",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "Empty string and strings of 1 or more spaces become 0 when the + operator is applied. Since we want to allow zero, I had to specifically check for that case.\n",
        "createdAt" : "2015-03-10T14:12:02Z",
        "updatedAt" : "2015-03-10T15:14:09Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "acc4af9c-ddfd-4a37-b580-88e3666e7aa4",
        "parentId" : "f0c7b5e0-2459-419f-a2b5-ebd0f53c323d",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Okay, that much I get.  It's not really clear to me though why undefined is allowed (and interpreted as 0) but not a blank string.\n",
        "createdAt" : "2015-03-10T15:11:50Z",
        "updatedAt" : "2015-03-10T15:14:09Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "339e01e5-6501-4d59-b5db-688f9bb5b611",
        "parentId" : "f0c7b5e0-2459-419f-a2b5-ebd0f53c323d",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "@misterdjules and I had a fair amount of discussion about this. `undefined` is allowed because the argument is optional and needs a default value. The empty string means you are explicitly passing in an \"incorrect\" value. I actually wasn't the one to add the original checks. However, I moved the validation, so I sort of took ownership of it when the bug (port zero was no longer allowed) was reported against 0.12.\n",
        "createdAt" : "2015-03-10T15:33:06Z",
        "updatedAt" : "2015-03-10T15:33:15Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "5c3448af-0b82-4e59-b4c6-9b24446a1740",
        "parentId" : "f0c7b5e0-2459-419f-a2b5-ebd0f53c323d",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Okay, thanks for the explanation.  It feels kind of quirky but I don't have a strong enough opinion to file a PR for it. :-)\n",
        "createdAt" : "2015-03-10T15:40:46Z",
        "updatedAt" : "2015-03-10T15:40:46Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "480b48244f14d64d6361c4b8e9bb3e479b5f7fa1",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +839,843 @@function isLegalPort(port) {\n  if (typeof port === 'string' && port.trim() === '')\n    return false;\n  return +port === (port >>> 0) && port >= 0 && port <= 0xFFFF;\n}"
  },
  {
    "id" : "5de30195-4a43-47ac-af6c-e0df6aa767c3",
    "prId" : 8112,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94c912cd-80ce-49ad-8dc5-522f2f224baa",
        "parentId" : null,
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "Perhaps switch to `function(...args) {` here?\n",
        "createdAt" : "2016-08-15T18:16:32Z",
        "updatedAt" : "2016-08-23T19:12:56Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "00a3fc01-0500-42fa-94ba-a1b5626437e2",
        "parentId" : "94c912cd-80ce-49ad-8dc5-522f2f224baa",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I haven't ran the relevant benchmarks recently (at least with v8 5.1), but I wouldn't be surprised if rest args are still slower.\n",
        "createdAt" : "2016-08-15T18:21:33Z",
        "updatedAt" : "2016-08-23T19:12:56Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "6f71c0af-18b9-4b0c-a288-85fa62bdd7fd",
        "parentId" : "94c912cd-80ce-49ad-8dc5-522f2f224baa",
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "They are still a bit slower.\n",
        "createdAt" : "2016-08-15T18:22:45Z",
        "updatedAt" : "2016-08-23T19:12:56Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      }
    ],
    "commit" : "a206afec7671944d5b123d207e00300a894fe0df",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +60,64 @@// connect(path, [cb]);\n//\nexports.connect = exports.createConnection = function() {\n  var args = new Array(arguments.length);\n  for (var i = 0; i < arguments.length; i++)"
  },
  {
    "id" : "6d4e4d6c-bf81-421f-9f8a-d9323f822949",
    "prId" : 12342,
    "prUrl" : "https://github.com/nodejs/node/pull/12342#pullrequestreview-32203834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bb0e91b-0a05-4f04-94f1-2153b37dad8b",
        "parentId" : null,
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I'm guessing this is done for performance, but does shadowing negate that?",
        "createdAt" : "2017-04-11T19:13:26Z",
        "updatedAt" : "2017-04-18T20:05:43Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "555eb2eb-3e7d-4c3e-9005-6cbb43363536",
        "parentId" : "2bb0e91b-0a05-4f04-94f1-2153b37dad8b",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "You mean shadowing of variable/argument names?  No, should not be a factor here.",
        "createdAt" : "2017-04-11T19:24:52Z",
        "updatedAt" : "2017-04-18T20:05:43Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d06e5c30d7350ffe697056bc9a712f8152cecc1",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +500,504 @@  debug('destroy');\n\n  function fireErrorCallbacks(self, exception, cb) {\n    if (cb) cb(exception);\n    if (exception && !self._writableState.errorEmitted) {"
  },
  {
    "id" : "5154de55-0910-4611-8c90-6510b91ea43f",
    "prId" : 17704,
    "prUrl" : "https://github.com/nodejs/node/pull/17704#pullrequestreview-83978056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "170bc11e-69f0-4050-969b-f091fac17177",
        "parentId" : null,
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "This might be enough code to factor it out into some internal function, wdyt?",
        "createdAt" : "2017-12-16T12:01:58Z",
        "updatedAt" : "2017-12-20T23:28:21Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "1722f6ab-f496-4a77-9739-08a4697b5836",
        "parentId" : "170bc11e-69f0-4050-969b-f091fac17177",
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "Might be a good idea yeah.",
        "createdAt" : "2017-12-16T16:18:11Z",
        "updatedAt" : "2017-12-20T23:28:21Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc61ee32fedd5d0bd9bc1dee2b87a41dd7ffa4dd",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +398,402 @@\nSocket.prototype.setTimeout = function(msecs, callback) {\n  // Type checking identical to timers.enroll()\n  msecs = validateTimerDuration(msecs);\n"
  },
  {
    "id" : "5acfa2cc-f3cf-400b-918a-95aeef9c35b3",
    "prId" : 25436,
    "prUrl" : "https://github.com/nodejs/node/pull/25436#pullrequestreview-270486850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e9552e8-f773-45f3-a9ce-8aec10562685",
        "parentId" : null,
        "authorId" : "9e96224b-2acc-4770-a5d7-d764637e4628",
        "body" : "Do you see another implementation that does not override these three methods?",
        "createdAt" : "2019-02-01T18:37:18Z",
        "updatedAt" : "2019-08-23T21:06:17Z",
        "lastEditedBy" : "9e96224b-2acc-4770-a5d7-d764637e4628",
        "tags" : [
        ]
      },
      {
        "id" : "035adfd0-f443-4aaf-bb6c-af9e6b445be8",
        "parentId" : "6e9552e8-f773-45f3-a9ce-8aec10562685",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I'm not sure what you're really asking/getting at?",
        "createdAt" : "2019-02-01T20:03:06Z",
        "updatedAt" : "2019-08-23T21:06:17Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "27fa2b3d-7e28-4309-b95a-4713e1974a4f",
        "parentId" : "6e9552e8-f773-45f3-a9ce-8aec10562685",
        "authorId" : "9e96224b-2acc-4770-a5d7-d764637e4628",
        "body" : "I think overriding `read`,  `resume`, `pause`, `on`, etc.. is the source of most of the issues with streams.\r\nI would prefer an implementation that did not do this all the time, but rather did this only if  `onread`Â  is specified, or even better not at all.",
        "createdAt" : "2019-07-04T13:04:58Z",
        "updatedAt" : "2019-08-23T21:06:17Z",
        "lastEditedBy" : "9e96224b-2acc-4770-a5d7-d764637e4628",
        "tags" : [
        ]
      },
      {
        "id" : "8d3aeb9d-f71b-45c2-ae54-6a2e45dff4a2",
        "parentId" : "6e9552e8-f773-45f3-a9ce-8aec10562685",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "@mcollina I don't see anything wrong with this approach. Can you elaborate?",
        "createdAt" : "2019-08-04T08:29:47Z",
        "updatedAt" : "2019-08-23T21:06:17Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "8292b280ec9e6b8c2444cbe49350facc77f5fefa",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +607,611 @@  }\n  return stream.Duplex.prototype.read.call(this, n);\n};\n\n"
  },
  {
    "id" : "4e2a49f5-2990-4822-9888-02ff467bd084",
    "prId" : 25436,
    "prUrl" : "https://github.com/nodejs/node/pull/25436#pullrequestreview-270479917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "227d6a5e-a177-4538-9810-e3ca844ea854",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "From reading the documentation I would expect that `this` is `onread` in `onread.callback()` but it isn't.",
        "createdAt" : "2019-07-19T07:48:37Z",
        "updatedAt" : "2019-08-23T21:06:17Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "cc52d4c9-e477-47a0-aca3-24333c0f19b6",
        "parentId" : "227d6a5e-a177-4538-9810-e3ca844ea854",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I'd probably rather just document that `this` is the global object/context. Would that suffice?",
        "createdAt" : "2019-07-24T06:25:24Z",
        "updatedAt" : "2019-08-23T21:06:17Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "f226be88-8e2f-4c1d-89e9-76a382fe6825",
        "parentId" : "227d6a5e-a177-4538-9810-e3ca844ea854",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "Updated.",
        "createdAt" : "2019-08-04T04:04:40Z",
        "updatedAt" : "2019-08-23T21:06:17Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "8292b280ec9e6b8c2444cbe49350facc77f5fefa",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +302,306 @@        this[kBuffer] = onread.buffer;\n      }\n      this[kBufferCb] = onread.callback;\n    }\n    if (options.fd !== undefined) {"
  }
]