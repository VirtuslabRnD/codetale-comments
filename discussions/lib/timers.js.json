[
  {
    "id" : "4b371b84-6406-4733-be3e-8af4ead69e4d",
    "prId" : 5793,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f34df1d6-72e7-4058-b61b-496ff76fcc91",
        "parentId" : null,
        "authorId" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "body" : "Any reason not to make it a `class Timeout`? \n\n``` js\nclass Timeout {\n  constructor(after) {\n    this._called = false;\n    this._idleTimeout = after;\n    this._idlePrev = this;\n    this._idleNext = this;\n    this._idleStart = null;\n    this._onTimeout = null;\n    this._repeat = null;\n  }\n  unref () {\n    if (this._handle) {\n      this._handle.unref();\n    } else if (typeof this._onTimeout === 'function') {\n      var now = TimerWrap.now();\n      if (!this._idleStart) this._idleStart = now;\n      var delay = this._idleStart + this._idleTimeout - now;\n      if (delay < 0) delay = 0;\n\n      // Prevent running cb again when unref() is called during the same cb\n      if (this._called && !this._repeat) {\n        exports.unenroll(this);\n        return;\n      }\n\n      var handle = reuse(this);\n\n      this._handle = handle || new TimerWrap();\n      this._handle.owner = this;\n      this._handle[kOnTimeout] = function unrefdHandle() {\n        this.owner._onTimeout();\n        if (!this.owner._repeat)\n          this.owner.close();\n      };\n      this._handle.start(delay, 0);\n      this._handle.domain = this.domain;\n      this._handle.unref();\n    }\n    return this;\n  }\n  ref() {\n    if (this._handle)\n      this._handle.ref();\n    return this;\n  }\n  close() {\n    this._onTimeout = null;\n    if (this._handle) {\n      this._handle[kOnTimeout] = null;\n      this._handle.close();\n    } else {\n      exports.unenroll(this);\n    }\n    return this;\n  }\n}\n```\n",
        "createdAt" : "2016-03-19T12:48:18Z",
        "updatedAt" : "2016-03-21T15:22:32Z",
        "lastEditedBy" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "tags" : [
        ]
      },
      {
        "id" : "e67f680b-d9ac-42bb-9e2d-8339c5222379",
        "parentId" : "f34df1d6-72e7-4058-b61b-496ff76fcc91",
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "No gain, more code change.\n",
        "createdAt" : "2016-03-19T13:49:45Z",
        "updatedAt" : "2016-03-21T15:22:32Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "8659ff6b-8d3e-4599-8753-012f8cdb0829",
        "parentId" : "f34df1d6-72e7-4058-b61b-496ff76fcc91",
        "authorId" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "body" : "Well, it modernizes things a little and makes them more explicit. If we want to minimize change why not keep it `const Timeout` and do `const Timeout = function Timeout` - by naming the function expression you get the same trace.\n",
        "createdAt" : "2016-03-19T15:47:05Z",
        "updatedAt" : "2016-03-21T15:22:32Z",
        "lastEditedBy" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "tags" : [
        ]
      },
      {
        "id" : "ad429864-90c5-43a5-824e-0041beed9477",
        "parentId" : "f34df1d6-72e7-4058-b61b-496ff76fcc91",
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "Why even assign it though? It's unnecessary.\n\nTypically we have avoided modernization unless it meant performance increases or was part of some refactor that touched the code a lot anyways.\n",
        "createdAt" : "2016-03-19T16:34:43Z",
        "updatedAt" : "2016-03-21T15:22:32Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "4dcad83e-70ed-4b63-83e1-3ff23029b8bd",
        "parentId" : "f34df1d6-72e7-4058-b61b-496ff76fcc91",
        "authorId" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "body" : "Fair enough - I'm sorry if all these questions annoy you :) \n",
        "createdAt" : "2016-03-19T16:46:34Z",
        "updatedAt" : "2016-03-21T15:22:32Z",
        "lastEditedBy" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fe02e23af1e0c746b30132205fbd1fbddb2a079",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +440,444 @@\n\nfunction Timeout(after) {\n  this._called = false;\n  this._idleTimeout = after;"
  },
  {
    "id" : "12704b68-78cb-4fad-971f-07c080894ae8",
    "prId" : 8655,
    "prUrl" : "https://github.com/nodejs/node/pull/8655#pullrequestreview-2089952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f9682dc-f3cd-427f-8b31-4e32432cbc6a",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "Can this be a helper fn?\n",
        "createdAt" : "2016-09-27T14:13:36Z",
        "updatedAt" : "2016-10-05T07:11:17Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "76849097-f59d-415c-8d73-c996bb8f6272",
        "parentId" : "7f9682dc-f3cd-427f-8b31-4e32432cbc6a",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "What do you mean?\n",
        "createdAt" : "2016-09-29T08:13:28Z",
        "updatedAt" : "2016-10-05T07:11:17Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed8839a279ba2597ae9fc54517030b16116207d",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +613,617 @@      } else {\n        immediateQueue.head = next;\n        immediateQueue.tail = oldTail;\n      }\n      process.nextTick(processImmediate);"
  },
  {
    "id" : "e3341760-356c-4f5f-8a04-97a327fb6396",
    "prId" : 8655,
    "prUrl" : "https://github.com/nodejs/node/pull/8655#pullrequestreview-1740620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd470310-1a4c-49b5-a77f-65b82f537394",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "I probably should specify: comments on how these two modify their respective properties\n",
        "createdAt" : "2016-09-27T14:16:04Z",
        "updatedAt" : "2016-10-05T07:11:17Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed8839a279ba2597ae9fc54517030b16116207d",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +531,535 @@  }\n  this.tail = item;\n};\n\n// Removes an item from the linked list, adjusting the pointers of adjacent"
  },
  {
    "id" : "26ea8514-7754-4b38-a440-68faf91df688",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-4280797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ce6cffe-2aba-40f6-b855-dc04bae5032f",
        "parentId" : null,
        "authorId" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "body" : "I remember we had a long discussion about this, I think for http. Have we ever come to a conclusion whether this is a good idea?\n",
        "createdAt" : "2016-09-20T10:41:39Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "tags" : [
        ]
      },
      {
        "id" : "4d9f7b30-663d-45c1-ad6f-1682db990f2e",
        "parentId" : "0ce6cffe-2aba-40f6-b855-dc04bae5032f",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "The objects here are not exposed, so it's not an issue in this case.\n",
        "createdAt" : "2016-09-20T10:43:59Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "816490ec-7f51-4ab7-ae38-b9693b1daa82",
        "parentId" : "0ce6cffe-2aba-40f6-b855-dc04bae5032f",
        "authorId" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "body" : "OK. And it does improve performance? Because - at least for me - it decreases readability. \n",
        "createdAt" : "2016-09-20T10:55:08Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "tags" : [
        ]
      },
      {
        "id" : "dfc227d1-3b5b-40b9-bec2-e7930bd53658",
        "parentId" : "0ce6cffe-2aba-40f6-b855-dc04bae5032f",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I didn't measure it specifically, but it does remove unnecessary hash table entries. It may also help if V8 sees only numeric keys being set on the object?\n",
        "createdAt" : "2016-09-20T10:59:11Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "cb47ec55-ce92-40bf-a9ef-05c02e940fc6",
        "parentId" : "0ce6cffe-2aba-40f6-b855-dc04bae5032f",
        "authorId" : "86c390b8-0929-4702-ba81-27b6c7ddf2e6",
        "body" : "@fhinkel Just curious. Do you mean using a Map instead of Object.create? https://github.com/nodejs/node/pull/7581#issuecomment-236117659\n",
        "createdAt" : "2016-09-20T11:11:36Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "86c390b8-0929-4702-ba81-27b6c7ddf2e6",
        "tags" : [
        ]
      },
      {
        "id" : "f277da15-21fc-4211-89e7-b3f7409326fa",
        "parentId" : "0ce6cffe-2aba-40f6-b855-dc04bae5032f",
        "authorId" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "body" : "For me it increases readability, but please check performance - I recall there being a regression when using `.create(null)` at one point.\n",
        "createdAt" : "2016-09-20T11:47:57Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "tags" : [
        ]
      },
      {
        "id" : "5eca7056-ac46-4b48-b4be-34d61c175044",
        "parentId" : "0ce6cffe-2aba-40f6-b855-dc04bae5032f",
        "authorId" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "body" : "@Florian-R Thanks, that's the discussion I was thinking of. But in this case I meant {} vs .create(null). \n",
        "createdAt" : "2016-09-20T11:56:58Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "tags" : [
        ]
      },
      {
        "id" : "6cf760fe-ae1c-4c84-9be8-39e7e4756c23",
        "parentId" : "0ce6cffe-2aba-40f6-b855-dc04bae5032f",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "@benjamingr I'm not sure what regression you're referring to. These objects are created at startup, not during runtime, so the time to create them doesn't matter as much.\n",
        "createdAt" : "2016-09-20T17:51:23Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "fa6027f5-05d3-4408-80a6-5d735a49cf4d",
        "parentId" : "0ce6cffe-2aba-40f6-b855-dc04bae5032f",
        "authorId" : "0bb3c391-dc57-4972-bd85-c1d646a37c9c",
        "body" : "I understand this is not about performance, but just out of curiosity, I measured the performance difference.\n\n`console.time(\"{}\");\nfor (var i = 100000; i--;) {\n  var a = {};\n}\nconsole.timeEnd(\"{}\");\nvar create = Object.create;\nconsole.time(\"create\");\nfor (var i = 100000; i--;) {\n  var b = create(null);\n}\nconsole.timeEnd(\"create\");\n`\n\n`{}: 5.792ms`\n`create: 15.221ms`\n\nProbably, calling a function is heavier than {}\n",
        "createdAt" : "2016-10-14T03:37:04Z",
        "updatedAt" : "2016-10-14T03:37:04Z",
        "lastEditedBy" : "0bb3c391-dc57-4972-bd85-c1d646a37c9c",
        "tags" : [
        ]
      },
      {
        "id" : "b3eb87e7-c5c3-44b6-bd21-54510bfc64b2",
        "parentId" : "0ce6cffe-2aba-40f6-b855-dc04bae5032f",
        "authorId" : "72eb8d67-6611-4a96-ba06-27c00fbaf04a",
        "body" : "Literals are always faster than instantiation and builder function calls, in JS and most languages.\n",
        "createdAt" : "2016-10-14T14:40:05Z",
        "updatedAt" : "2016-10-14T15:04:38Z",
        "lastEditedBy" : "72eb8d67-6611-4a96-ba06-27c00fbaf04a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +95,99 @@// - key = time in milliseconds\n// - value = linked list\nconst refedLists = Object.create(null);\nconst unrefedLists = Object.create(null);\n"
  },
  {
    "id" : "d4023c6a-5ba2-471d-b1e5-d5b43aec8762",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-722452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e00e5473-aafb-44eb-bb89-bf5c323140f1",
        "parentId" : null,
        "authorId" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "body" : "Thanks. I like this much better than using arguments.\n",
        "createdAt" : "2016-09-20T10:49:18Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +323,327 @@\n\nexports.setTimeout = function(callback, after, arg1, arg2, arg3) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');"
  },
  {
    "id" : "1df29de5-2a7d-4da9-865a-a5593a713a05",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-723978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "663548b7-2959-4848-8f27-14ca730e3d9e",
        "parentId" : null,
        "authorId" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "body" : "Can we check for typeof args1 == 'undefined' rather than using length? Or is undefined a valid value for args1?\n",
        "createdAt" : "2016-09-20T10:51:39Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "tags" : [
        ]
      },
      {
        "id" : "cae499f1-5301-46a9-86c2-e398f81bdf1a",
        "parentId" : "663548b7-2959-4848-8f27-14ca730e3d9e",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I would say it's a valid value.\n",
        "createdAt" : "2016-09-20T11:00:07Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +328,332 @@  }\n\n  var len = arguments.length;\n  var args;\n  if (len === 3) {"
  },
  {
    "id" : "6e7f6474-f1d3-45bf-9f6b-03617a9e6bee",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-801521",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ae0cecf-70e1-411f-9823-32c3447c738f",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "Unsure why we'd want this in an extra function\n",
        "createdAt" : "2016-09-20T14:34:10Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "1d6bcf1f-8ca2-4f83-9962-28ab793fa64d",
        "parentId" : "7ae0cecf-70e1-411f-9823-32c3447c738f",
        "authorId" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "body" : "I think extracting it into a function increases readability.\n",
        "createdAt" : "2016-09-20T15:53:05Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "adf4589f-d7ff-4732-ae84-6bf8a2f67306",
        "tags" : [
        ]
      },
      {
        "id" : "f15aeaa7-9534-48c0-a9c2-fbeee605f947",
        "parentId" : "7ae0cecf-70e1-411f-9823-32c3447c738f",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "The main reason is to keep the `insert()` size down, but it does also help a bit with readability I suppose.\n",
        "createdAt" : "2016-09-20T17:43:54Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +136,140 @@}\n\nfunction createTimersList(msecs, unrefed) {\n  // Make a new linked list of timers, and create a TimerWrap to schedule\n  // processing for the list."
  },
  {
    "id" : "1d34a27a-0b03-4066-b2ae-ab9c8db6a14d",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-4280797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b621d4c-29e1-41ac-a7bb-ee24de2fddfd",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "`...args` ?\n",
        "createdAt" : "2016-09-20T14:34:25Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "0c308532-8236-4864-9b96-b0f33a0339b4",
        "parentId" : "6b621d4c-29e1-41ac-a7bb-ee24de2fddfd",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "Rest args are still slow.\n",
        "createdAt" : "2016-09-20T17:44:13Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "8d031d89-5580-41af-a4b3-0e1b8d7400c9",
        "parentId" : "6b621d4c-29e1-41ac-a7bb-ee24de2fddfd",
        "authorId" : "72eb8d67-6611-4a96-ba06-27c00fbaf04a",
        "body" : "Great move.\n",
        "createdAt" : "2016-10-14T14:46:47Z",
        "updatedAt" : "2016-10-14T15:04:38Z",
        "lastEditedBy" : "72eb8d67-6611-4a96-ba06-27c00fbaf04a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +323,327 @@\n\nexports.setTimeout = function(callback, after, arg1, arg2, arg3) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');"
  },
  {
    "id" : "7b937349-4dcf-4e2a-b34c-7de9336ea2d6",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-4280797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "078f726b-d6cc-4ac3-807c-08bdcee1d540",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "Why is this a new function?\n",
        "createdAt" : "2016-09-20T14:37:38Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "27b1c649-9146-40f5-94c7-91af0edd33ca",
        "parentId" : "078f726b-d6cc-4ac3-807c-08bdcee1d540",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "To keep function sizes down.\n",
        "createdAt" : "2016-09-20T17:46:50Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "1bc2f0e3-ac56-446e-979e-090e7e632615",
        "parentId" : "078f726b-d6cc-4ac3-807c-08bdcee1d540",
        "authorId" : "72eb8d67-6611-4a96-ba06-27c00fbaf04a",
        "body" : "IMHO, there's no repetead call, you add a short flow path (and creates a mini and fake cyclomatic complexity), function is in the same script and right under the function (so you just added brackets and more names to read). Function call is slower than direct structured code (and even minimal performance gains, in this call stack queen, is important).\n\nI would not do this separation.\n",
        "createdAt" : "2016-10-14T14:59:37Z",
        "updatedAt" : "2016-10-14T15:04:38Z",
        "lastEditedBy" : "72eb8d67-6611-4a96-ba06-27c00fbaf04a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +428,432 @@};\n\nfunction createRepeatTimeout(callback, repeat, args) {\n  repeat *= 1; // coalesce to number or NaN\n  if (!(repeat >= 1 && repeat <= TIMEOUT_MAX))"
  },
  {
    "id" : "52c5bcb5-defd-4366-8f4a-cfa2ec369b93",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-843249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19641491-ec13-4d00-9bbc-cc6cfacb1ce6",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "unsure if changing this won't have side-effects somewhere\n",
        "createdAt" : "2016-09-20T14:38:35Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "b9c9c59c-4c6f-4d45-8056-f80a118b61c5",
        "parentId" : "19641491-ec13-4d00-9bbc-cc6cfacb1ce6",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I grepped lib/ and `._repeat` isn't used anywhere except timers.js.\n",
        "createdAt" : "2016-09-20T17:48:33Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "8bad9314-5205-40f3-9ec9-eff99b5322bc",
        "parentId" : "19641491-ec13-4d00-9bbc-cc6cfacb1ce6",
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "I'm more concerned about user code, I do understand that it is unlikely but it has been the way it was an awfully long time in the wild.\n",
        "createdAt" : "2016-09-20T20:08:07Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "d50ae4b7-5da1-4d65-ad8d-99e13ef58c33",
        "parentId" : "19641491-ec13-4d00-9bbc-cc6cfacb1ce6",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "Would you rather I leave the variable set to `null` since it wouldn't be used anymore and add a new property that stores the interval value?\n",
        "createdAt" : "2016-09-20T21:21:33Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 232,
    "diffHunk" : "@@ -1,1 +434,438 @@\n  var timer = new Timeout(repeat, callback, args);\n  timer._repeat = repeat;\n  if (process.domain)\n    timer.domain = process.domain;"
  },
  {
    "id" : "e53fdc3e-3e5d-4c7d-b31f-253771a3ea32",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-829425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "059f114a-19bd-4aac-a06a-c538a5ae753b",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "should only be `timer._handle` I think\n",
        "createdAt" : "2016-09-20T14:39:20Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "9249b6a8-83a0-4f8a-ab26-552f8044f429",
        "parentId" : "059f114a-19bd-4aac-a06a-c538a5ae753b",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "Unfortunately not, as `_http_outgoing` and `net` have a `._handle` and manually `enroll()` pre-made objects. Node will crash since those `._handle` instances are not only not `Timeout` instances, but they also do not have a `.start()` method.\n",
        "createdAt" : "2016-09-20T17:46:30Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "824e3692-d0f6-44d3-9c41-5f783eb15d2b",
        "parentId" : "059f114a-19bd-4aac-a06a-c538a5ae753b",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "And the reason this change is necessary _now_ is that the rearming code no longer has access to the scope where the `Timeout` instance was created.\n",
        "createdAt" : "2016-09-20T17:55:06Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "451efde7-906c-43d9-8360-a6bd68e11ceb",
        "parentId" : "059f114a-19bd-4aac-a06a-c538a5ae753b",
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "hmmmm ok\n",
        "createdAt" : "2016-09-20T20:09:03Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +386,390 @@function rearm(timer) {\n  // If timer is unref'd (or was - it's permanently removed from the list.)\n  if (timer._handle && timer instanceof Timeout) {\n    timer._handle.start(timer._repeat);\n  } else {"
  },
  {
    "id" : "669b3794-991c-4ed4-b1e4-aaa412013033",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-803446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b196021d-17d8-459a-afdc-3971cfa29f88",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "I don't see any tangible benefit to doing this.\n\nWe only use Number value keys.\n",
        "createdAt" : "2016-09-20T14:41:55Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "9b9e1024-25d0-42bc-a1d5-b5057339cfdc",
        "parentId" : "b196021d-17d8-459a-afdc-3971cfa29f88",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "As was previously mentioned, I didn't measure the change specifically, but it does remove unnecessary hash table entries. It may also help if V8 sees only numeric keys being set on the object? It has nothing to do with key name collisions in this case.\n",
        "createdAt" : "2016-09-20T17:53:13Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +96,100 @@// - value = linked list\nconst refedLists = Object.create(null);\nconst unrefedLists = Object.create(null);\n\n"
  },
  {
    "id" : "38ef197f-78c8-4119-baf5-835ca9518384",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-4280797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55ecdcdc-7308-4d0b-94f8-192f61e9fa7c",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "if `ontimeout()` throws will it deo-opt that function?\n",
        "createdAt" : "2016-09-20T20:00:32Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "034ddc2a-7e56-4671-885f-8a48ee7cbbfb",
        "parentId" : "55ecdcdc-7308-4d0b-94f8-192f61e9fa7c",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "Which function? `tryOnTimeout()`? `ontimeout()`? The user's callback?\n\nI don't know that throwing causes a deopt or not, but adding a `try-*` block certainly does cause a deopt for the containing function.\n",
        "createdAt" : "2016-09-20T21:11:30Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "4ecbdf4d-2edb-4e8f-aa14-b48e799e027e",
        "parentId" : "55ecdcdc-7308-4d0b-94f8-192f61e9fa7c",
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "> but adding a `try-*` block certainly does cause a deopt for the containing function.\n\nRight, which is why it was constrained to within one separate function.\n\nI'm curious if a throw fork a user callback de-opts `ontimeout()` along the way though, since that could be somewhat unpleasant.\n\nMaybe we shouldn't worry about it? Idk the sate of benchmarking this stuff is already so bad 😐 \n",
        "createdAt" : "2016-09-20T21:44:44Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "558d4ba7-8e4c-4b41-a145-145bff1f0acf",
        "parentId" : "55ecdcdc-7308-4d0b-94f8-192f61e9fa7c",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I just wrote a little test and as far as I can tell a function (or any calling functions in the call stack) shouldn't get deopted if that function _throws_.\n",
        "createdAt" : "2016-09-20T22:25:21Z",
        "updatedAt" : "2016-10-01T07:01:12Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "d265c115-a0e4-4888-9e5c-f564da002177",
        "parentId" : "55ecdcdc-7308-4d0b-94f8-192f61e9fa7c",
        "authorId" : "72eb8d67-6611-4a96-ba06-27c00fbaf04a",
        "body" : "Try deopt any container function. Node.js should, IMHO, always test for nullity and use flags/optionals and never try-catch in the inner functions... This pattern is not really a requirement in functional programming and there's huge performance benefits on native calls (basically, in any platform too. try-catch system is expensive).\n",
        "createdAt" : "2016-10-14T14:44:59Z",
        "updatedAt" : "2016-10-14T15:06:51Z",
        "lastEditedBy" : "72eb8d67-6611-4a96-ba06-27c00fbaf04a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +235,239 @@  var threw = true;\n  try {\n    ontimeout(timer);\n    threw = false;\n  } finally {"
  },
  {
    "id" : "48da0ddb-78a7-4475-a85d-812d8c5d5d1c",
    "prId" : 8661,
    "prUrl" : "https://github.com/nodejs/node/pull/8661#pullrequestreview-4280797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07a827d1-535f-4068-9014-7d3b8cc542c3",
        "parentId" : null,
        "authorId" : "72eb8d67-6611-4a96-ba06-27c00fbaf04a",
        "body" : "This is always better for internal workings. ALWAYS, Node community.\nAvoid this, globals, function calls, function separation in minimal pieces and inner functions... and we'll always have fine code with max JS performance.\n",
        "createdAt" : "2016-10-14T15:00:48Z",
        "updatedAt" : "2016-10-14T15:09:09Z",
        "lastEditedBy" : "72eb8d67-6611-4a96-ba06-27c00fbaf04a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c2544cd9c339cdde881fc9a7f0851971b94d72",
    "line" : 282,
    "diffHunk" : "@@ -1,1 +464,468 @@\nfunction unrefdHandle() {\n  ontimeout(this.owner);\n  if (!this.owner._repeat)\n    this.owner.close();"
  }
]