[
  {
    "id" : "cde7b9aa-f2c3-4c0d-a7ca-dacae296a0e9",
    "prId" : 13384,
    "prUrl" : "https://github.com/nodejs/node/pull/13384#pullrequestreview-41926981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d08e2fa4-748a-4145-8b99-b01904dd5c84",
        "parentId" : null,
        "authorId" : "bdefb563-5b0e-49d6-af83-14c9dcbf70b5",
        "body" : "Can `arrayClone()` be reused here or does it have a negative performance impact?",
        "createdAt" : "2017-06-03T08:47:34Z",
        "updatedAt" : "2017-06-05T20:44:31Z",
        "lastEditedBy" : "bdefb563-5b0e-49d6-af83-14c9dcbf70b5",
        "tags" : [
        ]
      },
      {
        "id" : "093b788a-a614-438d-b6e8-3f8a92c4228d",
        "parentId" : "d08e2fa4-748a-4145-8b99-b01904dd5c84",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "No, because you cannot pass `arguments` without penalty except in only one or two cases. `apply()` is supposed to be one of those cases (which is what was used here before) but for some reason it can still cause a deopt (noticed this in some `net` benchmarks and tests).",
        "createdAt" : "2017-06-03T15:41:43Z",
        "updatedAt" : "2017-06-05T20:44:31Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "147d18ca-14d6-46c9-a3f8-c62dbbc83333",
        "parentId" : "d08e2fa4-748a-4145-8b99-b01904dd5c84",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "does `(...args)` work (for everything) any better?\r\nRef: https://github.com/nodejs/node/pull/12183\r\n",
        "createdAt" : "2017-06-03T16:57:21Z",
        "updatedAt" : "2017-06-05T20:44:31Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "13bc230b-3e5c-4392-ac85-b6048e9eaad7",
        "parentId" : "d08e2fa4-748a-4145-8b99-b01904dd5c84",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "Rest parameters are still slower than fast path cases like those used above. I think rest params in general are getting faster, but still not quite where they need to be to replace fast paths.",
        "createdAt" : "2017-06-03T17:04:05Z",
        "updatedAt" : "2017-06-05T20:44:31Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "13c2dc5e-6a56-4fda-913f-63b88236f133",
        "parentId" : "d08e2fa4-748a-4145-8b99-b01904dd5c84",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "üëç ",
        "createdAt" : "2017-06-03T19:57:57Z",
        "updatedAt" : "2017-06-05T20:44:31Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      }
    ],
    "commit" : "d081548858ae2c89e22c6e9a231644fba08e008e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +321,325 @@                                  arguments[2]);\n      default:\n        const args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];"
  },
  {
    "id" : "22475a06-f472-4107-bdd9-d0f03ac79480",
    "prId" : 33774,
    "prUrl" : "https://github.com/nodejs/node/pull/33774#pullrequestreview-425769093",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eb26af9-5ae6-4629-8c23-07e55f67e6f5",
        "parentId" : null,
        "authorId" : "9efa1026-358a-4bae-b0b8-35fbd34d6638",
        "body" : "we don't actually have to clone if `len < 2`, another possible optimization? ",
        "createdAt" : "2020-06-06T20:59:03Z",
        "updatedAt" : "2020-06-08T19:22:19Z",
        "lastEditedBy" : "9efa1026-358a-4bae-b0b8-35fbd34d6638",
        "tags" : [
        ]
      },
      {
        "id" : "ca9b218e-85a5-41d4-9290-e0bbdb5b9805",
        "parentId" : "4eb26af9-5ae6-4629-8c23-07e55f67e6f5",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I'm not sure what you mean, if we hit this branch then we already know `handler.length >= 2`.",
        "createdAt" : "2020-06-06T21:02:31Z",
        "updatedAt" : "2020-06-08T19:22:19Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "049067b2-493a-49fa-be0d-cbb8c85e9fe5",
        "parentId" : "4eb26af9-5ae6-4629-8c23-07e55f67e6f5",
        "authorId" : "9efa1026-358a-4bae-b0b8-35fbd34d6638",
        "body" : "Ah, sorry. Didn't look at the full context.",
        "createdAt" : "2020-06-06T21:07:22Z",
        "updatedAt" : "2020-06-08T19:22:19Z",
        "lastEditedBy" : "9efa1026-358a-4bae-b0b8-35fbd34d6638",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ba90809edec189a2c4662258ef6cadb9d9620b4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +323,327 @@  } else {\n    const len = handler.length;\n    const listeners = arrayClone(handler);\n    for (let i = 0; i < len; ++i) {\n      const result = ReflectApply(listeners[i], this, args);"
  },
  {
    "id" : "9db04a26-9cb5-449c-bdfb-45bd562df461",
    "prId" : 33774,
    "prUrl" : "https://github.com/nodejs/node/pull/33774#pullrequestreview-426349603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e84943c0-7303-48a3-b6f3-aa77c3473c77",
        "parentId" : null,
        "authorId" : "17d9604a-2679-4a1e-91a4-30e0a2891f0b",
        "body" : "Hi,\r\nIt's just curiosity, why don't support the length 0 and 1 of the array in the switch-case ?",
        "createdAt" : "2020-06-08T14:26:19Z",
        "updatedAt" : "2020-06-08T19:22:19Z",
        "lastEditedBy" : "17d9604a-2679-4a1e-91a4-30e0a2891f0b",
        "tags" : [
        ]
      },
      {
        "id" : "1b63aa82-a04d-4ca3-8a83-34c367fd37d4",
        "parentId" : "e84943c0-7303-48a3-b6f3-aa77c3473c77",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "Because those should never be the case when we have an array. Zero event handlers is represented by `undefined` and one event handler is stored by itself without an array.",
        "createdAt" : "2020-06-08T15:19:57Z",
        "updatedAt" : "2020-06-08T19:22:19Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ba90809edec189a2c4662258ef6cadb9d9620b4",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +604,608 @@  // which always used a simple for-loop\n  switch (arr.length) {\n    case 2: return [arr[0], arr[1]];\n    case 3: return [arr[0], arr[1], arr[2]];\n    case 4: return [arr[0], arr[1], arr[2], arr[3]];"
  }
]