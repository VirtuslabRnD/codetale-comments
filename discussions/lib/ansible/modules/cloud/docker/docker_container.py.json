[
  {
    "id" : "70600aa7-ab25-4afb-82d7-009df325f2f1",
    "prId" : 24234,
    "prUrl" : "https://github.com/ansible/ansible/pull/24234#pullrequestreview-41832018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da85fe6f-b2eb-4f0d-81fd-53bbed01d2cb",
        "parentId" : null,
        "authorId" : "9782e32a-7deb-420b-a5c0-6ba532c3bdac",
        "body" : "Would use a dict comprehension here:\r\n```\r\nreturn {key: str(value) for key, value in config_systctls.items()}\r\n```",
        "createdAt" : "2017-05-24T21:19:12Z",
        "updatedAt" : "2017-05-25T01:32:26Z",
        "lastEditedBy" : "9782e32a-7deb-420b-a5c0-6ba532c3bdac",
        "tags" : [
        ]
      },
      {
        "id" : "103a2294-22f4-4b29-b7dc-d103e0671347",
        "parentId" : "da85fe6f-b2eb-4f0d-81fd-53bbed01d2cb",
        "authorId" : "9782e32a-7deb-420b-a5c0-6ba532c3bdac",
        "body" : "My bad, I forgot that [dict comprehensions were added in Python 2.7](https://www.python.org/dev/peps/pep-0274/).  Feel free to ignore my suggestion.",
        "createdAt" : "2017-05-25T17:27:17Z",
        "updatedAt" : "2017-05-25T17:27:23Z",
        "lastEditedBy" : "9782e32a-7deb-420b-a5c0-6ba532c3bdac",
        "tags" : [
        ]
      },
      {
        "id" : "c4fa41fe-aaa8-45f1-93cc-583dd1705cd0",
        "parentId" : "da85fe6f-b2eb-4f0d-81fd-53bbed01d2cb",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "<nod>  I use this instead of a dict comprehension:\r\n``` python\r\nreturn dict((key, str(value)) for key, value in config_systctls.items())\r\n```\r\n\r\nIt's not more readable than the expanded for loop, though, so merging as is.",
        "createdAt" : "2017-06-02T17:10:22Z",
        "updatedAt" : "2017-06-02T17:10:22Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "7080738081381fc57b3ffe758eb2226baabdbe4e",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1672,1676 @@        if config_sysctls is None:\n            return None\n        result = dict()\n        for key, value in config_sysctls.items():\n            result[key] = str(value)"
  },
  {
    "id" : "185c370d-f87f-4239-9b4b-899bf93a7085",
    "prId" : 34547,
    "prUrl" : "https://github.com/ansible/ansible/pull/34547#pullrequestreview-133604161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b7053e4-8970-4c94-b878-8c5c53acf42b",
        "parentId" : null,
        "authorId" : "38f1a2ff-4f1a-4c3d-b78a-3bae3b91d930",
        "body" : "Please provide input sanity checking against the docker API version so that if an user attempts to use `init` and doesn't have a new enough version of the API, they don't get a stack trace but instead a proper ansible `fail_json` message.",
        "createdAt" : "2018-05-22T21:12:40Z",
        "updatedAt" : "2018-05-24T15:29:47Z",
        "lastEditedBy" : "38f1a2ff-4f1a-4c3d-b78a-3bae3b91d930",
        "tags" : [
        ]
      },
      {
        "id" : "4159f9c4-ff20-4955-bedf-2462b24f3b5d",
        "parentId" : "8b7053e4-8970-4c94-b878-8c5c53acf42b",
        "authorId" : "5f07c62b-8609-4b3c-8d9f-20d259681dc5",
        "body" : "@maxamillion \r\nThank you for your review.\r\nI have added the validation of docker API's version.",
        "createdAt" : "2018-05-24T15:48:30Z",
        "updatedAt" : "2018-05-24T15:48:30Z",
        "lastEditedBy" : "5f07c62b-8609-4b3c-8d9f-20d259681dc5",
        "tags" : [
        ]
      },
      {
        "id" : "360aebd8-f1cf-4f79-9058-45d4a614d1dc",
        "parentId" : "8b7053e4-8970-4c94-b878-8c5c53acf42b",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "@maxamillion @suzuki-shunsuke The validation check wasn't enough, as `init` is still passed on, which leads to an error (see #42162).",
        "createdAt" : "2018-07-01T07:13:15Z",
        "updatedAt" : "2018-07-01T07:13:16Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "0b28f901-df90-429f-a6a5-089898cc9e39",
        "parentId" : "8b7053e4-8970-4c94-b878-8c5c53acf42b",
        "authorId" : "5f07c62b-8609-4b3c-8d9f-20d259681dc5",
        "body" : "@felixfontein \r\nOh, I'm sorry.\r\nI understand what is wrong by seeing https://github.com/ansible/ansible/issues/42162#issuecomment-401587809 .",
        "createdAt" : "2018-07-02T12:26:34Z",
        "updatedAt" : "2018-07-02T12:26:34Z",
        "lastEditedBy" : "5f07c62b-8609-4b3c-8d9f-20d259681dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d120b04184a03733e86c182fcaaf52f879c2bb29",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +135,139 @@    description:\n      - Run an init inside the container that forwards signals and reaps processes.\n        This option requires Docker API 1.25+.\n    type: bool\n    default: 'no'"
  },
  {
    "id" : "4d1bc461-911e-4eec-a6e3-c0f61de5ca4f",
    "prId" : 43238,
    "prUrl" : "https://github.com/ansible/ansible/pull/43238#pullrequestreview-150219581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7a3a306-2192-41cd-a3d0-01622094b6e3",
        "parentId" : null,
        "authorId" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "body" : "If:\r\n1) This applies to all docker modules\r\n2) All docker modules use the docs_fragment\r\n\r\nTHEN:\r\nMaybe add to `lib/ansible/utils/module_docs_fragments/docker.py` rather than repeating in each module?",
        "createdAt" : "2018-08-28T11:01:01Z",
        "updatedAt" : "2018-08-28T11:01:13Z",
        "lastEditedBy" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "tags" : [
        ]
      },
      {
        "id" : "87c73f4e-d525-4684-8f4b-291e0340c29e",
        "parentId" : "b7a3a306-2192-41cd-a3d0-01622094b6e3",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "@gundalow It does not apply to all docker modules; only to the ones which support `docker-py < 2.0`.",
        "createdAt" : "2018-08-28T11:02:54Z",
        "updatedAt" : "2018-08-28T11:02:54Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "7e8090cb-7adc-4e30-9064-8f2a2a2904d1",
        "parentId" : "b7a3a306-2192-41cd-a3d0-01622094b6e3",
        "authorId" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "body" : "Thanks for clarifying",
        "createdAt" : "2018-08-28T16:53:39Z",
        "updatedAt" : "2018-08-28T16:53:40Z",
        "lastEditedBy" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "tags" : [
        ]
      }
    ],
    "commit" : "904795e56430320891cf7a8b52955fdb3eff50b6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +433,437 @@       For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to\n       install the C(docker) Python module. Note that both modules should I(not)\n       be installed at the same time. Also note that when both modules are installed\n       and one of them is uninstalled, the other might no longer function and a\n       reinstall of it is required.\""
  },
  {
    "id" : "2e789e4c-5c81-4528-ab35-42cffe291ecc",
    "prId" : 45905,
    "prUrl" : "https://github.com/ansible/ansible/pull/45905#pullrequestreview-157931276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8783f11e-f992-4cc9-981d-5df8e30fbb17",
        "parentId" : null,
        "authorId" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "body" : "I think `bv.get(key, None)` is enough?",
        "createdAt" : "2018-09-23T03:16:32Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "tags" : [
        ]
      },
      {
        "id" : "d860f478-9016-4966-aa3f-230c884533ca",
        "parentId" : "8783f11e-f992-4cc9-981d-5df8e30fbb17",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "No, since `av[key] = None` should force `bv[key] = None` and not allow `bv[key]` to be not defined. It should be that `_compare_dict_allow_more_present(a, b) and _compare_dict_allow_more_present(b, a)` is equivalent to `a == b`.\r\n\r\n(Otherwise, we would have to add a method which checks for dict equality, allowing `None` to be equivalent to not defined.)",
        "createdAt" : "2018-09-23T06:24:45Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "c8971ac4-7aff-487d-83fe-e25a2063617c",
        "parentId" : "8783f11e-f992-4cc9-981d-5df8e30fbb17",
        "authorId" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "body" : "Take `env` as an example, I thinks `KEY: null` means delete the env, not set the variable to `null`\r\n\r\nAnyway, this is a trivial problem if we have `strict` mode.",
        "createdAt" : "2018-09-23T07:19:16Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "tags" : [
        ]
      },
      {
        "id" : "928e2463-157f-43bd-b640-12e27c438f61",
        "parentId" : "8783f11e-f992-4cc9-981d-5df8e30fbb17",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Hmm, there is no definition what `KEY: null` should mean for `env`. There are only interpretions :) For me, `KEY: null` is not a valid value. Also, `docker` might die (return an error) if you pass `None` as the value of an environment variable (or it might ignore it). Allowing `null` / `None` would be a new feature anyway.",
        "createdAt" : "2018-09-23T07:32:33Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c8c98769771db85c8a99fb624692ed302328217",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +1283,1287 @@            if key not in bv:\n                return False\n            if bv[key] != value:\n                return False\n        return True"
  },
  {
    "id" : "1a3ae6da-e057-4e9e-9872-eb260ddb9a6f",
    "prId" : 45905,
    "prUrl" : "https://github.com/ansible/ansible/pull/45905#pullrequestreview-157936075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "parentId" : null,
        "authorId" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "body" : "I think this is overkilled if `devices` and `ulimits` are both lists of `str`",
        "createdAt" : "2018-09-23T03:23:58Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "tags" : [
        ]
      },
      {
        "id" : "40a7eaec-de64-45f1-a89d-5ee8e829999c",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Not really, see above.",
        "createdAt" : "2018-09-23T06:27:29Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "1bd93d1b-ebf3-4037-8ad8-64514178bd06",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "body" : "Ah, maybe `list(dict)` will be a more suitable type name for this.\r\n\r\nAnd we can add a shortcut for `len(a) == len(b)`, which I think will make the logic a bit clear, like this:\r\n```python\r\nif len(a) != len(b) and method == 'strict':\r\n   return False\r\nfor av in a:\r\n    for bv in b:\r\n       # the compare logic, no need to another iteration for bv in b and av in a",
        "createdAt" : "2018-09-23T07:27:26Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "tags" : [
        ]
      },
      {
        "id" : "b6af5d83-a240-46ea-8d38-01f92ca5844e",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Well, but it is not a list of dicts, but a set of dicts, since the order of the dicts does not matter (and actually *must* be ignored).\r\n\r\nThe shortcut won't work because the same entry could show up multiple times in the same list. (This probably will result in an error when creating a new container, but for checking an existing one this would be ok.) I'll add a comment explaining this.",
        "createdAt" : "2018-09-23T07:35:54Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "2f2eaefd-cd2b-4676-9aee-8089bd3d1219",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "body" : "IMO, if `a` has duplicates, leave the error handling to users, they should not do this. As the current implementation is more robust against this, seems no reason to simplify it.",
        "createdAt" : "2018-09-23T08:21:00Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "tags" : [
        ]
      },
      {
        "id" : "5e5fce5e-42ea-4278-9525-309c797e3160",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "body" : "Oh I don't thinks this is a set, if it is, we should use `set_a = set(a), set_b = set(b)` for comparison. If we can't do this, then this should be `list(dict)` and compared by list match.",
        "createdAt" : "2018-09-23T08:24:04Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "tags" : [
        ]
      },
      {
        "id" : "97c239de-154a-4569-9630-53132f20dd0e",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "body" : "And actually we can't do this, as `dict` is not hashable for `set`",
        "createdAt" : "2018-09-23T08:25:05Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "tags" : [
        ]
      },
      {
        "id" : "24c2c912-c1c8-4ff5-92df-fdad8eb0abd6",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "body" : "And this is not about the order, as we're comparing it in O(n^2), ordering does not matter here.",
        "createdAt" : "2018-09-23T08:27:29Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "tags" : [
        ]
      },
      {
        "id" : "5c90f813-df96-45b5-9189-9dc02e80f867",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Yep; the original version had `set_a = set(a)` etc., which I changed once I added tests for these options and noticed that it breaks ;)\r\n\r\nWe could also try to get rid of O(n^2), but that's more complicated and probably even slower, since there will almost never be cases where n is large enough to make a difference.",
        "createdAt" : "2018-09-23T09:11:07Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "41710516-1281-418b-a0c9-8981198e900b",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "body" : "So maybe `list(dict)` is a better match for the current implementation, and then we can use `len(a) == len(b)` shortcut safely.",
        "createdAt" : "2018-09-23T10:43:14Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "eb0d4d45-fc86-46d7-80ad-df935262d3f7",
        "tags" : [
        ]
      },
      {
        "id" : "983d8a49-482f-404a-939f-e6c625e979bd",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "But it is not a list, it is a set (conceptually), since the order doesn't matter.",
        "createdAt" : "2018-09-23T10:47:42Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "965efdd1-f00c-4dd5-bd02-f369687a00bc",
        "parentId" : "9fd30c50-a973-4fa6-a706-e8ac97e008bf",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "(In case that's what's confusing: I mean the mathematical concept of a set (https://en.wikipedia.org/wiki/Set_(mathematics)), not Python `set`s.)",
        "createdAt" : "2018-09-23T11:22:05Z",
        "updatedAt" : "2018-09-23T16:42:20Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c8c98769771db85c8a99fb624692ed302328217",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +1326,1330 @@            else:\n                return set_b >= set_a\n        elif compare['type'] == 'set(dict)':\n            for av in a:\n                found = False"
  }
]