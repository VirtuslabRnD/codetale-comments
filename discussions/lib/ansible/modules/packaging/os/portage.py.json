[
  {
    "id" : "4f88621c-88ed-442d-b321-0dcdbdba7fd0",
    "prId" : 36452,
    "prUrl" : "https://github.com/ansible/ansible/pull/36452#pullrequestreview-98586013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7abce520-1aac-4364-95fd-05f6d47d323c",
        "parentId" : null,
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "I'm afraid, this won't make it in 2.6, because it's a bugfix release and  the next one accepting features should be 2.7.",
        "createdAt" : "2018-02-20T19:14:35Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      },
      {
        "id" : "9580e283-bcad-45d9-9141-25e66c21ac61",
        "parentId" : "7abce520-1aac-4364-95fd-05f6d47d323c",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "Ok I can increase to 2.7, thanks",
        "createdAt" : "2018-02-20T19:26:09Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "85431382-b030-47f5-a496-9d2aa813be3f",
        "parentId" : "7abce520-1aac-4364-95fd-05f6d47d323c",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "Seems I may need to stick with 2.6 or something since CI is failing on 2.7.",
        "createdAt" : "2018-02-20T19:35:58Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "ed20c142-cd28-4d10-aad4-5c618e7c5803",
        "parentId" : "7abce520-1aac-4364-95fd-05f6d47d323c",
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "It will be allowed to merge this branch when devel will start accepting features for 2.7. It's feature-freeze now. I'm going to guess that might happen once we get 2.6 branch separated.",
        "createdAt" : "2018-02-22T13:28:09Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      },
      {
        "id" : "00f7df7b-7ebc-4982-ba9b-5ffa992a36e6",
        "parentId" : "7abce520-1aac-4364-95fd-05f6d47d323c",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "Ok so 2.7 is correct, and I should just ignore the CI failure till next iteration.",
        "createdAt" : "2018-02-22T14:36:34Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      }
    ],
    "commit" : "491d44a9629c38fff5eb67c1fc8bf51a38039701",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +180,184 @@    default: False\n    choices: [ \"yes\", \"no\" ]\n    version_added: 2.6\n\n  quietfail:"
  },
  {
    "id" : "c8f97117-ea5e-4ca3-a8b0-3686d5684eea",
    "prId" : 36452,
    "prUrl" : "https://github.com/ansible/ansible/pull/36452#pullrequestreview-98651172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8d923e3-2d06-4b29-bc24-11015c19b600",
        "parentId" : null,
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "How about `default=None`? Otherwise it might override `EMERGE_DEFAULT_OPTS` values, which would be weird.",
        "createdAt" : "2018-02-22T13:35:09Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      },
      {
        "id" : "08fbe6dd-a6c4-4983-90b4-3a77fa08bd03",
        "parentId" : "e8d923e3-2d06-4b29-bc24-11015c19b600",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "I was just being consistent. There are only 3 options that are set to None, all others False. Once merged I plan to switch some of these defaults to True. I feel like ansible should always default to quiet across the board, unless overridden. \r\n\r\nBut you make a good point. It maybe worth dropping all False to None. I think its that way based on [the code](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/packaging/os/portage.py#L324). Not familiar with conditionals, but I guess None is the same as False? If that is the case then its moot. Either way I believe it only adds these if set to True. If set to False they do not show up. Or should not per how I read the code.\r\n",
        "createdAt" : "2018-02-22T14:41:39Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "3662c505-0384-4645-95cd-13a0163fd71c",
        "parentId" : "e8d923e3-2d06-4b29-bc24-11015c19b600",
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "No, `None is not False` (yes, it's valid Python statement bwt :smiley:)\r\n\r\nBasically, `None` *value* **is casted to False**. *But* `if var` check is using a built-in pythonic protocol for casting bool value out of expression given.\r\nSo it does `bool(val)`, which internally does `var.__bool__()` call. And then it uses whatever this method returns for the `if` clause.\r\n\r\n`NoneType` (`type(None)`) is always falsy, `[]` is falsy, `0` is falsy, `{}` is falsy. `1` is truthy, `[0]` is truthy, `{'k': 'v'}` is truly.\r\nThe end-user can implement whatever logic they want in their classes for casting their instances into boolean.\r\n\r\nThat is why it's important to check for `val is None` or `val is not None`, sometimes you'll even want `val is False`. `None` is often used for default arg value for functions/methods, which then do `is None` check to ensure the user didn't override them (cause you cannot put mutable defaults in function definitions).",
        "createdAt" : "2018-02-22T15:56:27Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      },
      {
        "id" : "b2d76885-5c9b-49b4-a4e1-522e8c1a51a9",
        "parentId" : "e8d923e3-2d06-4b29-bc24-11015c19b600",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "Ok based on that it seems the conditional to add any flag requires it to be set to True, per the [code](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/packaging/os/portage.py#L324).\r\n```python\r\n    for flag, arg in emerge_flags.items():\r\n        if p[flag]:\r\n             args.append(arg)\r\n```\r\n\r\nIf I set it to None it would not be handled correctly. Or maybe ignored since its not True. Pretty sure that will only evaluate to true, if set to True.",
        "createdAt" : "2018-02-22T16:03:52Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "e98c3adb-2917-44b9-a607-3081ad4bb225",
        "parentId" : "e8d923e3-2d06-4b29-bc24-11015c19b600",
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "Yes, it will append flags with `True`, `1`, `1.0`, `y`, `n` (any string) values. And will skip `0`, `0.0`, `None`, `False`, `[]`, `{}`.",
        "createdAt" : "2018-02-22T16:24:57Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      },
      {
        "id" : "29ce0371-45bb-42c0-bdcd-0be875f87c81",
        "parentId" : "e8d923e3-2d06-4b29-bc24-11015c19b600",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "So having None vs False is moot for that stuff. Seems only remaining change is the version. I will correct and break CI",
        "createdAt" : "2018-02-22T16:41:58Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "0584a6bc-9a61-4728-a2f9-cc982bc6c5bb",
        "parentId" : "e8d923e3-2d06-4b29-bc24-11015c19b600",
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "Yes. We'll probably need to consider redesigning defaults separately. Out of scope now.",
        "createdAt" : "2018-02-22T17:01:27Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      },
      {
        "id" : "c8f07275-3657-4560-bf76-31a751e3ef34",
        "parentId" : "e8d923e3-2d06-4b29-bc24-11015c19b600",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "The module could likely use a few improvements. I am open to such. Not sure how many are using the module. It does not seem very popular, or its meeting alls needs/expectations no clue. Then again not sure many are interested in Gentoo these days...",
        "createdAt" : "2018-02-22T17:08:53Z",
        "updatedAt" : "2018-03-09T17:02:17Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      }
    ],
    "commit" : "491d44a9629c38fff5eb67c1fc8bf51a38039701",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +512,516 @@            jobs=dict(default=None, type='int'),\n            loadavg=dict(default=None, type='float'),\n            quietbuild=dict(default=False, type='bool'),\n            quietfail=dict(default=False, type='bool'),\n        ),"
  },
  {
    "id" : "c5c624b7-d66f-48cd-ab75-d2efaeccf3ae",
    "prId" : 55967,
    "prUrl" : "https://github.com/ansible/ansible/pull/55967#pullrequestreview-235740032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "965b3599-17de-4bba-af02-5c365f463832",
        "parentId" : null,
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "Changing the default would break the module for people relying on the current behavior.",
        "createdAt" : "2019-05-01T12:26:07Z",
        "updatedAt" : "2019-05-01T12:26:10Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      },
      {
        "id" : "52c6ad2d-bf2f-4066-80c9-f38fd7f5a23c",
        "parentId" : "965b3599-17de-4bba-af02-5c365f463832",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "@s-hertel can you confirm this causes breakage of existing behavior? Currently noreplace is broken, it does not work and has no effect either way. I cannot believe that anyone is relying on that broken behavior.\r\n\r\nThe main issue I can see here is for packaging updating, trying to update an installed package, and not being able to because of noreplace being set to true. I need to test that out to confirm. If it does not effect package upgrades, then there would be no change from current behavior. If it does, I can modify the code such that if upgrading, remove the noreplace flag or set it to no/false.\r\n\r\nYou have to set ```noreplace: no/false``` for the behavior to change with this modification. Otherwise it should function the same either way.",
        "createdAt" : "2019-05-01T16:58:14Z",
        "updatedAt" : "2019-05-01T16:58:14Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "328e6abb-2509-4fe6-97e1-0560fe63d3bb",
        "parentId" : "965b3599-17de-4bba-af02-5c365f463832",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "@s-hertel I have tested both ```state: latest``` and ```update: yes``` without having anything set for ```noreplace```, meaning it is using the new default of true ```noreplace=dict(default=True, type='bool')```, and still performing the package update.\r\n\r\nI am not able to replicate any breakage with this change. If nobody else can show how this change does break the module. Then, any breakage is theoretical and not factual.",
        "createdAt" : "2019-05-02T21:22:48Z",
        "updatedAt" : "2019-05-02T21:22:48Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "be40af59-943f-44d4-9399-d4f6fc0e3723",
        "parentId" : "965b3599-17de-4bba-af02-5c365f463832",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "By break, we mean that the result is different than current expectations and that breaks the contract with current users,  not that it causes an actual code failure.",
        "createdAt" : "2019-05-03T16:48:38Z",
        "updatedAt" : "2019-05-03T16:48:38Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "248e206d-3a2a-4f96-b3d2-c1f5f649be91",
        "parentId" : "965b3599-17de-4bba-af02-5c365f463832",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "@bcoca thanks, that sort of makes sense. However, I am confused with current expectations. This is a broken feature, a broken code aspect of the module. I have a hard time believing anyone is expecting this broken behavior. I think no one has experienced it, thus it was never reported as an issue. This really does not change anything from the user perspective.\r\n\r\nThis is fixing an actual broken feature, broken in code. I am not clear what these contractual expectations are from users.\r\n\r\nAlso for future reference, is there an actual contract or rules to follow regarding such? I am curious about this contract with users aspect. Thanks!",
        "createdAt" : "2019-05-03T17:08:02Z",
        "updatedAt" : "2019-05-03T17:08:02Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "3798a41b-70f3-4f81-93a0-7bf82de553cb",
        "parentId" : "965b3599-17de-4bba-af02-5c365f463832",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "I'm not that sure it is a broken feature, my expectation is closer to what you expressed, but i still don't see this as broken .. at most, misleading.\r\n\r\nAs for actual contract, no, nothing singed, it is an understanding that things don't change arbitrarily unless they are clearly a bug, to be honest, this is on the line for me.",
        "createdAt" : "2019-05-03T17:22:40Z",
        "updatedAt" : "2019-05-03T17:22:40Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "53ccc1eb-dedb-4dec-bfdc-fc977ec34c79",
        "parentId" : "965b3599-17de-4bba-af02-5c365f463832",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "- It is broken in the sense that there is no way to re-emerge/re-install an installed package, nor can such be forced. It simply cannot be done.\r\n- It is broken because the flag has no effect, you can set noreplace to either yes/true or no/false and it has no effect.\r\n\r\nThis is clearly a bug, one that has existed for a very long time. I can only assume people are not seeking to re-install an existing package often if ever. Only doing initial installs and upgrades via ```update: true/yes``` and/or ```state: latest``` If anyone did, they would quickly find out they cannot, and this issue would have come up a long time ago.\r\n\r\nIf you look at the original issue #55365 report testing expected behavior, it failed on several. It was already not meeting expectations. Thus, this change to fix the behavior to meet expectations and provide an actual way to re-emerge/re-install an existing package.\r\n\r\nAlso I set this to True in the module to meet current expectations. That way if someone is just checking to see say ```state: present``` or ```state: installed``` it would not change the behavior at all. I spent considerable time on this trying to figure out how to fix the issue without changing how the module functions in other uses.\r\n\r\nThe only other way is to introduce another variable, and have two that control if a package is merged or not. That did not seem ideal, required more code, and likely more chance of issue. Not to mention confusion to the end user, as they see two options for noreplace rather than one. ",
        "createdAt" : "2019-05-03T17:36:13Z",
        "updatedAt" : "2019-05-03T17:36:13Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "ced4868d-f630-4e6d-926b-a030230408c4",
        "parentId" : "965b3599-17de-4bba-af02-5c365f463832",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "Given this is a portage module for Gentoo, where software is built against what is installed. It is expected behavior to be able to re-emerge/re-install an existing package. You may need to in order to fix breakage from linking. Typically done via revdep-rebuild, but there can be various scenarios where a package is needed to be re-emerge/re-installed, that is not an upgrade.\r\n\r\nPresently there is no way to re-install an existing package. This is the default behavior of portage. ```emerge busybox``` Will emerge busybox no matter if it is installed or not.\r\n\r\nThis is presently impossible with the portage module. You can install it if not present, or upgrade/update it to the latest version. But that is all you can do. You can not re-emerge the package, despite it being the default for portage normally. This module prevents such entirely.\r\n\r\nThis PR and fix allows the module to function like portage. It allows the user to control if a package is re-emerge/re-installed or not, regardless if it is present or not. This change is the only way that one can perform such task via the portage module.",
        "createdAt" : "2019-05-03T17:44:33Z",
        "updatedAt" : "2019-05-03T17:44:33Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "2bbac69c-5419-4b9d-b43f-da0061efd8c1",
        "parentId" : "965b3599-17de-4bba-af02-5c365f463832",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "@wltjr consider that most users of this plugin deal with pre built binaries, it is rare to handle any number of Gentoo machines and have them all rebuild packages themselves (distcc cluster aside).\r\n\r\nI'm a Gentoo user also, so for my workstation, what you say makes all the sense in the world, i'm trying to balance the other perspective, of those that manage a fleet that install pre-built binaries. That said, I do lean towards your point of this being a bug. \r\n\r\nTo clarify, I had not read your original post on my first response, I was trying to clarify what the previous poster meant by 'breaking'.",
        "createdAt" : "2019-05-03T18:09:35Z",
        "updatedAt" : "2019-05-03T18:09:35Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "28e96eb2-35ea-4a55-87ad-c64d2fca6740",
        "parentId" : "965b3599-17de-4bba-af02-5c365f463832",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "@bcoca I also deal with pre-build binaries on my many systems, as anyone with a large number of Gentoo systems should. That is another scenario where you may need to re-emerge a package, if you re-built it on the build server and linked it to different stuff. You need to push out the new binary to other servers, or have them re-emerge the binary from the binhost.\r\n\r\nI am that other scenario you are describing. I maintain this module mostly for servers not workstations, though I do use ansible to keep my workstations maintained as well. That is why I wanted to test to ensure that this did not change the other uses. I believe I have tested most all scenarios. Thus far, I have yet to see anything negative or unwanted from this change. Given how broken it was before, I do not think the change will have any impact unless someone uses it, sets ```noreplace: no/false```. That is the only time anything will happen, and it will be a wanted effect if they are setting that option. But even if that is never set, it does not seem to change anything. I tried to test all scenarios.\r\n\r\nNo worries on the break clarification, I understand the differences on breaking from code or other perspectives. I believe I tried to address all and this change does not cause any breakage in code, function, or unwanted behavior. It simply fixes a broken feature, makes an option work that had no effect before.",
        "createdAt" : "2019-05-03T19:12:45Z",
        "updatedAt" : "2019-05-03T19:12:45Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      },
      {
        "id" : "7230511f-7ec9-4a5b-b095-5148dc5be65b",
        "parentId" : "965b3599-17de-4bba-af02-5c365f463832",
        "authorId" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "body" : "Anything left to review or change here? Or can we proceed? Thanks!",
        "createdAt" : "2019-05-09T18:03:44Z",
        "updatedAt" : "2019-05-09T18:03:45Z",
        "lastEditedBy" : "bcb152be-bd39-4dc4-8361-2395e6e8daaf",
        "tags" : [
        ]
      }
    ],
    "commit" : "257e977259389c6816d89dbd96c26dfd9fa94fae",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +473,477 @@            changed_use=dict(default=False, type='bool'),\n            oneshot=dict(default=False, type='bool'),\n            noreplace=dict(default=True, type='bool'),\n            nodeps=dict(default=False, type='bool'),\n            onlydeps=dict(default=False, type='bool'),"
  }
]