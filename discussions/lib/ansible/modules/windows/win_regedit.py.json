[
  {
    "id" : "0812e838-ccdc-47d5-96f9-389ac35760f7",
    "prId" : 26468,
    "prUrl" : "https://github.com/ansible/ansible/pull/26468#pullrequestreview-54544513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81ec5431-2955-47d1-8014-a635db6e9c26",
        "parentId" : null,
        "authorId" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "body" : "I would have preferred a more explicit removal of `name=(default)` for the removal of the default key. This is to me more confusing (because whether it is set to `yes` or `no` it will delete a key. So I would get rid of this option altogether.",
        "createdAt" : "2017-08-06T18:39:43Z",
        "updatedAt" : "2017-08-06T18:41:16Z",
        "lastEditedBy" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "tags" : [
        ]
      },
      {
        "id" : "052825c8-11b6-4e13-a7f9-d83aff44b843",
        "parentId" : "81ec5431-2955-47d1-8014-a635db6e9c26",
        "authorId" : "7c547162-2334-4e33-a627-e146840da9ec",
        "body" : "No, that was a fault of module originally, there are 2 types of `(default)` keys.\r\n1. By default every registry key has a `(default)` `REG_STRING` value, this can be set and unset\r\n2. You can actually create a new property called `(default)` in conjunction which can be more than just `REG_STRING`. In this case there are properties that are called `(default)`\r\n\r\nBecause of this, if a user explicitly set's `name=(default)` then the module assumes they want to have a key called `(default)` created/removed. If nothing is set in `name` then the module assumes it is referring to the default `(default)` key. Because of this there needs to be another parameter for when `state=absent` so the module knows whether to clear that default key or whether to delete the whole key itself.",
        "createdAt" : "2017-08-06T19:46:00Z",
        "updatedAt" : "2017-08-06T19:47:13Z",
        "lastEditedBy" : "7c547162-2334-4e33-a627-e146840da9ec",
        "tags" : [
        ]
      },
      {
        "id" : "b3d1b266-21c5-4c77-9da8-2b6b9bc55c03",
        "parentId" : "81ec5431-2955-47d1-8014-a635db6e9c26",
        "authorId" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "body" : "Yes, so what I am saying is to keep it simple, and if no name was provided (with `state=absent`), delete the path. If a `(default)` name was provided, remove that key (as in unsetting it, just as the registry editor is not showing an unset `(default)' key).\r\n\r\nSo you don't need the additional `delete_key` parameter, and it's actually as one would expect it to work. The `name` parameter was optional.",
        "createdAt" : "2017-08-06T21:18:35Z",
        "updatedAt" : "2017-08-06T21:18:35Z",
        "lastEditedBy" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "tags" : [
        ]
      },
      {
        "id" : "726b90a8-ea24-4179-ae19-0933dc886465",
        "parentId" : "81ec5431-2955-47d1-8014-a635db6e9c26",
        "authorId" : "7c547162-2334-4e33-a627-e146840da9ec",
        "body" : "Still won't work, there needs to be a way to differenciate between the `(Default)` property that is always there in every key and the `(Default)` property that a user creates manually. As you can see in the screenshot below there are 2 `(Default)` properties (top is the default, bottom is one I created).\r\n\r\n![image](https://user-images.githubusercontent.com/8462645/29007237-de4c8a0e-7b41-11e7-8b71-567b4ae0bb09.png)\r\n\r\nIf a user puts in `name: (Default)` how does it know which one to edit, in case when name is not defined it will use the key's `(Default)` and when name is defined then it will use the custom `(Default)` property.\r\n\r\n```\r\n- name: edit the key (Default) property\r\n  win_regedit:\r\n    path: HKCU:\\Test\r\n    data: a\r\n\r\n- name: edit a user defined (Default) property\r\n  win_regedit:\r\n    path: HKCU:\\Test\r\n    name: (Default)\r\n    data: a\r\n    datatype: string\r\n```\r\nThis unfortunately means if we continued with the way it was before there was no way for someone to differentiate between clearing the key's default value and removing the key entirely. This is why the `delete_key` option is now there, by default it is set to `true` so it works as before we just have another option.",
        "createdAt" : "2017-08-06T21:35:47Z",
        "updatedAt" : "2017-08-06T21:41:37Z",
        "lastEditedBy" : "7c547162-2334-4e33-a627-e146840da9ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "b88b8d8f0dcfa2aa55539c4d961b3e4c764db9c4",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +76,80 @@    choices: [ present, absent ]\n    default: present\n  delete_key:\n    description:\n    - When C(state) is 'absent' then this will delete the entire key."
  }
]