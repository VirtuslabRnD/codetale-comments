[
  {
    "id" : "b128e6ad-08de-41b5-89c6-49f498f63d1a",
    "prId" : 49796,
    "prUrl" : "https://github.com/ansible/ansible/pull/49796#pullrequestreview-202128710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "842c60bf-be8e-4ff6-a6d7-ca8b91f8fa7f",
        "parentId" : null,
        "authorId" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "body" : "How that supposed to be third there?",
        "createdAt" : "2019-02-11T13:49:46Z",
        "updatedAt" : "2019-02-11T13:59:54Z",
        "lastEditedBy" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "tags" : [
        ]
      },
      {
        "id" : "044ceafa-436a-4a3f-aca3-b25515632e6a",
        "parentId" : "842c60bf-be8e-4ff6-a6d7-ca8b91f8fa7f",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "I guess it should have been `insert: -3`... I'll change that.",
        "createdAt" : "2019-02-11T13:55:02Z",
        "updatedAt" : "2019-02-11T13:59:54Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "054a86fd-a8b4-4baa-b585-30ac9b57cdfc",
        "parentId" : "842c60bf-be8e-4ff6-a6d7-ca8b91f8fa7f",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Ah. No. `-1` is correct: this will add the new rule at the position where currently the second last IPv4 rule is (`insert: 0` would be position of last IPv4 rule, `insert: -1` the position of the second to last IPv4 rule), and since ufw will insert it before these two rules then, it will end up as the third to last.",
        "createdAt" : "2019-02-11T13:57:14Z",
        "updatedAt" : "2019-02-11T13:59:54Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "91f7134b-9b5c-4a7a-bb36-0b64998adde5",
        "parentId" : "842c60bf-be8e-4ff6-a6d7-ca8b91f8fa7f",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "I guess it needs more documentation, though ;-)",
        "createdAt" : "2019-02-11T13:57:25Z",
        "updatedAt" : "2019-02-11T13:59:54Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "667572a6-9865-46f7-9cfd-65b9c68d5d69",
        "parentId" : "842c60bf-be8e-4ff6-a6d7-ca8b91f8fa7f",
        "authorId" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "body" : "Third to last seems right here. But it is just confusing :)",
        "createdAt" : "2019-02-11T14:06:17Z",
        "updatedAt" : "2019-02-11T14:06:17Z",
        "lastEditedBy" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "tags" : [
        ]
      },
      {
        "id" : "e6203c87-16fb-4018-9f46-b829064c92d7",
        "parentId" : "842c60bf-be8e-4ff6-a6d7-ca8b91f8fa7f",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "It is indeed! I hope with the new comment (see 689ebf0a7b31083b17799c8452b25023260572da) it is clearer. I guess most people would simply need \"insert as first IPv6 command\" (that's what I need this for), for example to insert an ALLOW from-ip before some DENYs, and there it's much less confusing...",
        "createdAt" : "2019-02-11T14:20:17Z",
        "updatedAt" : "2019-02-11T14:20:17Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "689ebf0a7b31083b17799c8452b25023260572da",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +236,240 @@\n- name: Deny all IPv4 traffic to tcp port 20 on this host\n  # This should be the third to last IPv4 rule\n  # (insert: -1 addresses the second to last IPv4 rule;\n  #  so the new rule will be inserted before the second"
  },
  {
    "id" : "502a84f3-6d90-4446-af1a-27673b2416d4",
    "prId" : 49796,
    "prUrl" : "https://github.com/ansible/ansible/pull/49796#pullrequestreview-202127805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ea86963-491b-4b67-9723-b93be2dbfd19",
        "parentId" : null,
        "authorId" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "body" : "No defaults? Why?",
        "createdAt" : "2019-02-11T13:50:47Z",
        "updatedAt" : "2019-02-11T13:59:54Z",
        "lastEditedBy" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "tags" : [
        ]
      },
      {
        "id" : "18f6b4bf-817f-4f86-90f8-5b0c40213d6c",
        "parentId" : "5ea86963-491b-4b67-9723-b93be2dbfd19",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Depending on what `insert_relative_to` is, the default should be 0 or 1. So it's better to not have a default, and in case this is not specified, select a sensible default depending on context in the code.",
        "createdAt" : "2019-02-11T13:54:17Z",
        "updatedAt" : "2019-02-11T13:59:54Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "476654f9-1ef4-453f-bc96-b0d77e785d75",
        "parentId" : "5ea86963-491b-4b67-9723-b93be2dbfd19",
        "authorId" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "body" : "I see you point from detailed code review. But what if we have two variables?\r\n`insert`, type: `boolean` - defining do we need to insert the rule with default `false`\r\n`insert_position`, type: `int` - insert as a specified rule number with default `0`",
        "createdAt" : "2019-02-11T14:01:43Z",
        "updatedAt" : "2019-02-11T14:01:44Z",
        "lastEditedBy" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "tags" : [
        ]
      },
      {
        "id" : "80878d3b-9b8c-4749-b571-6bd1664375df",
        "parentId" : "5ea86963-491b-4b67-9723-b93be2dbfd19",
        "authorId" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "body" : "And if you are using `insert` together with `insert_relative_to` then `insert_position` will be calculated automatically",
        "createdAt" : "2019-02-11T14:04:28Z",
        "updatedAt" : "2019-02-11T14:04:28Z",
        "lastEditedBy" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "tags" : [
        ]
      },
      {
        "id" : "594952fc-dc36-4eaf-8771-cae69289d678",
        "parentId" : "5ea86963-491b-4b67-9723-b93be2dbfd19",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "The problem is that `insert` has already been there, so we cannot change its type to `bool` without breaking backwards compatibility.",
        "createdAt" : "2019-02-11T14:05:21Z",
        "updatedAt" : "2019-02-11T14:05:22Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "0b274b93-e20d-4a4b-8930-1ca6810e8e26",
        "parentId" : "5ea86963-491b-4b67-9723-b93be2dbfd19",
        "authorId" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "body" : "But it was string type?",
        "createdAt" : "2019-02-11T14:11:12Z",
        "updatedAt" : "2019-02-11T14:11:12Z",
        "lastEditedBy" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "tags" : [
        ]
      },
      {
        "id" : "12d84730-1872-4f41-858d-a0064258ee91",
        "parentId" : "5ea86963-491b-4b67-9723-b93be2dbfd19",
        "authorId" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "body" : "OK, I buy it. No other easy way to keep compatibility.",
        "createdAt" : "2019-02-11T14:15:52Z",
        "updatedAt" : "2019-02-11T14:15:52Z",
        "lastEditedBy" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "tags" : [
        ]
      },
      {
        "id" : "e7c2e559-0793-40e2-8711-66867ca6db16",
        "parentId" : "5ea86963-491b-4b67-9723-b93be2dbfd19",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "It was string type, but if you put in there anything else than an integer (in the correct range), `ufw` would die anyway. So forcing it to be of type `int` shouldn't break any valid use-case :)",
        "createdAt" : "2019-02-11T14:18:29Z",
        "updatedAt" : "2019-02-11T14:18:29Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "689ebf0a7b31083b17799c8452b25023260572da",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +55,59 @@      - Insert the corresponding rule as rule number NUM.\n      - Note that ufw numbers rules starting with 1.\n    type: int\n  insert_relative_to:\n    description:"
  },
  {
    "id" : "532497fe-dbdb-453f-8469-c25c4e57836a",
    "prId" : 49796,
    "prUrl" : "https://github.com/ansible/ansible/pull/49796#pullrequestreview-202114228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69821d70-1a61-438e-b401-cf3c296133ef",
        "parentId" : null,
        "authorId" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "body" : "Related to no default value...",
        "createdAt" : "2019-02-11T13:51:27Z",
        "updatedAt" : "2019-02-11T13:59:54Z",
        "lastEditedBy" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "tags" : [
        ]
      }
    ],
    "commit" : "689ebf0a7b31083b17799c8452b25023260572da",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +299,303 @@            delete=dict(type='bool', default=False),\n            route=dict(type='bool', default=False),\n            insert=dict(type='int'),\n            insert_relative_to=dict(choices=['zero', 'first-ipv4', 'last-ipv4', 'first-ipv6', 'last-ipv6'], default='zero'),\n            rule=dict(type='str', choices=['allow', 'deny', 'limit', 'reject']),"
  },
  {
    "id" : "70c72aa5-9680-4332-ab4b-265e622003af",
    "prId" : 49796,
    "prUrl" : "https://github.com/ansible/ansible/pull/49796#pullrequestreview-202118182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84f17b55-5356-4e1d-95d3-5a3249478c92",
        "parentId" : null,
        "authorId" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "body" : "Skipping insert?",
        "createdAt" : "2019-02-11T13:55:59Z",
        "updatedAt" : "2019-02-11T13:59:54Z",
        "lastEditedBy" : "e0821cf2-fc82-4ec6-8b28-72b8016ac45c",
        "tags" : [
        ]
      },
      {
        "id" : "7f1098ce-ff37-4675-9faf-3c57f1bb9d37",
        "parentId" : "84f17b55-5356-4e1d-95d3-5a3249478c92",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Without `insert`, `ufw` will just append the new rule.",
        "createdAt" : "2019-02-11T13:59:21Z",
        "updatedAt" : "2019-02-11T13:59:54Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "689ebf0a7b31083b17799c8452b25023260572da",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +500,504 @@                        # ufw does not like it when the insert number is larger than the\n                        # maximal rule number for IPv4/IPv6.\n                        insert_to = None\n                cmd.append([insert_to is not None, \"insert %s\" % insert_to])\n            cmd.append([value])"
  },
  {
    "id" : "15a744c7-e93f-4513-bd39-9dd5d7ab325f",
    "prId" : 49948,
    "prUrl" : "https://github.com/ansible/ansible/pull/49948#pullrequestreview-187970718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ea41c4c-8924-4534-8f44-23b574c66b1b",
        "parentId" : null,
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Ok, I really didn't expect the code to be *that* crazy. Could you replace this by\r\n```suggestion\r\n        cmd = list(map(itemgetter(-1), filter(itemgetter(0), cmd)))\r\n```\r\n? `module.run_command()` is totally capable of processing a list (instead of a string), and in fact, that's the WAY better method to call it. If you pass a string, that string first has to be parsed again (to be split as a list), and that list is then passed on...",
        "createdAt" : "2018-12-26T10:17:01Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "2baed80a-c9c0-4d76-9e45-37f92e3e94cb",
        "parentId" : "9ea41c4c-8924-4534-8f44-23b574c66b1b",
        "authorId" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "body" : "All right let's try :)",
        "createdAt" : "2018-12-26T10:27:00Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "tags" : [
        ]
      },
      {
        "id" : "8392bedb-6ccd-4e7d-baa8-be3bd987a64c",
        "parentId" : "9ea41c4c-8924-4534-8f44-23b574c66b1b",
        "authorId" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "body" : "I think this will change a lot the comportment of this function. There is commands with space mixed with command in list.\r\n\r\nI haven't time to execute full regression test on this module (and there is no unit test). For a first version, and to enable check mode, we should keep the quote in the `grep '^### tuple'`",
        "createdAt" : "2018-12-26T21:56:02Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "tags" : [
        ]
      },
      {
        "id" : "e23b3649-b1ea-4363-a20e-ac075c8fea44",
        "parentId" : "9ea41c4c-8924-4534-8f44-23b574c66b1b",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "True, you're right. It's definitely something we should clean up eventually, but for now let's keep it.",
        "createdAt" : "2018-12-26T22:39:49Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "1def6f9d4c6c399ba47c699eab33b4201ee842ba",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +296,300 @@\n    def execute(cmd, ignore_error=False):\n        cmd = ' '.join(map(itemgetter(-1), filter(itemgetter(0), cmd)))\n\n        cmds.append(cmd)"
  },
  {
    "id" : "15929792-f7c9-47c9-b1b9-734610e9723f",
    "prId" : 49948,
    "prUrl" : "https://github.com/ansible/ansible/pull/49948#pullrequestreview-190625513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cebdeb17-0905-401e-86b1-29d57acfce61",
        "parentId" : null,
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "The module currently doesn't return `changed == True` when called with `state == 'reloaded'` or `state == 'reset'` in non-check-mode. So check-mode should do the same and not set `changed = True` here.\r\n\r\n(Except if you fix the behavior for non-check-mode as well :) )",
        "createdAt" : "2018-12-30T12:16:37Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "34c40c31-a7cf-43b6-a895-84c48103a066",
        "parentId" : "cebdeb17-0905-401e-86b1-29d57acfce61",
        "authorId" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "body" : "state reloaded and reset should have changed at true. I'll see I can do :)",
        "createdAt" : "2018-12-30T15:07:41Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "tags" : [
        ]
      },
      {
        "id" : "0fe7f322-dab6-4d4d-85d4-26ed32568d90",
        "parentId" : "cebdeb17-0905-401e-86b1-29d57acfce61",
        "authorId" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "body" : "We have to define the comportment of the `changed` var for reload and reset (with or without check mode) :\r\n- about `reset`, I propose something like this : \r\n```\r\nif filter_line_that_not_start_with(\"### tuple\", rules_dry) != \"\"  : \r\n    changed = True\r\n```\r\n- about `reload`, I don't understand really this function. I propose to keep `changed = True` at each call.",
        "createdAt" : "2018-12-30T21:22:12Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "tags" : [
        ]
      },
      {
        "id" : "6ca6f474-043d-4fe8-9f4b-e8529bd4d605",
        "parentId" : "cebdeb17-0905-401e-86b1-29d57acfce61",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "I would even argue that `reset` and `reload` always return `changed == True`, similar to `systemctl reload / restart`.\r\n\r\n(I think `reload` simply recreates all ipfilter rules. That's probably useful if you screwed something up when editing them manually, or when you change some configuration, like enabling/disabling IPv6.)\r\n",
        "createdAt" : "2019-01-08T19:10:40Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "1fc030ee-0d4e-45bb-85cf-76351cbaf449",
        "parentId" : "cebdeb17-0905-401e-86b1-29d57acfce61",
        "authorId" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "body" : "That's simpler so that fine for me :)",
        "createdAt" : "2019-01-09T09:03:44Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "tags" : [
        ]
      }
    ],
    "commit" : "1def6f9d4c6c399ba47c699eab33b4201ee842ba",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +380,384 @@                ufw_enabled = pre_state.find(\" active\") != -1\n                if (value == 'disabled' and ufw_enabled) or (value == 'enabled' and not ufw_enabled):\n                    changed = True\n            else:\n                execute(cmd + [['-f'], [states[value]]])"
  },
  {
    "id" : "407fad3d-88d9-4fef-819c-66c6afe61b41",
    "prId" : 49948,
    "prUrl" : "https://github.com/ansible/ansible/pull/49948#pullrequestreview-188437389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d48460c-e9eb-4639-a036-135beb0928c3",
        "parentId" : null,
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Also, here, `changed` is only set in check-mode, but *not* in regular non-check-mode. Probably the best is to execute the check-mode code everytime, but in case of non-check-mode, also execute the real command.",
        "createdAt" : "2018-12-30T12:20:09Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "1def6f9d4c6c399ba47c699eab33b4201ee842ba",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +393,397 @@                        changed = True\n                elif current_on_off_value != \"off\":\n                    changed = True\n            else:\n                changed = True"
  },
  {
    "id" : "2f6868ed-ac24-4ee1-8539-ff2c464088b1",
    "prId" : 49948,
    "prUrl" : "https://github.com/ansible/ansible/pull/49948#pullrequestreview-191884973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ad1db49-4cf0-4bbb-8fd7-e53e58582205",
        "parentId" : null,
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Same problem with check mode here.",
        "createdAt" : "2018-12-30T12:20:20Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "0164a2d8-fcf7-4c3e-a243-015e951b9772",
        "parentId" : "9ad1db49-4cf0-4bbb-8fd7-e53e58582205",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Actually, no, this one works.\r\n\r\n(I did a mistake while testing; I'm currently adding more tests, you'll see the results soon. They will also contain tests for check mode, even though right now many of them are commented out because they give the wrong result...)",
        "createdAt" : "2018-12-30T12:32:50Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "3bd3e1b8-9aef-430f-a75b-09b5007b312d",
        "parentId" : "9ad1db49-4cf0-4bbb-8fd7-e53e58582205",
        "authorId" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "body" : "I saw your tests with docker, are they easy to execute ?",
        "createdAt" : "2018-12-30T21:02:10Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "tags" : [
        ]
      },
      {
        "id" : "afa52c07-09bd-4abc-baaf-a586d92e8103",
        "parentId" : "9ad1db49-4cf0-4bbb-8fd7-e53e58582205",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Unfortunately `ufw` doesn't seem to work in docker containers, so you'd have to run it on your own machine, or in some VM.\r\n\r\nI've put the following playbook (`run-tests-locally.yml`) into `test/integration/targets/ufw/` in my Ansible dev tree; executing it with `-b -K` (so it asks for `sudo` password) runs the test on localhost:\r\n```.yaml\r\n---\r\n# Run with -b -K arguments to ansible-playbook!\r\n- hosts: localhost\r\n  tasks:\r\n  # Run the tests\r\n  - block:\r\n    - include_tasks: tasks/run-test.yml\r\n      with_fileglob:\r\n      - \"tasks/tests/*.yml\"\r\n    vars:\r\n      role_path: '.'\r\n    always:\r\n    - name: Reset ufw to factory defaults\r\n      ufw:\r\n        state: reset\r\n    - name: Enable ufw (with factory defaults)\r\n      ufw:\r\n        state: enabled\r\n```\r\n(You can also use `ansible-test` to run the tests, but I prefer this lightweight playbook, in particular since the docker feature of `ansible-test` is useless for this test since it doesn't work with docker containers...)\r\n\r\nI don't have an important firewall config on my machine, so after `reset` and `enabled` it's back to the state I need. Depending on your firewall config and your network / services running on your machine, you don't want to run this on your local machine... :)",
        "createdAt" : "2019-01-08T19:08:15Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "b0e6778a-faa8-4597-bf9a-df0e1b229037",
        "parentId" : "9ad1db49-4cf0-4bbb-8fd7-e53e58582205",
        "authorId" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "body" : "Did you manage to cancel the locale ?  \r\n\r\nBy the way, I think that `LC_ALL=C` is the way to reset locale to default. ( see https://unix.stackexchange.com/questions/87745/what-does-lc-all-c-do)",
        "createdAt" : "2019-01-11T06:40:04Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "tags" : [
        ]
      },
      {
        "id" : "504937cb-fa3c-468f-9cf6-d75be4442c76",
        "parentId" : "9ad1db49-4cf0-4bbb-8fd7-e53e58582205",
        "authorId" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "body" : "In my future push, I added to your shell call :\r\n```\r\nenvironment:\r\n    LC_ALL: C\r\n```",
        "createdAt" : "2019-01-11T12:42:03Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "f20bb720-ab14-451d-a865-966ec6a09a33",
        "tags" : [
        ]
      },
      {
        "id" : "3d97679a-89e7-47fd-801d-9da3f26b4cd2",
        "parentId" : "9ad1db49-4cf0-4bbb-8fd7-e53e58582205",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "I'm using `en_US.UTF-8` as my default locale, so I usually don't have problems :) (I gave up using localized OS versions a long time ago, the strange and sometimes half-missing translations kept annoying me too much ;) )",
        "createdAt" : "2019-01-11T22:06:07Z",
        "updatedAt" : "2019-02-09T08:58:50Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "1def6f9d4c6c399ba47c699eab33b4201ee842ba",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +414,418 @@                    changed = True\n            else:\n                execute(cmd + [[command], [value], [params['direction']]])\n\n        elif command == 'rule':"
  },
  {
    "id" : "572cce72-22a3-49d4-88d2-7d602c45f329",
    "prId" : 65382,
    "prUrl" : "https://github.com/ansible/ansible/pull/65382#pullrequestreview-324902634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8006e548-6f01-4d1b-9e5c-176e0a525b5a",
        "parentId" : null,
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "You need two more entries `['interface', 'interface_in']` and `['interface', 'interface_out']`.",
        "createdAt" : "2019-11-30T16:45:33Z",
        "updatedAt" : "2019-11-30T18:08:04Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "48906532-2087-46fe-8ddc-120b961dd863",
        "parentId" : "8006e548-6f01-4d1b-9e5c-176e0a525b5a",
        "authorId" : "d0732eec-c190-4e0e-b600-2a6473973ed5",
        "body" : "Is that required even though `interface` depends on `direction`?\r\n\r\nhttps://github.com/ansible/ansible/blob/0d34a2eceea9178553e23f53ed24ba58e3722833/lib/ansible/modules/system/ufw.py#L332-L334\r\n\r\nI couldn't find much documentation on `required_by` other than a one-sentence description in `developing_modules_general_windows.rst`, but my interpretation is that an error will always be raised if the param in the key is given without the param(s) in the value?  If not I'll fix it.\r\n\r\nThanks for the review!",
        "createdAt" : "2019-11-30T17:10:06Z",
        "updatedAt" : "2019-11-30T18:08:04Z",
        "lastEditedBy" : "d0732eec-c190-4e0e-b600-2a6473973ed5",
        "tags" : [
        ]
      },
      {
        "id" : "9a448e7e-e64a-4b3c-b055-8acc6bc87501",
        "parentId" : "8006e548-6f01-4d1b-9e5c-176e0a525b5a",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "You are right, they are not required because of that. Also, `required_by` works as you describe (I checked its implementation to be sure: https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/common/validation.py#L133-L166). But maybe adding a comment that `required_if` implies that `interface` is also mutually exclusive to both `interface_in` and `interface_out` would probably help future readers as well :)",
        "createdAt" : "2019-11-30T17:30:02Z",
        "updatedAt" : "2019-11-30T18:08:04Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "86ed2c1d-dc03-4f71-8eab-57f2c3bda23c",
        "parentId" : "8006e548-6f01-4d1b-9e5c-176e0a525b5a",
        "authorId" : "d0732eec-c190-4e0e-b600-2a6473973ed5",
        "body" : "Done!  I also added a note about exclusivity to the module documentation for `interface` (it was already there for `direction`).",
        "createdAt" : "2019-11-30T18:08:21Z",
        "updatedAt" : "2019-11-30T18:08:21Z",
        "lastEditedBy" : "d0732eec-c190-4e0e-b600-2a6473973ed5",
        "tags" : [
        ]
      }
    ],
    "commit" : "95c1d84e42be94ff7e120ca82fc7ba30d0629960",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +353,357 @@            # Mutual exclusivity with `interface` implied by `required_by`.\n            ['direction', 'interface_in'],\n            ['direction', 'interface_out'],\n        ],\n        required_one_of=([command_keys]),"
  }
]