[
  {
    "id" : "6dc84eae-c0e1-4b48-8d75-6250f17effab",
    "prId" : 21107,
    "prUrl" : "https://github.com/ansible/ansible/pull/21107#pullrequestreview-21979669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96ea61da-0e4c-4360-9d9e-0906ad4946c5",
        "parentId" : null,
        "authorId" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "body" : "Please use multi line yaml with a `- name:`\r\n\r\nPlease see http://docs.ansible.com/ansible/dev_guide/developing_modules_documenting.html#examples-block for details",
        "createdAt" : "2017-02-15T11:42:46Z",
        "updatedAt" : "2017-02-16T01:18:31Z",
        "lastEditedBy" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae3629a797ee05d2f5ca856a5666b16023b0677d",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +90,94 @@Tasks: The following are examples of using the module cnos_vlan. These are written in the main.yml file of the tasks directory.\n---\n- name: Test Vlan - Create a vlan, name it\n  cnos_vlan:\n      host: \"{{ inventory_hostname }}\""
  },
  {
    "id" : "f9a8c04a-15c7-4de6-b7da-2905a7a73b9c",
    "prId" : 42500,
    "prUrl" : "https://github.com/ansible/ansible/pull/42500#pullrequestreview-136875137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cab04a5-22e5-478c-9d7c-a9273f93b7e0",
        "parentId" : null,
        "authorId" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "body" : "This _should_ be unnecessary, assuming you have added all applicable error responses to `terminal_stderr_re` in the terminal plugin. `network_cli` uses those values to automatically determine if an error has occurred and report the error message for you.",
        "createdAt" : "2018-07-12T13:49:34Z",
        "updatedAt" : "2018-07-18T12:47:01Z",
        "lastEditedBy" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "tags" : [
        ]
      },
      {
        "id" : "257c514c-a5fc-4409-9804-872076e8c885",
        "parentId" : "4cab04a5-22e5-478c-9d7c-a9273f93b7e0",
        "authorId" : "274c7d77-be5e-4b51-8b54-c58e1df5d726",
        "body" : "The legacy code is in the style of an NMS system we have. Here we have command-rules file and error code file in utils. Let me explain, Suppose a person inputs vlan id as 5000 whose upper range  is 4095. This value is checked against a rule file pertaining to the type of device and the error is thrown upfront to him as Error Code and String. So CLI wont get executed to get error and display it to user.  Input validations are done against type, range and value of the data inputs.  Still device may go through errors depending on some original settings prevalent there. Such cases only will come in  terminal_stderr_re. Based on the present \"Pro-active\" style adopted in the code, this method is required. In the legacy code, these errors are shown not only in screen, but in file too ",
        "createdAt" : "2018-07-13T00:37:49Z",
        "updatedAt" : "2018-07-18T12:47:01Z",
        "lastEditedBy" : "274c7d77-be5e-4b51-8b54-c58e1df5d726",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e12e54c1902f684599fc8f9d7058abf5197baad",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +229,233 @@\n    # need to add logic to check when changes occur or not\n    errorMsg = cnos.checkOutputForError(output)\n    if(errorMsg is None):\n        module.exit_json(changed=True,"
  }
]