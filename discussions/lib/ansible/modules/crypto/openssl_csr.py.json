[
  {
    "id" : "c7f5fef5-030c-4e66-92a6-a9ff3f43073e",
    "prId" : 27281,
    "prUrl" : "https://github.com/ansible/ansible/pull/27281#pullrequestreview-52387430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec411a99-eb68-4ec0-aaa5-68b80bfbae99",
        "parentId" : null,
        "authorId" : "f65394e6-7239-422a-9af5-c3575a283846",
        "body" : "Although to mention that it will `verify()` the privatekey it has been generated with.",
        "createdAt" : "2017-07-26T14:57:26Z",
        "updatedAt" : "2017-07-28T14:41:21Z",
        "lastEditedBy" : "f65394e6-7239-422a-9af5-c3575a283846",
        "tags" : [
        ]
      }
    ],
    "commit" : "05870c2bf9b30e15165f355937daf68e25b3fb96",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +127,131 @@\nnotes:\n    - \"If the certificate signing request already exists it will be checked whether subjectAltName,\n       keyUsage and extendedKeyUsage only contain the requested values and if the request was signed\n       by the given private key\""
  },
  {
    "id" : "d3f93f54-c30a-483f-94dc-1427084d7421",
    "prId" : 27281,
    "prUrl" : "https://github.com/ansible/ansible/pull/27281#pullrequestreview-52826022",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d267947-81df-4bc8-bccc-67d0dcf8ae2e",
        "parentId" : null,
        "authorId" : "f65394e6-7239-422a-9af5-c3575a283846",
        "body" : "Not sure I understand the `self.privatekey`` here.\r\n\r\nI'd say it belongs circa l. 367 within the `def _check_signature()` method as this is the only place where it is need.",
        "createdAt" : "2017-07-26T15:04:18Z",
        "updatedAt" : "2017-07-28T14:41:21Z",
        "lastEditedBy" : "f65394e6-7239-422a-9af5-c3575a283846",
        "tags" : [
        ]
      },
      {
        "id" : "12771eeb-5a15-4569-9cb2-9426664918b5",
        "parentId" : "1d267947-81df-4bc8-bccc-67d0dcf8ae2e",
        "authorId" : "94172bd7-17ef-4849-afe8-65bc55e1399e",
        "body" : "No it is also needed when signing the certificate request (see L289) and i think it is ugly to open the private key twice. Opening it in __init__ is of course a very bad idea so this is actually the only place where i can be sure that the key gets opened before an existing CSR gets checked or a new one is signed.",
        "createdAt" : "2017-07-26T15:39:00Z",
        "updatedAt" : "2017-07-28T14:41:21Z",
        "lastEditedBy" : "94172bd7-17ef-4849-afe8-65bc55e1399e",
        "tags" : [
        ]
      },
      {
        "id" : "0abba964-d77a-4251-9d56-b3c73acb2ba2",
        "parentId" : "1d267947-81df-4bc8-bccc-67d0dcf8ae2e",
        "authorId" : "f65394e6-7239-422a-9af5-c3575a283846",
        "body" : "Fair engough. Then, if I haven't overlooked anything, there is no need to pass `privatekey` to `_check_signature()` as you can call `csr.verify(self.privatekey)` directly.",
        "createdAt" : "2017-07-27T07:25:23Z",
        "updatedAt" : "2017-07-28T14:41:21Z",
        "lastEditedBy" : "f65394e6-7239-422a-9af5-c3575a283846",
        "tags" : [
        ]
      },
      {
        "id" : "cd86527c-e565-458a-ba15-b83f16182bc0",
        "parentId" : "1d267947-81df-4bc8-bccc-67d0dcf8ae2e",
        "authorId" : "94172bd7-17ef-4849-afe8-65bc55e1399e",
        "body" : "No i can't because `_check_signature` as all the other _check functions is no member function of the class",
        "createdAt" : "2017-07-27T21:28:18Z",
        "updatedAt" : "2017-07-28T14:41:21Z",
        "lastEditedBy" : "94172bd7-17ef-4849-afe8-65bc55e1399e",
        "tags" : [
        ]
      },
      {
        "id" : "d5634de0-1c2d-4a53-becd-07c4441ac3d6",
        "parentId" : "1d267947-81df-4bc8-bccc-67d0dcf8ae2e",
        "authorId" : "94172bd7-17ef-4849-afe8-65bc55e1399e",
        "body" : "...which is wrong of course, because the _check functions are closures. Stupid me... Sorry for the noise!",
        "createdAt" : "2017-07-28T01:26:16Z",
        "updatedAt" : "2017-07-28T14:41:21Z",
        "lastEditedBy" : "94172bd7-17ef-4849-afe8-65bc55e1399e",
        "tags" : [
        ]
      }
    ],
    "commit" : "05870c2bf9b30e15165f355937daf68e25b3fb96",
    "line" : 221,
    "diffHunk" : "@@ -1,1 +313,317 @@        state_and_perms = super(CertificateSigningRequest, self).check(module, perms_required)\n\n        self.privatekey = crypto_utils.load_privatekey(self.privatekey_path, self.privatekey_passphrase)\n\n        def _check_subject(csr):"
  },
  {
    "id" : "60b92618-49b9-40da-a3bf-40fce52c3ae2",
    "prId" : 27281,
    "prUrl" : "https://github.com/ansible/ansible/pull/27281#pullrequestreview-52796435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2471e19-0506-4b78-9ca5-a5a20e51d95c",
        "parentId" : null,
        "authorId" : "f65394e6-7239-422a-9af5-c3575a283846",
        "body" : "This check doesn't work as-is and raises issues when running the following playbook two times in a row:\r\n\r\n```\r\n---\r\n- hosts: localhost\r\n  tasks:\r\n    - openssl_privatekey:\r\n        path: /tmp/private.key\r\n\r\n    - openssl_csr:\r\n        path: /tmp/csr.csr\r\n        privatekey_path: /tmp/private.key                                                                                                                                                      \r\n        commonName: www.ansible.com\r\n```\r\nThis is due to the fact thatthe current code relies on `expected` being an array when it could be actually None, hence raising:\r\n\r\n```\r\nTypeError: 'NoneType' object is not iterable\r\n```\r\n\r\nHere is an alternative implentation that did what was expected, feel free to modify adapt/modify/get ideas from it:\r\n\r\n```\r\nusages_ext = [str(ext) for ext in extensions if ext.get_short_name() == extName]\r\n\r\nif (not usages_ext and expected) or (usages_ext and not expected):\r\n    return False\r\nelif not usages_ext and not expected:\r\n    return True\r\nelse:\r\n    current = [usage.strip() for usage in usages_ext[0].split(',')]\r\n    expected = [long[usage] for usage in expected]\r\n    return current == expected\r\n```",
        "createdAt" : "2017-07-27T07:23:44Z",
        "updatedAt" : "2017-07-28T14:41:21Z",
        "lastEditedBy" : "f65394e6-7239-422a-9af5-c3575a283846",
        "tags" : [
        ]
      },
      {
        "id" : "5e0bf087-4772-4dc4-9c4e-3dc5e2061753",
        "parentId" : "b2471e19-0506-4b78-9ca5-a5a20e51d95c",
        "authorId" : "94172bd7-17ef-4849-afe8-65bc55e1399e",
        "body" : "I more or less used your proposed check function. It is indeed much nicer than my version.\r\nI only had to slightly change the list comprehension for `expected`. The reason for this is that the user supplied value in `expected` might already be the long version of the usage name. Openssl accepts both the long and the short version when creating the CSR but will always returns the long version. For this reason i need to look up the long name for usages where we got the short name from the user.",
        "createdAt" : "2017-07-27T21:48:55Z",
        "updatedAt" : "2017-07-28T14:41:21Z",
        "lastEditedBy" : "94172bd7-17ef-4849-afe8-65bc55e1399e",
        "tags" : [
        ]
      }
    ],
    "commit" : "05870c2bf9b30e15165f355937daf68e25b3fb96",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +338,342 @@            return True\n\n        def _check_keyUsage_(extensions, extName, expected, long):\n            usages_ext = [str(ext) for ext in extensions if ext.get_short_name() == extName]\n            if (not usages_ext and expected) or (usages_ext and not expected):"
  },
  {
    "id" : "3c348afb-cd92-4587-8f35-622cf4dabe3a",
    "prId" : 27281,
    "prUrl" : "https://github.com/ansible/ansible/pull/27281#pullrequestreview-52867984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29f54de2-6003-48a0-8f09-1cf5f2e8f44e",
        "parentId" : null,
        "authorId" : "f65394e6-7239-422a-9af5-c3575a283846",
        "body" : "Can you updated the RETURN documentation to:\r\n\r\n  * s/csr/filename\r\n  * add `keyUsage` and `extendedUsage`",
        "createdAt" : "2017-07-28T08:09:19Z",
        "updatedAt" : "2017-07-28T14:41:21Z",
        "lastEditedBy" : "f65394e6-7239-422a-9af5-c3575a283846",
        "tags" : [
        ]
      }
    ],
    "commit" : "05870c2bf9b30e15165f355937daf68e25b3fb96",
    "line" : 286,
    "diffHunk" : "@@ -1,1 +376,380 @@\n        result = {\n            'privatekey': self.privatekey_path,\n            'filename': self.path,\n            'subject': self.subject,"
  },
  {
    "id" : "03e88a25-156d-4003-b2fc-725a46e3f37a",
    "prId" : 30338,
    "prUrl" : "https://github.com/ansible/ansible/pull/30338#pullrequestreview-82817742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc3fdbf5-b417-4cec-810c-37cbfda1df59",
        "parentId" : null,
        "authorId" : "f65394e6-7239-422a-9af5-c3575a283846",
        "body" : "Is it accepted that a user specifies various `commonName` field ?\r\n\r\nIf so, the following task become wrong:\r\n\r\n```\r\n- openssl_csr:\r\n    path: /path/to/csr\r\n    privatekey_path: /path/to/pkey\r\n    commonName: www.toto.com\r\n    subject:\r\n      comonName: www.toto2.com\r\n```\r\nWhat is the supposed output of `subjectAltName` in this case?\r\n\r\n  * `DNS:www.toto.com`\r\n  * `DNS:www.toto2.com`\r\n  * `DNS:www.toto.com,DNS:www.toto2.com`\r\n\r\nCurrently Number 1happens, if this case shouldn't happen maybe a warning should be raised. What do you think?\r\n",
        "createdAt" : "2017-12-07T11:18:38Z",
        "updatedAt" : "2017-12-07T13:31:04Z",
        "lastEditedBy" : "f65394e6-7239-422a-9af5-c3575a283846",
        "tags" : [
        ]
      },
      {
        "id" : "c18ff520-9624-428c-9153-4b02d9bcbc04",
        "parentId" : "bc3fdbf5-b417-4cec-810c-37cbfda1df59",
        "authorId" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "body" : "I'm a bit unsure. IMHO I'd just deprecate the fields in the module that are part of `subject`, but I wasn't sure how to best go forward with this, since it would break the current API.\r\n\r\nI agree that there could be a warning if there are multiple fields and only one is chosen.\r\n\r\nPinging @cpointner ",
        "createdAt" : "2017-12-07T11:57:20Z",
        "updatedAt" : "2017-12-07T13:31:04Z",
        "lastEditedBy" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "tags" : [
        ]
      },
      {
        "id" : "8703789f-cbba-4d43-9063-b10228061afc",
        "parentId" : "bc3fdbf5-b417-4cec-810c-37cbfda1df59",
        "authorId" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "body" : "Ok, cleared this one up: Certificates without SANs are deprecated for a LONG time already:\r\n\r\n\"   If a subjectAltName extension of type dNSName is present, that MUST\r\n   be used as the identity. Otherwise, the (most specific) Common Name\r\n   field in the Subject field of the certificate MUST be used. Although\r\n   the use of the Common Name is existing practice, it is deprecated and\r\n   Certification Authorities are encouraged to use the dNSName instead.\"\r\n\r\nhttps://tools.ietf.org/html/rfc2818#section-3.1 paragraph 4\r\n\r\nSee also the discussion at https://www.reddit.com/r/sysadmin/comments/677hep/chrome_58_not_supporting_self_signed_certificates/, https://www.chromestatus.com/feature/4981025180483584 and https://groups.google.com/a/chromium.org/forum/#!topic/security-dev/IGT2fLJrAeo for example.",
        "createdAt" : "2017-12-12T12:46:46Z",
        "updatedAt" : "2017-12-12T12:48:26Z",
        "lastEditedBy" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccf63f5d8ca649e1e28fa7e4043187ddc0fe2987",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +305,309 @@        if not self.subjectAltName:\n            for sub in self.subject:\n                if OpenSSL._util.lib.OBJ_txt2nid(to_bytes(sub[0])) == 13:  # 13 is the NID for \"commonName\"\n                    self.subjectAltName = ['DNS:%s' % sub[1]]\n                    break"
  },
  {
    "id" : "f128f702-2e50-4041-9bb7-b448f66bdbb6",
    "prId" : 32632,
    "prUrl" : "https://github.com/ansible/ansible/pull/32632#pullrequestreview-74819153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a37b851c-6965-422f-9852-022d79140cf5",
        "parentId" : null,
        "authorId" : "96aeecbb-c275-402c-b904-a795c82efb48",
        "body" : "Would it be helpful if we provide user available types of basic constraints ? ",
        "createdAt" : "2017-11-07T15:17:01Z",
        "updatedAt" : "2017-11-28T16:14:52Z",
        "lastEditedBy" : "96aeecbb-c275-402c-b904-a795c82efb48",
        "tags" : [
        ]
      },
      {
        "id" : "78bdf51b-e127-42e1-8db1-8ef7117e4891",
        "parentId" : "a37b851c-6965-422f-9852-022d79140cf5",
        "authorId" : "0e28b588-4137-48f1-8040-bb2cde473e74",
        "body" : "None of the other extension apis do this, it's also not entirely clear to me what constraints are supported.",
        "createdAt" : "2017-11-07T15:47:29Z",
        "updatedAt" : "2017-11-28T16:14:52Z",
        "lastEditedBy" : "0e28b588-4137-48f1-8040-bb2cde473e74",
        "tags" : [
        ]
      },
      {
        "id" : "7cc720ac-1a61-42de-8e19-0ab44f0ea42c",
        "parentId" : "a37b851c-6965-422f-9852-022d79140cf5",
        "authorId" : "96aeecbb-c275-402c-b904-a795c82efb48",
        "body" : "AFAIK, `critical,CA:TRUE, pathlen:0` can be included in example.",
        "createdAt" : "2017-11-07T16:27:12Z",
        "updatedAt" : "2017-11-28T16:14:52Z",
        "lastEditedBy" : "96aeecbb-c275-402c-b904-a795c82efb48",
        "tags" : [
        ]
      },
      {
        "id" : "7aa4ea8a-f95f-4e59-ad70-f6394d33f94a",
        "parentId" : "a37b851c-6965-422f-9852-022d79140cf5",
        "authorId" : "0e28b588-4137-48f1-8040-bb2cde473e74",
        "body" : "I checked the [RFC](https://tools.ietf.org/html/rfc5280), and I think while `critical` is technically supported, it's not recommended for basicConstraints like it is for (`extended`)`keyUsage`. `critical` should also be set like `extendedKeyUsage_critical` and `keyUsage_critical`.\r\n\r\nI also don't know if `pathlen` is a valid option. The RFC shows `pathLenConstraint`, but the RFC also doesn't necessarily match OpenSSL's behaviour and specifications: for example the RFC shows `cA`, but OpenSSL requires `CA`.",
        "createdAt" : "2017-11-07T16:33:58Z",
        "updatedAt" : "2017-11-28T16:14:52Z",
        "lastEditedBy" : "0e28b588-4137-48f1-8040-bb2cde473e74",
        "tags" : [
        ]
      }
    ],
    "commit" : "55806b0b262700ea287421af66ccfc984d39f755",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +451,455 @@            extendedKeyUsage=dict(aliases=['extKeyUsage', 'extended_key_usage'], type='list'),\n            extendedKeyUsage_critical=dict(aliases=['extKeyUsage_critical', 'extended_key_usage_critical'], default=False, type='bool'),\n            basicConstraints=dict(aliases=['basic_constraints'], type='list'),\n            basicConstraints_critical=dict(aliases=['basic_constraints_critical'], default=False, type='bool'),\n        ),"
  },
  {
    "id" : "d7a94350-351c-461f-bcbf-f133ea330816",
    "prId" : 32632,
    "prUrl" : "https://github.com/ansible/ansible/pull/32632#pullrequestreview-75885250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "422243bf-ac77-4027-bee3-88feb25732a5",
        "parentId" : null,
        "authorId" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "body" : "this block should be removed",
        "createdAt" : "2017-11-10T18:36:27Z",
        "updatedAt" : "2017-11-28T16:14:52Z",
        "lastEditedBy" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "tags" : [
        ]
      },
      {
        "id" : "89f48fd0-e79c-45c2-9652-9b8d7d59ce94",
        "parentId" : "422243bf-ac77-4027-bee3-88feb25732a5",
        "authorId" : "0e28b588-4137-48f1-8040-bb2cde473e74",
        "body" : "I've now included it in `dump`",
        "createdAt" : "2017-11-10T18:46:05Z",
        "updatedAt" : "2017-11-28T16:14:52Z",
        "lastEditedBy" : "0e28b588-4137-48f1-8040-bb2cde473e74",
        "tags" : [
        ]
      },
      {
        "id" : "0add7c12-0c5e-485d-9ef5-105ea6268667",
        "parentId" : "422243bf-ac77-4027-bee3-88feb25732a5",
        "authorId" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "body" : "Ah, I was looking in the wrong section, this is the return section, not the documentation one. :-)",
        "createdAt" : "2017-11-10T21:25:40Z",
        "updatedAt" : "2017-11-28T16:14:52Z",
        "lastEditedBy" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "tags" : [
        ]
      }
    ],
    "commit" : "55806b0b262700ea287421af66ccfc984d39f755",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +234,238 @@    type: list\n    sample: [ 'clientAuth' ]\nbasicConstraints:\n    description: Indicates if the certificate belongs to a CA\n    returned: changed or success"
  },
  {
    "id" : "399eccc8-39ad-481e-97c1-c5e1661bc1dd",
    "prId" : 50324,
    "prUrl" : "https://github.com/ansible/ansible/pull/50324#pullrequestreview-192145706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6f156fa-cfa0-4e29-a7a7-663eaaaf7ae9",
        "parentId" : null,
        "authorId" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "body" : "Should all of these `if ... if ... if ... raise` constructs be turned into `if ... elif ... elif ... else raise`?",
        "createdAt" : "2019-01-14T12:29:53Z",
        "updatedAt" : "2019-01-14T12:29:53Z",
        "lastEditedBy" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "tags" : [
        ]
      },
      {
        "id" : "d554d780-6e3f-41a0-a22d-b07b51241a3b",
        "parentId" : "d6f156fa-cfa0-4e29-a7a7-663eaaaf7ae9",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "I decided to use the current pattern for two reasons:\r\n1. Both are equivalent, and it is easy enough to see that (since here we have `if condition: return value` all the time);\r\n2. The current version is shorter (no `el` in every second line) and the first comparison is not different from all other ones.\r\nI would have rather used a `switch`-like statement for this, but Python doesn't have this...\r\n\r\nAnyway, I don't mind converting it if you prefer that.",
        "createdAt" : "2019-01-14T13:06:24Z",
        "updatedAt" : "2019-01-14T13:06:24Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "11fc0981-b8ee-4d9f-bd30-2e142671ff96",
        "parentId" : "d6f156fa-cfa0-4e29-a7a7-663eaaaf7ae9",
        "authorId" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "body" : "I don't know if `if ... elif ... else` leads to more efficient code being generated or not, then again (unfortunately) ansible modules are not written for execution speed in general.\r\n\r\nI have no strong opinion either way, generally I tend to use the `elif` style when needing something like a switch statement in Python (Stackoverflow seems to prefer dictionaries + their get() function: https://stackoverflow.com/questions/60208/replacements-for-switch-statement-in-python). Since this likely will need to be factored out in the future to the module_utils file, it can be tackled later too. It is obviously correct in the current form, so I'd say just leave it for now.",
        "createdAt" : "2019-01-14T13:13:04Z",
        "updatedAt" : "2019-01-14T13:13:45Z",
        "lastEditedBy" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "tags" : [
        ]
      },
      {
        "id" : "cf4cfc94-aebe-430d-8842-f2c235600567",
        "parentId" : "d6f156fa-cfa0-4e29-a7a7-663eaaaf7ae9",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Using a `dict` is also a good idea, but then one has to take care to avoid problems when `cryptography` is not around or some constants require a new enough `cryptography` version...",
        "createdAt" : "2019-01-14T13:15:28Z",
        "updatedAt" : "2019-01-14T13:15:28Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "554e04cc-97f4-439b-9dff-6f9160c8a567",
        "parentId" : "d6f156fa-cfa0-4e29-a7a7-663eaaaf7ae9",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Without the `return`, `if ... elif ... else` would definitely be more efficient. With `return` and `raise` in every case, I'm not so sure. Anyway, as you said, let's leave it liks this for now.",
        "createdAt" : "2019-01-14T13:17:24Z",
        "updatedAt" : "2019-01-14T13:17:24Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f73ede40c80a5b8c3fb0a002f9ff2c7da2500d3",
    "line" : 301,
    "diffHunk" : "@@ -1,1 +600,604 @@        if id in ('CN', 'commonName'):\n            return cryptography.x509.oid.NameOID.COMMON_NAME\n        if id in ('C', 'countryName'):\n            return cryptography.x509.oid.NameOID.COUNTRY_NAME\n        if id in ('L', 'localityName'):"
  },
  {
    "id" : "70accbd9-a22c-4eaf-bd39-d42f7abf5903",
    "prId" : 50894,
    "prUrl" : "https://github.com/ansible/ansible/pull/50894#pullrequestreview-192514093",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88699c7c-6554-417f-a214-6e934e61560f",
        "parentId" : null,
        "authorId" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "body" : "Couldn't this just be the `else` of lines 985-988?",
        "createdAt" : "2019-01-15T01:51:15Z",
        "updatedAt" : "2019-01-15T01:51:16Z",
        "lastEditedBy" : "57db1e2a-9c1c-4c08-b54f-9731aff18e36",
        "tags" : [
        ]
      },
      {
        "id" : "5c995ad7-3393-4902-b19e-20ddaada2ed0",
        "parentId" : "88699c7c-6554-417f-a214-6e934e61560f",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Yes, it could. I would still prefer this not to be an `else`, so that the failure code is somewhat separated from the detection code.",
        "createdAt" : "2019-01-15T07:40:22Z",
        "updatedAt" : "2019-01-15T07:40:23Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9542e98026dc282adaed67669f7beafe16c6bca",
    "line" : 699,
    "diffHunk" : "@@ -1,1 +989,993 @@\n        # Success?\n        if backend == 'auto':\n            module.fail_json(msg=('Can detect none of the Python libraries '\n                                  'cryptography (>= {0}) and pyOpenSSL (>= {1})').format("
  },
  {
    "id" : "234a3403-9936-42b5-afd0-d2bb56a30c7f",
    "prId" : 52024,
    "prUrl" : "https://github.com/ansible/ansible/pull/52024#pullrequestreview-202318040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6c33de3-6512-4753-bfed-27073f0d9289",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "It isn't a bug (so I'm going to merge this), but I do notice a few things about this list comprehension that I think could be changed.  `if altname.strip()` is repeated twice at the end.  I think that's probably a typo as it is equivalent to `if altname.strip() and altname.strip()` which is redundant checking.\r\n\r\nIf you don't want to duplicate calling strip() on altname, you can also do that as part of setting altname.  For readability, I'd split it up into two lines like this:\r\n``` python\r\n             altnames = (altname.strip() in str(altnames_ext).split(','))\r\n             altnames = [altname for altname in altnames if altname]\r\n```\r\n\r\n(Which seems to fit in with the style of this function as the next line further modifies altnames in a third list comprehension/generator expression).",
        "createdAt" : "2019-02-11T20:01:43Z",
        "updatedAt" : "2019-02-11T20:01:43Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "757718fd-ed97-40b7-b331-c80ca8fc7f03",
        "parentId" : "b6c33de3-6512-4753-bfed-27073f0d9289",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Actually, combining it with the next line, I'd do it like this:\r\n``` python\r\n             altnames = (altname.strip() in str(altnames_ext).split(','))\r\n             altnames = [name if not name.startswith('IP Address:') else \"IP:\" + name.split(':', 1)[1] for name in altnames if altname]\r\n```",
        "createdAt" : "2019-02-11T20:10:07Z",
        "updatedAt" : "2019-02-11T20:10:08Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "8d1755c8-2d49-4e47-a7e6-8bff8dd25623",
        "parentId" : "b6c33de3-6512-4753-bfed-27073f0d9289",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Good catch! The double `if` was not intentional, I must have completely missed that. I had to do the cherry-picking mostly manual, since the module changed too much in `devel`.",
        "createdAt" : "2019-02-11T20:20:15Z",
        "updatedAt" : "2019-02-11T20:20:15Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "b63aff3454ec366f2c15713736b5aee0e5e36310",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +432,436 @@        def _check_subjectAltName(extensions):\n            altnames_ext = next((ext for ext in extensions if ext.get_short_name() == b'subjectAltName'), '')\n            altnames = [altname.strip() for altname in str(altnames_ext).split(',') if altname.strip() if altname.strip()]\n            # apperently openssl returns 'IP address' not 'IP' as specifier when converting the subjectAltName to string\n            # although it won't accept this specifier when generating the CSR. (https://github.com/openssl/openssl/issues/4004)"
  },
  {
    "id" : "cc6cd3ca-b5e6-462c-bd75-6dfc17c94199",
    "prId" : 60741,
    "prUrl" : "https://github.com/ansible/ansible/pull/60741#pullrequestreview-276331794",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "857977ab-9683-4437-8c7b-119973f6081f",
        "parentId" : null,
        "authorId" : "cea850a3-e209-4f7b-bc8b-b377bbf3a19d",
        "body" : "May be worth noting that all of the added values are applicable only to creating a self signed certificate, or using the openssl_certificate module with self_signed or ownca - they wouldn't ever be applicable to a CSR submitted elsewhere (at least to my knowledge).",
        "createdAt" : "2019-08-19T01:40:56Z",
        "updatedAt" : "2019-08-23T11:52:33Z",
        "lastEditedBy" : "cea850a3-e209-4f7b-bc8b-b377bbf3a19d",
        "tags" : [
        ]
      },
      {
        "id" : "d922d911-d3c5-4c1c-b1f4-3f4e00b85dfb",
        "parentId" : "857977ab-9683-4437-8c7b-119973f6081f",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "I added a disclaimer in 2c03b5d68ce59eb1ad321069a52dbba9a950bb2f",
        "createdAt" : "2019-08-19T03:53:39Z",
        "updatedAt" : "2019-08-23T11:52:33Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb21ea3bddd84efc408cb8719378acff61dac51e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +219,223 @@               or for own CAs.\"\n            - Note that this option can only be used if I(create_subject_key_identifier) is C(no).\n            - Note that this is only supported if the C(cryptography) backend is used!\n        type: str\n        version_added: \"2.9\""
  }
]