[
  {
    "id" : "d899b26b-e38d-4b69-99b3-37adc6568a18",
    "prId" : 37881,
    "prUrl" : "https://github.com/ansible/ansible/pull/37881#pullrequestreview-106994715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "630f9f51-6b78-43e8-9c30-3b753ddbc975",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "could reverse the update ordering and update templar._get_filters() (or a copy...) with e.filters so that\r\nthe e.filters 'wins'",
        "createdAt" : "2018-03-26T17:12:34Z",
        "updatedAt" : "2018-03-26T17:12:34Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "216d2045-af06-4b13-b30b-bdbeb5ca6bd5",
        "parentId" : "630f9f51-6b78-43e8-9c30-3b753ddbc975",
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "something like\r\n\r\n``` python\r\ncustom_filters = templar._get_filters()\r\ncustom_filters.update(e.filters)\r\ne.filters = custom_filters\r\n```",
        "createdAt" : "2018-03-26T17:14:04Z",
        "updatedAt" : "2018-03-26T17:14:04Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "dcb053e5-f79f-4112-b96d-2603b37ca9ef",
        "parentId" : "630f9f51-6b78-43e8-9c30-3b753ddbc975",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "We may want to override a builtin filter with an ansible provided by filter, such as `groupby`.  We just don't want this to happen with custom tests.\r\n\r\nEventually custom tests will no longer be registered as filters (2.9), but have been kept thus far for backwards compat.",
        "createdAt" : "2018-03-26T17:14:33Z",
        "updatedAt" : "2018-03-26T17:14:33Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b0c8a35eccd6f400e5bd0b8726f0be3c4affdf8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +177,181 @@            try:\n                e = templar.environment.overlay()\n                e.filters.update(templar._get_filters(e.filters))\n                e.tests.update(templar._get_tests())\n"
  },
  {
    "id" : "b025e96b-d972-4bc8-a0a7-e96c22732c4a",
    "prId" : 51030,
    "prUrl" : "https://github.com/ansible/ansible/pull/51030#pullrequestreview-195273560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6628875b-14b5-4462-b5d2-17e0d74967ea",
        "parentId" : null,
        "authorId" : "5c95ce24-8a36-4f10-b46c-b30203fba415",
        "body" : "Would be clearer to say we are automatically converting to bool.  \"evaluating as a bare variable\" didn't make sense to me and makes it sound like `when: enable_my_feature` is improper usage.  (My roles require the caller to pass bool's as such, not as strings.)",
        "createdAt" : "2019-01-22T22:52:04Z",
        "updatedAt" : "2019-01-24T00:57:29Z",
        "lastEditedBy" : "5c95ce24-8a36-4f10-b46c-b30203fba415",
        "tags" : [
        ]
      },
      {
        "id" : "eb97fc7d-e908-49e7-89c8-0919d8c06b67",
        "parentId" : "6628875b-14b5-4462-b5d2-17e0d74967ea",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "but we are not automatically converting to a bool in this case, we are using the variable in 'python bool context' .. which might make it behave as if converting,  vs 'jinja2 if expression' which has slightly diff rules.",
        "createdAt" : "2019-01-22T22:56:39Z",
        "updatedAt" : "2019-01-24T00:57:29Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f12c617983102c94b95bc2e5cd68a679d3b7ad1b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +117,121 @@        if C.CONDITINAL_BARE_VARS:\n            if conditional in all_vars and VALID_VAR_REGEX.match(conditional):\n                display.deprecated('evaluating %s as a bare variable, this behaviour will go away and you might need to add |bool'\n                                   ' to the expression in the future. Also see CONDITIONAL_BARE_VARS configuration toggle.' % conditional, \"2.12\")\n                conditional = all_vars[conditional]"
  }
]