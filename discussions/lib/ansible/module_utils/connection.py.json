[
  {
    "id" : "5b65c6df-24d1-430e-a2c1-46577cdc5c23",
    "prId" : 25093,
    "prUrl" : "https://github.com/ansible/ansible/pull/25093#pullrequestreview-41179030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb6efb52-863e-48d5-aa51-8105bf14451e",
        "parentId" : null,
        "authorId" : "0449156c-4180-4350-84f3-ec3063d999ac",
        "body" : "The documentation is great but I think its misplaced.  The Connection class is generic enough to work with any connection plugin that implements rpc.  These documentation strings are better served in cliconf, netconf plugins imho",
        "createdAt" : "2017-05-30T12:35:53Z",
        "updatedAt" : "2017-06-06T07:51:33Z",
        "lastEditedBy" : "0449156c-4180-4350-84f3-ec3063d999ac",
        "tags" : [
        ]
      },
      {
        "id" : "fba55e07-5e5f-4a90-ba35-506763003c12",
        "parentId" : "bb6efb52-863e-48d5-aa51-8105bf14451e",
        "authorId" : "7a1e5757-684b-4684-bcab-c114385bca28",
        "body" : "Fixed",
        "createdAt" : "2017-05-31T09:34:44Z",
        "updatedAt" : "2017-06-06T07:51:33Z",
        "lastEditedBy" : "7a1e5757-684b-4684-bcab-c114385bca28",
        "tags" : [
        ]
      }
    ],
    "commit" : "79475790b87a348d8131c56bacbc030b0e3bcac2",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +96,100 @@            return partial(self.__rpc__, name)\n\n    def __rpc__(self, name, *args, **kwargs):\n        \"\"\"Executes the json-rpc and returns the output received\n           from remote device."
  },
  {
    "id" : "715a3e17-dc28-4bdf-936b-60cf53222613",
    "prId" : 45600,
    "prUrl" : "https://github.com/ansible/ansible/pull/45600#pullrequestreview-157849947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f949f092-f42b-44d3-8cc3-9e04c8c66ce6",
        "parentId" : null,
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "You might want to use `six.raise_from`",
        "createdAt" : "2018-09-13T13:03:12Z",
        "updatedAt" : "2018-09-21T19:40:21Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      },
      {
        "id" : "b637ed4e-e4ce-482b-875c-4373d63ff6b7",
        "parentId" : "f949f092-f42b-44d3-8cc3-9e04c8c66ce6",
        "authorId" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "body" : "I'm not sure how that helps on Python 2. I don't want to bury the original exception, as that is the one with the details to diagnose an issue, but I also want a more specific message to clue the issue in the right direction.",
        "createdAt" : "2018-09-19T13:41:24Z",
        "updatedAt" : "2018-09-21T19:40:21Z",
        "lastEditedBy" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "tags" : [
        ]
      },
      {
        "id" : "d7e1b257-7e7e-4ee3-95f5-80cbb9148408",
        "parentId" : "f949f092-f42b-44d3-8cc3-9e04c8c66ce6",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "on the core side we have orig_exec on AnsibleError to allow chaining the exception info, maybe something similar could be added here to the exception objects used?",
        "createdAt" : "2018-09-19T14:22:01Z",
        "updatedAt" : "2018-09-21T19:40:21Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "0d92a9bd-dc63-429d-8c68-d6337194186e",
        "parentId" : "f949f092-f42b-44d3-8cc3-9e04c8c66ce6",
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "@Qalthos it won't bury the original exception, it's just a way to spell `raise ConnectionError from orig_exc` without actually using a syntax, unavailable under Python 2.",
        "createdAt" : "2018-09-20T12:34:56Z",
        "updatedAt" : "2018-09-21T19:40:21Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      },
      {
        "id" : "0b708732-dd44-4593-a0d9-e89fe34fdcca",
        "parentId" : "f949f092-f42b-44d3-8cc3-9e04c8c66ce6",
        "authorId" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "body" : "> it won't bury the original exception, it's just a way to spell raise ConnectionError from orig_exc without actually using a syntax, unavailable under Python 2.\r\n\r\nMaybe I'm missing something, but it does not seem to do anything like that on Python 2\r\n\r\n```\r\nPython 3.7.0 (default, Jul 15 2018, 10:44:58) \r\n[GCC 8.1.1 20180531] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from ansible.module_utils.six import raise_from\r\n>>> e1 = Exception(\"Exception 1\")\r\n>>> e2 = Exception(\"Exception 2\")\r\n>>> raise_from(e1, e2)\r\nException: Exception 2\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<string>\", line 3, in raise_from\r\nException: Exception 1\r\n>>> \r\n```\r\nThis is... fine, it gets the point across and lets me keep the original message while specifying cause.\r\n\r\n```\r\nPython 2.7.15 (default, Jun 27 2018, 13:05:28) \r\n[GCC 8.1.1 20180531] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from ansible.module_utils.six import raise_from\r\n>>> e1 = Exception(\"Exception 1\")\r\n>>> e2 = Exception(\"Exception 2\")\r\n>>> raise_from(e1, e2)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/nate/workspace/ansible/ansible/lib/ansible/module_utils/six/__init__.py\", line 744, in raise_from\r\n    raise value\r\nException: Exception 1\r\n>>> \r\n```\r\nHere, however... e2 is lost, unless you mean to imply that I might want this in addition to adding the original exception text to the new exception which seems redundant in the Python 3 case. Maybe I am completely misunderstanding what you mean, but I don't really see how this helps me.",
        "createdAt" : "2018-09-21T19:33:06Z",
        "updatedAt" : "2018-09-21T19:40:21Z",
        "lastEditedBy" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "tags" : [
        ]
      },
      {
        "id" : "3e36566f-634e-43a1-87ae-33050f691688",
        "parentId" : "f949f092-f42b-44d3-8cc3-9e04c8c66ce6",
        "authorId" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "body" : "> on the core side we have orig_exec on AnsibleError to allow chaining the exception info, maybe something similar could be added here to the exception objects used?\r\n\r\nI had seen that, but couldn't find how it was used. The only thing I can find is https://github.com/bcoca/ansible/blob/devel/bin/ansible#L149. It doesn't look like just popping an `orig_exc` on to the ConnectionError will trigger that though, and it seems to provide roughly the same functionality as what I am already doing anyway, unless I'm missing something.",
        "createdAt" : "2018-09-21T19:35:58Z",
        "updatedAt" : "2018-09-21T19:40:21Z",
        "lastEditedBy" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "tags" : [
        ]
      },
      {
        "id" : "35ff5800-cfe5-4263-9db4-5ef20e38eb46",
        "parentId" : "f949f092-f42b-44d3-8cc3-9e04c8c66ce6",
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "@Qalthos exactly, it does nothing under py2, but adds explicit cause under py3. But now that I think about it, it's probably a default behavior anyway. ",
        "createdAt" : "2018-09-21T20:36:23Z",
        "updatedAt" : "2018-09-21T20:36:23Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1696c1f589bdf1a84e4f2e0fbba96023de0427b7",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +158,162 @@                        )\n\n            raise ConnectionError(\n                \"Failed to encode some variables as JSON for communication with ansible-connection. \"\n                \"The original exception was: %s\" % to_text(exc)"
  }
]