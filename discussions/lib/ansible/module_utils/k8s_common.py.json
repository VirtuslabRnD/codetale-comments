[
  {
    "id" : "25cd7a5c-24f4-4f1a-8275-f12c586bfad8",
    "prId" : 33646,
    "prUrl" : "https://github.com/ansible/ansible/pull/33646#pullrequestreview-83208572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "397cd7c9-4160-4e06-8ab3-fc2f0f1e6a99",
        "parentId" : null,
        "authorId" : "aec630fa-36f1-4a88-933f-44c1fd42e0fa",
        "body" : "I think it's fine to keep this here for now but, I wonder if this check (and similar checks in the future) should go into the `OpenShift` client as they are specific to `OpenShift` and not `Kubernetes`.",
        "createdAt" : "2017-12-13T08:38:06Z",
        "updatedAt" : "2017-12-13T08:38:06Z",
        "lastEditedBy" : "aec630fa-36f1-4a88-933f-44c1fd42e0fa",
        "tags" : [
        ]
      },
      {
        "id" : "65d3fc7d-aff5-40f8-a378-f67cb8560f9d",
        "parentId" : "397cd7c9-4160-4e06-8ab3-fc2f0f1e6a99",
        "authorId" : "3c2d2125-0d1f-41a8-b9f4-2c8913ca435d",
        "body" : "This is all Ansible module specific. What we're trying to do is move Ansible module code out of the OpenShift client, and into Ansible.\r\n\r\nObviously, though, a `project` is OpenShift specific, and we've given special handling to the project model, in order to make it easy for the user to update the description and display_name attributes. \r\n\r\nIt would be ideal, if we could move this logic completely into `openshift_common.py`. However, I don't see a way to subclass the AnsibleMixin and not essentially duplicate the whole `object_from_params` method. It just seems easier to have one `AnsibleMixin` for now. Maybe it's something we can iterate on in the future.\r\n\r\n",
        "createdAt" : "2017-12-13T11:50:33Z",
        "updatedAt" : "2017-12-13T11:51:07Z",
        "lastEditedBy" : "3c2d2125-0d1f-41a8-b9f4-2c8913ca435d",
        "tags" : [
        ]
      },
      {
        "id" : "e0de2773-078f-48cd-9dcd-c80a42a11e8d",
        "parentId" : "397cd7c9-4160-4e06-8ab3-fc2f0f1e6a99",
        "authorId" : "aec630fa-36f1-4a88-933f-44c1fd42e0fa",
        "body" : "@chouseknecht makes sense. Also, as a first iteration, this is already good so I wouldn't stress it to find a better abstraction at this stage. I think once this module matures, we can start thinking about splitting some of this logic.",
        "createdAt" : "2017-12-13T15:26:33Z",
        "updatedAt" : "2017-12-13T15:26:33Z",
        "lastEditedBy" : "aec630fa-36f1-4a88-933f-44c1fd42e0fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5b854ad65df41b233466a0d01af40281c8c0ed",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +142,146 @@                self.__set_obj_attribute(obj, prop_path, param_value, param_name)\n\n        if self.kind.lower() == 'project' and (module_params.get('display_name') or\n                                               module_params.get('description')):\n            if not obj.metadata.annotations:"
  },
  {
    "id" : "7922260b-5056-43ca-b285-b8649ff1340a",
    "prId" : 33646,
    "prUrl" : "https://github.com/ansible/ansible/pull/33646#pullrequestreview-83207774",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca7da65d-2808-4f6e-89f0-b39d94183a88",
        "parentId" : null,
        "authorId" : "aec630fa-36f1-4a88-933f-44c1fd42e0fa",
        "body" : "Out of curiosity, what are the benefits of using the openshift restclient instead of the kubernetes client?\r\n\r\nIIUC, the openshift client models are generated using OpenShift origin, which doesn't necessarily have the latest supported API by upstream `Kubernetes`. This has caused me some problems in the past where I've needed newer APIs that weren't supported by the openshift client. This is not to say that upstream kubernetes-client is better or worse but I'd like to find a way for us to be able to consume the latest released version of kubernetes. Am I missing something? \r\n",
        "createdAt" : "2017-12-13T08:47:07Z",
        "updatedAt" : "2017-12-13T08:47:07Z",
        "lastEditedBy" : "aec630fa-36f1-4a88-933f-44c1fd42e0fa",
        "tags" : [
        ]
      },
      {
        "id" : "91f9194a-c38b-4905-8ce9-7855e4ce7ad8",
        "parentId" : "ca7da65d-2808-4f6e-89f0-b39d94183a88",
        "authorId" : "3c2d2125-0d1f-41a8-b9f4-2c8913ca435d",
        "body" : "The OpenShift client is built on top of the Kubernetes client, and adds all of the OpenShift specific APIs and models. It does mean that we're relying on the version of Kubernetes supported in the OpenShift client, which may not always be the latest and greatest.\r\n\r\nI think part of the reason for the delay in getting the latest Kubernetes APIs into the OpenShift client is that we don't yet have a community helping us maintain the OpenShift client. My hope is that by making the Ansible modules a bit more user friendly, and by putting all the module code under the Ansible umbrella, we'll gain community interest in both the modules and the underlying client.",
        "createdAt" : "2017-12-13T11:57:55Z",
        "updatedAt" : "2017-12-13T11:58:53Z",
        "lastEditedBy" : "3c2d2125-0d1f-41a8-b9f4-2c8913ca435d",
        "tags" : [
        ]
      },
      {
        "id" : "f2bc62ef-59e4-4f99-9391-903092a489ad",
        "parentId" : "ca7da65d-2808-4f6e-89f0-b39d94183a88",
        "authorId" : "aec630fa-36f1-4a88-933f-44c1fd42e0fa",
        "body" : "@chouseknecht thanks a bunch, it makes sense to me.\r\n\r\nFWIW, I'm happy to help with the maintenance of the openshift client too. I'd like to help keeping the ansible module and the openshift client aligned with upstream kubernetes.",
        "createdAt" : "2017-12-13T15:24:24Z",
        "updatedAt" : "2017-12-13T15:24:24Z",
        "lastEditedBy" : "aec630fa-36f1-4a88-933f-44c1fd42e0fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5b854ad65df41b233466a0d01af40281c8c0ed",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +30,34 @@\ntry:\n    from openshift.helper import PRIMITIVES\n    from openshift.helper.kubernetes import KubernetesObjectHelper\n    from openshift.helper.exceptions import KubernetesException"
  }
]