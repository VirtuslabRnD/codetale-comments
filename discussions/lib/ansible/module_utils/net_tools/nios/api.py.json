[
  {
    "id" : "9a3dcfe1-5b6e-4008-bec9-52c4645cab4d",
    "prId" : 35473,
    "prUrl" : "https://github.com/ansible/ansible/pull/35473#pullrequestreview-92665045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9218553-0dbe-4f3e-a13a-3267b7efdea5",
        "parentId" : null,
        "authorId" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "body" : "Please could you document this here: https://github.com/ansible/ansible/blob/devel/lib/ansible/utils/module_docs_fragments/nios.py",
        "createdAt" : "2018-01-30T12:13:56Z",
        "updatedAt" : "2018-01-30T19:47:07Z",
        "lastEditedBy" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "tags" : [
        ]
      },
      {
        "id" : "70b7d5a6-f3e3-4afe-a5e7-37654e55a62c",
        "parentId" : "b9218553-0dbe-4f3e-a13a-3267b7efdea5",
        "authorId" : "53505ec0-59c9-4f17-92a8-0538ebcf346b",
        "body" : "Hello @gundalow \r\n\r\nOf course, I'll do it when I'm at home.\r\nI do not have what it takes in my workplace to be able to do it.\r\n",
        "createdAt" : "2018-01-30T15:52:32Z",
        "updatedAt" : "2018-01-30T19:47:07Z",
        "lastEditedBy" : "53505ec0-59c9-4f17-92a8-0538ebcf346b",
        "tags" : [
        ]
      },
      {
        "id" : "95fbd114-8b9b-4112-a893-2b95aeec4565",
        "parentId" : "b9218553-0dbe-4f3e-a13a-3267b7efdea5",
        "authorId" : "53505ec0-59c9-4f17-92a8-0538ebcf346b",
        "body" : "Hello @gundalow\r\n\r\nDone.\r\n\r\nBest regards,",
        "createdAt" : "2018-01-30T18:13:20Z",
        "updatedAt" : "2018-01-30T19:47:07Z",
        "lastEditedBy" : "53505ec0-59c9-4f17-92a8-0538ebcf346b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5756bb02c023d5777fbb96452e41a723c7730765",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +52,56 @@    'max_retries': dict(type='int', default=3),\n    'wapi_version': dict(default='1.4'),\n    'max_results': dict(type='int', default=1000)\n}\n"
  },
  {
    "id" : "bbdc7971-d08c-46e3-8f1a-f40dc645a63b",
    "prId" : 53174,
    "prUrl" : "https://github.com/ansible/ansible/pull/53174#pullrequestreview-212662024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fcc81ee-8fc3-4ee7-9566-8940cda24a1b",
        "parentId" : null,
        "authorId" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "body" : "Can you give me an example which this recursive function is trying to resolve, coz this is heavy operation and need to check if your use case can be resolved in other ways.",
        "createdAt" : "2019-03-11T04:06:24Z",
        "updatedAt" : "2019-03-12T10:59:52Z",
        "lastEditedBy" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "tags" : [
        ]
      },
      {
        "id" : "381c8429-d356-4438-8209-4eadb175b65e",
        "parentId" : "4fcc81ee-8fc3-4ee7-9566-8940cda24a1b",
        "authorId" : "409359b9-e9d3-4db1-84e7-7e2ad1385996",
        "body" : "@justjais \r\nWhen no values are passed to some of the options in the module, it takes the value \"None\" like below.\r\n`{\r\n\t'comment': 'CreatedbyAnsible',\r\n\t'enable_ha': True,\r\n\t'node_info': [\r\n\t\t{\r\n\t\t\t'v6_mgmt_network_setting': None,\r\n\t\t\t'lan_ha_port_setting': {\r\n\t\t\t\t'mgmt_ipv6addr': None,\r\n\t\t\t\t'ha_port_setting': None,\r\n\t\t\t\t'lan_port_setting': None,\r\n\t\t\t\t'ha_ip_address': '192.168.1.70',\r\n\t\t\t\t'mgmt_lan': '192.168.1.80'\r\n\t\t\t},\r\n\t\t\t'mgmt_network_setting': None,\r\n\t\t\t'lan2_physical_setting': None\r\n\t\t},\r\n\t\t{\r\n\t\t\t'v6_mgmt_network_setting': None,\r\n\t\t\t'lan_ha_port_setting': {\r\n\t\t\t\t'mgmt_ipv6addr': None,\r\n\t\t\t\t'ha_port_setting': None,\r\n\t\t\t\t'lan_port_setting': None,\r\n\t\t\t\t'ha_ip_address': '192.168.1.71',\r\n\t\t\t\t'mgmt_lan': '192.168.1.81'\r\n\t\t\t},\r\n\t\t\t'mgmt_network_setting': None,\r\n\t\t\t'lan2_physical_setting': None\r\n\t\t}\r\n\t],\r\n\t'config_addr_type': 'IPV4',\r\n\t'router_id': 150,\r\n\t'host_name': 'member-ha.ansible-dev.com',\r\n\t'platform': 'VNIOS',\r\n\t'vip_setting': {\r\n\t\t'subnet_mask': '255.255.255.0',\r\n\t\t'gateway': '192.168.1.1',\r\n\t\t'address': '192.168.1.100'\r\n\t},\r\n\t'upgrade_group': 'Default'\r\n}`\r\nThe WAPI errors out in this situation with an error that requests for the right kind of input.\r\nIn order to avoid this, this function strips all the options set to to None from input , like below:\r\n`{\r\n\t'comment': 'CreatedbyAnsible',\r\n\t'enable_ha': True,\r\n\t'node_info': [\r\n\t\t{\r\n\t\t\t'lan_ha_port_setting': {\r\n\t\t\t\t'ha_ip_address': '192.168.1.70',\r\n\t\t\t\t'mgmt_lan': '192.168.1.80'\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t'lan_ha_port_setting': {\r\n\t\t\t\t'ha_ip_address': '192.168.1.71',\r\n\t\t\t\t'mgmt_lan': '192.168.1.81'\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\t'config_addr_type': 'IPV4',\r\n\t'router_id': 150,\r\n\t'host_name': 'member-ha.ansible-dev.com',\r\n\t'platform': 'VNIOS',\r\n\t'vip_setting': {\r\n\t\t'subnet_mask': '255.255.255.0',\r\n\t\t'gateway': '192.168.1.1',\r\n\t\t'address': '192.168.1.100'\r\n\t},\r\n\t'upgrade_group': 'Default'\r\n}`",
        "createdAt" : "2019-03-11T05:05:58Z",
        "updatedAt" : "2019-03-12T10:59:52Z",
        "lastEditedBy" : "409359b9-e9d3-4db1-84e7-7e2ad1385996",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fd367eaefb6574f6deb32aca87f94ad1e7a1735",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +139,143 @@\ndef member_normalize(member_spec):\n    ''' Transforms the member module arguments into a valid WAPI struct\n    This function will transform the arguments into a structure that\n    is a valid WAPI structure in the format of:"
  },
  {
    "id" : "579229a1-1391-41d7-954f-8d21e4a7e336",
    "prId" : 53747,
    "prUrl" : "https://github.com/ansible/ansible/pull/53747#pullrequestreview-214336575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f195c447-cb47-47bb-b220-2af4bedd468e",
        "parentId" : null,
        "authorId" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "body" : "`get_object` functionality should be handled under `get_object_ref`.",
        "createdAt" : "2019-03-14T04:44:10Z",
        "updatedAt" : "2019-03-14T06:00:44Z",
        "lastEditedBy" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "tags" : [
        ]
      },
      {
        "id" : "aefda18b-875f-415b-b84e-cfcb08025bc0",
        "parentId" : "f195c447-cb47-47bb-b220-2af4bedd468e",
        "authorId" : "409359b9-e9d3-4db1-84e7-7e2ad1385996",
        "body" : "I am not clear about this comment",
        "createdAt" : "2019-03-14T05:54:09Z",
        "updatedAt" : "2019-03-14T06:00:44Z",
        "lastEditedBy" : "409359b9-e9d3-4db1-84e7-7e2ad1385996",
        "tags" : [
        ]
      },
      {
        "id" : "5e4dcec5-7875-48f4-8746-bf882e1eafe2",
        "parentId" : "f195c447-cb47-47bb-b220-2af4bedd468e",
        "authorId" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "body" : "Check `get_object_ref` function in `api.py` where `self.get_object` functionality is handled, so please move the resepctive functionality under `get_object_ref`.",
        "createdAt" : "2019-03-14T06:04:29Z",
        "updatedAt" : "2019-03-14T06:04:29Z",
        "lastEditedBy" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "tags" : [
        ]
      },
      {
        "id" : "ce620598-8d1d-4f05-9336-2a499487c265",
        "parentId" : "f195c447-cb47-47bb-b220-2af4bedd468e",
        "authorId" : "409359b9-e9d3-4db1-84e7-7e2ad1385996",
        "body" : "I have added this functionality under the get_object_ref function\r\n`\r\n    def get_object_ref(self, module, ib_obj_type, obj_filter, ib_spec):\r\n        ''' this function gets the reference object of pre-existing nios objects '''\r\n\r\n        update = False\r\n        old_name = new_name = None\r\n        if ('name' in obj_filter):\r\n            # gets and returns the current object based on name/old_name passed\r\n            try:\r\n                name_obj = self.module._check_type_dict(obj_filter['name'])\r\n                old_name = name_obj['old_name']\r\n                new_name = name_obj['new_name']\r\n            except TypeError:\r\n                name = obj_filter['name']\r\n\r\n            if old_name and new_name:\r\n                if (ib_obj_type == NIOS_HOST_RECORD):\r\n                    test_obj_filter = dict([('name', old_name), ('view', obj_filter['view'])])\r\n                elif (ib_obj_type in (NIOS_AAAA_RECORD, NIOS_A_RECORD)):\r\n                    test_obj_filter = obj_filter\r\n                else:\r\n                    test_obj_filter = dict([('name', old_name)])\r\n                # get the object reference\r\n                ib_obj = self.get_object(ib_obj_type, test_obj_filter, return_fields=ib_spec.keys())\r\n                if ib_obj:\r\n                    obj_filter['name'] = new_name\r\n                else:\r\n                    test_obj_filter['name'] = new_name\r\n                    ib_obj = self.get_object(ib_obj_type, test_obj_filter, return_fields=ib_spec.keys())\r\n                update = True\r\n                return ib_obj, update, new_name\r\n            if (ib_obj_type == NIOS_HOST_RECORD):\r\n                # to check only by name if dns bypassing is set\r\n                if not obj_filter['configure_for_dns']:\r\n                    test_obj_filter = dict([('name', name)])\r\n                else:\r\n                    test_obj_filter = dict([('name', name), ('view', obj_filter['view'])])\r\n            elif (ib_obj_type == NIOS_IPV4_FIXED_ADDRESS or ib_obj_type == NIOS_IPV6_FIXED_ADDRESS and 'mac' in obj_filter):\r\n                test_obj_filter = dict([['mac', obj_filter['mac']]])\r\n            elif (ib_obj_type == NIOS_A_RECORD):\r\n                # resolves issue where a_record with uppercase name was returning null and was failing\r\n                test_obj_filter = obj_filter\r\n                test_obj_filter['name'] = test_obj_filter['name'].lower()\r\n            # check if test_obj_filter is empty copy passed obj_filter\r\n            else:\r\n                test_obj_filter = obj_filter\r\n            ib_obj = self.get_object(ib_obj_type, test_obj_filter.copy(), return_fields=ib_spec.keys())\r\n        elif (ib_obj_type == NIOS_ZONE):\r\n            # del key 'restart_if_needed' as nios_zone get_object fails with the key present\r\n            temp = ib_spec['restart_if_needed']\r\n            del ib_spec['restart_if_needed']\r\n            ib_obj = self.get_object(ib_obj_type, obj_filter.copy(), return_fields=ib_spec.keys())\r\n            # reinstate restart_if_needed key if it's set to true in play\r\n            if module.params['restart_if_needed']:\r\n                ib_spec['restart_if_needed'] = temp\r\n        elif (ib_obj_type == NIOS_MEMBER):\r\n            # del key 'create_token' as nios_member get_object fails with the key present\r\n            temp = ib_spec['create_token']\r\n            del ib_spec['create_token']\r\n            ib_obj = self.get_object(ib_obj_type, obj_filter.copy(), return_fields=ib_spec.keys())\r\n            if temp:\r\n                # reinstate 'create_token' key\r\n                ib_spec['create_token'] = temp`",
        "createdAt" : "2019-03-14T06:26:09Z",
        "updatedAt" : "2019-03-14T06:26:09Z",
        "lastEditedBy" : "409359b9-e9d3-4db1-84e7-7e2ad1385996",
        "tags" : [
        ]
      },
      {
        "id" : "11b13efc-7c19-486d-8c89-23436171dea3",
        "parentId" : "f195c447-cb47-47bb-b220-2af4bedd468e",
        "authorId" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "body" : "ah.. ignore the comment then.",
        "createdAt" : "2019-03-14T06:28:41Z",
        "updatedAt" : "2019-03-14T06:28:41Z",
        "lastEditedBy" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c2ddea3b4b285894c0069bc9426dca6089f3415",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +451,455 @@            temp = ib_spec['create_token']\n            del ib_spec['create_token']\n            ib_obj = self.get_object(ib_obj_type, obj_filter.copy(), return_fields=ib_spec.keys())\n            if temp:\n                # reinstate 'create_token' key"
  }
]