[
  {
    "id" : "3fe1d703-c4a8-4ff8-b99d-56611b13b56c",
    "prId" : 17039,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "087f106f-b964-469c-b1e8-35d3ccec0ed6",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "not exactly what i was asking, but good enough\n",
        "createdAt" : "2016-08-12T13:44:42Z",
        "updatedAt" : "2016-08-24T22:14:49Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "f4772c83-9815-4043-b980-b20211cfe5af",
        "parentId" : "087f106f-b964-469c-b1e8-35d3ccec0ed6",
        "authorId" : "5a07370a-dd3b-48c4-8cd5-7cbbee9ca24d",
        "body" : "I do think this could be useful for any module (not just cloud modules).  \n",
        "createdAt" : "2016-08-16T15:26:02Z",
        "updatedAt" : "2016-08-24T22:14:49Z",
        "lastEditedBy" : "5a07370a-dd3b-48c4-8cd5-7cbbee9ca24d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1acdd4e87bfb0aedbac4ab186568c0e15f3b5dc4",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@\n\nclass CloudRetry(object):\n    \"\"\" CloudRetry can be used by any cloud provider, in order to implement a\n        backoff algorithm/retry effect based on Status Code from Exceptions."
  },
  {
    "id" : "200b6991-ad51-4799-bd8d-e6e5baf21c81",
    "prId" : 27251,
    "prUrl" : "https://github.com/ansible/ansible/pull/27251#pullrequestreview-54262449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94ce3225-3413-43a2-9ca2-4309724fe59a",
        "parentId" : null,
        "authorId" : "183d9a20-6a5e-4432-9fe9-9fd6fe9514fb",
        "body" : "This is an `exponential_backoff` with a different exponent. If we're going to replace `backoff` with `exponential_backoff`, it should have equivalent defaults (and remove the duplicated code)",
        "createdAt" : "2017-08-03T22:55:05Z",
        "updatedAt" : "2017-08-03T22:55:05Z",
        "lastEditedBy" : "183d9a20-6a5e-4432-9fe9-9fd6fe9514fb",
        "tags" : [
        ]
      },
      {
        "id" : "74dbe128-d8ea-4fe4-83c4-803fafffbb61",
        "parentId" : "94ce3225-3413-43a2-9ca2-4309724fe59a",
        "authorId" : "d8e2780d-212c-448c-b9b5-f32188ce565a",
        "body" : "I left the method signature for `backoff` untouched because I didn't want to break any 3rd party modules that currently use it.\r\n\r\nWhile the `backoff` method is an exponential backoff its defaults don't provide the behavior that you would expect with such an algorithm. The duplication is minimal in that `backoff` simply calls out to `exponential_backoff`. The `backoff` method using defaults more or less boils down to the following delays:\r\n\r\n```\r\n>>> ['%02.2f' % (3 * 1.1 ** i) for i in range(0, 10)]\r\n['3.00', '3.30', '3.63', '3.99', '4.39', '4.83', '5.31', '5.85', '6.43', '7.07']\r\n```\r\n\r\nThis isn't the typical exponential backoff pattern that you'd expect.\r\n\r\n`exponential_backoff` aims to provide more aggressive backoffs by default with the option to cap the maximum time each retry waits. e.g.\r\n\r\n```\r\n>>> list(_exponential_backoff()())\r\n[2, 4, 8, 16, 32, 60, 60, 60, 60, 60]\r\n```",
        "createdAt" : "2017-08-04T01:28:31Z",
        "updatedAt" : "2017-08-04T01:29:10Z",
        "lastEditedBy" : "d8e2780d-212c-448c-b9b5-f32188ce565a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9da5a424d28873b595d6f62d37f2d0cf0c7b05df",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +200,204 @@\n    @classmethod\n    def backoff(cls, tries=10, delay=3, backoff=1.1):\n        \"\"\"\n        Retry calling the Cloud decorated function using an exponential backoff."
  }
]