[
  {
    "id" : "46224adc-8609-46f0-a94f-8922ced0cfe7",
    "prId" : 59724,
    "prUrl" : "https://github.com/ansible/ansible/pull/59724#pullrequestreview-269661792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74315ae2-0da2-4f71-b9ab-6d9e9d0b5451",
        "parentId" : null,
        "authorId" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "body" : "I think this can be handled via `normalize_interface` fn., like it was done before in generic modules as well (ref: https://github.com/ansible/ansible/pull/59853/files#diff-1be88b42184b2d05a46b6b97ee34a92eR85). Once respective PR is merged u can utilise the fn. and remove the regex search.",
        "createdAt" : "2019-08-01T07:47:12Z",
        "updatedAt" : "2019-08-07T11:16:43Z",
        "lastEditedBy" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "tags" : [
        ]
      },
      {
        "id" : "7239f2ec-b4fd-4bc1-b38b-6a77269caff6",
        "parentId" : "74315ae2-0da2-4f71-b9ab-6d9e9d0b5451",
        "authorId" : "974cc5d8-4ebb-4712-adfc-de7fed18dd4a",
        "body" : "@justjais `normalize_interface` seems to convert interface names to proper structure - i.e., if user passes `gigE0/0/0/1` in the task, it would convert it to `GigabitEthernet0/0/0/1`. This seems redundant while gathering fact because the interface names will always be in the proper structure when fetched from the device. Not sure how it would replace the regex search. Also, we need this regex in order to fetch only those interfaces that support lacp configurations.",
        "createdAt" : "2019-08-01T13:33:54Z",
        "updatedAt" : "2019-08-07T11:16:43Z",
        "lastEditedBy" : "974cc5d8-4ebb-4712-adfc-de7fed18dd4a",
        "tags" : [
        ]
      },
      {
        "id" : "fb12d690-d0d3-433d-84f0-a866610e9a17",
        "parentId" : "74315ae2-0da2-4f71-b9ab-6d9e9d0b5451",
        "authorId" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "body" : "So, here your regex search takes an input e.g. `interface GigabitEthernet0/0/0/1` and matches with regex and then sets the `config['name'] = GigabitEthernet0/0/0/1` which is what `normalize_interface` does, just that you'll have to add `Bundle-Ether` entry, coz currently it's not there.",
        "createdAt" : "2019-08-01T13:52:58Z",
        "updatedAt" : "2019-08-07T11:16:43Z",
        "lastEditedBy" : "3374b5c2-684a-46fc-8052-1e21707ac879",
        "tags" : [
        ]
      },
      {
        "id" : "9ebe1fd9-aa0b-45a2-a558-606e0f8d3021",
        "parentId" : "74315ae2-0da2-4f71-b9ab-6d9e9d0b5451",
        "authorId" : "974cc5d8-4ebb-4712-adfc-de7fed18dd4a",
        "body" : "@justjais - The reason to use the regex is to fetch only those interfaces that support lacp configuration and leave out unnecessary ones for this module.",
        "createdAt" : "2019-08-01T14:06:51Z",
        "updatedAt" : "2019-08-07T11:16:43Z",
        "lastEditedBy" : "974cc5d8-4ebb-4712-adfc-de7fed18dd4a",
        "tags" : [
        ]
      },
      {
        "id" : "dcc7b6ba-007c-4800-b8ff-e61229bf3829",
        "parentId" : "74315ae2-0da2-4f71-b9ab-6d9e9d0b5451",
        "authorId" : "974cc5d8-4ebb-4712-adfc-de7fed18dd4a",
        "body" : "@justjais `normalize_interfaces` is aimed at sanitizing user input, and seems to be redundant while parsing running-config where the interface names are already normalized.",
        "createdAt" : "2019-08-01T14:32:46Z",
        "updatedAt" : "2019-08-07T11:16:43Z",
        "lastEditedBy" : "974cc5d8-4ebb-4712-adfc-de7fed18dd4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "57bd8c89b0e8ce7f7f8a3a758ba4f9547d91cefa",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +83,87 @@        config = deepcopy(spec)\n\n        match = re.search(r'(GigabitEthernet|Bundle-Ether|TenGigE|FortyGigE|HundredGigE)(\\S+)', conf, re.M)\n        if match:\n            config['name'] = match.group(1) + match.group(2)"
  }
]