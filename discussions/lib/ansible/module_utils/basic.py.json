[
  {
    "id" : "f5dd0deb-8d46-4a48-9ea9-0d9f08ea8d0a",
    "prId" : 12614,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "776f3361-f2a4-49c5-a912-2dcfe006f1dc",
        "parentId" : null,
        "authorId" : "f01f60d2-e084-44c7-baad-7798a8518fb2",
        "body" : "Could `module` contain non-ASCII characters?\n",
        "createdAt" : "2015-10-04T07:09:29Z",
        "updatedAt" : "2015-10-12T20:30:37Z",
        "lastEditedBy" : "f01f60d2-e084-44c7-baad-7798a8518fb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "15d7f5384640c379f73265ab1bdb72c2b267e4d9",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1292,1296 @@                    journal_args.append((arg.upper(), str(log_args[arg])))\n                try:\n                    journal.send(u\"%s %s\" % (module, journal_msg), **dict(journal_args))\n                except IOError:\n                    # fall back to syslog since logging to journal failed"
  },
  {
    "id" : "3deafa9c-62ca-47d6-902b-db099cf01b77",
    "prId" : 15226,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4493f99-199f-411b-a19e-8a84e64e4745",
        "parentId" : null,
        "authorId" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "body" : "I wasn't entirely sure where to put this. If someone has a better idea, I'd love to hear it.\n",
        "createdAt" : "2016-04-06T18:20:46Z",
        "updatedAt" : "2016-04-12T12:56:08Z",
        "lastEditedBy" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "tags" : [
        ]
      },
      {
        "id" : "e729d112-0398-4980-b751-acbf1e809f58",
        "parentId" : "b4493f99-199f-411b-a19e-8a84e64e4745",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "I'm not sure.  Putting it in basic.py isn't bad for now.  basic is such a mess that in the future we'll probably refactor it into different modules anyway at some indeterminate future date.\n",
        "createdAt" : "2016-04-07T16:24:58Z",
        "updatedAt" : "2016-04-12T12:56:08Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "7290b6282d5b03ccabf67235226b21b78ea29e70",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +517,521 @@\n\nclass AnsibleFallbackNotFound(Exception):\n    pass\n"
  },
  {
    "id" : "a3675798-18d6-4e06-8228-88538f24de3d",
    "prId" : 15419,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f60a5ae2-df4d-4277-9946-08872f63c535",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "We lost the comment about non-utf8 locales here.\n",
        "createdAt" : "2016-04-14T19:22:29Z",
        "updatedAt" : "2016-04-18T18:06:53Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "0ae20299-09e9-4f6d-8ad7-83b5e7b66db7",
        "parentId" : "f60a5ae2-df4d-4277-9946-08872f63c535",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Still there, just moved it down around the actual try/except\n",
        "createdAt" : "2016-04-14T20:36:19Z",
        "updatedAt" : "2016-04-18T18:06:53Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "bbe94ef3-1ed7-48cf-94c2-5703727f38d0",
        "parentId" : "f60a5ae2-df4d-4277-9946-08872f63c535",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Ah -- but the comment isn't about the try except.  It's about reading via the bytes interfaces here so that we get raw bytes in and then transform them to unicode ourselves later.  (ie: the comment is to explain why we use open([..] 'rb'), and stdin.buffer on PY3.\n",
        "createdAt" : "2016-04-14T23:43:52Z",
        "updatedAt" : "2016-04-18T18:06:53Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "0a14f632-6143-4355-bf7b-6662b585affb",
        "parentId" : "f60a5ae2-df4d-4277-9946-08872f63c535",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "got it, moved that back up\n",
        "createdAt" : "2016-04-15T00:25:39Z",
        "updatedAt" : "2016-04-18T18:06:53Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b336832af861c96d986d99aa93ddddfb760d91f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1448,1452 @@        # default case, read from stdin\n        else:\n            if sys.version_info < (3,):\n                buffer = sys.stdin.read()\n            else:"
  },
  {
    "id" : "35920442-d37f-43ee-94b7-9f191178d5f2",
    "prId" : 15913,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e22685e-abd6-4eb5-bbc5-ded7ce501435",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "the error should go to stderr, since sys.exit does this by default (and still returns rc=1) just use that.\n",
        "createdAt" : "2016-05-18T13:07:47Z",
        "updatedAt" : "2016-05-18T13:31:54Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "6f9f715d-635c-4c4e-9fdc-1341c22d1b0d",
        "parentId" : "4e22685e-abd6-4eb5-bbc5-ded7ce501435",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "We talked about this in slack and realized that nothing else is returning json on stderr.  We'll look at it separately and if we decide it's appropriate we'll implement that in 2.2.\n",
        "createdAt" : "2016-05-18T13:58:16Z",
        "updatedAt" : "2016-05-18T13:58:16Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7ee630a779992a6d3c5b8700e5246a7b7b14aaf",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +549,553 @@    except ValueError:\n        # This helper used too early for fail_json to work.\n        print('\\n{\"msg\": \"Error: Module unable to decode valid JSON on stdin.  Unable to figure out what parameters were passed\", \"failed\": true}')\n        sys.exit(1)\n"
  },
  {
    "id" : "079bb1c0-3d3a-4a51-8316-00caf5d26a6b",
    "prId" : 16124,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d164d35e-6b63-4d0a-bf74-57ae77f1c5bc",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "This seems like it could be a util function. \n\nCould module_utils.splitter.split_args() be used here?\n",
        "createdAt" : "2016-06-03T18:28:21Z",
        "updatedAt" : "2016-06-04T23:14:22Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "cc73bcb1-645e-436f-a930-9dab216ce2ff",
        "parentId" : "d164d35e-6b63-4d0a-bf74-57ae77f1c5bc",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "splitter is much more complex than this code.  Since shlex has always worked here I'd rather not.  We should attempt to move as much as possible away from splitter rather than to it.\n",
        "createdAt" : "2016-06-04T15:01:35Z",
        "updatedAt" : "2016-06-04T23:14:22Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "9eadea2e-486a-482b-a7a3-a687236c3635",
        "parentId" : "d164d35e-6b63-4d0a-bf74-57ae77f1c5bc",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Thinking about whether this should be a utility function... the problem I see is that if we attempt to hide the complexity here we come out with an unclean API.  If we don't hide the complexity inside of hte function, then the function really doesn't do anything.\n\nWhat I mean by unclean API is that the function would say \"Takes either text or utf-8 encoded byte strings on input.  On output gives text type on python3 and bytes type on python2\".  The unrelated matrix elements make it unintuitive how the function behaves.  It would be better if the return type was linked to the input type or the input type had to be appropriate for the version of python (or if both values were constant).\n",
        "createdAt" : "2016-06-04T15:08:44Z",
        "updatedAt" : "2016-06-04T23:14:22Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec44c30760f09e13076b1909ed93e4a3a873e6a5",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +2040,2044 @@                to_clean_args = args.decode('utf-8', errors='replace')\n        if isinstance(args, (text_type, binary_type)):\n            to_clean_args = shlex.split(to_clean_args)\n\n        clean_args = []"
  },
  {
    "id" : "fd7fd016-2d8c-40b4-a3fe-2d05718c8f8e",
    "prId" : 16124,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3737cafc-70f6-4149-aaa5-ebbbe9330c91",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "[comment on code that was pre-existing to this pr and doesn't need to be revised now]\n\nMy preference would be to rename these to something like stdout_data/stderr_data. Having vars named 'stdout' and\n'stderr' floating around code dealing with subprocess/popen/select seem error prone, especially since the 'stdout' var here is not a pipe or file object.\n",
        "createdAt" : "2016-06-03T18:36:27Z",
        "updatedAt" : "2016-06-04T23:14:22Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "b962ef77-ca04-44ee-b96a-dbc68f9ad82b",
        "parentId" : "3737cafc-70f6-4149-aaa5-ebbbe9330c91",
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "This changes the return type of this method doesnt it? Do modules need to be changed?\n",
        "createdAt" : "2016-06-03T19:05:25Z",
        "updatedAt" : "2016-06-04T23:14:22Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "62e58c04-e6dc-4344-a743-a9b0635c6487",
        "parentId" : "3737cafc-70f6-4149-aaa5-ebbbe9330c91",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "It shouldn't change the return type.  Remember, this is python2 code being ported to run on python3 in addition.\n",
        "createdAt" : "2016-06-04T14:58:22Z",
        "updatedAt" : "2016-06-04T23:14:22Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec44c30760f09e13076b1909ed93e4a3a873e6a5",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +2100,2104 @@\n            stdout = b('')\n            stderr = b('')\n            rpipes = [cmd.stdout, cmd.stderr]\n"
  },
  {
    "id" : "d9a0fee0-5a96-446e-acce-b4cb707c731f",
    "prId" : 17016,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e8d13a8-1257-4c6a-a5c8-46773a598656",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Missing end parenthesis\n",
        "createdAt" : "2016-08-09T16:52:13Z",
        "updatedAt" : "2016-08-09T16:52:13Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bef595802516531437caaa9a205ecf2fd3b9f4a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +905,909 @@                e = get_exception()\n                if e.errno == 95: # skip certain errors are they are 'ok'.\n                    self.debug(\"Skipped setting selinux on '%s' as the operation is not suported: %s\" % (path, to_str(e))\n                else:\n                    self.fail_json(path=path, msg='invalid selinux context: %s' % str(e), new_context=new_context, cur_context=cur_context, input_was=context)"
  },
  {
    "id" : "b4802cfa-a8f2-428c-a770-90d7a3558814",
    "prId" : 17016,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2554aad6-ccd4-496e-b041-6b415963f636",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "nit: typo: should be # skip certain errors as they are 'ok'\n",
        "createdAt" : "2016-08-09T16:53:03Z",
        "updatedAt" : "2016-08-09T16:53:03Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "2cbb30d5-aa82-4fab-a75d-128b1a822fd2",
        "parentId" : "2554aad6-ccd4-496e-b041-6b415963f636",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "this should not have made it in, was testing diff code\n",
        "createdAt" : "2016-08-09T16:54:44Z",
        "updatedAt" : "2016-08-09T16:54:44Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bef595802516531437caaa9a205ecf2fd3b9f4a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +904,908 @@            except OSError:\n                e = get_exception()\n                if e.errno == 95: # skip certain errors are they are 'ok'.\n                    self.debug(\"Skipped setting selinux on '%s' as the operation is not suported: %s\" % (path, to_str(e))\n                else:"
  },
  {
    "id" : "ca8cabac-ec60-4cef-abaa-4057f066ad02",
    "prId" : 17405,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7f55d5b-eaaf-4120-a4a9-3fb1b0688f9e",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "so this makes more sense now\n",
        "createdAt" : "2016-09-09T21:45:07Z",
        "updatedAt" : "2016-09-19T07:57:24Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcad24993a6bd78b81a81a4858055bbf23f597af",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1942,1946 @@        except (IOError, OSError):\n            e = get_exception()\n            if e.errno not in [errno.EPERM, errno.EXDEV, errno.EACCES, errno.ETXTBSY, errno.EBUSY]:\n                # only try workarounds for errno 18 (cross device), 1 (not permitted),  13 (permission denied)\n                # and 26 (text file busy) which happens on vagrant synced folders and other 'exotic' non posix file systems"
  },
  {
    "id" : "58cd3ea0-0009-4cf4-892d-1fb161d16a41",
    "prId" : 17405,
    "prUrl" : "https://github.com/ansible/ansible/pull/17405#pullrequestreview-1075560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ffca636-cdea-4bc7-bea6-a2b96abdb01e",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "so this changes the point of coverage of unsafe_writes, it will not be used as fallback except for the narrower error on temp file renaming.\n",
        "createdAt" : "2016-09-20T15:05:11Z",
        "updatedAt" : "2016-09-20T15:05:20Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "fa8bebbf-9297-4513-93c1-2846b781ee25",
        "parentId" : "6ffca636-cdea-4bc7-bea6-a2b96abdb01e",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "The answer to that is in the commit message: \"If the code fails in shutil.copy2 or shutil.move this should not be related to issue #13981 since they write to b_tmp_dest_name.\"\n",
        "createdAt" : "2016-09-22T02:40:59Z",
        "updatedAt" : "2016-09-22T02:40:59Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcad24993a6bd78b81a81a4858055bbf23f597af",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1984,1988 @@                            if e.errno != errno.EPERM:\n                                raise\n                        try:\n                            os.rename(b_tmp_dest_name, b_dest)\n                        except (shutil.Error, OSError, IOError):"
  },
  {
    "id" : "5601d77e-8c24-4b24-9470-72b407551b09",
    "prId" : 21211,
    "prUrl" : "https://github.com/ansible/ansible/pull/21211#pullrequestreview-21127560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96c9310e-e088-4dc7-acfb-482f3e299040",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Keep the two PASSSWORD regexes separate since they're operating on two different sets of data with separate constraints.  It's hard enough trying to understand regexes without the regex having conditions that are applicable to a different problem then the code you're looking at.\r\n\r\nDo keep them close together and document a bit about the cases that they're trying to solve, though.\r\n\r\nDifferences between the two: The match for module option names cannot use \"-\" and space.\r\n\r\nThe match for command line args should not be anchored.  We're really just scanning for \"password\", \"passphrase\", etc).  The current regex misses things that could get passed in on the command line like \"--password=foo\" and \"--input=<java><password>Why?Why?Why?</password></java>\"",
        "createdAt" : "2017-02-09T21:44:26Z",
        "updatedAt" : "2017-02-09T22:20:15Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fda076b45fa1e204c2220186a71174324dfeb3d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +168,172 @@from ansible.module_utils._text import to_native, to_bytes, to_text\n\nPASSWORD_MATCH = re.compile(r'^(?:.+[-_\\s])?pass(?:[-_\\s]?(?:word|phrase|wrd|wd)?)(?:[-_\\s].+)?$', re.I)\n\n_NUMBERTYPES = tuple(list(integer_types) + [float])"
  },
  {
    "id" : "cb4ccfd0-7c16-449c-8655-3a8a16564813",
    "prId" : 27119,
    "prUrl" : "https://github.com/ansible/ansible/pull/27119#pullrequestreview-52173801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea4b8ced-dd00-4f3d-b684-d2589d14aaa2",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "does not resolve inheritance https://github.com/ansible/ansible/issues/25097",
        "createdAt" : "2017-07-24T13:31:39Z",
        "updatedAt" : "2017-07-28T15:28:49Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "85527461-368d-425b-b095-57748379e9ed",
        "parentId" : "ea4b8ced-dd00-4f3d-b684-d2589d14aaa2",
        "authorId" : "7a1e5757-684b-4684-bcab-c114385bca28",
        "body" : "Above referenced issue is not seen with this patch applied.\r\neg: Module arg spec\r\n```\r\nargument_spec = dict(\r\n    name=dict(),\r\n    description=dict(no_log=True),\r\n    aggregate=dict(type='list', elements='dict'),\r\n    purge=dict(default=False, type='bool'),\r\n    state=dict(default='present',\r\n               choices=['present', 'absent', 'up', 'down']),\r\n)\r\n\r\naggregate_arg_spec = deepcopy(argument_spec)\r\ndel aggregate_arg_spec['aggregate']\r\n\r\nargument_spec['aggregate']['options'] = aggregate_arg_spec\r\n```\r\nModule run log\r\n```\r\n\"aggregate\": [\r\n    {\r\n        \"description\": \"VALUE_SPECIFIED_IN_NO_LOG_PARAMETER\",\r\n        \"name\": \"ge-0/0/12\",\r\n        \"purge\": false,\r\n        \"state\": \"present\",\r\n    },\r\n    {\r\n        \"description\": \"VALUE_SPECIFIED_IN_NO_LOG_PARAMETER\",\r\n        \"name\": \"ge-0/0/13\",\r\n        \"purge\": false,\r\n        \"state\": \"present\",\r\n    },\r\n    {\r\n        \"description\": \"VALUE_SPECIFIED_IN_NO_LOG_PARAMETER\",\r\n        \"name\": \"ge-0/0/14\",\r\n        \"purge\": false,\r\n        \"state\": \"present\",\r\n    }\r\n]\r\n```",
        "createdAt" : "2017-07-24T18:50:54Z",
        "updatedAt" : "2017-07-28T15:28:49Z",
        "lastEditedBy" : "7a1e5757-684b-4684-bcab-c114385bca28",
        "tags" : [
        ]
      },
      {
        "id" : "329b94ec-e1c6-43a9-9883-251acf1454a9",
        "parentId" : "ea4b8ced-dd00-4f3d-b684-d2589d14aaa2",
        "authorId" : "7a1e5757-684b-4684-bcab-c114385bca28",
        "body" : "`_handle_no_log_values()` is also called from `_handle_options()` recursively in case on mullti-level argspec.\r\nSo if I understand your comment and referenced issue correctly,  this patch does resolve inheritance issue.",
        "createdAt" : "2017-07-25T19:36:47Z",
        "updatedAt" : "2017-07-28T15:28:49Z",
        "lastEditedBy" : "7a1e5757-684b-4684-bcab-c114385bca28",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3e08389dda84aa9e79f73d9e9809e074c4acacc",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +1557,1561 @@        return aliases_results\n\n    def _handle_no_log_values(self, spec=None, param=None):\n        if spec is None:\n            spec = self.argument_spec"
  },
  {
    "id" : "0863f499-2997-40e8-a31b-5ee2c8bb911e",
    "prId" : 27119,
    "prUrl" : "https://github.com/ansible/ansible/pull/27119#pullrequestreview-52984349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4013d07b-49cc-42f9-8382-afffa06dfbef",
        "parentId" : null,
        "authorId" : "7a1e5757-684b-4684-bcab-c114385bca28",
        "body" : "@nitzmahone Added ability to print parent context in case of error as discussed.",
        "createdAt" : "2017-07-28T16:59:27Z",
        "updatedAt" : "2017-07-28T16:59:27Z",
        "lastEditedBy" : "7a1e5757-684b-4684-bcab-c114385bca28",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3e08389dda84aa9e79f73d9e9809e074c4acacc",
    "line" : 269,
    "diffHunk" : "@@ -1,1 +1931,1935 @@                    continue\n\n                self._options_context.append(k)\n\n                if isinstance(params[k], dict):"
  },
  {
    "id" : "28450b90-6ca6-462f-9c3f-89d4c02a5014",
    "prId" : 27119,
    "prUrl" : "https://github.com/ansible/ansible/pull/27119#pullrequestreview-55410410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fdfe755-67df-4748-bc40-f76e9f93a288",
        "parentId" : null,
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Upon further reflection, I think these three lines along with `check_mutually_exclusive` are erroneous for subspecs. We don't currently have a way to specify `required_if/one_of/together` or `mutually_exclusive` for subspecs, so in every case *but* the networking \"aggregate\" thing, this is severely broken (as you'd be making nonsensical checks in most cases)",
        "createdAt" : "2017-08-10T00:28:28Z",
        "updatedAt" : "2017-08-10T00:29:13Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "73491d1b-cca4-4447-99b0-c525d1dd8db8",
        "parentId" : "3fdfe755-67df-4748-bc40-f76e9f93a288",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Only sane way I could think of to support this properly would be to make those values reserved arg names in the arg_spec (so we could define them at any layer of the dict instead of passing them alongside). @bcoca: any other ideas?\r\n",
        "createdAt" : "2017-08-10T00:33:04Z",
        "updatedAt" : "2017-08-10T00:33:04Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3e08389dda84aa9e79f73d9e9809e074c4acacc",
    "line" : 301,
    "diffHunk" : "@@ -1,1 +1963,1967 @@                        self._check_required_together(self.required_together, param)\n                        self._check_required_one_of(self.required_one_of, param)\n                        self._check_required_if(self.required_if, param)\n\n                    self._set_defaults(pre=False, spec=spec, param=param)"
  },
  {
    "id" : "2b4973d1-1a42-4a48-8a3b-fccef0be6d91",
    "prId" : 31677,
    "prUrl" : "https://github.com/ansible/ansible/pull/31677#pullrequestreview-86747611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7cd80d3-1ca5-4b24-b00a-bfa0be6fb4f2",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "We should do this via legal_inputs.  Yes, that will duplicate information that we had to pass to ansiballz via the environment but it keeps the handling of generic information from the controller to a single idiom.",
        "createdAt" : "2018-01-02T22:33:32Z",
        "updatedAt" : "2018-01-12T03:26:47Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "aca6d2cd-eef6-4124-b815-e303879415ab",
        "parentId" : "c7cd80d3-1ca5-4b24-b00a-bfa0be6fb4f2",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "\"[...] handling of generic information from the controller in AnsibleModule.\"",
        "createdAt" : "2018-01-02T23:02:45Z",
        "updatedAt" : "2018-01-12T03:26:47Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "305f8860-66e0-4993-84b8-4f6f64ed8dbf",
        "parentId" : "c7cd80d3-1ca5-4b24-b00a-bfa0be6fb4f2",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Decided abadger will change this so that new-style modules get temporary from an _ansible parameter instead of from the environment.",
        "createdAt" : "2018-01-04T20:20:47Z",
        "updatedAt" : "2018-01-12T03:26:47Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e1d7de7b2d8e24e351ed3f899a6e78c0ea0a52c",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +847,851 @@\n        # set tempdir to remote tmp\n        self.tempdir = os.environ.get('ANSIBLE_REMOTE_TEMP', None)\n\n        if add_file_common_args:"
  },
  {
    "id" : "7ebc7a09-8904-40d4-98d9-7694c331fa84",
    "prId" : 34060,
    "prUrl" : "https://github.com/ansible/ansible/pull/34060#pullrequestreview-84642476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91d068e6-4da2-4fdd-a3a6-feadcbc34f03",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "I think that handling of _command_warn should be done in the command module since it is only useful for command.  Adding it as an undocumented option seems like it would work there.",
        "createdAt" : "2017-12-19T21:32:12Z",
        "updatedAt" : "2017-12-20T21:12:13Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "978b2640-1b68-4990-9934-28976fb74400",
        "parentId" : "91d068e6-4da2-4fdd-a3a6-feadcbc34f03",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "as a dupe to the existing 'warn' option that this sets the default for?",
        "createdAt" : "2017-12-20T01:29:49Z",
        "updatedAt" : "2017-12-20T21:12:13Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "02f19b41342a2dba4a79662deea647eb0869a8cb",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1633,1637 @@            elif k == '_ansible_command_warnings' and v:\n                self._command_warn = v\n\n            elif check_invalid_arguments and k not in legal_inputs:\n                unsupported_parameters.add(k)"
  },
  {
    "id" : "6cd436bb-3b1f-41c4-bdcc-4a9245e6da94",
    "prId" : 38967,
    "prUrl" : "https://github.com/ansible/ansible/pull/38967#pullrequestreview-117332383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74af0fa7-3dc1-44a2-be5e-a37773ac7e86",
        "parentId" : null,
        "authorId" : "de5e1b91-f661-4a4e-9b31-f71565f2ab84",
        "body" : "I think you can extract `if spec is None: continue` to be first, above the apply_defaults check, and the rest would be simpler.\r\nThis branch is untested, consider adding a test case with `apply_defaults` but no `options`.\r\n\r\nAfter that, I think lifting `if params.get(k) is None` to be the outer check might (?) make things even clearer:\r\n```\r\nspec = v.get('options', None)\r\nif spec is None:\r\n    continue\r\nif params.get(k) is None:\r\n    if v.get('apply_defaults', False):\r\n        params[k] = {}  # allows individual option defaults to apply\r\n    else:\r\n        continue\r\n```\r\n(untested so likely buggy.  and \"clearer\" is of course subjective, your call...)",
        "createdAt" : "2018-05-03T16:35:40Z",
        "updatedAt" : "2018-05-03T17:05:45Z",
        "lastEditedBy" : "de5e1b91-f661-4a4e-9b31-f71565f2ab84",
        "tags" : [
        ]
      }
    ],
    "commit" : "50c937ab70ba72dfbb0b6a802d204233f67f37ef",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1981,1985 @@                            params[k] = {}\n                    else:\n                        continue\n                elif spec is None or k not in params or params[k] is None:\n                    continue"
  },
  {
    "id" : "e2d4b545-956e-4bac-82e4-dd571163b3f5",
    "prId" : 39345,
    "prUrl" : "https://github.com/ansible/ansible/pull/39345#pullrequestreview-119259657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8687c852-a847-45a0-98b1-c184faf265c4",
        "parentId" : null,
        "authorId" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "body" : "Wonder if it's worth giving some details of how to know if something should be in here or not, ie what is \"common\"?\r\nMay help reduce confusion in the future and things like `backup`, `force` being added back in",
        "createdAt" : "2018-05-10T10:23:22Z",
        "updatedAt" : "2018-05-10T10:48:13Z",
        "lastEditedBy" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "tags" : [
        ]
      },
      {
        "id" : "76bb722f-f445-4648-a137-a0c308b3a99f",
        "parentId" : "8687c852-a847-45a0-98b1-c184faf265c4",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Yeah.  I can do that when we actually break basic.py apart.",
        "createdAt" : "2018-05-10T21:48:09Z",
        "updatedAt" : "2018-05-10T21:48:09Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "10f0bcce9c3e73f49fb49c667eb357b54235fa85",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +217,221 @@\nFILE_COMMON_ARGUMENTS = dict(\n    # These are things we want. About setting metadata (mode, ownership, permissions in general) on\n    # created files\n    mode=dict(type='raw'),"
  },
  {
    "id" : "414f6ce7-5c96-41e4-84d0-c956be1f5d7b",
    "prId" : 39345,
    "prUrl" : "https://github.com/ansible/ansible/pull/39345#pullrequestreview-119259725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "865d725d-f749-4b52-b309-6940f9c00905",
        "parentId" : null,
        "authorId" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "body" : "arugments -> arguments\r\n ",
        "createdAt" : "2018-05-10T10:44:46Z",
        "updatedAt" : "2018-05-10T10:48:13Z",
        "lastEditedBy" : "d7d8721c-7ad0-4834-9a3d-b53ca8656789",
        "tags" : [
        ]
      },
      {
        "id" : "45f1a7a6-ea05-47a7-bf6f-98e8a837f245",
        "parentId" : "865d725d-f749-4b52-b309-6940f9c00905",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "k.  I'll fix that in a followup PR",
        "createdAt" : "2018-05-10T21:48:22Z",
        "updatedAt" : "2018-05-10T21:48:23Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "10f0bcce9c3e73f49fb49c667eb357b54235fa85",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +235,239 @@    # not taken by the file module, but other action plugins call the file module so this ignores\n    # them for now. In the future, the caller should take care of removing these from the module\n    # arugments before calling the file module.\n    content=dict(no_log=True),  # used by copy\n    backup=dict(),  # Used by a few modules to create a remote backup before updating the file"
  },
  {
    "id" : "f1c3699e-ab31-4418-91b9-4a9349bf58d8",
    "prId" : 39924,
    "prUrl" : "https://github.com/ansible/ansible/pull/39924#pullrequestreview-123542585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beb95f77-e4e1-48e5-a4b1-bc103ce03526",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "You always have to check whether these are safe to add when you do.  I took a look and print_function looks safe (We use parenthesis appropriately for every case).  division is safe but when we add it we should change line 620 as well:\r\n``` python\r\n-return '%.2f %s' % (float(size) / limit, suffix)\r\n+return '%.2f %s' % (size / limit, suffix)\r\n```",
        "createdAt" : "2018-05-26T01:05:28Z",
        "updatedAt" : "2018-05-27T00:24:27Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "65b057f44784276a7d50869246d62604dd36af7a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3,7 @@# Simplified BSD License (see licenses/simplified_bsd.txt or https://opensource.org/licenses/BSD-2-Clause)\n\nfrom __future__ import absolute_import, division, print_function\n\nSIZE_RANGES = {"
  },
  {
    "id" : "d306a8d2-03d7-47d8-ae3e-4e609eb57448",
    "prId" : 41078,
    "prUrl" : "https://github.com/ansible/ansible/pull/41078#pullrequestreview-125824200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecb0a1ea-1b44-43b4-9e5c-c8bfb68d7b0f",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "this is a backwards incompatible change, the syslog setting has always ONLY affected machines not using systemd's journal",
        "createdAt" : "2018-06-04T21:01:34Z",
        "updatedAt" : "2018-06-07T17:44:28Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "621e65af-568c-41cf-98a3-bdf59bae6300",
        "parentId" : "ecb0a1ea-1b44-43b4-9e5c-c8bfb68d7b0f",
        "authorId" : "99edf79e-01a4-4286-84fe-2b62551f20dd",
        "body" : "Thank you for your review!!\r\nI noticed that LOG_LOCAL0 to 7 are not defined in systemd.journal, therefore I referenced those variables from syslog module. I think you are right.\r\nBut other facilities like LOG_ALERT, LOG_NOTICE... in systemd.journal are import from syslog module in systemd.journal:\r\n```\r\nfrom syslog import (LOG_EMERG, LOG_ALERT, LOG_CRIT, LOG_ERR,\r\n                    LOG_WARNING, LOG_NOTICE, LOG_INFO, LOG_DEBUG)\r\n```\r\nI think that systemd.journal depends on syslog module eventually.\r\nPlease let me know if I made misunderstanding.",
        "createdAt" : "2018-06-05T05:38:20Z",
        "updatedAt" : "2018-06-07T17:44:28Z",
        "lastEditedBy" : "99edf79e-01a4-4286-84fe-2b62551f20dd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b64a07db3189ebad4984edbeb4f0ecf1224a154",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2186,2190 @@                    journal_args.append((arg.upper(), str(log_args[arg])))\n                try:\n                    if HAS_SYSLOG:\n                        # If syslog_facility specified, it needs to convert\n                        #  from the facility name to the facility code, and"
  },
  {
    "id" : "b3811123-65e0-473d-8452-35e689604f8d",
    "prId" : 43548,
    "prUrl" : "https://github.com/ansible/ansible/pull/43548#pullrequestreview-144143260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc29ca61-c759-4eaa-b988-78e0ba663473",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "I'm not entirely sure what we want to do with these... The libs which override json are still present on pypi.  But I bet nowadays they  will break more than ansible so we don't have to worry about them.  On the other hand, I would have thought that when I had to add the code that handled that.",
        "createdAt" : "2018-08-06T15:12:06Z",
        "updatedAt" : "2018-08-08T20:18:09Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "b9d6ed9e-545c-427c-a4b7-b2c04747e1c1",
        "parentId" : "cc29ca61-c759-4eaa-b988-78e0ba663473",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "I've added back in the python-json checks.",
        "createdAt" : "2018-08-07T19:10:29Z",
        "updatedAt" : "2018-08-08T20:18:09Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "36d978befae789340225d58839d02cb70134d97f",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +118,122 @@    print('\\n{\"msg\": \"Error: ansible requires the stdlib json and was not found!\", \"failed\": true}')\n    sys.exit(1)\n\nAVAILABLE_HASH_ALGORITHMS = dict()\ntry:"
  },
  {
    "id" : "753fd7fe-e2a1-44d4-8d44-06995d90b8c1",
    "prId" : 44726,
    "prUrl" : "https://github.com/ansible/ansible/pull/44726#pullrequestreview-157772278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11128951-dc63-4fbf-863c-7eaa9956cca4",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "what if msg does not exist?, shouldn't it also be a get",
        "createdAt" : "2018-09-21T15:51:18Z",
        "updatedAt" : "2018-09-21T15:51:18Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "ced27f1d-5d49-4b79-92fd-622f2d303809",
        "parentId" : "11128951-dc63-4fbf-863c-7eaa9956cca4",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "in any case, deprecations should always be a list, unsure how a dict is making its way here",
        "createdAt" : "2018-09-21T15:52:05Z",
        "updatedAt" : "2018-09-21T15:52:20Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "18f13259-f244-486e-acb9-cf0fe8898f0a",
        "parentId" : "11128951-dc63-4fbf-863c-7eaa9956cca4",
        "authorId" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "body" : "Both python and powershell module_utils define it as a list of dictionaries.\r\n- https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/basic.py#L959\r\n- https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/powershell/Ansible.ModuleUtils.Legacy.psm1#L125\r\n\r\nIt originates from this: https://github.com/ansible/ansible/pull/20884 and I reimplemented it for Windows.",
        "createdAt" : "2018-09-21T16:12:45Z",
        "updatedAt" : "2018-09-21T16:18:55Z",
        "lastEditedBy" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "tags" : [
        ]
      },
      {
        "id" : "29c35830-1e6d-4436-b357-d28fcc4ff68b",
        "parentId" : "11128951-dc63-4fbf-863c-7eaa9956cca4",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "ah, nvmd, misread the code, thought you were operating on the 'top level' ... yes it is a list of dictionaries but we allowed for pre-existing string cases",
        "createdAt" : "2018-09-21T16:14:51Z",
        "updatedAt" : "2018-09-21T16:14:51Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "74aec07e-e0f8-46fb-bfcd-823353d650a7",
        "parentId" : "11128951-dc63-4fbf-863c-7eaa9956cca4",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "unsure why we need mapping, need to look at original bug, the self.deprecate(d) should be able to handle dicts already",
        "createdAt" : "2018-09-21T16:17:09Z",
        "updatedAt" : "2018-09-21T16:17:09Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "f9c03956-788b-421a-969c-e9992fb9a25a",
        "parentId" : "11128951-dc63-4fbf-863c-7eaa9956cca4",
        "authorId" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "body" : "So I guess this should be backported as well.",
        "createdAt" : "2018-09-21T16:17:15Z",
        "updatedAt" : "2018-09-21T16:17:15Z",
        "lastEditedBy" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "tags" : [
        ]
      },
      {
        "id" : "e5ec4e66-e5ee-438b-a919-926b271b319f",
        "parentId" : "11128951-dc63-4fbf-863c-7eaa9956cca4",
        "authorId" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "body" : "If the `module.deprecate()` call was used, the message cannot be missing. And we rewrote all modules to use this call.",
        "createdAt" : "2018-09-21T16:18:40Z",
        "updatedAt" : "2018-09-21T16:18:40Z",
        "lastEditedBy" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "tags" : [
        ]
      },
      {
        "id" : "091394c4-3e66-41c5-a248-31aa952aee5e",
        "parentId" : "11128951-dc63-4fbf-863c-7eaa9956cca4",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "yeah, it makes sense now, i was just being dumb, modules doing right thing, async_wrapper is acting as proxy but not intelligently so it is passing the final artifact, which we have to reprocess again",
        "createdAt" : "2018-09-21T16:45:10Z",
        "updatedAt" : "2018-09-21T16:45:48Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "085127093ea42733f10969757a86650917ff8f64",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2329,2333 @@                        self.deprecate(d[0], version=d[1])\n                    elif isinstance(d, Mapping):\n                        self.deprecate(d['msg'], version=d.get('version', None))\n                    else:\n                        self.deprecate(d)"
  },
  {
    "id" : "2e359817-f295-4e44-9957-d7c385530692",
    "prId" : 49449,
    "prUrl" : "https://github.com/ansible/ansible/pull/49449#pullrequestreview-183296721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23481a7f-df50-47ed-b07e-36fa87313c05",
        "parentId" : null,
        "authorId" : "96aeecbb-c275-402c-b904-a795c82efb48",
        "body" : "I would love to see API documentation for this parameter.",
        "createdAt" : "2018-12-10T17:02:52Z",
        "updatedAt" : "2018-12-10T17:08:19Z",
        "lastEditedBy" : "96aeecbb-c275-402c-b904-a795c82efb48",
        "tags" : [
        ]
      },
      {
        "id" : "edd40e99-df38-4722-b453-a01fdc78322a",
        "parentId" : "23481a7f-df50-47ed-b07e-36fa87313c05",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "done",
        "createdAt" : "2018-12-10T17:08:22Z",
        "updatedAt" : "2018-12-10T17:08:22Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "43e8bbf43472d494e77d52ad4a593cb7143aa8af",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2696,2700 @@    def run_command(self, args, check_rc=False, close_fds=True, executable=None, data=None, binary_data=False, path_prefix=None, cwd=None,\n                    use_unsafe_shell=False, prompt_regex=None, environ_update=None, umask=None, encoding='utf-8', errors='surrogate_or_strict',\n                    expand_user_and_vars=True, pass_fds=None, before_communicate_callback=None, raise_timeouts=False):\n        '''\n        Execute a command, returns rc, stdout, and stderr."
  },
  {
    "id" : "1a391f39-4914-4833-82bb-db8ba182da39",
    "prId" : 51357,
    "prUrl" : "https://github.com/ansible/ansible/pull/51357#pullrequestreview-197106147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c97a4d59-e6ee-4dbf-baf7-a2b27ec1c170",
        "parentId" : null,
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "The `getattr` a few lines above would also need to be cast to a list, as it returns a tuple by default:\r\n\r\n```pycon\r\n>>> hashlib.algorithms\r\n('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')\r\n```",
        "createdAt" : "2019-01-28T15:44:24Z",
        "updatedAt" : "2019-01-30T01:40:54Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "d20370f400dcff8d9093e7c0f55b25e9bdcd9063",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +134,138 @@    if algorithms is None:\n        # python 2.5+\n        algorithms = ['md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512']\n    for algorithm in algorithms:\n        AVAILABLE_HASH_ALGORITHMS[algorithm] = getattr(hashlib, algorithm)"
  },
  {
    "id" : "902ee52d-eb97-4ec9-ae3e-a6468156a9a6",
    "prId" : 51404,
    "prUrl" : "https://github.com/ansible/ansible/pull/51404#pullrequestreview-199124862",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53c0f7a2-5773-4bf0-a31c-0eaf8f2e61ac",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "you don't need to set default here, it already was set in configuration definition and should always be passed in",
        "createdAt" : "2019-01-31T22:09:07Z",
        "updatedAt" : "2019-02-19T17:14:04Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "5a259464-c5e1-42b2-8de3-1ace46f9211a",
        "parentId" : "53c0f7a2-5773-4bf0-a31c-0eaf8f2e61ac",
        "authorId" : "7c547162-2334-4e33-a627-e146840da9ec",
        "body" : "If no default is set it could be problematic for debugging modules if the user doesn't set `_ansible_string_conversion_action` in their args.json file.",
        "createdAt" : "2019-01-31T22:12:56Z",
        "updatedAt" : "2019-02-19T17:14:04Z",
        "lastEditedBy" : "7c547162-2334-4e33-a627-e146840da9ec",
        "tags" : [
        ]
      },
      {
        "id" : "4ca0160a-6db0-4afc-b715-63ececba1081",
        "parentId" : "53c0f7a2-5773-4bf0-a31c-0eaf8f2e61ac",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "not really, since the 'if' already treats 'any non ignore/error' as warn",
        "createdAt" : "2019-01-31T22:20:23Z",
        "updatedAt" : "2019-02-19T17:14:04Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "55cedacb-43a8-4dbf-92c8-83aabd453906",
        "parentId" : "53c0f7a2-5773-4bf0-a31c-0eaf8f2e61ac",
        "authorId" : "7c547162-2334-4e33-a627-e146840da9ec",
        "body" : "True, should have read that part first before commenting.",
        "createdAt" : "2019-01-31T22:22:35Z",
        "updatedAt" : "2019-02-19T17:14:04Z",
        "lastEditedBy" : "7c547162-2334-4e33-a627-e146840da9ec",
        "tags" : [
        ]
      },
      {
        "id" : "c775c8e7-e20c-4dd7-8cc5-67febcdb1014",
        "parentId" : "53c0f7a2-5773-4bf0-a31c-0eaf8f2e61ac",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "@bcoca I had to set this the default here to get the unit tests to pass. When an AnsibleModule object is instantiated in isolation, this property being undefined caused `AttributeError: 'AnsibleModule' object has no attribute '_string_conversion_action'`.  I decided that the tests were correct and decided to fix the code. \r\n\r\nIn normal operation this is set properly via config. Not setting this property makes the object dependent on external settings. Initializing this property makes the class more self-contained.",
        "createdAt" : "2019-02-01T15:26:55Z",
        "updatedAt" : "2019-02-19T17:14:04Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "c99e04db468013bc68619e8fc907734ea6079cfe",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +793,797 @@        self._clean = {}\n        self._string_conversion_action = ''\n\n        self.aliases = {}\n        self._legal_inputs = ['_ansible_%s' % k for k in PASS_VARS]"
  },
  {
    "id" : "c603e460-37a7-4fa4-adb8-4a29f63cd563",
    "prId" : 51404,
    "prUrl" : "https://github.com/ansible/ansible/pull/51404#pullrequestreview-203437123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62057fe7-49e9-40fc-918f-68ac1ff331e4",
        "parentId" : null,
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "The message is now maybe a bit too verbose, since it will be prepended by `argument %s is of type %s and we were unable to convert to %s: ` (i.e. it contains the type twice, and the information that it should be converted to a string).",
        "createdAt" : "2019-02-13T20:38:39Z",
        "updatedAt" : "2019-02-19T17:14:04Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "9eefa315-ccaa-4f26-8f54-87e67f003b1b",
        "parentId" : "62057fe7-49e9-40fc-918f-68ac1ff331e4",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "I was thinking that too. I'll refine it a bit.",
        "createdAt" : "2019-02-13T20:43:11Z",
        "updatedAt" : "2019-02-19T17:14:04Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "c99e04db468013bc68619e8fc907734ea6079cfe",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1868,1872 @@        if self._string_conversion_action == 'error':\n            msg = common_msg.capitalize()\n            raise TypeError(msg)\n        elif self._string_conversion_action == 'warn':\n            msg = ('The value {0!r} (type {0.__class__.__name__}) in a string field was converted to {1!r} (type string). '"
  },
  {
    "id" : "747ed76f-fe2e-41d1-8fff-7d37535a43c8",
    "prId" : 53687,
    "prUrl" : "https://github.com/ansible/ansible/pull/53687#pullrequestreview-216839041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e510c3d1-607c-42e7-b78c-0f698188277d",
        "parentId" : null,
        "authorId" : "96aeecbb-c275-402c-b904-a795c82efb48",
        "body" : "Can we add a `key` name as well ? It is very confusing message if we have multiple warnings like this - \r\n\r\n```\r\n[WARNING]: The value 600 (type int) in a string field was converted to u'600' (type string). If this does not look like what you expect,\r\nquote the entire value to ensure it does not change.\r\n\r\n [WARNING]: The value {'Name': 'aws-blorp_rhel7'} (type dict) in a string field was converted to u\"{'Name': 'aws-blorp_rhel8'}\" (type\r\nstring). If this does not look like what you expect, quote the entire value to ensure it does not change.\r\n\r\n [WARNING]: The value 300 (type int) in a string field was converted to u'300' (type string). If this does not look like what you expect,\r\nquote the entire value to ensure it does not change.\r\n```\r\n\r\nMaybe something like - \r\n\r\n```suggestion\r\n                msg = ('The value {0!r} (type {0.__class__.__name__}) in a string field of argument {1} was converted to {2!r} (type string). '\r\n```",
        "createdAt" : "2019-03-20T05:55:18Z",
        "updatedAt" : "2019-03-20T21:20:44Z",
        "lastEditedBy" : "96aeecbb-c275-402c-b904-a795c82efb48",
        "tags" : [
        ]
      },
      {
        "id" : "6092ecf2-a6ab-466c-aabd-2ba59ecc9f7e",
        "parentId" : "e510c3d1-607c-42e7-b78c-0f698188277d",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "I'm not sure of a good way to do this since we don't have the name of the `key` available, only the value to check or convert.",
        "createdAt" : "2019-03-20T16:10:36Z",
        "updatedAt" : "2019-03-20T21:20:44Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "1405cffd-bdca-492a-b85a-4c8f5b876c3b",
        "parentId" : "e510c3d1-607c-42e7-b78c-0f698188277d",
        "authorId" : "96aeecbb-c275-402c-b904-a795c82efb48",
        "body" : "Got it. But this is very confusing error message. anyways, not a blocker as such.",
        "createdAt" : "2019-03-20T16:17:50Z",
        "updatedAt" : "2019-03-20T21:20:44Z",
        "lastEditedBy" : "96aeecbb-c275-402c-b904-a795c82efb48",
        "tags" : [
        ]
      },
      {
        "id" : "d25ab0be-5771-4d1f-8b78-c272d2f41b73",
        "parentId" : "e510c3d1-607c-42e7-b78c-0f698188277d",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "I figured the value would be enough to track down the problematic field. Even if you have multiple fields with the same value, the error only prints once (a byproduct of having the same error message text).\r\n\r\nBut I see that as a warning, it gets printed at the top of the play and that removes a lot of context. 🤔 As an `error`, it's much more clear what is happening.\r\n\r\nThere is room for improvement here, for sure.",
        "createdAt" : "2019-03-20T16:31:26Z",
        "updatedAt" : "2019-03-20T21:20:44Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1b14df418c5ba8dbbbd055ab0c3b049b5dae41",
    "line" : 325,
    "diffHunk" : "@@ -1,1 +1623,1627 @@                raise TypeError(to_native(msg))\n            elif self._string_conversion_action == 'warn':\n                msg = ('The value {0!r} (type {0.__class__.__name__}) in a string field was converted to {1!r} (type string). '\n                       'If this does not look like what you expect, {2}').format(value, to_text(value), common_msg)\n                self.warn(to_native(msg))"
  },
  {
    "id" : "e4b53af6-d9ca-42ee-9967-e3bce92ef589",
    "prId" : 53698,
    "prUrl" : "https://github.com/ansible/ansible/pull/53698#pullrequestreview-263764860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9464306f-a797-4658-a71e-82989fb5ef8f",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "its internal, but i would still use the warn method instead of accessing the list directly",
        "createdAt" : "2019-07-18T15:46:40Z",
        "updatedAt" : "2019-07-18T15:46:57Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "07d74842-9898-4b2f-975d-30477ecc5cca",
        "parentId" : "9464306f-a797-4658-a71e-82989fb5ef8f",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "The reason was that `self.warn()` calls `self.log()`, and `no_log` isn't initialized at this point. That is probably not a problem because we are not outputting values, but it might be better to avoid calling `self.warn()` before someone later adds the value here and suddenly no-log values are dumped into the logs.",
        "createdAt" : "2019-07-18T16:12:42Z",
        "updatedAt" : "2019-07-18T16:12:42Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "b7e7f4f3-6d5a-46c9-b854-99d34010873e",
        "parentId" : "9464306f-a797-4658-a71e-82989fb5ef8f",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "ah, missed that, good point, nvmd me.",
        "createdAt" : "2019-07-18T16:14:04Z",
        "updatedAt" : "2019-07-18T16:14:04Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "99f26cfdc655564edefbbaeae1d222e893dc0282",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1424,1428 @@        alias_results, self._legal_inputs = handle_aliases(spec, param, alias_warnings=alias_warnings)\n        for option, alias in alias_warnings:\n            self._warnings.append('Both option %s and its alias %s are set.' % (option_prefix + option, option_prefix + alias))\n        return alias_results\n"
  },
  {
    "id" : "6055a4b3-76ba-4323-8fbd-5762fa886375",
    "prId" : 66918,
    "prUrl" : "https://github.com/ansible/ansible/pull/66918#pullrequestreview-352535416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05c1b6c6-e92d-462e-8410-46ade6b371d1",
        "parentId" : null,
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "Good fix! Thanks for catching this.",
        "createdAt" : "2020-02-03T20:20:01Z",
        "updatedAt" : "2020-02-03T21:22:35Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "da5abef4df4e0d13c2785f108e48974926ba8cf5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1429,1433 @@                               \"%s\" % to_native(te), invocation={'module_args': 'HIDDEN DUE TO FAILURE'})\n\n        for message in list_deprecations(spec, param):\n            deprecate(message['msg'], message['version'])\n"
  }
]