[
  {
    "id" : "612e1e96-5a67-478c-99d5-587f1dce9195",
    "prId" : 49398,
    "prUrl" : "https://github.com/ansible/ansible/pull/49398#pullrequestreview-181060175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8d668e3-697a-4255-a238-68ac53ddba82",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "You don't need start with this code as it will be virtually the same for all the things launched by apply_async in your loop.  You can just use a single scalar local variable to hold the value.  (It also is the end time or max time (and maxtime is really max_timeout), not start).\r\n\r\nAdding that together with the note that we should probably process statvfs information separate from the uuid info:\r\n``` python\r\nresults[mount] = {'info': mount_info,\r\n                            'statvfs': pool.apply_async(get_mount_size, (mount_info['mount'],)),\r\n                            'uuid': uuids.get(mount_info['device']) or pool.apply_async(self._udevadm_uuid, (mount_info['device'],)),}\r\nmax_time = time.time() + max_timeout\r\n```",
        "createdAt" : "2018-12-03T19:17:19Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "cd7275c6-c059-4034-a1fc-c830630bd5d7",
        "parentId" : "b8d668e3-697a-4255-a238-68ac53ddba82",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "not as single scalar since we are tracking timeout PER child , otherwise we could just leave the general timeout at top of the method",
        "createdAt" : "2018-12-03T19:23:53Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "5f974a5a-cb5c-4663-a39e-ef8a75298421",
        "parentId" : "b8d668e3-697a-4255-a238-68ac53ddba82",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "You are not tracking timeout per child with this code.  The  time you're recording here is when you ask the library to queue the work.... It's not when the work starts.  Therefore, you might as well save a single general timeout at the top of the method.",
        "createdAt" : "2018-12-03T19:40:00Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "f76575de-0ae2-457d-ae66-5f347bdecb22",
        "parentId" : "b8d668e3-697a-4255-a238-68ac53ddba82",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "well, yes, queueing per child to be exact, in some of my most extreme tests this was up to 2secs diff, so i opted to keep it per child",
        "createdAt" : "2018-12-03T19:45:26Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "2513153c-87e1-4dee-98ef-03cf56317e7f",
        "parentId" : "b8d668e3-697a-4255-a238-68ac53ddba82",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "I was looking at time.clock() at the begining of the threaded function as that would give us a more accurate 'execution time'  but we cannot compare it before the `.get` which is the thing we skip on timeout.",
        "createdAt" : "2018-12-03T19:49:42Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "9d7cd29d-d0a2-446e-833d-09842e1a372a",
        "parentId" : "b8d668e3-697a-4255-a238-68ac53ddba82",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "What was your extreme test?",
        "createdAt" : "2018-12-03T19:59:52Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "83904323-c09d-449b-9acf-37b4560a98ae",
        "parentId" : "b8d668e3-697a-4255-a238-68ac53ddba82",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "hosts with +300 mount points",
        "createdAt" : "2018-12-03T20:16:21Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "3834fc45-ce30-48fd-80f0-6cc51217a099",
        "parentId" : "b8d668e3-697a-4255-a238-68ac53ddba82",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "I think you should rerun your test... The cost to invoke apply_async() on 300 elements is .01 seconds here. Adding in the regex, it's still only .05 seconds.  .05 seconds on a 10 second timeout is virtually nothing.",
        "createdAt" : "2018-12-04T00:59:22Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "8496fb1b-5b29-437c-ae9c-824dfda390eb",
        "parentId" : "b8d668e3-697a-4255-a238-68ac53ddba82",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "Close to what i see when its a single target, but i'm testing on 50-70 vms on same host (2cpu) with variable mount points (shell below creates them) in parallel, which is not a fair test. \r\n\r\nI was trying to find a point in which i could check the difference in performance between threaded/non threaded and I ended up with this, which also showed me the queuing diff can get big on busy system. The check themselves need more variety, seems like bind mounts end up caching the info making it a non optimal test, still trying to figure out something i can whip up locally.\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nADD=$((${RANDOM}%100))\r\nLIM=$((250+${ADD}))\r\n\r\nfor i in $(seq 1 $LIM)\r\ndo\r\n        mkdir /mnt/test_$i\r\n        mount -o bind /var /mnt/test_$i\r\ndone\r\n```\r\n",
        "createdAt" : "2018-12-04T01:40:07Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ca0d08deeb243a6ca57daa2a0b997974129861f",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +491,495 @@                              'extra': pool.apply_async(self.get_mount_info, (mount, device, uuids)),\n                              'timelimit': time.time() + maxtime}\n\n        pool.close()  # done with new workers, start gc\n"
  },
  {
    "id" : "50a3954e-9887-4985-a287-2e8746dd8f1b",
    "prId" : 49398,
    "prUrl" : "https://github.com/ansible/ansible/pull/49398#pullrequestreview-185334907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ceec38a-f637-41ca-b4da-59949aad22c1",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "@nitzmahone and I talked about this last night and the timeout is an expectation of how long fact gathering as a whole will take, not how long any specific piece of fact gathering will take.  We thought that probably the best place to enforce that sort of fact gathering would be in the action plugin being worked on in a separate PR.  However, for this PR, it would make more sense to at least try to replicate the status quo as much as possible, ie: take a time at the start of this function.  Then every time we check the time to see if it's time to exit due to timeout, we compare time.time() > function_start_time + timeout to see if it's time to exit.",
        "createdAt" : "2018-12-14T22:15:24Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "83a7d4c6-f842-4e8e-82ae-5affa8dcbba9",
        "parentId" : "0ceec38a-f637-41ca-b4da-59949aad22c1",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "from the docs on setup module\r\n```\r\n- gather_timeout\r\n        Set the default timeout in seconds for individual fact gathering\r\n```",
        "createdAt" : "2018-12-15T01:17:01Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "c8d9ad6d-21bd-496f-a886-4a2ff8a235c4",
        "parentId" : "0ceec38a-f637-41ca-b4da-59949aad22c1",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "as to what 'individual facts' are we never define, so here i was using the timeout per fact, but running them in parallel as much as possible, the total might take a bit more but it should be close enough. We read all ohter facts serially, but we can improve that with this kind of code going forward.",
        "createdAt" : "2018-12-15T01:18:42Z",
        "updatedAt" : "2018-12-19T21:58:24Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ca0d08deeb243a6ca57daa2a0b997974129861f",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +517,521 @@                    mounts.append(results[mount]['info'])\n                    del results[mount]\n                    break\n            else:\n                # avoid cpu churn"
  },
  {
    "id" : "ede0c5da-061a-492e-a0ee-b249cf5668ec",
    "prId" : 55466,
    "prUrl" : "https://github.com/ansible/ansible/pull/55466#pullrequestreview-237508018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a72277b-93a3-467d-8ecb-745fb0303856",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "you would still need to change 2 lines down",
        "createdAt" : "2019-04-17T21:03:02Z",
        "updatedAt" : "2019-06-27T16:32:47Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "7c4d7efe-af95-416d-bb5b-407a88ef4363",
        "parentId" : "2a72277b-93a3-467d-8ecb-745fb0303856",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "also the other files in facts that make the same assumptions",
        "createdAt" : "2019-04-17T21:03:22Z",
        "updatedAt" : "2019-06-27T16:32:47Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "23afc275-0d72-45da-911c-1206ffcaa9ac",
        "parentId" : "2a72277b-93a3-467d-8ecb-745fb0303856",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "The comparison two lines down is safe because it will default to `None`.\r\n\r\nhttps://github.com/ansible/ansible/blob/d85757c89264522720a27602d37ca5590d695397/lib/ansible/module_utils/facts/hardware/linux.py#L247\r\n\r\nI looked through the facts code and most instances fail safe, meaning they don't do things that would result in an exception like I did on line 243 (`None` has not `startswith()` method. Doh!).",
        "createdAt" : "2019-05-14T21:19:19Z",
        "updatedAt" : "2019-06-27T16:32:47Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5bdf3cdd0483b497aec1837a3276567bc2bb3cf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +241,245 @@        # and sometimes includes both 'processor' and 'Processor'.\n        # Always use 'processor' count for ARM systems\n        if collected_facts.get('ansible_architecture', '').startswith(('armv', 'aarch')):\n            i = processor_occurence\n"
  },
  {
    "id" : "f7d6a668-ded4-4233-a2c7-ec762e40bf34",
    "prId" : 66569,
    "prUrl" : "https://github.com/ansible/ansible/pull/66569#pullrequestreview-378388452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2207a102-29d6-4873-9ddd-201fadc952ab",
        "parentId" : null,
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "It's great that Python has this capability, but it's not always avaialble. In this conext (Python >=3 on Linux systems) it _should_ be available, but it's probably best to catch `AttributeError` just in case it's not available.",
        "createdAt" : "2020-01-29T19:30:10Z",
        "updatedAt" : "2020-05-14T21:19:26Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "aa86527d-c6f3-4782-a74f-ed90c5edacdb",
        "parentId" : "2207a102-29d6-4873-9ddd-201fadc952ab",
        "authorId" : "b9f03b8a-e334-43af-98f1-47fe344d3087",
        "body" : "Hm, I'd find it odd to not trust in what the docs of the standard library say. The docs do not state platform-dependent availability of the method.\r\nBut I totally see your point and checked when this method has been introduced. In 3.3. ([search in 3.2.6 docs with no results](https://docs.python.org/release/3.2.6/search.html?q=affinity), [search in 3.3.0 docs with results](https://docs.python.org/release/3.3.0/search.html?q=affinity)) and made the version check more accurate. Hence, I couldn't use ``PY3`` or is there another way to check for minor version numbers using ``six``?",
        "createdAt" : "2020-01-30T09:30:01Z",
        "updatedAt" : "2020-05-14T21:19:26Z",
        "lastEditedBy" : "b9f03b8a-e334-43af-98f1-47fe344d3087",
        "tags" : [
        ]
      },
      {
        "id" : "5def4e8e-bf3e-4e4c-a3de-f1dedf9e11d3",
        "parentId" : "2207a102-29d6-4873-9ddd-201fadc952ab",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "> The docs do not state platform-dependent availability of the method.\r\n\r\nIn particular, this isn't available on macOS. I found this caveat in the Python docs [here](https://docs.python.org/3/library/os.html#interface-to-the-scheduler):\r\n> They are only available on some Unix platforms.\r\n\r\nAgain, probably not a big deal since Ansible should only be using this file on Linux where it should be available. But I like to be overly cautious.\r\n\r\n> ...introduced. In 3.3. ... and made the version check more accurate.\r\n\r\nAnsible only supports Python >= 3.5, so testing for `PY3` is sufficient.",
        "createdAt" : "2020-01-30T17:36:03Z",
        "updatedAt" : "2020-05-14T21:19:26Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "cd70ecdf-ff41-4858-8dd3-cdfbc68198d4",
        "parentId" : "2207a102-29d6-4873-9ddd-201fadc952ab",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "I think this approach is good. Exceptions in Python are not as expensive as in other languages so I don't see a problem with this approach. I would suggest reworking this a bit to make it easier for the reader, namely returning early when possible and eliminating the need for a conditional.\r\n\r\n```python\r\n                # Default value unless we find something better\r\n                cpu_facts['processor_nproc'] = processor_occurence\r\n\r\n                try:\r\n                     cpu_facts['processor_nproc'] = len(\r\n                         os.sched_getaffinity(0)\r\n                     )\r\n                except AttributeError:\r\n                    # in Python < 3.3 and MacOS (shouldn't happen here,\r\n                    # but to be safe) ``sched_getaffinity`` is not available\r\n                    try:\r\n                        cmd = get_bin_path('nproc')\r\n                    except ValueError:\r\n                        return cpu_facts\r\n\r\n                    rc, out, _err = self.module.run_command(cmd)\r\n                    if rc == 0:\r\n                        cpu_facts['processor_nproc'] = int(out)\r\n```\r\n\r\nThe `cpu_facts.setdefault()` line can be omitted with this approach. This may be more lines of code, but I think it's a bit easier to follow. Just my opinion.",
        "createdAt" : "2020-02-04T16:42:48Z",
        "updatedAt" : "2020-05-14T21:19:26Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "4e5e9881-a48c-42d1-93c6-50c20ab19c8d",
        "parentId" : "2207a102-29d6-4873-9ddd-201fadc952ab",
        "authorId" : "b9f03b8a-e334-43af-98f1-47fe344d3087",
        "body" : "Moving the assignment of the default value up is fine with me.\r\n\"Replacing\" the `else` of the `try … except` with a `return` wouldn't increase readability for me.\r\nAlso, if code needs to be added below the computation of `processor_nproc`, it is probably easier if we do not return in corner cases but keep going.\r\nBut if you insist, I wouldn't veto.",
        "createdAt" : "2020-02-05T10:55:04Z",
        "updatedAt" : "2020-05-14T21:19:26Z",
        "lastEditedBy" : "b9f03b8a-e334-43af-98f1-47fe344d3087",
        "tags" : [
        ]
      },
      {
        "id" : "3aae56dc-f9f3-43b7-9db4-4f3ac5452b88",
        "parentId" : "2207a102-29d6-4873-9ddd-201fadc952ab",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "Ok, let's move the default assignment up and keep the `else` without returning early. The main way I think this should read is \"start with `processor_occurence` and use something better if we can\".",
        "createdAt" : "2020-02-05T16:44:34Z",
        "updatedAt" : "2020-05-14T21:19:26Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "7b7117bc-30d9-4dc0-bdf2-546b95c43d2a",
        "parentId" : "2207a102-29d6-4873-9ddd-201fadc952ab",
        "authorId" : "b9f03b8a-e334-43af-98f1-47fe344d3087",
        "body" : "So just as the PR is right now, no?",
        "createdAt" : "2020-02-05T23:16:05Z",
        "updatedAt" : "2020-05-14T21:19:26Z",
        "lastEditedBy" : "b9f03b8a-e334-43af-98f1-47fe344d3087",
        "tags" : [
        ]
      },
      {
        "id" : "c4986861-5c16-4514-b877-c5917e89b823",
        "parentId" : "2207a102-29d6-4873-9ddd-201fadc952ab",
        "authorId" : "b9f03b8a-e334-43af-98f1-47fe344d3087",
        "body" : "> So just as the PR is right now, no?\r\n\r\nIs this resolved? Any obligations left for a merge?",
        "createdAt" : "2020-03-20T10:59:08Z",
        "updatedAt" : "2020-05-14T21:19:26Z",
        "lastEditedBy" : "b9f03b8a-e334-43af-98f1-47fe344d3087",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a9d1f48adc6d309f92e39ba1c11bbe9ea7b8a80",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +284,288 @@                try:\n                    cpu_facts['processor_nproc'] = len(\n                        os.sched_getaffinity(0)\n                    )\n                except AttributeError:"
  },
  {
    "id" : "d26c9002-d836-4faf-b933-cdd0682c792f",
    "prId" : 70284,
    "prUrl" : "https://github.com/ansible/ansible/pull/70284#pullrequestreview-437827952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7932bba6-0125-4691-946b-3e65b692c138",
        "parentId" : null,
        "authorId" : "442212cb-3c29-4a71-98b5-cbd0b20c8c17",
        "body" : "Are you able to read this path on your system without root?",
        "createdAt" : "2020-06-25T19:49:49Z",
        "updatedAt" : "2020-07-24T03:51:00Z",
        "lastEditedBy" : "442212cb-3c29-4a71-98b5-cbd0b20c8c17",
        "tags" : [
        ]
      },
      {
        "id" : "3fd32334-11b2-4f5e-89f4-456db23b4767",
        "parentId" : "7932bba6-0125-4691-946b-3e65b692c138",
        "authorId" : "fd767403-a078-44f2-b3d3-75cd3faab948",
        "body" : "Yes, sure. That file is readable for everyone:\r\n```\r\n[ec2-user@ip-10-xx-xx-xx ~]$ id\r\nuid=1000(ec2-user) gid=1000(ec2-user) groups=1000(ec2-user),4(adm),10(wheel),190(systemd-journal) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\r\n\r\n[ec2-user@ip-10-xx-xx-xx ~]$ ls -la /sys/block/nvme0n1/device/serial\r\n-r--r--r--. 1 root root 4096 Jun 25 03:07 /sys/block/nvme0n1/device/serial\r\n\r\n[ec2-user@ip-10-xx-x-xx ~]$ cat /sys/block/nvme0n1/device/serial\r\nvol0901e25e812a4f8bb\r\n```\r\n",
        "createdAt" : "2020-06-25T20:18:41Z",
        "updatedAt" : "2020-07-24T03:51:00Z",
        "lastEditedBy" : "fd767403-a078-44f2-b3d3-75cd3faab948",
        "tags" : [
        ]
      }
    ],
    "commit" : "7be2e4c67b729105b4f91bf02614ed9ce95b6d98",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +702,706 @@\n            # we can get NVMe device's serial number from /sys/block/<name>/device/serial\n            serial_path = \"/sys/block/%s/device/serial\" % (block)\n\n            if sg_inq:"
  },
  {
    "id" : "33617ef7-6545-4aee-8b61-84846e5e7c4c",
    "prId" : 74714,
    "prUrl" : "https://github.com/ansible/ansible/pull/74714#pullrequestreview-672712403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5935e338-e12f-47d1-a333-e9fa0874452b",
        "parentId" : null,
        "authorId" : "feee35ce-ece6-4d76-97f1-8d0105412f07",
        "body" : "`results[mount]['info']['note']`must be changed here, because `res.get()` contains no information about the timeout happened here, e.g.\r\n`'Timed out while attempting to get extra information: %s.' % (to_text(res.get()))`\r\n\r\nAlso a `self.module.warn('Timed out while attempting to get extra information for mount %s: %s.' % (mount, to_text(res.get())))` should be added here, otherwise the information that a timeout happened is only in the facts note, and so mostly hidden from the user.",
        "createdAt" : "2021-06-01T06:55:06Z",
        "updatedAt" : "2021-06-02T06:28:47Z",
        "lastEditedBy" : "feee35ce-ece6-4d76-97f1-8d0105412f07",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b1df50650f1576f1fba36dc66855f95a12708f6",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +582,586 @@                    elif time.time() > results[mount]['timelimit']:\n                        done = True\n                        results[mount]['info']['note'] = 'Could not get extra information: %s.' % (to_text(res.get()))\n                except Exception as e:\n                    import traceback"
  }
]