[
  {
    "id" : "49748a42-1606-4f9e-860a-0ce4a0ddb01f",
    "prId" : 31546,
    "prUrl" : "https://github.com/ansible/ansible/pull/31546#pullrequestreview-89901237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a455a5c-18fb-4faf-94b6-b48e2776f536",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "Code looks good to me but wouldn't mind seeing some unit tests.\r\n\r\na little refactoring may make it easier to test, something like:\r\n\r\n``` python\r\n    def _parse_lsdev(self, out_lsdev):\r\n        devices = []\r\n        for line in out_lsdev.splitlines():\r\n            field = line.split()\r\n\r\n            device_name = field[0]\r\n            device_state = field[1]\r\n            device_type = field[2:]\r\n\r\n            devices.append({'name': device_name,\r\n                            'state': device_state,\r\n                            'type': device_type})\r\n\r\n        return devices\r\n\r\n    def _parse_lsattr(self, out_lsattr):\r\n        device_attrs = {}\r\n        for attr in out_lsattr.splitlines():\r\n            attr_fields = attr.split()\r\n\r\n            attr_name = attr_fields[0]\r\n            attr_parameter = attr_fields[1]\r\n\r\n            # attrs.append({'name': attr_name,\r\n            #              'parameter': attr_parameter})\r\n            device_attrs[attr_name] = attr_parameter\r\n\r\n        return device_attrs\r\n\r\n    def _get_device_attrs(self, lsattr_cmd, device_name):\r\n        lsattr_cmd_args = [lsattr_cmd, '-E', '-l', device_name]\r\n        rc, out_lsattr, err = self.module.run_command(lsattr_cmd_args)\r\n        device_attrs = self._parse_lsattr(out_lsattr)\r\n        return device_attrs\r\n\r\n    def _get_devices(self, lsdev_cmd):\r\n        rc, out_lsdev, err = self.module.run_command(lsdev_cmd)\r\n        devices = self._parse_lsdev(out_lsdev)\r\n        return devices\r\n\r\n    def get_device_facts(self):\r\n        device_facts = {}\r\n        device_facts['devices'] = {}\r\n\r\n        lsdev_cmd = self.module.get_bin_path('lsdev', True)\r\n        lsattr_cmd = self.module.get_bin_path('lsattr', True)\r\n\r\n        rc, out_lsdev, err = self.module.run_command(lsdev_cmd)\r\n\r\n        devices = self._get_devices(lsdev_cmd, out_lsdev)\r\n\r\n        for device in devices:\r\n            device_attrs = self._get_device_attrs(lsattr_cmd, device['name'])\r\n\r\n            device_facts['devices'][device['name']] = {\r\n                'state': device['state'],\r\n                'type': ' '.join(device['type']),\r\n                'attributes': device_attrs\r\n            }\r\n\r\n        return device_facts\r\n```\r\n\r\nThe _parse_lsattr and _parse_lsdev could be unit tests with sample output from the commands",
        "createdAt" : "2018-01-18T19:19:13Z",
        "updatedAt" : "2018-01-18T19:19:14Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c314f24a3d3f9e4268d9ac0b83c2e0f728f83a2c",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +235,239 @@\n        return device_facts\n\n\nclass AIXHardwareCollector(HardwareCollector):"
  }
]