[
  {
    "id" : "5c445316-3c50-4434-bed1-858c088fa3b8",
    "prId" : 51715,
    "prUrl" : "https://github.com/ansible/ansible/pull/51715#pullrequestreview-214583913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7b0fa49-bc22-411d-866e-39bbd161223e",
        "parentId" : null,
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "I am split on my feelings about this function.  It doesn't work the same as it did as part of `AnsibleModule`.\r\n\r\nBefore, it would error on the first time that `count > 1`, whereas we aren't doing so now, we are collecting them all, but then not using them all.\r\n\r\nAdditionally, this is more like `list_mutually_exclusive`.  I think this function should raise some form of Exception, instead of just returning a list of the mutually exclusive args that were provided by the user.",
        "createdAt" : "2019-03-12T15:01:55Z",
        "updatedAt" : "2019-03-14T15:37:00Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "a26a1ab6-d485-4c18-b440-7b8b81b27b86",
        "parentId" : "d7b0fa49-bc22-411d-866e-39bbd161223e",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "> Before, it would error on the first time that count > 1, whereas we aren't doing so now, \r\n\r\nI wanted the new check method to return complete results which may be useful to the caller. I will change how this output is presented in `fail_json()` so that we use all the results and give a better error message. That is a change in behavior, but I think it's for the better.\r\n\r\n> I think this function should raise some form of Exception, instead of just returning a list of the mutually exclusive args that were provided by the user.\r\n\r\nAgreed. I will create an `AnsibleModuleParameterError` exception that contains the results of the failed check.",
        "createdAt" : "2019-03-13T15:15:47Z",
        "updatedAt" : "2019-03-14T15:37:00Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "85f07db5-8a45-4a7e-b851-1cc135b6ce3c",
        "parentId" : "d7b0fa49-bc22-411d-866e-39bbd161223e",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "I implemented a custom error class (b371dc7c28), then just did it using `TypeError` and passing an already formatted message (f59cb9c9d0). I think starting simple with a built-in error class is the best approach. We can later subclass it if we want to add more parameters to the raised exception.",
        "createdAt" : "2019-03-14T15:26:57Z",
        "updatedAt" : "2019-03-14T15:37:00Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "1260ec87ec77884f6185b825b91cb6ed0f7586ac",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@\ndef check_mutually_exclusive(terms, module_parameters):\n    \"\"\"Check mutually exclusive terms against argument parameters. Accepts\n    a single list or list of lists that are groups of terms that should be\n    mutually exclusive with one another"
  },
  {
    "id" : "4c7e5b1d-0517-4b0f-8c47-e5c62462b2bd",
    "prId" : 51715,
    "prUrl" : "https://github.com/ansible/ansible/pull/51715#pullrequestreview-214078251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10427980-2557-4704-a3e7-86e32a222699",
        "parentId" : null,
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "The same comment applies here.  I question the name vs what this is doing.  I feel like these `check_*` methods should be raising exceptions that are then caught in their `AnsibleModule` counterparts.  As it is, these are acting as \"listing\" functions, that then require the caller to know what a failure is based on what is returned.\r\n\r\nAs I am typing this I am still somewhat struggling, as it may be useful for the caller to also have the list.\r\n\r\nI think in the end what I would like to see is an exception to indicate the failure, but with access in the exception to the list.",
        "createdAt" : "2019-03-12T15:06:40Z",
        "updatedAt" : "2019-03-14T15:37:00Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "e72f3bef-1e98-4f0e-b338-026c0396d742",
        "parentId" : "10427980-2557-4704-a3e7-86e32a222699",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "I changed all these functions to raise an exception and pass the results as a parameter (along with the original parameters as well, though we probably don't need those) to the exception. That way it can be used by the caller catching the exception.",
        "createdAt" : "2019-03-13T16:45:03Z",
        "updatedAt" : "2019-03-14T15:37:00Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "1260ec87ec77884f6185b825b91cb6ed0f7586ac",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@\ndef check_required_one_of(terms, module_parameters):\n    \"\"\"Check each list of terms to ensure at least one exists in the given module\n    parameters. Accepts a list of lists or tuples.\n"
  }
]