[
  {
    "id" : "3ecf9166-ded7-4000-9bb7-be288390a2ba",
    "prId" : 32738,
    "prUrl" : "https://github.com/ansible/ansible/pull/32738#pullrequestreview-75451793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d10cee56-7090-4b98-bfb7-30fac8d2928f",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "I would move the previous:\r\n```from jinja2 import Environment```\r\ninto an 'else/pass' here to make the choice obvious vs the 'masking' of the previous import",
        "createdAt" : "2017-11-09T14:21:32Z",
        "updatedAt" : "2018-05-30T15:06:26Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b1b4bfa30841948fc849c0e095300ab31ca8d2b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +70,74 @@\nUSE_JINJA2_NATIVE = False\nif C.DEFAULT_JINJA2_NATIVE:\n    try:\n        from jinja2.nativetypes import NativeEnvironment as Environment"
  },
  {
    "id" : "e0a99209-e06b-4584-866c-7963735c00c0",
    "prId" : 52194,
    "prUrl" : "https://github.com/ansible/ansible/pull/52194#pullrequestreview-219204305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0023ecd-983d-473b-8089-ba9672210513",
        "parentId" : null,
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "Braces aren't actually needed if you don't supply args\r\n\r\n```suggestion\r\n        raise NotImplementedError\r\n```",
        "createdAt" : "2019-03-20T19:15:03Z",
        "updatedAt" : "2019-03-28T14:30:33Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      },
      {
        "id" : "40f44404-1894-40be-9714-27b92a9ecc13",
        "parentId" : "e0023ecd-983d-473b-8089-ba9672210513",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Yeah, but just because it works doesn't necessarily make it a great practice (see https://www.python.org/dev/peps/pep-0317/ for color); I'd personally rather be explicit about creating a value rather than having an under-the-covers instantiation from the type. I'm also aware of at least one instance where we got nailed by that when someone converted an implicit raise like that to an assignment and borked a bunch of stuff because we were passing around the type instead of an instance (yay for testing, but still). ",
        "createdAt" : "2019-03-26T23:11:58Z",
        "updatedAt" : "2019-03-28T14:30:33Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "31cc0f2894e4da105f153cfd0e190ca4e602775d",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +327,331 @@\n    def __delitem__(self, key):\n        raise NotImplementedError()\n\n    def __iter__(self):"
  },
  {
    "id" : "d23856e1-8c07-432d-bc80-ff6999d9279c",
    "prId" : 54106,
    "prUrl" : "https://github.com/ansible/ansible/pull/54106#pullrequestreview-217914444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28b73b75-038f-41c3-bb9f-7bab177210eb",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "You may want to consider making a wrapper function that checks the jinja2 version before overriding.  The reason being that jinja2 could enhance their dict function in the future at which point we would be providing less features rather than more.",
        "createdAt" : "2019-03-22T18:32:29Z",
        "updatedAt" : "2019-03-22T18:32:30Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a64adb5638da59e5badc2b994a1bb32f5927ac8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +728,732 @@\n            # jinja2 global is inconsistent across versions, this normalizes them\n            t.globals['dict'] = dict\n\n            if disable_lookups:"
  },
  {
    "id" : "502c00a8-87f8-4db6-8105-6017cb186b9a",
    "prId" : 57489,
    "prUrl" : "https://github.com/ansible/ansible/pull/57489#pullrequestreview-246657851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8215a2fd-a78b-40ba-a86c-0ebf4fff1f5f",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "won't we get false positives unless we always consume the generator?  `'{{ this is valid }} but then  {{ this is not'`",
        "createdAt" : "2019-06-06T15:38:35Z",
        "updatedAt" : "2019-06-06T15:38:54Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "03c61428-6d4d-426b-9369-b2495e332b55",
        "parentId" : "8215a2fd-a78b-40ba-a86c-0ebf4fff1f5f",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "This is based on the recommendation @jimi-c made.  It's a best effort guess at it being a template.  As long as the first token has a matching closing token as the next token, then we make the assumption it is a template.  It may fail to template later though.",
        "createdAt" : "2019-06-06T15:42:37Z",
        "updatedAt" : "2019-06-06T15:42:37Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "867a5fd5-dcff-4d58-bd46-0abbf85ecc46",
        "parentId" : "8215a2fd-a78b-40ba-a86c-0ebf4fff1f5f",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "we'll get syntax error on templating later anyways ",
        "createdAt" : "2019-06-06T15:46:14Z",
        "updatedAt" : "2019-06-06T15:46:15Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "223b2686636e2bb51ad4aad7ad4b9d720648b5b6",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +190,194 @@                elif comment:\n                    continue\n                return False\n    except TemplateSyntaxError:\n        return False"
  },
  {
    "id" : "36e39afb-a98d-47c0-a7f5-fe9377d05128",
    "prId" : 57489,
    "prUrl" : "https://github.com/ansible/ansible/pull/57489#pullrequestreview-246654179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7d7216b-bbfd-4a9c-b10a-0528b42f6e20",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "since you removed all usage, im fine with omitting this line (or at least wrap in deprecation msg)",
        "createdAt" : "2019-06-06T15:40:25Z",
        "updatedAt" : "2019-06-06T15:40:25Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "223b2686636e2bb51ad4aad7ad4b9d720648b5b6",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +645,649 @@        return False\n\n    templatable = _contains_vars = is_template\n\n    def _convert_bare_variable(self, variable):"
  },
  {
    "id" : "d6431c68-b7d4-4c62-8bd0-a7a0f994ded5",
    "prId" : 68014,
    "prUrl" : "https://github.com/ansible/ansible/pull/68014#pullrequestreview-368990194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "239269c6-6169-464d-8c1a-3cb53becf96f",
        "parentId" : null,
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "Need to add a comment about why I'm not just using `functools.wraps` or `functools.update_wrapper`. This is a copy from py3.7, that doesn't traceback.",
        "createdAt" : "2020-03-04T17:47:33Z",
        "updatedAt" : "2020-06-08T15:05:20Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "579e42c2e1333a76c94f2bd4e469f8078fd29529",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +259,263 @@    # This code is duplicated from ``functools.update_wrapper`` from Py3.7.\n    # ``functools.update_wrapper`` was failing when the func was ``functools.partial``\n    for attr in ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'):\n        try:\n            value = getattr(func, attr)"
  },
  {
    "id" : "0105ebf8-d15e-404e-94c0-9d5f89cc36ce",
    "prId" : 68014,
    "prUrl" : "https://github.com/ansible/ansible/pull/68014#pullrequestreview-425364034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2192dfda-1f2d-4180-a1be-f03379f49b2b",
        "parentId" : null,
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "I was thinking of doing this for native jinja too, either here in `_finalize` or in `ansible_native_concat`, to solve https://github.com/ansible/ansible/issues/59019.",
        "createdAt" : "2020-03-06T19:40:04Z",
        "updatedAt" : "2020-06-08T15:05:20Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      },
      {
        "id" : "c783b435-309a-48fc-a164-9808b90406ab",
        "parentId" : "2192dfda-1f2d-4180-a1be-f03379f49b2b",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "I could probably move this above the jinja2 native check in that case then.  I just figured I wouldn't touch native, but I can see a benefit.",
        "createdAt" : "2020-03-06T19:44:57Z",
        "updatedAt" : "2020-06-08T15:05:20Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "3ce5f314-520d-4d70-8d4d-50d96383d0c7",
        "parentId" : "2192dfda-1f2d-4180-a1be-f03379f49b2b",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "Done.",
        "createdAt" : "2020-06-05T14:42:04Z",
        "updatedAt" : "2020-06-08T15:05:20Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "579e42c2e1333a76c94f2bd4e469f8078fd29529",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +870,874 @@            # of a template. See ``_unroll_iterator`` for the other case. This is probably\n            # unncessary\n            return list(thing)\n\n        if USE_JINJA2_NATIVE:"
  },
  {
    "id" : "0c7ba93f-a3d9-4c90-8ecb-73c832415609",
    "prId" : 68560,
    "prUrl" : "https://github.com/ansible/ansible/pull/68560#pullrequestreview-465911544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d22514c-d309-403c-9db3-7ce95c104170",
        "parentId" : null,
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "I question whether this should be an arg for `Templar`.  Just a thought, not a requirement.  Although that could make it harder to use.",
        "createdAt" : "2020-08-11T19:14:03Z",
        "updatedAt" : "2020-09-02T12:30:36Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "4843c120-271b-4195-a024-09ebbec176ca",
        "parentId" : "6d22514c-d309-403c-9db3-7ce95c104170",
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "I have gone through like 20 iterations of implementing this feature and in like half of them I had `environment_class` as an argument for `Templar` and for a reason I can't remember anymore I decided this was easier.",
        "createdAt" : "2020-08-12T13:24:13Z",
        "updatedAt" : "2020-09-02T12:30:36Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      }
    ],
    "commit" : "51702cb34339cc45269b460905ea2cf61e5198b6",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +613,617 @@        self._fail_on_undefined_errors = C.DEFAULT_UNDEFINED_VAR_BEHAVIOR\n\n        environment_class = AnsibleNativeEnvironment if USE_JINJA2_NATIVE else AnsibleEnvironment\n\n        self.environment = environment_class("
  },
  {
    "id" : "a1ab4e55-db3d-4b8c-b7ba-962dce8a73a6",
    "prId" : 70988,
    "prUrl" : "https://github.com/ansible/ansible/pull/70988#pullrequestreview-464135549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b3d19e2-cc7d-4583-87f5-cb4f055fbacf",
        "parentId" : null,
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "Should we also do this in `JinjaPluginIntercept.__getitem__`?  Since this comes from a config, in order to work with something from a collection it would have to go there too I think.",
        "createdAt" : "2020-08-06T20:08:44Z",
        "updatedAt" : "2020-08-10T08:28:15Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "20b26046-d8e8-4229-a2f5-c605b768a056",
        "parentId" : "3b3d19e2-cc7d-4583-87f5-cb4f055fbacf",
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : ":+1: Done.",
        "createdAt" : "2020-08-10T11:05:20Z",
        "updatedAt" : "2020-08-10T11:05:21Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      }
    ],
    "commit" : "9149130130016237ced373425fd6cd89998a3548",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +643,647 @@                    except KeyError:\n                        continue\n                self._filters[string_filter] = _wrap_native_text(orig_filter)\n\n        return self._filters.copy()"
  },
  {
    "id" : "0d13fc90-6012-4061-86df-2f8f65590fbe",
    "prId" : 71463,
    "prUrl" : "https://github.com/ansible/ansible/pull/71463#pullrequestreview-475540404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed8a03e6-990b-4962-9689-412237d580e5",
        "parentId" : null,
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "Will roles that provide filters or tests, and are loaded using `include_role` end up being excluded due to this?",
        "createdAt" : "2020-08-26T14:02:39Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "d75c665b-ecee-4a60-83a1-1fb8f4cfd787",
        "parentId" : "ed8a03e6-990b-4962-9689-412237d580e5",
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "Not according to my testing. That check is basically an equivalent of what we currently do:\r\nhttps://github.com/ansible/ansible/blob/9792d631b1b92356d41e9a792de4b2479a1bce44/lib/ansible/template/__init__.py#L628\r\n\r\nFrom my understanding it works (this PR and the current code) also for roles due to us creating templars several times so filters/tests are loaded correctly for roles.\r\n\r\nWe might want to make some adjustments/optimizations but for this PR I just wanted to move `get_filters/get_tests`.\r\n\r\nWe have an integration test that somewhat tests this https://github.com/ansible/ansible/blob/devel/test/integration/targets/template/filter_plugins.yml.",
        "createdAt" : "2020-08-26T14:17:07Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      },
      {
        "id" : "dc3f1826-8429-4d18-9c95-8f6287e85e86",
        "parentId" : "ed8a03e6-990b-4962-9689-412237d580e5",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "+1\r\n\r\nSo it seems that we must just load `Templar` at the right places, that it doesn't make a difference.",
        "createdAt" : "2020-08-26T14:22:07Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f6c6d2c65d655e9d940c558e832c03b244879",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +418,422 @@    def _load_ansible_plugins(self):\n        if self._ansible_plugins_loaded:\n            return\n\n        for plugin in self._pluginloader.all():"
  },
  {
    "id" : "99a9e324-486a-4346-bffb-4d51027134fd",
    "prId" : 71463,
    "prUrl" : "https://github.com/ansible/ansible/pull/71463#pullrequestreview-478021610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c3f046f-640b-4dcd-80cb-f328aebadb0f",
        "parentId" : null,
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "Just because I like to comment on places where I wasn't sure about something. This confused me at first. But since the filters listed in `STRING_TYPE_FILTERS` should never produce a generator or other iterator, we need not wrap them with `_unroll_iterator` also.",
        "createdAt" : "2020-08-28T20:57:36Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f6c6d2c65d655e9d940c558e832c03b244879",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +429,433 @@                    self._delegatee[plugin_name] = _wrap_native_text(plugin)\n                else:\n                    self._delegatee[plugin_name] = _unroll_iterator(plugin)\n\n        self._ansible_plugins_loaded = True"
  },
  {
    "id" : "59a6ae24-9289-40e8-9f33-383b26bc0630",
    "prId" : 71463,
    "prUrl" : "https://github.com/ansible/ansible/pull/71463#pullrequestreview-488771239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ae77f07-0cc5-45f9-8e32-b5289e05faeb",
        "parentId" : null,
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "Do we have a deprecation warning somewhere for 3rd party stuff or has it not been usable for a while? It looks like we still have code that's passing shared_loader_obj to Templar too. Looks good to me besides that.",
        "createdAt" : "2020-09-14T19:37:39Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      },
      {
        "id" : "c721eb7e-4670-4a1a-a664-e0c68f4e7881",
        "parentId" : "2ae77f07-0cc5-45f9-8e32-b5289e05faeb",
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "Looks like I missed some places where we still pass `shared_loader_obj` to `Templar` which I have just removed. `shared_loader_obj` variables that we still have in the codebase are basically `ansible.plugins.loader` now.\r\n\r\nI am not aware of any deprecation warning for 3rd party stuff nor do I know how do we handle cases like this. I don't think we need to necessarily keep that arg there since we don't support Python API. Do you think we should remove it?",
        "createdAt" : "2020-09-15T14:29:34Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      },
      {
        "id" : "dc8be542-9dc3-4f7e-8d17-74e973257b98",
        "parentId" : "2ae77f07-0cc5-45f9-8e32-b5289e05faeb",
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "I was mostly just curious since you have `\"used\"` on the line below and it made me think it might not have really worked. It's not a direct comparison, but we used to allow importing cache plugins directly so when I switched that over to use the config manager I kept backwards compat and deprecated the behavior to try to give external stuff a heads up (like here https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/cache/__init__.py#L65). It's probably less important in the current landscape of collections.",
        "createdAt" : "2020-09-15T14:54:02Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f6c6d2c65d655e9d940c558e832c03b244879",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +610,614 @@\n    def __init__(self, loader, shared_loader_obj=None, variables=None):\n        # NOTE shared_loader_obj is deprecated, ansible.plugins.loader is used\n        # directly. Keeping the arg for now in case 3rd party code \"uses\" it.\n        self._loader = loader"
  },
  {
    "id" : "20d1be30-fee9-4a22-87ae-208cf4711862",
    "prId" : 71463,
    "prUrl" : "https://github.com/ansible/ansible/pull/71463#pullrequestreview-548046752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbb24f69-2ab9-4b8f-88dd-3339bfb88982",
        "parentId" : null,
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "I think the original code (and thus this code as well) might be incorrect here- we should only be applying this for builtin filters that match `STRING_TYPE_FILTERS`, not any collection-hosted filters that happen to have the same name... ",
        "createdAt" : "2020-09-14T23:01:26Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "b1998d2b-3155-444a-be4d-63dd521dafda",
        "parentId" : "fbb24f69-2ab9-4b8f-88dd-3339bfb88982",
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "Good catch. Since `STRING_TYPE_FILTERS` is configurable we should also allow for collection-hosted filters to be specified there as FQCN, so something like the below?\r\n```diff\r\ndiff --git a/lib/ansible/template/__init__.py b/lib/ansible/template/__init__.py\r\nindex bfc0251408..c37ab3f9f7 100644\r\n--- a/lib/ansible/template/__init__.py\r\n+++ b/lib/ansible/template/__init__.py\r\n@@ -510,7 +510,7 @@ class JinjaPluginIntercept(MutableMapping):\r\n                 for func_name, func in iteritems(method_map()):\r\n                     fq_name = '.'.join((parent_prefix, func_name))\r\n                     # FIXME: detect/warn on intra-collection function name collisions\r\n-                    if self._jinja2_native and func_name in C.STRING_TYPE_FILTERS:\r\n+                    if self._jinja2_native and (fq_name in C.STRING_TYPE_FILTERS or (fq_name.startswith.(('ansible.builtin.', 'ansible.legacy')) and func_name in C.STRING_TYPE_FILTERS)):\r\n                         self._collection_jinja_func_cache[fq_name] = _wrap_native_text(func)\r\n                     else:\r\n                         self._collection_jinja_func_cache[fq_name] = _unroll_iterator(func)\r\n```\r\n\r\nEither way this should be fixed in a separate PR so it is easier to backport to `2.10`.",
        "createdAt" : "2020-09-15T14:08:47Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      },
      {
        "id" : "0da775ce-98ad-42e4-96fb-ce3f5867cfaa",
        "parentId" : "fbb24f69-2ab9-4b8f-88dd-3339bfb88982",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Yeah, separate PR is fine, though we should also not be relying on config for that for anything but the builtins and maybe local non-collection plugins- collections should be able to provide that metadata directly (probably via something like the metadata-only decorator stuff I was playing with).",
        "createdAt" : "2020-09-15T16:24:09Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "0293acf9-5da7-4e97-b379-a53cc588dd20",
        "parentId" : "fbb24f69-2ab9-4b8f-88dd-3339bfb88982",
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "Opened https://github.com/ansible/ansible/pull/71801 to address this.",
        "createdAt" : "2020-09-18T06:36:27Z",
        "updatedAt" : "2020-12-09T09:37:32Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      },
      {
        "id" : "5500754b-163b-4948-b915-e82d89578910",
        "parentId" : "fbb24f69-2ab9-4b8f-88dd-3339bfb88982",
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "Fixed in https://github.com/ansible/ansible/pull/71801",
        "createdAt" : "2020-12-09T10:34:22Z",
        "updatedAt" : "2020-12-09T10:34:23Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f6c6d2c65d655e9d940c558e832c03b244879",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +532,536 @@                    fq_name = '.'.join((parent_prefix, func_name))\n                    # FIXME: detect/warn on intra-collection function name collisions\n                    if self._pluginloader.class_name == 'FilterModule':\n                        if self._jinja2_native and fq_name.startswith(('ansible.builtin.', 'ansible.legacy.')) and \\\n                                func_name in C.STRING_TYPE_FILTERS:"
  },
  {
    "id" : "2c86d843-a8a9-4d6e-a45b-32b42bfe7cea",
    "prId" : 73277,
    "prUrl" : "https://github.com/ansible/ansible/pull/73277#pullrequestreview-593953653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "075fb62e-08f4-4cf9-b052-f35a93c444bf",
        "parentId" : null,
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "`self._fail_on_lookup_errors` appears to be always `True`. Can we remove it or do we keep it for future and/or 3rd party Templars?",
        "createdAt" : "2021-02-19T08:21:09Z",
        "updatedAt" : "2021-02-19T08:21:09Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa7119c13a1a3fc0929f999b3215958f367b0159",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1020,1024 @@            raise AnsibleUndefinedVariable(e)\n        except Exception as e:\n            if self._fail_on_lookup_errors:\n                msg = u\"An unhandled exception occurred while running the lookup plugin '%s'. Error was a %s, original message: %s\" % \\\n                      (name, type(e), to_text(e))"
  }
]