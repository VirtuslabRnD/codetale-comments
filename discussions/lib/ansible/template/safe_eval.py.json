[
  {
    "id" : "ecbbfb24-c0f5-4cad-872b-e97a14b8b8a2",
    "prId" : 14304,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94f6c4f5-7210-41e1-ac51-426011322ff0",
        "parentId" : null,
        "authorId" : "bb007a40-d48e-4e73-9d9a-aa1b8423bba4",
        "body" : "I am not sure that this merits displaying error - as per the comment below this line, there is some special handling for this exception that results in passing the string back as-is for later processing. I appear to have been relying on this behavior, as I am now getting a ton of SyntaxError warnings on Jinja2 templates inlined in my group_vars YAML.\n",
        "createdAt" : "2016-09-07T23:42:58Z",
        "updatedAt" : "2016-09-07T23:51:45Z",
        "lastEditedBy" : "bb007a40-d48e-4e73-9d9a-aa1b8423bba4",
        "tags" : [
        ]
      }
    ],
    "commit" : "718bb6401d89c2a5795b1c035986e331fcba5d48",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +130,134 @@            return result\n    except SyntaxError as e:\n        display.warning('SyntaxError in safe_eval() on expr: %s (%s)' % (expr, e))\n        # special handling for syntax errors, we just return\n        # the expression string back as-is"
  },
  {
    "id" : "10f8e9ec-8853-487a-a08f-562abcb16283",
    "prId" : 68576,
    "prUrl" : "https://github.com/ansible/ansible/pull/68576#pullrequestreview-415363744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de02315c-a0dd-4a37-b733-2f9feaf5b486",
        "parentId" : null,
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "Do we want errors with this?\r\n```suggestion\r\n        compiled = compile(parsed_tree, to_native(expr, errors='surrogate_or_strict'), 'eval')\r\n```",
        "createdAt" : "2020-05-19T21:55:26Z",
        "updatedAt" : "2020-05-20T09:04:30Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "aa2bce2c-66d3-44b8-9cc4-d37f7c745092",
        "parentId" : "de02315c-a0dd-4a37-b733-2f9feaf5b486",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "I'm not sure if that makes sense. I want to look at this some more tomorrow. Today was hectic. ðŸ¤¯",
        "createdAt" : "2020-05-19T21:56:47Z",
        "updatedAt" : "2020-05-20T09:04:30Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "98de6446-ef5f-4bbc-a674-f13661d5a88d",
        "parentId" : "de02315c-a0dd-4a37-b733-2f9feaf5b486",
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "I don't think we need `errors='surrogate_or_strict'` for that. It's `filename` argument for the `compile` function [0]:\r\n\r\n> The filename argument should give the file from which the code was read; pass some recognizable value if it wasnâ€™t read from a file ('<string>' is commonly used).\r\n\r\nSo the value is information only and we are fine with omitting \"bad bytes\" from the value.\r\n\r\n[0] https://docs.python.org/3/library/functions.html#compile",
        "createdAt" : "2020-05-20T09:02:51Z",
        "updatedAt" : "2020-05-20T09:04:30Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      },
      {
        "id" : "f9f24d90-b1d3-4b5d-ad71-79a837929c84",
        "parentId" : "de02315c-a0dd-4a37-b733-2f9feaf5b486",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "Ok, that makes sense. Thanks for the great explanation.",
        "createdAt" : "2020-05-20T13:58:05Z",
        "updatedAt" : "2020-05-20T13:58:05Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "692ba84bda342dfe72f72b6b7f8ca1717969c9cd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +141,145 @@        parsed_tree = ast.parse(expr, mode='eval')\n        cnv.visit(parsed_tree)\n        compiled = compile(parsed_tree, to_native(expr), 'eval')\n        # Note: passing our own globals and locals here constrains what\n        # callables (and other identifiers) are recognized.  this is in"
  }
]