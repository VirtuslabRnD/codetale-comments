[
  {
    "id" : "3f6dab82-db20-4640-a4cf-7da202e5133b",
    "prId" : 28473,
    "prUrl" : "https://github.com/ansible/ansible/pull/28473#pullrequestreview-60209397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "780c3ad1-072a-4d19-80ec-5dc4b926f315",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "should the 'M()' macro/marker be allowed in the name?",
        "createdAt" : "2017-09-01T18:21:01Z",
        "updatedAt" : "2017-09-09T15:02:39Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "3a31ec97-f875-4a1b-a18a-7ac5e4d4b871",
        "parentId" : "780c3ad1-072a-4d19-80ec-5dc4b926f315",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "unsure",
        "createdAt" : "2017-09-01T18:22:07Z",
        "updatedAt" : "2017-09-09T15:02:39Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c923d5848da2c9d1a6e750ffada2d147d5fc794",
    "line" : 604,
    "diffHunk" : "@@ -1,1 +652,656 @@  yaml: {key: defaults.gather_timeout}\nDEFAULT_HANDLER_INCLUDES_STATIC:\n  name: Make handler M(include) static\n  default: False\n  description:"
  },
  {
    "id" : "df135e19-4792-4302-ba81-fb3e226b4eb3",
    "prId" : 28473,
    "prUrl" : "https://github.com/ansible/ansible/pull/28473#pullrequestreview-60220621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "672f703f-6150-42ec-a041-a225edfd4a43",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "probably should be 'LXC' or 'lxc' instead of 'Lxc'",
        "createdAt" : "2017-09-01T19:13:50Z",
        "updatedAt" : "2017-09-09T15:02:39Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c923d5848da2c9d1a6e750ffada2d147d5fc794",
    "line" : 713,
    "diffHunk" : "@@ -1,1 +745,749 @@DEFAULT_LIBVIRT_LXC_NOSECLABEL:\n  # TODO: move to plugin\n  name: No security label on Lxc\n  default: False\n  description:"
  },
  {
    "id" : "f70efe03-a41e-4aa8-a90b-4c2c62bb38bb",
    "prId" : 28473,
    "prUrl" : "https://github.com/ansible/ansible/pull/28473#pullrequestreview-60221051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d71863de-49ee-4d21-99fb-616a1fe15862",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "rest of names start with a capital letter ",
        "createdAt" : "2017-09-01T19:16:07Z",
        "updatedAt" : "2017-09-09T15:02:39Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c923d5848da2c9d1a6e750ffada2d147d5fc794",
    "line" : 503,
    "diffHunk" : "@@ -1,1 +573,577 @@  - {key: executable, section: defaults}\nDEFAULT_FACT_PATH:\n  name: local fact path\n  default: ~\n  description:"
  },
  {
    "id" : "501828fa-f90c-42f1-924b-d4c46956809f",
    "prId" : 28473,
    "prUrl" : "https://github.com/ansible/ansible/pull/28473#pullrequestreview-60221357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ce0ef11-e27b-4794-9e72-cf799fb89912",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "s/privelege/privilege",
        "createdAt" : "2017-09-01T19:17:45Z",
        "updatedAt" : "2017-09-09T15:02:39Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c923d5848da2c9d1a6e750ffada2d147d5fc794",
    "line" : 379,
    "diffHunk" : "@@ -1,1 +473,477 @@  type: boolean\nDEFAULT_BECOME_ASK_PASS:\n  name: Ask for the privelege escalation (become) password\n  default: False\n  description: Toggle to prompt for privilege escalation password."
  },
  {
    "id" : "ad1b39fe-0d9b-4158-ad97-05063f585722",
    "prId" : 28473,
    "prUrl" : "https://github.com/ansible/ansible/pull/28473#pullrequestreview-61307634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "914fa0b0-8c40-4beb-a0a8-8504e829f911",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "type: here should be 'boolean' instead of 'bool'",
        "createdAt" : "2017-09-07T18:15:32Z",
        "updatedAt" : "2017-09-09T15:02:39Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c923d5848da2c9d1a6e750ffada2d147d5fc794",
    "line" : 1249,
    "diffHunk" : "@@ -1,1 +1246,1250 @@  ini:\n  - {key: always, section: diff}\n  type: bool\nDIFF_CONTEXT:\n  name: Difference context"
  },
  {
    "id" : "45a35b18-a616-4639-bb2b-17bc8ba62e03",
    "prId" : 34621,
    "prUrl" : "https://github.com/ansible/ansible/pull/34621#pullrequestreview-126723903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa2647e9-cd29-4fab-b750-af831349124b",
        "parentId" : null,
        "authorId" : "38f1a2ff-4f1a-4c3d-b78a-3bae3b91d930",
        "body" : "Should this be `Galaxy` instead of `GitHub`?",
        "createdAt" : "2018-01-15T21:56:00Z",
        "updatedAt" : "2018-01-15T21:56:00Z",
        "lastEditedBy" : "38f1a2ff-4f1a-4c3d-b78a-3bae3b91d930",
        "tags" : [
        ]
      },
      {
        "id" : "ae0003dd-6234-4b6c-9a2f-66b53791f0ce",
        "parentId" : "fa2647e9-cd29-4fab-b750-af831349124b",
        "authorId" : "55724565-275b-45bf-9a61-bef6983f355a",
        "body" : "Right now, the galaxy login command needs a github Token. Though I named the variable GALAXY_TOKEN thinking that it may support other identity providers in the future.",
        "createdAt" : "2018-01-16T01:06:07Z",
        "updatedAt" : "2018-01-16T01:06:07Z",
        "lastEditedBy" : "55724565-275b-45bf-9a61-bef6983f355a",
        "tags" : [
        ]
      },
      {
        "id" : "ca2401eb-46d4-41ef-bcb9-1eb6a6199330",
        "parentId" : "fa2647e9-cd29-4fab-b750-af831349124b",
        "authorId" : "38f1a2ff-4f1a-4c3d-b78a-3bae3b91d930",
        "body" : "@trishnaguha ah ok, I follow. :+1: ",
        "createdAt" : "2018-01-16T14:23:37Z",
        "updatedAt" : "2018-01-16T14:23:37Z",
        "lastEditedBy" : "38f1a2ff-4f1a-4c3d-b78a-3bae3b91d930",
        "tags" : [
        ]
      },
      {
        "id" : "18c14135-81f3-4abc-b295-d3b7e18ddd36",
        "parentId" : "fa2647e9-cd29-4fab-b750-af831349124b",
        "authorId" : "3c2d2125-0d1f-41a8-b9f4-2c8913ca435d",
        "body" : "The nomenclature is a bit confusing. Here's the workflow... For a user to log into Galaxy we require GitHub authentication. That means we need either a GitHub username/password or a GitHub personal access token. We hand the auth values off to the Galaxy API, which attempts the authentication with GitHub, and on success, returns a Galaxy token. The Galaxy token gets written to a file.\r\n\r\nWhen we one day expand to include other SCMs besides GitHub, we'll presumably want to enable authentication via the new providers. We could extend the current workflow, and add support for more providers.\r\n\r\nOr... We change this completely, and like other services, we create a way on the Galaxy web site for a user to generate a Galaxy authentication token. The user then stores that token in a file or environment variable. With this approach we eliminate the need for the user to pass GitHub auth values through the CLI to the Galaxy API. \r\n\r\nIn the long run, the second approach sounds better, where we create a page on the Galaxy web site enabling users to generate a Galaxy API token. And so given that, using the term 'GALAXY_TOKEN' in this PR makes sense. \r\n\r\n",
        "createdAt" : "2018-01-16T15:24:07Z",
        "updatedAt" : "2018-01-16T15:24:07Z",
        "lastEditedBy" : "3c2d2125-0d1f-41a8-b9f4-2c8913ca435d",
        "tags" : [
        ]
      },
      {
        "id" : "a05bafea-42b2-4c97-be38-1783e917effb",
        "parentId" : "fa2647e9-cd29-4fab-b750-af831349124b",
        "authorId" : "4f209f50-9e62-40bb-9884-b5dd2664e886",
        "body" : "AIUI the current implementation requires linking an ansible galaxy login to a github login as above, with a token or the user/pass credentials, which therefore grants ansible galaxy full access to anything in the repos accessible to that user, regardless of relevance, where the old method of pulling that information based on an internally-hosted requirements.yml file does not. Lets assume that ansible-galaxy always behaves and doesn't look into any repos it shouldn't do, for simplicity.\r\n\r\nThis is fine up to a point, for publicly sharing role code (which is the idea behind ansible-galaxy). But what about username and password, URL, and other secret information that *must* be stored privately (meaning access can't be entrusted to a third party company such as Ansible)? And yet you need to be able to reliably pull with ansible galaxy (with a credentialled pull, obviously!) in order for your code to actually function properly?\r\n\r\nThere is a workaround if you're not using ansible tower, rather you're using Jenkins pipelines, and you pre-pull your code using a credentialled git pull in the pipeline and then use \"--extra-vars\" to pull in the resulting files. However this completely lacks inherent dependency management (that requirements.yml methods did provide), which is a headache, because you have to very carefully sort your own dependencies out.\r\n\r\nI dare say that any role that does real useful work (which makes it worth sharing) will at some point have to have some kind of confidential information attached to it. Whether you reach this point by starting a role from scratch with separate secret information or redact/stub out your existing confidential information before sharing the role code, the problem is the same. If you can't load your confidential values (group_vars etc) from ansible-galaxy independently of publicly shared role code, and thus can't easily both share the role code on it *and* use it to continue to use your own ansible roles, why would anyone bother sharing them in the first place? Sounds a bit like ansible/galaxy is shooting itself in the foot.\r\n\r\nI can see this might be because of a marketing excercise to build up contacts/etc or some other business reason, but it doesn't work if it renders your product unusable for serious users.\r\n\r\nSo please lets have the ability to do credentialled pulls from github *without* having to tie up a github login to a galaxy one.",
        "createdAt" : "2018-06-07T10:38:43Z",
        "updatedAt" : "2018-06-07T10:38:44Z",
        "lastEditedBy" : "4f209f50-9e62-40bb-9884-b5dd2664e886",
        "tags" : [
        ]
      }
    ],
    "commit" : "38d3d37c7346c74ee956e1adeaaf7cc5f560dccb",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1252,1256 @@GALAXY_TOKEN:\n  default: null\n  description: \"GitHub personnal access token\"\n  env: [{name: ANSIBLE_GALAXY_TOKEN}]\n  ini:"
  },
  {
    "id" : "be0e4a60-b5be-41ca-aa59-6aa1e39b5628",
    "prId" : 44008,
    "prUrl" : "https://github.com/ansible/ansible/pull/44008#pullrequestreview-146468163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24145150-a264-43d8-b244-499ca3ffc5f8",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "How does this interact with https://github.com/ansible/ansible/blob/devel/lib/ansible/playbook/play_context.py#L188 ?  That seems to assume DEFAULT_GATHER_SUBSET is a string. (Though, everywhere in module_utils.facts seems to assumes gather_subset is or should be a list, so changing the default sounds right)",
        "createdAt" : "2018-08-15T14:28:38Z",
        "updatedAt" : "2018-08-21T13:27:20Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "adbd3d18686da2f09c38aa6bc175ade77784b6c0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +590,594 @@DEFAULT_GATHER_SUBSET:\n  name: Gather facts subset\n  default: ['all']\n  description:\n      - Set the `gather_subset` option for the M(setup) task in the implicit fact gathering."
  },
  {
    "id" : "9f4cceae-043c-4b43-8197-b58c55c85f5d",
    "prId" : 46825,
    "prUrl" : "https://github.com/ansible/ansible/pull/46825#pullrequestreview-163999131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6f556af-cd2a-48c1-8445-1ada26609afb",
        "parentId" : null,
        "authorId" : "0d301bd1-6b47-409f-ac92-439b799b2375",
        "body" : "For modules we use `removed_in`, which is clearer. In this context `version` could be the version in which the term is deprecated, or the version in which it will be removed. The terminology pre-dates this PR, so it shouldn't block merging, but something to think about. See https://docs.ansible.com/ansible/latest/dev_guide/module_lifecycle.html. ",
        "createdAt" : "2018-10-11T20:11:09Z",
        "updatedAt" : "2018-10-11T20:19:01Z",
        "lastEditedBy" : "0d301bd1-6b47-409f-ac92-439b799b2375",
        "tags" : [
        ]
      },
      {
        "id" : "ca45993c-3866-43af-8126-5f70731599a7",
        "parentId" : "f6f556af-cd2a-48c1-8445-1ada26609afb",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "I agree, but wasn't planning on changing them as part of the version bump.  FWIW, the code-smell test I am working on will look at both `version` and `removed_in`.  They are both supported, and have the same meaning in this context currently.",
        "createdAt" : "2018-10-11T20:23:28Z",
        "updatedAt" : "2018-10-11T20:23:28Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "987b84bc355bfd273fa9016c19f2352b5fb47629",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +393,397 @@  deprecated:\n    why: In favor of Ansible Become, which is a generic framework. See become_ask_pass.\n    version: \"2.9\"\n    alternatives: become\n  description:"
  },
  {
    "id" : "d5f6504d-fa15-4c82-a491-6cdcc44cc71e",
    "prId" : 46825,
    "prUrl" : "https://github.com/ansible/ansible/pull/46825#pullrequestreview-163998727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ee66792-c676-43ad-ba99-7b2e5c1ba292",
        "parentId" : null,
        "authorId" : "0d301bd1-6b47-409f-ac92-439b799b2375",
        "body" : "Is this part of a larger conversation about the schedule for deprecating config options? I'm curious about why some are getting moved from 2.8 to 2.9, while others are getting moved from 2.8 to 2.12. If there's an issue somewhere that documents those decisions, a link to it would be helpful for context. ",
        "createdAt" : "2018-10-11T20:15:34Z",
        "updatedAt" : "2018-10-11T20:19:01Z",
        "lastEditedBy" : "0d301bd1-6b47-409f-ac92-439b799b2375",
        "tags" : [
        ]
      },
      {
        "id" : "454c686e-d97b-4a0e-aaf1-56ac2239a342",
        "parentId" : "2ee66792-c676-43ad-ba99-7b2e5c1ba292",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "This is in part due to the inconsistency of how we handled deprecations in the past.\r\n\r\nStarting with 2.7 I have been making an effort to get things \"in order\".  With 2.7 we bumped the deprecation of 2 features to future versions.\r\n\r\n* su/sudo was bumped to 2.9 to coincide hopefully with the addition of become plugins\r\n* include was bumped to 2.12, because we had some snafus and the replacement wasn't stable\r\n\r\nIt just so happened, we had a single feature, that had multiple deprecation versions, this is part of an ongoing effort to align our deprecations.",
        "createdAt" : "2018-10-11T20:22:27Z",
        "updatedAt" : "2018-10-11T20:22:27Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "987b84bc355bfd273fa9016c19f2352b5fb47629",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +406,410 @@  deprecated:\n    why: In favor of Ansible Become, which is a generic framework. See become_ask_pass.\n    version: \"2.9\"\n    alternatives: become\n  description:"
  },
  {
    "id" : "3a5f1f6a-3eb9-41d8-a39d-28c43841d9d7",
    "prId" : 49399,
    "prUrl" : "https://github.com/ansible/ansible/pull/49399#pullrequestreview-211336815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7404c39-3e63-4a3c-b4d2-85b54f638142",
        "parentId" : null,
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "This is a good stopgap for networking until we have `platform`, but I assume this would be superseded by that. Do we want to expose it to env/ini knowing that we'll need to deprecate it whenever we get around to platform, or just keep it as an internal detail for stuff that's shipped in the box for now?",
        "createdAt" : "2019-03-05T23:23:02Z",
        "updatedAt" : "2019-03-07T19:21:48Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "a99e074d-db8e-4637-a1b7-03290201168a",
        "parentId" : "d7404c39-3e63-4a3c-b4d2-85b54f638142",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "since we cannot supply 'maps' that way .. i chose not to  .. at least until ansible.config.yml \r\n\r\nI'm fine with deprecating this once platform is out, but i don't see it as either/or proposition.\r\n\r\nwe could create per transport config .. but that does not need to happen right now, I would wait for user feedback.",
        "createdAt" : "2019-03-06T16:31:49Z",
        "updatedAt" : "2019-03-07T19:21:48Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "784c7ff74f385b6f8b8079a62355f3b58ab129bd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1325,1329 @@  - {key: error_on_missing_handler, section: defaults}\n  type: boolean\nCONNECTION_FACTS_MODULES:\n  name: Map of connections to fact modules\n  default:"
  },
  {
    "id" : "3070c7a6-1f5e-409d-8481-c913ad95691d",
    "prId" : 49399,
    "prUrl" : "https://github.com/ansible/ansible/pull/49399#pullrequestreview-211603523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a1944de-464f-4895-8295-36284524c6a5",
        "parentId" : null,
        "authorId" : "284bb4ad-6403-4762-bb03-b2a921d26492",
        "body" : "@bcoca Will you please add `frr: frr_facts` and `junos: junos_facts` as well?",
        "createdAt" : "2019-03-07T05:19:14Z",
        "updatedAt" : "2019-03-07T19:21:48Z",
        "lastEditedBy" : "284bb4ad-6403-4762-bb03-b2a921d26492",
        "tags" : [
        ]
      }
    ],
    "commit" : "784c7ff74f385b6f8b8079a62355f3b58ab129bd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1334,1338 @@    junos: junos_facts\n    nxos: nxos_facts\n    vyos: vyos_facts\n  description: \"Which modules to run during a play's fact gathering stage based on connection\"\n  env: [{name: ANSIBLE_CONNECTION_FACTS_MODULES}]"
  },
  {
    "id" : "35ff46eb-5014-4319-831a-b750a801575d",
    "prId" : 50163,
    "prUrl" : "https://github.com/ansible/ansible/pull/50163#pullrequestreview-211117440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e41e4447-d927-4eff-9258-0b33171c1fb7",
        "parentId" : null,
        "authorId" : "38f1a2ff-4f1a-4c3d-b78a-3bae3b91d930",
        "body" : "should these also look for the version without the decimal? such as `python36`, `python37`, etc? I know Fedora, RHEL, CentOS, and Amazon Linux offer those as paths (though Fedora offers them with the decimal as well, I'm not sure about RHEL and it's clones)",
        "createdAt" : "2019-02-06T21:13:29Z",
        "updatedAt" : "2019-02-28T06:47:45Z",
        "lastEditedBy" : "38f1a2ff-4f1a-4c3d-b78a-3bae3b91d930",
        "tags" : [
        ]
      },
      {
        "id" : "22979d38-5859-439c-8886-d394c617d3a3",
        "parentId" : "e41e4447-d927-4eff-9258-0b33171c1fb7",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "I haven't seen a distro that doesn't symlink the decimaled versions yet, but if you can show me one, I might include them...",
        "createdAt" : "2019-02-13T17:48:53Z",
        "updatedAt" : "2019-02-28T06:47:45Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "f701e5e9-3320-4e80-a4fe-f7a8791551c3",
        "parentId" : "e41e4447-d927-4eff-9258-0b33171c1fb7",
        "authorId" : "36fd5d7f-57ab-42c0-8dc9-2d8f16a18af1",
        "body" : "@maxamillion I'm reading this now (wandered here thru some of our RHEL Python bugs). We (Fedora) only provided the commands without decimals to match the package name and we always did it as a link to the decimal command. We've also stopped doing it with 3.6.",
        "createdAt" : "2019-03-06T09:18:57Z",
        "updatedAt" : "2019-03-06T09:19:59Z",
        "lastEditedBy" : "36fd5d7f-57ab-42c0-8dc9-2d8f16a18af1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ee7f2dcd7c9aed31a761fbbc7e911ffa4ecf502",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1434,1438 @@  - python3.5\n  - python2.7\n  - python2.6\n  - /usr/libexec/platform-python\n  - /usr/bin/python3"
  },
  {
    "id" : "b4ab3d7d-64aa-4f4d-8dd7-85a5fc71709f",
    "prId" : 50172,
    "prUrl" : "https://github.com/ansible/ansible/pull/50172#pullrequestreview-193964411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c64a1526-90d0-4046-9a05-4ef6c4c33372",
        "parentId" : null,
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "Could you please use native YAML syntax and do multi-line?",
        "createdAt" : "2019-01-18T06:38:43Z",
        "updatedAt" : "2019-01-23T17:09:27Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cb5e9e3796802d7fe6a7b480cdceb394bf26d53",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +357,361 @@  default: ~/.ansible/plugins/doc_fragments:/usr/share/ansible/plugins/doc_fragments\n  description: Colon separated paths in which Ansible will search for Documentation Fragments Plugins.\n  env: [{name: ANSIBLE_DOC_FRAGMENT_PLUGINS}]\n  ini:\n  - {key: doc_fragment_plugins, section: defaults}"
  },
  {
    "id" : "f1948bc8-e79c-4b5c-ac5f-80b5b276b661",
    "prId" : 50172,
    "prUrl" : "https://github.com/ansible/ansible/pull/50172#pullrequestreview-193964496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2e5ff30-692f-4138-9424-cc15a2606b77",
        "parentId" : null,
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "Multi-line would look better here as well ",
        "createdAt" : "2019-01-18T06:39:11Z",
        "updatedAt" : "2019-01-23T17:09:27Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cb5e9e3796802d7fe6a7b480cdceb394bf26d53",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +359,363 @@  env: [{name: ANSIBLE_DOC_FRAGMENT_PLUGINS}]\n  ini:\n  - {key: doc_fragment_plugins, section: defaults}\n  type: pathspec\nDEFAULT_ACTION_PLUGIN_PATH:"
  },
  {
    "id" : "5e3ce22d-ed63-4f80-9f4a-6af8e631f6f2",
    "prId" : 51030,
    "prUrl" : "https://github.com/ansible/ansible/pull/51030#pullrequestreview-214689323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1449d2a-8f6b-470a-af96-183648ffaad7",
        "parentId" : null,
        "authorId" : "726be1ae-9996-4695-b411-91b13f824deb",
        "body" : "Nobody noticed the typo here?\r\n\r\nIt lacks an O in CONDITIONAL. Tests should fail, or I missed something.",
        "createdAt" : "2019-03-14T14:59:12Z",
        "updatedAt" : "2019-03-14T14:59:13Z",
        "lastEditedBy" : "726be1ae-9996-4695-b411-91b13f824deb",
        "tags" : [
        ]
      },
      {
        "id" : "3678f025-f3e9-41fc-9485-1d4d620e0f76",
        "parentId" : "e1449d2a-8f6b-470a-af96-183648ffaad7",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "its a typo, but it is consistently typoed on consumption also",
        "createdAt" : "2019-03-14T16:08:21Z",
        "updatedAt" : "2019-03-14T16:08:22Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "dd98c39c-459f-4261-9b8f-58496b0b2a80",
        "parentId" : "e1449d2a-8f6b-470a-af96-183648ffaad7",
        "authorId" : "726be1ae-9996-4695-b411-91b13f824deb",
        "body" : "In `conditional.py`, yes, but the test runs the playbook with `ANSIBLE_CONDITIONAL_BARE_VARS`. Is it ok?",
        "createdAt" : "2019-03-14T17:03:09Z",
        "updatedAt" : "2019-03-14T17:03:09Z",
        "lastEditedBy" : "726be1ae-9996-4695-b411-91b13f824deb",
        "tags" : [
        ]
      },
      {
        "id" : "3c6bc31f-be7b-4ec3-9491-4ae1b8a1da85",
        "parentId" : "e1449d2a-8f6b-470a-af96-183648ffaad7",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "why wouldn't it be?  That is the 'env variable' , which is not the thing that was misspelled (check 9 lines below)",
        "createdAt" : "2019-03-14T18:05:45Z",
        "updatedAt" : "2019-03-14T18:23:26Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "67546146-8452-43f3-ac58-e4e796b0fe98",
        "parentId" : "e1449d2a-8f6b-470a-af96-183648ffaad7",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "fixed in #53809",
        "createdAt" : "2019-03-14T18:26:21Z",
        "updatedAt" : "2019-03-14T18:26:21Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f12c617983102c94b95bc2e5cd68a679d3b7ad1b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +319,323 @@  ini:\n  - {key: warn, section: colors}\nCONDITINAL_BARE_VARS:\n  name: Allow bare variable evaluation in conditionals\n  default: True"
  },
  {
    "id" : "c3a22881-1427-46d7-886e-e0b8c0cb9eda",
    "prId" : 52748,
    "prUrl" : "https://github.com/ansible/ansible/pull/52748#pullrequestreview-210277875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b00dc67c-1cc0-4503-9627-05b7614497e1",
        "parentId" : null,
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "If a customer has any non \"-\" invalid characters in their inventory groups this won't provide backwards compatibility for the ec2/azure inventory plugins with the scripts, since the scripts would have replaced those non \"-\" invalid characters with underscores. Tags with invalid characters or IPv6 are possible examples.\r\n\r\nThe gce script doesn't sanitize, so a blanket toggle like this would keep the gce inventory plugin groups compatible",
        "createdAt" : "2019-02-27T20:40:47Z",
        "updatedAt" : "2019-03-05T21:19:39Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      },
      {
        "id" : "124f40e6-c775-4a31-a2e8-8d5801de99d4",
        "parentId" : "b00dc67c-1cc0-4503-9627-05b7614497e1",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "the default is false, but will give users a deprecation notice now, once we toggle to 'true' it will 'autotransform' with a warning for those plugins that don't already do the transform themselves\r\n",
        "createdAt" : "2019-02-27T21:00:09Z",
        "updatedAt" : "2019-03-05T21:19:39Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "c012fc7e-bce1-4666-b2de-78ab2d6910ff",
        "parentId" : "b00dc67c-1cc0-4503-9627-05b7614497e1",
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "It sounds like you are assuming that some scripts like `ec2.py` sanitize group names. It has a setting for sanitizing group names, yes. But that doesn't mean that it works. I talked about this here:\r\n\r\nhttps://github.com/ansible/ansible/issues/40581#issuecomment-467990027\r\n\r\nI can file a bug if you'd like. I have found the behavior to be highly reproducible, and have dived in a little what values it has in code. It appears that `self.replace_dash_in_groups` does take the \"True\" value (meaning it should sanitize), but I think that either the regex was wrong, or the method `to_safe` was never called.",
        "createdAt" : "2019-02-27T21:02:13Z",
        "updatedAt" : "2019-03-05T21:19:39Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "8e3b6ce2-475c-49f6-8aa4-460929a9003c",
        "parentId" : "b00dc67c-1cc0-4503-9627-05b7614497e1",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "no, assuming the opposite, those using the script plugin will now get a deprecation warning when trying to pass invalid group names",
        "createdAt" : "2019-02-27T21:06:39Z",
        "updatedAt" : "2019-03-05T21:19:39Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "60431e0a-beb2-4b5a-886b-c029d92cd91e",
        "parentId" : "b00dc67c-1cc0-4503-9627-05b7614497e1",
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "@s-hertel I can safely say that in the `ec2.py` script, `to_safe` is not called on the relevant group names, and that the group name `us-east-2` is returned with either `replace_dash_in_groups = True` or `replace_dash_in_groups = False` (with the config loaded correctly, that is ruled out). I can get you more information on this if you want.",
        "createdAt" : "2019-02-27T21:18:55Z",
        "updatedAt" : "2019-03-05T21:19:39Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "bb5a9a7c-b002-493b-8e30-43782130ea53",
        "parentId" : "b00dc67c-1cc0-4503-9627-05b7614497e1",
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "@AlanCoding I'm not sure if you're understanding me. EC2 script *always* sanitizes, just to varying degrees. Here's my test case. Try adding a bad character in a tag. For instance, host has tags: {'bad:idea': 'here:too'}. Using the script on devel that creates the group `tag_bad_idea_here_too`. Those `:` are replaced by `_` (entirely regardless of replace_dash_in_groups). A filter is being used for bad characters, just not necessarily `-`. So now if you port to using the plugin, you're not going to be able to replicate that behavior while also creating groups with *some* invalid characters (i.e. `-`) because it's all or nothing, no partial sanitization (the group will become `tag_bad:idea:here:too` if you're using the toggle to create groups like `us-east-1`). Anyway, I don't use it and ripping off the bandaid is probably good. I'm not going to fight for it, just pointing out the deficiency and to have something to point to later if users run into the corner case while trying to replicate the behavior of the script via the plugin. Hopefully no one is doing that but... ¯\\_ツ_/¯",
        "createdAt" : "2019-03-04T17:16:27Z",
        "updatedAt" : "2019-03-05T21:19:39Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      },
      {
        "id" : "45af0313-df0f-44c3-a599-f8e8f16877b6",
        "parentId" : "b00dc67c-1cc0-4503-9627-05b7614497e1",
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "Related, a global solution like this also poses problems for combining different plugins per playbook run as you may want some plugins to filter and not others.",
        "createdAt" : "2019-03-04T17:18:12Z",
        "updatedAt" : "2019-03-05T21:19:39Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      },
      {
        "id" : "7337454a-5f7c-4c0e-a173-dd544bd5ed87",
        "parentId" : "b00dc67c-1cc0-4503-9627-05b7614497e1",
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "@AlanCoding Ah, btw, replace_dash_in_groups is a [tag specific option](https://github.com/ansible/ansible/blob/devel/contrib/inventory/ec2.ini#L122). Poorly named, doesn't work on general groups but works great for tags.",
        "createdAt" : "2019-03-04T17:45:43Z",
        "updatedAt" : "2019-03-05T21:19:39Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5269f28c2f3a448dfc55155851a11912401cec09",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1445,1449 @@  description:\n    - Make ansible transform invalid characters in group names supplied by inventory sources.\n    - If 'false' it will allow for the group name but warn about the issue.\n    - When 'true' it will replace any invalid charachters with '_' (underscore).\n  env: [{name: ANSIBLE_TRANSFORM_INVALID_GROUP_CHARS}]"
  },
  {
    "id" : "dd29d210-33ec-47e1-809d-b38aa2ed5515",
    "prId" : 53544,
    "prUrl" : "https://github.com/ansible/ansible/pull/53544#pullrequestreview-212933832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "babd044b-9007-40aa-b325-fa8ba4b7cc04",
        "parentId" : null,
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Please add `ignore` as well!",
        "createdAt" : "2019-03-08T21:52:44Z",
        "updatedAt" : "2019-03-11T16:35:29Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "8bc92324-bcb1-44e2-b4b3-1e06d123873b",
        "parentId" : "babd044b-9007-40aa-b325-fa8ba4b7cc04",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "still not convinced that should be an option",
        "createdAt" : "2019-03-08T22:07:24Z",
        "updatedAt" : "2019-03-11T16:35:29Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "d73641ad-48fb-4eb8-abe4-1178678030e6",
        "parentId" : "babd044b-9007-40aa-b325-fa8ba4b7cc04",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "So you allow us to keep the dashes, but only if we accept that every time we run a playbook, we get a ton of deprecation warnings with no way to turn them off (except by turning *all* deprecation warnings off)? I'm currently getting a screen full of deprecation warnings at the beginning of every playbook run with `devel`. That's really annoying.",
        "createdAt" : "2019-03-08T22:16:15Z",
        "updatedAt" : "2019-03-11T16:35:29Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "166d5cd6-f953-4b21-ab12-e591a42263bc",
        "parentId" : "babd044b-9007-40aa-b325-fa8ba4b7cc04",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "i need to separate the deprecation warning with the per instance warning, deprecation will only exist for 2 versions till we flip the default",
        "createdAt" : "2019-03-08T22:25:28Z",
        "updatedAt" : "2019-03-11T16:35:29Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "9ce1b80d-7ab2-495a-9581-785b9729faca",
        "parentId" : "babd044b-9007-40aa-b325-fa8ba4b7cc04",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Except for people who explicitly set the setting to the current default. Anyway, would it be possible to at least reduce the amounts of warnings, by printing one warning in total (or one per inventory plugin)? I guess it should contain a list of all invalid group names, which can be a very long warning if you have a lot of such groups, but at least it will take a lot of less screen space than the current huge list of warnings.",
        "createdAt" : "2019-03-09T07:31:35Z",
        "updatedAt" : "2019-03-11T16:35:29Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "cebcaf30-a4b9-478e-b57a-be437fd707c8",
        "parentId" : "babd044b-9007-40aa-b325-fa8ba4b7cc04",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "try now",
        "createdAt" : "2019-03-11T16:11:13Z",
        "updatedAt" : "2019-03-11T16:35:29Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb2c37958087ef24a8c71a83fb906610b2465865",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1473,1477 @@    - If 'never' it will allow for the group name but warn about the issue.\n    - When 'always' it will replace any invalid charachters with '_' (underscore) and warn the user\n    - When 'silently', it does the same as 'always' sans the warnings.\n  env: [{name: ANSIBLE_TRANSFORM_INVALID_GROUP_CHARS}]\n  ini:"
  }
]