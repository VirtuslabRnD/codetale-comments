[
  {
    "id" : "159f9b50-be58-46be-bacd-ba13fa43ae85",
    "prId" : 11719,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d35e7ec-7cd0-4a33-be1b-93412d8ba08f",
        "parentId" : null,
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Changing this to a new style module is awesome because it enables check mode on Windows modules... However, we don't yet have a corresponding Windows mechanism for modules that aren't check mode-aware to be opted-out of running in check mode. A quick n' dirty solution might be to add another comment directive like # CHECK_MODE_AWARE...\n",
        "createdAt" : "2015-07-30T16:03:35Z",
        "updatedAt" : "2015-07-30T19:55:06Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "75ca22e8-2f7e-4d8e-9f36-5efe2f105d00",
        "parentId" : "2d35e7ec-7cd0-4a33-be1b-93412d8ba08f",
        "authorId" : "4afe6295-a052-4934-8973-b5a4ebcc7820",
        "body" : "How about the change I added [below](https://github.com/ansible/ansible/pull/11719/files#diff-9584222c646a5fc71bf7537da48741e6R141) that adds the ability for a Windows module to indicate if it supports check mode?  With this change, check mode would not be supported by any Windows modules initially (except `setup.ps1` because it doesn't call `Parse-Args`), but it would be easy to [add that flag to the modules that don't modify the remote system](https://github.com/cchurch/ansible-modules-core/commit/5544eace2be4c3e5192022a55c1dccdf70582c55).\n",
        "createdAt" : "2015-07-30T20:01:42Z",
        "updatedAt" : "2015-07-30T20:01:42Z",
        "lastEditedBy" : "4afe6295-a052-4934-8973-b5a4ebcc7820",
        "tags" : [
        ]
      },
      {
        "id" : "3e1836ce-3aa7-462e-a0ee-64ed6111b625",
        "parentId" : "2d35e7ec-7cd0-4a33-be1b-93412d8ba08f",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Sounds like a plan!\n",
        "createdAt" : "2015-07-30T21:46:38Z",
        "updatedAt" : "2015-07-30T21:46:38Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "b07f8e7a7e113d2b55cca517aab26f6ee504e53f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +68,72 @@        module_style = 'new'\n    elif REPLACER_WINDOWS in module_data:\n        module_style = 'new'\n    elif 'from ansible.module_utils.' in module_data:\n        module_style = 'new'"
  },
  {
    "id" : "f5c56959-fcb6-4868-a305-64667545ef81",
    "prId" : 15246,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5f7e2a8-ace0-4c62-96d3-fc721a6149c0",
        "parentId" : null,
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "need to close the fd here (will using a 'with' on the fd break in 2.4 even if we don't execute this function?)\n",
        "createdAt" : "2016-04-02T03:48:31Z",
        "updatedAt" : "2016-04-04T21:38:37Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "6f37993a-4017-47a4-99a7-3156775a9421",
        "parentId" : "a5f7e2a8-ace0-4c62-96d3-fc721a6149c0",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Now closed on the next line.\n",
        "createdAt" : "2016-04-02T04:47:42Z",
        "updatedAt" : "2016-04-04T21:38:37Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "0caca27b-0b44-404a-b5d6-a8b8eba487fc",
        "parentId" : "a5f7e2a8-ace0-4c62-96d3-fc721a6149c0",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "And yeah, with is a keyword being used in a way that couldn't be mistaken for a variable name so it will cause a syntaxerror on python-2.4.\n",
        "createdAt" : "2016-04-02T04:49:03Z",
        "updatedAt" : "2016-04-04T21:38:37Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "586441b13e71ede57df96090b0f2a254b2396417",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +90,94 @@                    os.makedirs(directory)\n                f = open(dest_filename, 'w')\n                f.write(z.read(filename))\n                f.close()\n        print('Module expanded into: %%s' %% os.path.join(basedir, 'ansible'))"
  },
  {
    "id" : "ea380e8a-5f3c-4ba1-857e-a03ba200442c",
    "prId" : 15246,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7187ea0b-d477-4c3c-8458-3fda0246d265",
        "parentId" : null,
        "authorId" : "3aa844d8-7198-43e9-9769-58058e45516c",
        "body" : "Should we be raising an Exception here, or returning some JSON/sys.exit(1) as a nice exit response?\n",
        "createdAt" : "2016-04-02T12:54:35Z",
        "updatedAt" : "2016-04-04T21:38:37Z",
        "lastEditedBy" : "3aa844d8-7198-43e9-9769-58058e45516c",
        "tags" : [
        ]
      },
      {
        "id" : "b07a2df6-4115-44e8-abfa-ac1122e475e7",
        "parentId" : "7187ea0b-d477-4c3c-8458-3fda0246d265",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "We should be raising an Exception because this won't be sent back to ansible.\n\nThe debug() functionality is something I worked on with @nitzmahone last night.  We realized that it would be harder to debug modules via ANSIBLE_KEEP_REMOTE_FILES using ziploader because what you would end up keeping is this wrapper with the zipped payload in ZIPDATA.  So the debug() function contains two things to ameliorate that.  First: If you run the wrapper file with `explode` as a command line arg it will take the payload and extract it into the ansible temporary directory (where the module file was uploaded).  Second: If you run the wrapper file with `execute` as a command line arg it will run the module files that were exploded to disk rather than the zipped payload that's contained in the wrapper.\n\nThese two commands enable you to debug a module using the following steps:\n\n```\n$ ANSIBLE_KEEP_REMOTE_FILES=1 ansible localhost -m ping -a data=crash -vvv\nUsing /etc/ansible/ansible.cfg as config file\n<127.0.0.1> ESTABLISH LOCAL CONNECTION FOR USER: badger\n<127.0.0.1> EXEC /bin/sh -c '( umask 77 && mkdir -p \"` echo $HOME/.ansible/tmp/ansible-tmp-1459605113.37-203813258173\n480 `\" && echo \"` echo $HOME/.ansible/tmp/ansible-tmp-1459605113.37-203813258173480 `\" )'\n<127.0.0.1> PUT /var/tmp/tmpvdVWjY TO /home/badger/.ansible/tmp/ansible-tmp-1459605113.37-203813258173480/ping\n<127.0.0.1> EXEC /bin/sh -c 'LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 /usr/bin/python /home/badger\n/.ansible/tmp/ansible-tmp-1459605113.37-203813258173480/ping'\nAn exception occurred during task execution. The full traceback is:\n[...]\n# Log into remote machine\n$ /usr/bin/python /home/badger\n/.ansible/tmp/ansible-tmp-1459605113.37-203813258173480/ping explode\nModule expanded into: /home/badger/.ansible/tmp/ansible-tmp-1459605113.37-203813258173480/ansible\n# Edit the files in /home/badger/.ansible/tmp/ansible-tmp-1459605113.37-203813258173480/ansible to introspect what is happening as the module runs.   Change the code to see if it will still run, etc.\n$ /usr/bin/python /home/badger/.ansible/tmp/ansible-tmp-1459605113.37-203813258173480/ping execute\n# The execute command runs the exploded files instead of the zipped payload.  So it runs the module with all of the changes you made in the step above.\n```\n",
        "createdAt" : "2016-04-02T13:57:32Z",
        "updatedAt" : "2016-04-04T21:38:37Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "586441b13e71ede57df96090b0f2a254b2396417",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +81,85 @@        for filename in z.namelist():\n            if filename.startswith('/'):\n                raise Exception('Something wrong with this module zip file: should not contain absolute paths')\n            dest_filename = os.path.join(basedir, filename)\n            if dest_filename.endswith(os.path.sep) and not os.path.exists(dest_filename):"
  },
  {
    "id" : "c21033c2-061d-4e28-a7a9-9bd8e3e6a583",
    "prId" : 50163,
    "prUrl" : "https://github.com/ansible/ansible/pull/50163#pullrequestreview-190979023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ae2715a-5550-422a-b64f-9ccca946a55c",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "It looks like this conditional is slightly off?  If ansible_python_interpreter is set, then it needs to use that.  But in this code, it looks like the value of DEFAULT_INTERPRETER_PYTHON causes that to be ignored.",
        "createdAt" : "2018-12-19T17:35:20Z",
        "updatedAt" : "2019-02-28T06:47:45Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "30f88722-171a-4b3a-abb2-c8e8b43d1b85",
        "parentId" : "0ae2715a-5550-422a-b64f-9ccca946a55c",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "~I believe based on what I understand, that the later `get_config_value` in which we pass `task_vars` will sort this out.  I have not test that however.~\r\n\r\nI think I was misunderstanding.  We should prefer `ansible_python_interpreter` over the config, so we might need to use `get_config_value` as is used below instead of this more generic `get`",
        "createdAt" : "2018-12-19T17:39:57Z",
        "updatedAt" : "2019-02-28T06:47:45Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "21f42569-d7ad-425d-8a0b-d060e83ba1e9",
        "parentId" : "0ae2715a-5550-422a-b64f-9ccca946a55c",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "This is to determine if the interpreter has config definitions present for discovery at all, not what their values are. For Python, this should always be true (which delegates the handling of the `ansible_python_interpreter` var value to the config system- see the config definition for `DEFAULT_INTERPRETER_PYTHON`), for anything else, it drops into the `else` that uses the old behavior of just consulting the task vars.",
        "createdAt" : "2019-01-09T22:55:49Z",
        "updatedAt" : "2019-02-28T06:47:45Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ee7f2dcd7c9aed31a761fbbc7e911ffa4ecf502",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +468,472 @@    interpreter_config_key = \"INTERPRETER_%s\" % interpreter_name.upper()\n\n    if C.config.get_configuration_definitions().get(interpreter_config_key):\n        # a config def exists for this interpreter type; consult config for the value\n        interpreter_out = C.config.get_config_value(interpreter_config_key, variables=task_vars)"
  },
  {
    "id" : "733cac77-457b-488b-a3a7-27771afd72bc",
    "prId" : 52194,
    "prUrl" : "https://github.com/ansible/ansible/pull/52194#pullrequestreview-215176415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5deca4d-5792-4309-b423-247185eddb80",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "FileNotFoundError is py3 only",
        "createdAt" : "2019-03-07T19:41:30Z",
        "updatedAt" : "2019-03-28T14:30:33Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "304fcb38-7fdd-4bce-b353-2516464106ca",
        "parentId" : "c5deca4d-5792-4309-b423-247185eddb80",
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "Proposed fix at https://github.com/alikins/ansible/commits/pr-52194-fixes in https://github.com/alikins/ansible/commit/e339f3f16587ba62060856edba33013f5b0c32f1",
        "createdAt" : "2019-03-15T17:59:43Z",
        "updatedAt" : "2019-03-28T14:30:33Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "31cc0f2894e4da105f153cfd0e190ca4e602775d",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +586,590 @@                pkg = import_module(package_name)\n                module_info = pkgutil.get_data(package_name, resource_name)\n            except FileNotFoundError:\n                # FIXME: implement package fallback code\n                raise AnsibleError('unable to load collection-hosted module_util {0}.{1}'.format(to_native(package_name),"
  },
  {
    "id" : "9fad4e25-14d5-4e7a-834c-c99bdabef815",
    "prId" : 52194,
    "prUrl" : "https://github.com/ansible/ansible/pull/52194#pullrequestreview-217018110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b0e45ef-55e2-4668-a703-0bff064bfe72",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "Related idea: Adding a 'ansible_collection' style virtual namespace for python modules that may only exist on the remote end, something like 'ansible_remote'. The 'ansible_remote' py modules could be looked up in a remote cache and cache misses would fail in a way that indicates 'ok, send the anziballZ again but this time with everything'. Or the py module loader could look in some known location for pre distributed py modules[1]. Or both.\r\n\r\nWould also take advantage of using collections and collection loader as a way to start separating the ideas of 'module_utils  is stuff for ansible modules'  and 'module_utils is stuff used by controller and remote'. It could still\r\nbe the same code, that lives in the same place, but would provide a place to split it in the future.\r\n\r\n[1] somewhere between 'install an agent first' and 'lets send all the code everytime'",
        "createdAt" : "2019-03-07T19:51:59Z",
        "updatedAt" : "2019-03-28T14:30:33Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "cc133415-4a45-4144-aca5-f6781b0d8c99",
        "parentId" : "3b0e45ef-55e2-4668-a703-0bff064bfe72",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "I've actually got some similar things brewing, but without the need for them to be called out differently.",
        "createdAt" : "2019-03-20T22:41:15Z",
        "updatedAt" : "2019-03-28T14:30:33Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "31cc0f2894e4da105f153cfd0e190ca4e602775d",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +587,591 @@                module_info = pkgutil.get_data(package_name, resource_name)\n            except FileNotFoundError:\n                # FIXME: implement package fallback code\n                raise AnsibleError('unable to load collection-hosted module_util {0}.{1}'.format(to_native(package_name),\n                                                                                                 to_native(resource_name)))"
  },
  {
    "id" : "8a060da5-346f-47f6-baa4-650dd2506b6c",
    "prId" : 52194,
    "prUrl" : "https://github.com/ansible/ansible/pull/52194#pullrequestreview-219763405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8081a64b-1955-468c-af59-ab0bdedb921a",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "Whats the scenario that this is HACK'ing around? Is it when 'ansible_collection.*' imports are used in module code?",
        "createdAt" : "2019-03-08T15:49:28Z",
        "updatedAt" : "2019-03-28T14:30:33Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "7cc4a49d-4f74-41a3-9e37-2591c1da232e",
        "parentId" : "8081a64b-1955-468c-af59-ab0bdedb921a",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Basically it's a way to identify a collection-based import as opposed to an old module_utils import (updated comment to be clearer)",
        "createdAt" : "2019-03-27T22:48:08Z",
        "updatedAt" : "2019-03-28T14:30:33Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "31cc0f2894e4da105f153cfd0e190ca4e602775d",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +713,717 @@        # HACK: this seems to work as a way to identify a collections-based import, but a stronger identifier would be better\n        if not py_module_cache[py_module_name][1].startswith('/'):\n            dir_prefix = ''\n        else:\n            dir_prefix = 'ansible/module_utils'"
  },
  {
    "id" : "9c9b4204-87ed-4f4a-8988-00d820f218b9",
    "prId" : 56020,
    "prUrl" : "https://github.com/ansible/ansible/pull/56020#pullrequestreview-236237118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73182018-478e-4bd0-bb4b-ab0927f85a43",
        "parentId" : null,
        "authorId" : "b80275b8-2ff9-4c46-93e3-f47973c8fa5e",
        "body" : "Is it even possible for this not to be a list? The original code didn't have this check.",
        "createdAt" : "2019-05-09T22:18:23Z",
        "updatedAt" : "2019-05-09T22:19:28Z",
        "lastEditedBy" : "b80275b8-2ff9-4c46-93e3-f47973c8fa5e",
        "tags" : [
        ]
      },
      {
        "id" : "56eabb13-0c8a-4cdc-ac33-cb91eed01bca",
        "parentId" : "73182018-478e-4bd0-bb4b-ab0927f85a43",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "i made it so it could be called before/after being transformed, original code did the transformation itself in single spot ... was thinking eventually that should be the case and this should 'skip it' if what is passed was already transformed to avoid reprocessing",
        "createdAt" : "2019-05-10T17:57:50Z",
        "updatedAt" : "2019-05-10T17:57:50Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b42002a2cfd5f3e1f87ee6d9a1e7388a70e507ac",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1115,1119 @@\n    # Merge latest defaults into dict, since they are a list of dicts\n    if isinstance(defaults, list):\n        for default in defaults:\n            module_defaults.update(default)"
  },
  {
    "id" : "f43f771b-170b-4923-a920-e08ce3fecd62",
    "prId" : 68321,
    "prUrl" : "https://github.com/ansible/ansible/pull/68321#pullrequestreview-378174166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57ffe8ba-6525-414e-8bef-69b9325973b4",
        "parentId" : null,
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Only thing that makes me nervous about moving this up is the 3rd case on the original conditional it was contained in (the jsonargs support). I'm not sure how much that's used anymore or if there's really even test coverage, but so long as `_get_ansible_module_fqn` can only fail with ValueError on something wacky related to the jsonargs case, it's probably fine (since that case doesn't care about these values anyway).",
        "createdAt" : "2020-03-19T23:19:16Z",
        "updatedAt" : "2020-03-25T06:49:28Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "711eac4b-0591-4f71-a05d-31c69f33b1aa",
        "parentId" : "57ffe8ba-6525-414e-8bef-69b9325973b4",
        "authorId" : "7c547162-2334-4e33-a627-e146840da9ec",
        "body" : "When looking at the function it only explicitly raises ValueError. It does have some regex function calls and some minor path calls but I don't see why that would raise another type of error.",
        "createdAt" : "2020-03-19T23:43:13Z",
        "updatedAt" : "2020-03-25T06:49:28Z",
        "lastEditedBy" : "7c547162-2334-4e33-a627-e146840da9ec",
        "tags" : [
        ]
      },
      {
        "id" : "be2d39f0-bfc8-46d8-9ca0-3bd77e217848",
        "parentId" : "57ffe8ba-6525-414e-8bef-69b9325973b4",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Yep, mostly just meaning so long as it *stays* that way (or that there's not something we both didn't see).",
        "createdAt" : "2020-03-20T00:10:55Z",
        "updatedAt" : "2020-03-25T06:49:28Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3b8eff7f0e6eda9133fca4473a3b35da8348b8e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1001,1005 @@    py_module_names = set()\n\n    try:\n        remote_module_fqn = _get_ansible_module_fqn(module_path)\n    except ValueError:"
  },
  {
    "id" : "17874e21-321a-4a30-85eb-49eca2e73c6d",
    "prId" : 69919,
    "prUrl" : "https://github.com/ansible/ansible/pull/69919#pullrequestreview-427593286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef6eda0f-c8e4-4440-9ef6-7ae613965abe",
        "parentId" : null,
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Is that behavior consistent with 2.9? At first blush, I'd expect a totally bogus group name to be a fatal error- if it's not, maybe it should be...",
        "createdAt" : "2020-06-09T22:35:20Z",
        "updatedAt" : "2020-06-09T22:35:21Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "ca4148bb-0306-4f3e-931c-5ad27704408f",
        "parentId" : "ef6eda0f-c8e4-4440-9ef6-7ae613965abe",
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "Yes, it's consistent with 2.9. module_defaults has never been validated.",
        "createdAt" : "2020-06-09T22:38:21Z",
        "updatedAt" : "2020-06-09T22:38:21Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e220a4c89b44202b2cd8976df2bc4f41e8b56bc",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1357,1361 @@            group_name = default.split('group/')[-1]\n\n            for collection_name in group_collection_map.get(group_name, []):\n                try:\n                    action_group = _get_collection_metadata(collection_name).get('action_groups', {})"
  },
  {
    "id" : "393f230b-cc66-48b3-9116-cb97c380333d",
    "prId" : 70610,
    "prUrl" : "https://github.com/ansible/ansible/pull/70610#pullrequestreview-447588139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c43c339-794f-4db7-92eb-58c8091b0b99",
        "parentId" : null,
        "authorId" : "7c547162-2334-4e33-a627-e146840da9ec",
        "body" : "Are we concerned that changing the signature here could break an public interfaces?",
        "createdAt" : "2020-07-13T20:51:54Z",
        "updatedAt" : "2020-07-17T00:03:03Z",
        "lastEditedBy" : "7c547162-2334-4e33-a627-e146840da9ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "0516c7035acb789ab50959d4b2e5fcaffc878051",
    "line" : 399,
    "diffHunk" : "@@ -1,1 +876,880 @@\n\ndef recursive_finder(name, module_fqn, module_data, zf):\n    \"\"\"\n    Using ModuleDepFinder, make sure we have all of the module_utils files that"
  },
  {
    "id" : "8a52c5be-5937-4ffa-a2ac-b5b3e1e3d398",
    "prId" : 72428,
    "prUrl" : "https://github.com/ansible/ansible/pull/72428#pullrequestreview-521759916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b2bf367-0a91-4723-90d9-aa585dc73434",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "not a blocker to this PR, but this should be moved to config (really should not be a thing in core at all, but setlingling for moving into config).",
        "createdAt" : "2020-11-02T15:03:12Z",
        "updatedAt" : "2020-11-02T15:03:12Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "3a7825cf-2b2d-44ad-8e4c-13a7647350db",
        "parentId" : "1b2bf367-0a91-4723-90d9-aa585dc73434",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "I was assuming that this is a placeholder anyway until the action groups feature is fully designed and implemented.",
        "createdAt" : "2020-11-02T15:33:17Z",
        "updatedAt" : "2020-11-02T15:33:17Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "b867368f-643a-4725-b623-0ead882d929e",
        "parentId" : "1b2bf367-0a91-4723-90d9-aa585dc73434",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "I believe that is tentatively slated for 2.11",
        "createdAt" : "2020-11-02T15:55:44Z",
        "updatedAt" : "2020-11-02T15:55:44Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "91410bdce94f5a20b4d8ae3134f5f06925f9705e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1358,1362 @@        'azure': ['azure.azcollection'],\n        'cpm': ['wti.remote'],\n        'docker': ['community.general', 'community.docker'],\n        'gcp': ['google.cloud'],\n        'k8s': ['community.kubernetes', 'community.general', 'community.kubevirt', 'community.okd', 'kubernetes.core'],"
  },
  {
    "id" : "3bf9c7db-643a-481d-9445-2d41569c5af9",
    "prId" : 75106,
    "prUrl" : "https://github.com/ansible/ansible/pull/75106#pullrequestreview-692970630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe663996-eb8d-4638-93f4-d2bb552101f3",
        "parentId" : null,
        "authorId" : "a7c1ba26-9350-495d-9f27-673352c420f2",
        "body" : "in [py3](https://docs.python.org/3/library/os.html#os.makedirs) we can use `os.makedirs(lookup_path, exists_ok=True)`. With that we can get rid of the try/except and check condition, condensing everything here into a single line.",
        "createdAt" : "2021-06-24T19:49:33Z",
        "updatedAt" : "2021-06-24T19:58:34Z",
        "lastEditedBy" : "a7c1ba26-9350-495d-9f27-673352c420f2",
        "tags" : [
        ]
      },
      {
        "id" : "f7f309a8-9f1d-4a74-ae04-11c555f07011",
        "parentId" : "fe663996-eb8d-4638-93f4-d2bb552101f3",
        "authorId" : "a7c1ba26-9350-495d-9f27-673352c420f2",
        "body" : "I'm assuming we're only concerned with py3 given the use of `FileExistsError`; that didn't exist in py2. If we need py2 support we'd need something like so to trap the exception in a py2 compatible way and the above comment wont work; the `exists_ok` flag was new in py3.\r\n\r\n``` python\r\nimport errno\r\n\r\nclass FileExistsError(OSError):\r\n    def __init__(self, message):\r\n        super(FileExistsError, self).__init__(errno.EEXIST, message)\r\n```",
        "createdAt" : "2021-06-24T19:53:15Z",
        "updatedAt" : "2021-06-24T19:58:34Z",
        "lastEditedBy" : "a7c1ba26-9350-495d-9f27-673352c420f2",
        "tags" : [
        ]
      },
      {
        "id" : "f44f92c6-473c-4f04-8c43-53bf83b1d2d2",
        "parentId" : "fe663996-eb8d-4638-93f4-d2bb552101f3",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "@cloudnull see `makedirs_safe` for older python compatibility (probably will be in backport), but since we require python >=3.8 on controller, `exist_ok=True` should be good enough",
        "createdAt" : "2021-06-24T20:18:20Z",
        "updatedAt" : "2021-06-24T20:18:36Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "7c98395d-a01f-4e8b-ab12-def11bc86e7c",
        "parentId" : "fe663996-eb8d-4638-93f4-d2bb552101f3",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "For changes in `devel`, we are only concerned with supporting Python >3.8. If we decide to backport an equivalent fix, we could use `makedirs_safe()`.",
        "createdAt" : "2021-06-24T20:29:38Z",
        "updatedAt" : "2021-06-24T20:29:39Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "b60ff557-bd89-41fd-ba97-66ea6d63df93",
        "parentId" : "fe663996-eb8d-4638-93f4-d2bb552101f3",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Since we're intending to backport this fix, it'll have to remain a `try/except OSError:` with a double-check in the exception handler. Once it's landed in devel and our CI is able to handle py3-only controller tests (which is still WIP), we can update to use py3-only bits.",
        "createdAt" : "2021-06-24T22:20:23Z",
        "updatedAt" : "2021-06-24T22:20:23Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "d08059a2-0693-4361-8e41-9c5f044c8c77",
        "parentId" : "fe663996-eb8d-4638-93f4-d2bb552101f3",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "@nitzmahone no need, makedirs_safe already does that",
        "createdAt" : "2021-06-25T14:27:42Z",
        "updatedAt" : "2021-06-25T14:27:42Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "cfdf085f-a8b7-481e-ba88-601bbe0baa3e",
        "parentId" : "fe663996-eb8d-4638-93f4-d2bb552101f3",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "It involves `unfrackpath` among other things ... :fearful: \r\n",
        "createdAt" : "2021-06-25T15:45:15Z",
        "updatedAt" : "2021-06-25T15:45:16Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "b3deade8-f9cc-412a-8a8b-a6adc5f3685e",
        "parentId" : "fe663996-eb8d-4638-93f4-d2bb552101f3",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "That was my hesitancy as well. I think I'll go back to the plain vanilla `try/except`.",
        "createdAt" : "2021-06-25T15:56:26Z",
        "updatedAt" : "2021-06-25T15:56:26Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "a617e1ee69037fd9f072f9d2f9a53ab2519e4e12",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1192,1196 @@                            # Note -- if we have a global function to setup, that would\n                            # be a better place to run this\n                            os.makedirs(lookup_path)\n                        except OSError:\n                            # Multiple processes tried to create the directory. If it still does not"
  },
  {
    "id" : "c3098ea0-9e67-443d-9b61-aadc3688f9f7",
    "prId" : 75106,
    "prUrl" : "https://github.com/ansible/ansible/pull/75106#pullrequestreview-693205449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8a41ac6-c588-4817-9b85-02d92a550319",
        "parentId" : null,
        "authorId" : "a7c1ba26-9350-495d-9f27-673352c420f2",
        "body" : "there's no need to check if the path exists with the following line.",
        "createdAt" : "2021-06-25T15:28:17Z",
        "updatedAt" : "2021-06-25T15:28:24Z",
        "lastEditedBy" : "a7c1ba26-9350-495d-9f27-673352c420f2",
        "tags" : [
        ]
      },
      {
        "id" : "3ea595d3-dd2c-4592-bf37-38ef7d725708",
        "parentId" : "d8a41ac6-c588-4817-9b85-02d92a550319",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Right, but we can't merge or backport that right now.",
        "createdAt" : "2021-06-25T15:46:36Z",
        "updatedAt" : "2021-06-25T15:46:36Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "8283d18c-c9e5-45ec-ade0-8b6de203b4d3",
        "parentId" : "d8a41ac6-c588-4817-9b85-02d92a550319",
        "authorId" : "a7c1ba26-9350-495d-9f27-673352c420f2",
        "body" : "Assuming py3 is the only thing being supported, why wouldn't we be able to backport that? Given https://github.com/python/cpython/blob/main/Lib/os.py#L213, the method is running the same check?",
        "createdAt" : "2021-06-25T16:44:14Z",
        "updatedAt" : "2021-06-25T16:44:19Z",
        "lastEditedBy" : "a7c1ba26-9350-495d-9f27-673352c420f2",
        "tags" : [
        ]
      },
      {
        "id" : "ef887b8e-62ff-4fa8-a614-bf815bf6c2ec",
        "parentId" : "d8a41ac6-c588-4817-9b85-02d92a550319",
        "authorId" : "a7c1ba26-9350-495d-9f27-673352c420f2",
        "body" : "more for my curiosity than anything else?",
        "createdAt" : "2021-06-25T16:45:14Z",
        "updatedAt" : "2021-06-25T16:45:14Z",
        "lastEditedBy" : "a7c1ba26-9350-495d-9f27-673352c420f2",
        "tags" : [
        ]
      },
      {
        "id" : "2dbeb023-28e5-44d0-a1eb-088790d97f5c",
        "parentId" : "d8a41ac6-c588-4817-9b85-02d92a550319",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "The Python >=3.8 requirement is only for Ansible >= 2.12 (current `devel`). Previous version still support Python 2.",
        "createdAt" : "2021-06-25T17:13:23Z",
        "updatedAt" : "2021-06-25T17:13:24Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "da2532c1-cc4f-4ce4-a79a-689c5b2c307d",
        "parentId" : "d8a41ac6-c588-4817-9b85-02d92a550319",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "We can't merge this change currently because in our CI, the Ansible control node and the remote node are the same. For systems that only have Python 2 (such as CentOS 6) or older versions of Python 3, tests will fail (which is what is happening currently).",
        "createdAt" : "2021-06-25T17:19:07Z",
        "updatedAt" : "2021-06-25T17:19:07Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "dcbd0f35-686a-4d7f-abc0-30c303a68402",
        "parentId" : "d8a41ac6-c588-4817-9b85-02d92a550319",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "@samdoran for now you could just point it at makedirs_safe() and when controller spilt happens, i'll update in  #75108 with the rest of makedirs_safe usage",
        "createdAt" : "2021-06-25T18:29:06Z",
        "updatedAt" : "2021-06-25T18:29:06Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "aa1b5c2d-4b0a-404d-8161-cc964e97d38d",
        "parentId" : "d8a41ac6-c588-4817-9b85-02d92a550319",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "I added a note that we can switch to this method once split controller/remote is merged.",
        "createdAt" : "2021-06-25T18:34:29Z",
        "updatedAt" : "2021-06-25T18:34:35Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "62ee539e-3f4f-415c-b652-67018f415018",
        "parentId" : "d8a41ac6-c588-4817-9b85-02d92a550319",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "@cloudnull for more detail: the `ansible-test` changes that support split testing on the controller and remotes is landing in devel Real Soon Now, but until it does, we can't merge anything that doesn't work back to Python 2.6 without breaking all testing on those targets or disabling all module tests on < py3.8. It's a BIG change to the internals of the way all that stuff works, and breaks a lot of assumptions that module tests often make about the test target host being the same as the controller host. Since lots of external collections rely on `ansible-test`, we're taking time to maximize backwards compatibility to keep their tests working, rather than just slamming in the changes we need and letting the community pick up the pieces (otherwise it would've landed long ago in 2.11).",
        "createdAt" : "2021-06-25T21:27:15Z",
        "updatedAt" : "2021-06-25T21:27:15Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "a617e1ee69037fd9f072f9d2f9a53ab2519e4e12",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1188,1192 @@                    # FIXME: Once split controller/remote is merged, this can be simplified to\n                    #        os.makedirs(lookup_path, exist_ok=True)\n                    if not os.path.exists(lookup_path):\n                        try:\n                            # Note -- if we have a global function to setup, that would"
  },
  {
    "id" : "1df3b2d9-9a5b-44f2-ae28-1bc76cc79c2f",
    "prId" : 75132,
    "prUrl" : "https://github.com/ansible/ansible/pull/75132#pullrequestreview-704187267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51ad2b19-54fd-4d71-8fb3-69291298ef9e",
        "parentId" : null,
        "authorId" : "442212cb-3c29-4a71-98b5-cbd0b20c8c17",
        "body" : "@samdoran Was there a reason for not just catching `FileExistsError` here? The `OSError` superclass feels fairly broad since we only care about the case where the directory already exists (due to the race). I have slight concerns that this will mask a different kind of `OSError` and try to continue on in an unknown state when it should have failed out.",
        "createdAt" : "2021-07-12T05:28:56Z",
        "updatedAt" : "2021-07-12T05:28:56Z",
        "lastEditedBy" : "442212cb-3c29-4a71-98b5-cbd0b20c8c17",
        "tags" : [
        ]
      },
      {
        "id" : "ed4f76fb-322f-46f4-a757-d11aaa866d0a",
        "parentId" : "51ad2b19-54fd-4d71-8fb3-69291298ef9e",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "`FileExistsError` is Python 3 only.",
        "createdAt" : "2021-07-12T14:26:18Z",
        "updatedAt" : "2021-07-12T14:26:18Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "db7d8b12-63ea-4975-a711-ef2cbdefb00f",
        "parentId" : "51ad2b19-54fd-4d71-8fb3-69291298ef9e",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "We could do some additional inspection of the error, like `os.makedirs` used to do.",
        "createdAt" : "2021-07-12T14:33:13Z",
        "updatedAt" : "2021-07-12T14:33:14Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0e6c01a62e59f032498a49ef082c0d20b27692f",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1190,1194 @@                            # be a better place to run this\n                            os.makedirs(lookup_path)\n                        except OSError:\n                            # Multiple processes tried to create the directory. If it still does not\n                            # exist, raise the original exception."
  }
]