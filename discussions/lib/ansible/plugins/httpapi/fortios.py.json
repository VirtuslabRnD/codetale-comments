[
  {
    "id" : "c0f4a752-059c-4ced-853f-598f0fbc946f",
    "prId" : 56870,
    "prUrl" : "https://github.com/ansible/ansible/pull/56870#pullrequestreview-248667155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f9e5e27-52e1-4a25-a73d-612add0873d8",
        "parentId" : null,
        "authorId" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "body" : "And as the return is a dictionary of headers, instead of tracking `self._ccsrftoken` here, you should be able to set your return dictionary to be `{'x-csrftoken': csrftoken_search.group(1)}`, and everything should work as expected.",
        "createdAt" : "2019-06-06T16:20:40Z",
        "updatedAt" : "2019-06-21T11:27:47Z",
        "lastEditedBy" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "tags" : [
        ]
      },
      {
        "id" : "d9a71531-86a9-49f3-88b6-ea88157dd20e",
        "parentId" : "0f9e5e27-52e1-4a25-a73d-612add0873d8",
        "authorId" : "ce4adc36-b506-485a-a153-148ee8fdf29c",
        "body" : "Thanks Qalthos, I have just tried your proposal but I am afraid I have to store the csrctoken anyway. The reason is that our fortios device sends the token on the reply to the first login request only. That means that the next request after the login works fine, as it gets the headers correctly with the csrftoken, but next requests do not get the csrftoken anymore and fortios requires the csrftoken on every request.  ",
        "createdAt" : "2019-06-11T16:16:14Z",
        "updatedAt" : "2019-06-21T11:27:47Z",
        "lastEditedBy" : "ce4adc36-b506-485a-a153-148ee8fdf29c",
        "tags" : [
        ]
      },
      {
        "id" : "d06c1b05-4493-4bd8-8c98-653837af2aeb",
        "parentId" : "0f9e5e27-52e1-4a25-a73d-612add0873d8",
        "authorId" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "body" : "If you're only going to get `APSCOOKIE_` _or_ `ccsrftoken`, then you can just return `None` if you don't find anything and the existing token will be reused.\r\n\r\nIf you are expecting to have both, then I would just dedent the next line to be outside the for loop, so that the token is always added to the dictionary on every run. Then you should be able to at least remove the manual headers building in `send_request`.",
        "createdAt" : "2019-06-11T17:52:41Z",
        "updatedAt" : "2019-06-21T11:27:47Z",
        "lastEditedBy" : "fc84e3a8-7a8a-45ea-ba68-7e6e0b604075",
        "tags" : [
        ]
      },
      {
        "id" : "e0d2c335-429a-41d2-bad1-6b4845f21439",
        "parentId" : "0f9e5e27-52e1-4a25-a73d-612add0873d8",
        "authorId" : "ce4adc36-b506-485a-a153-148ee8fdf29c",
        "body" : "Ok, I'd go for the latter option as it seems safer for our fortios. However, how can I access the headers in 'send_request' method? I need to know if there is a csrftoken set bcs if not I must raise an exception to instruct the user to log in first.",
        "createdAt" : "2019-06-11T18:04:02Z",
        "updatedAt" : "2019-06-21T11:27:47Z",
        "lastEditedBy" : "ce4adc36-b506-485a-a153-148ee8fdf29c",
        "tags" : [
        ]
      },
      {
        "id" : "10c4ec0a-1985-4fb4-a021-7daaa357fac3",
        "parentId" : "0f9e5e27-52e1-4a25-a73d-612add0873d8",
        "authorId" : "ce4adc36-b506-485a-a153-148ee8fdf29c",
        "body" : "Hi again @Qalthos, I have been doing some more additional tests and I think I have no means to access the headers in 'send_request' method (which I need to know if there is a csrf_token from a previous login before). Therefore I will have to leave the code it as it is now. I would mark this as resolved, please let me know if it is not ok or if I missed something and you want me to perform more changes.",
        "createdAt" : "2019-06-12T10:16:07Z",
        "updatedAt" : "2019-06-21T11:27:47Z",
        "lastEditedBy" : "ce4adc36-b506-485a-a153-148ee8fdf29c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1b84085eea4d3170762c60294e7212a8a54fec7",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +93,97 @@                csrftoken_search = re.search('\\\"(.*)\\\"', val)\n                if csrftoken_search:\n                    self._ccsrftoken = csrftoken_search.group(1)\n\n        headers['x-csrftoken'] = self._ccsrftoken"
  }
]