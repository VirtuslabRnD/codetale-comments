[
  {
    "id" : "cf22c479-afff-4ce2-82de-105c008b1c7d",
    "prId" : 25956,
    "prUrl" : "https://github.com/ansible/ansible/pull/25956#pullrequestreview-47457209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2e9de22-e401-4777-bf16-005be8782c9a",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "[just a note inspired by branch, not something that needs to be addressed by this pr]\r\n\r\nLooking though code that uses find_file_in_search_path(), there are some lookup plugins that dont really\r\ncheck the return value (ini looks like it can throw exceptions if result is None, csvfile doesnt check for !None, but does at least try/except around open() it)",
        "createdAt" : "2017-06-30T15:42:08Z",
        "updatedAt" : "2017-07-03T15:33:09Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "5fe68cc6-040e-46f8-be64-5957a583d8bc",
        "parentId" : "c2e9de22-e401-4777-bf16-005be8782c9a",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "I was planning on fixing that in subsequent Prs, need to go over many of em",
        "createdAt" : "2017-06-30T17:59:00Z",
        "updatedAt" : "2017-07-03T15:33:09Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "26276f1e6910392b178060058604b8c44447cf0f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +114,118 @@            paths = self.get_basedir(myvars)\n\n        result = None\n        try:\n            result = self._loader.path_dwim_relative_stack(paths, subdir, needle)"
  },
  {
    "id" : "4da7a669-5bdc-420b-87a4-9609052ce3c0",
    "prId" : 74108,
    "prUrl" : "https://github.com/ansible/ansible/pull/74108#pullrequestreview-635010803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91fdb43e-bab4-42c9-afa8-ddd03e3803aa",
        "parentId" : null,
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "If it's getting deprecated for 2.18 and the idea is to have a long transition period for users, should we display the deprecation warning for 2.12/2.13?",
        "createdAt" : "2021-04-13T18:51:28Z",
        "updatedAt" : "2021-04-13T19:58:48Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      },
      {
        "id" : "d63085c8-29ca-4059-ac01-d8c22924cc26",
        "parentId" : "91fdb43e-bab4-42c9-afa8-ddd03e3803aa",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "no, for now I want to go over all examples and convert first, then maybe enable in next version",
        "createdAt" : "2021-04-13T20:45:20Z",
        "updatedAt" : "2021-04-13T20:45:20Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "040c709612a6046e8d7c18b8d6517ed4c814b0b9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +126,130 @@\n    def _deprecate_inline_kv(self):\n        # TODO: place holder to deprecate in future version allowing for long transition period\n        # self._display.deprecated('Passing inline k=v values embeded in a string to this lookup. Use direct ,k=v, k2=v2 syntax instead.', version='2.18')\n        pass"
  }
]