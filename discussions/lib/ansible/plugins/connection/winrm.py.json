[
  {
    "id" : "6edc5dac-f2cb-4107-8a76-8eaf904c6960",
    "prId" : 12687,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01dc99d7-d499-4336-8c7a-8be06594d887",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "this should not be happening here, play_context should have all pertinent connection info\n",
        "createdAt" : "2015-10-12T18:33:09Z",
        "updatedAt" : "2015-11-04T17:32:40Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "e6c3ddc0-2c7d-4266-99a9-a547e8085659",
        "parentId" : "01dc99d7-d499-4336-8c7a-8be06594d887",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "I don't see where- remember that set_host_overrides is where we pick up connection-specific vars. _play_context.vars is empty at this point...\n",
        "createdAt" : "2015-10-12T18:44:22Z",
        "updatedAt" : "2015-11-04T17:32:40Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "742cad34-cce8-43b5-92cf-87d0547e270d",
        "parentId" : "01dc99d7-d499-4336-8c7a-8be06594d887",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "hmm, forgot about that 'feature', still think that a generic function in play_context that gets ansible_<pluginname>_\\* vars injected might be a better approach\n\n@jimi-c @abadger ?\n",
        "createdAt" : "2015-10-12T18:49:15Z",
        "updatedAt" : "2015-11-04T17:32:40Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "b353112e-abb3-42ae-8b19-2f6aac7e9a7a",
        "parentId" : "01dc99d7-d499-4336-8c7a-8be06594d887",
        "authorId" : "3aa844d8-7198-43e9-9769-58058e45516c",
        "body" : "That was my first thought upon looking at this as well, but if I remember right the problem is we don't pass the variables down below the level of the action plugin anymore, so this was the workaround for that.\n",
        "createdAt" : "2015-10-12T22:07:19Z",
        "updatedAt" : "2015-11-04T17:32:40Z",
        "lastEditedBy" : "3aa844d8-7198-43e9-9769-58058e45516c",
        "tags" : [
        ]
      }
    ],
    "commit" : "113c4350e39dc37194b20389fe2933dd73381aa4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +78,82 @@        Override WinRM-specific options from host variables.\n        '''\n        host_vars = combine_vars(host.get_group_vars(), host.get_vars())\n\n        self._winrm_host = self._play_context.remote_addr"
  },
  {
    "id" : "d9f01c76-c6a0-4a09-830a-8aea1024bfdc",
    "prId" : 16287,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25962925-1d47-4606-8fe7-7c5cf388e694",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Misleading error message?  Should it say \"xmltodict is not installed.  Needed to use winrm connection type\"?\n",
        "createdAt" : "2016-06-15T16:12:45Z",
        "updatedAt" : "2016-07-29T20:04:46Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "33681f6f-84d7-4a86-9189-605ba18e77d2",
        "parentId" : "25962925-1d47-4606-8fe7-7c5cf388e694",
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "doh, indeed.\n",
        "createdAt" : "2016-06-15T18:12:27Z",
        "updatedAt" : "2016-07-29T20:04:46Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "6c1bd4f8-5dcf-4c4b-81d1-8e0dbe4f04bc",
        "parentId" : "25962925-1d47-4606-8fe7-7c5cf388e694",
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "Now that I think about it, I definitely cargo cult'ed that import error idiom from the existing code. It doesn't seem to be common in the code base. \n\nThere are a couple of places with similar requirements (try to import something absolutely required, but for an optional plugin...). Is there a preferred way to handle those cases? \n\nThe try/except and AnsibleError seems reasonable (at least with the correct error message ;->). But there are a few approaches in the code:\n\nplugins/cache/redis.py  also raises an AnsibleError\nplugins/cache/memcached.py prints() an error and calls sys.exit()   (eek!)\n\n[module_utils/basic.py does variations of sys.exit, but that's a special case...]\n",
        "createdAt" : "2016-06-15T18:27:11Z",
        "updatedAt" : "2016-07-29T20:04:46Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "5038644f-ba70-4b70-a026-262c56d22d10",
        "parentId" : "25962925-1d47-4606-8fe7-7c5cf388e694",
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Since we don't actually need those present and functional to build docs, could just set HAS_PYWINRM/HAS_XMLTODICT and check them in CP init instead of raising immediately (though I suspect we may run into similar dependency issues in other plugins)\n",
        "createdAt" : "2016-06-15T18:59:34Z",
        "updatedAt" : "2016-07-29T20:04:46Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "6984e80897df7dabc76703164122177ca9789a5f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +42,46 @@except ImportError:\n    raise AnsibleError(\"xmltodict is not installed\")\n\nHAVE_KERBEROS = False\ntry:"
  }
]