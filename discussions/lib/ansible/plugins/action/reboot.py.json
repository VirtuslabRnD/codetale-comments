[
  {
    "id" : "77a50598-0ace-4ea6-813c-8823f63d5d08",
    "prId" : 35205,
    "prUrl" : "https://github.com/ansible/ansible/pull/35205#pullrequestreview-149017577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1b3b521-d015-4f7a-bba6-01c2f414a49b",
        "parentId" : null,
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "Probably should also check and fail for `self._connection.transport == 'local'` - no need to go nutty trying to figure out if they're rebooting the controller via a more circuitous route, but at least cover the easy one.",
        "createdAt" : "2018-08-23T18:19:02Z",
        "updatedAt" : "2018-08-23T23:52:18Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed70d8a6f4ae48439e2e4e580384f1d0d4b9facd",
    "line" : 244,
    "diffHunk" : "@@ -1,1 +242,246 @@        self._supports_check_mode = True\n        self._supports_async = True\n\n        # If running with local connection, fail so we don't reboot ourself\n        if self._connection.transport == 'local':"
  },
  {
    "id" : "25376147-98dc-4ed2-99c4-c21ac18e8a57",
    "prId" : 45607,
    "prUrl" : "https://github.com/ansible/ansible/pull/45607#pullrequestreview-155682029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a84115c9-315e-42cc-ae3a-619314a5253b",
        "parentId" : null,
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "One issue with this is that `win_reboot` uses this same method. So if the windows `DEFAULT_BOOT_TIME_COMMAND` results in an rc != 0, it will then try this `cat` command, which will gloriously fail.\r\n\r\nThe previous conditional which runs `uptime -s` won't ever match on Windows because that string will never match the output of `(Get-WmiObject -ClassName Win32_OperatingSystem).LastBootUpTime`.\r\n\r\nThis is the point where it would be helpful to have platform/dist as a class attribute, either as an additional check here, or to look up the correct boot time command based on platform/dist. I'm also open to other ideas.",
        "createdAt" : "2018-09-14T15:18:43Z",
        "updatedAt" : "2018-09-14T15:19:00Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "fde4cbc6-19f1-4d16-a87a-94a617d73292",
        "parentId" : "a84115c9-315e-42cc-ae3a-619314a5253b",
        "authorId" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "body" : "I don't mind if a fallback method fails though. As long as we cover all bases so in the end the function always works. For win_reboot it could be a lot easier if we have a list of commands, for both Windows and Unix.",
        "createdAt" : "2018-09-14T19:22:00Z",
        "updatedAt" : "2018-09-14T19:22:00Z",
        "lastEditedBy" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "tags" : [
        ]
      },
      {
        "id" : "06305762-8e18-4d87-9f8a-3d1ff6736bc9",
        "parentId" : "a84115c9-315e-42cc-ae3a-619314a5253b",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "In my WIP PR, I did change the \"get the last boot time\" command to be a variable, so that will remove the hard coding here.\r\n\r\nWill fix in futureâ„¢.\r\n\r\nStill, I can see it being confusing to someone running `win_reboot` (assuming the first command failed to get the last boot time) if they get this error:\r\n\r\n```\r\nwin_reboot: failed to get host boot time info, rc: 1, stdout: 20180913204044.576906+000\r\n, stderr: cat : Cannot find path 'C:\\proc\\sys\\kernel\\random\\boot_id' because it does not exist.\r\nAt line:1 char:1\r\n+ cat /proc/sys/kernel/random/boot_id\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : ObjectNotFound: (C:\\proc\\sys\\kernel\\random\\boot_id:String) [Get-Content], ItemNotFoundEx\r\nception\r\n+ FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetContentCommand\r\n```\r\n\r\nEvidently Windows has a `cat` command now!?",
        "createdAt" : "2018-09-14T20:13:53Z",
        "updatedAt" : "2018-09-14T20:13:53Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "e53d4681-1d16-423a-9ca8-286cd2e02a15",
        "parentId" : "a84115c9-315e-42cc-ae3a-619314a5253b",
        "authorId" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "body" : "Well, the distinction between Windows and Unix is now easy because it's a different entry-point. So we don't need to do a `cat` on Windows. That was my main point. But I also don't mind having the fallback mechanism on Unix, that first does `who -b`, then `uptime -s`, and then `cat /.../boot_id`. Which to me is quite sensible as well. It's a trade-off for simplicity and in most cases it only requires a single command `who -b`. If you implement support for getting the platform, you will *always* have to run at least 2 commands.\r\n\r\nSo basically what I am saying is that in general the fallback mechanism is more efficient than targeting based on platform.",
        "createdAt" : "2018-09-14T22:32:23Z",
        "updatedAt" : "2018-09-14T22:32:23Z",
        "lastEditedBy" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "tags" : [
        ]
      },
      {
        "id" : "3238e5d8-f47a-4b80-8ad5-b2768d2378b0",
        "parentId" : "a84115c9-315e-42cc-ae3a-619314a5253b",
        "authorId" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "body" : "And yes, PowerShell has aliases for common Unix commands, which is freaking a lot of people out (because they are not drop-in replacements). https://daniel.haxx.se/blog/2016/08/19/removing-the-powershell-curl-alias/",
        "createdAt" : "2018-09-14T22:34:39Z",
        "updatedAt" : "2018-09-14T23:37:55Z",
        "lastEditedBy" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdbfe419d3da2adde9eeba652b919ba0378eb064",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +110,114 @@        # This is a last resort for bare Linux systems (e.g. OpenELEC) where 'who -b' or 'uptime -s' are not supported.\n        # Other options like parsing /proc/uptime or default uptime output are less reliable than this\n        if command_result['rc'] != 0:\n            stdout += command_result['stdout']\n            stderr += command_result['stderr']"
  },
  {
    "id" : "90656ca3-f085-42a2-9ce1-f30221001bee",
    "prId" : 45607,
    "prUrl" : "https://github.com/ansible/ansible/pull/45607#pullrequestreview-156051541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be802a00-c411-492c-9e2c-b0dbfeb22627",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "this might not be py2/py3 compatible, we might want to force bytes",
        "createdAt" : "2018-09-17T18:04:57Z",
        "updatedAt" : "2018-09-17T18:04:57Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "7c07cf1f-556d-42b2-8663-9139f3d8baa7",
        "parentId" : "be802a00-c411-492c-9e2c-b0dbfeb22627",
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "Yes, you are correct. One day I'll master that distinction. ðŸ˜„ ",
        "createdAt" : "2018-09-17T18:09:53Z",
        "updatedAt" : "2018-09-17T18:09:53Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdbfe419d3da2adde9eeba652b919ba0378eb064",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +96,100 @@    def get_system_boot_time(self):\n        stdout = ''\n        stderr = ''\n        command_result = self._low_level_execute_command(self.DEFAULT_BOOT_TIME_COMMAND, sudoable=self.DEFAULT_SUDOABLE)\n"
  }
]