[
  {
    "id" : "d951b482-42e9-4d9d-b3aa-4311d8a915c1",
    "prId" : 22855,
    "prUrl" : "https://github.com/ansible/ansible/pull/22855#pullrequestreview-28388550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13026721-4a77-4768-81e3-b0402dd3fe3f",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "I think I'd remove most of syntax compatibility changes from this pr/commit, and do those in a different commit/pr.\r\n\r\n(At least in cases where there are also non-syntax related changes that may eventually need to be back-ported/cherry-picked. Granted, in this case, the non-syntax changes are also not  2.4 compatible so it is unlikely to ever get backported to a works-with-py24 branch).\r\n\r\nBut in the past I've found it useful to have syntax related changes isolated.",
        "createdAt" : "2017-03-22T13:55:10Z",
        "updatedAt" : "2017-03-23T19:52:28Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2562e38b75e4aa46d78810b9b0735712292412b9",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +45,49 @@                dest_stat = self._execute_remote_stat(dest, all_vars=all_vars, follow=False, tmp=tmp)\n\n        except AnsibleError as e:\n            return dict(failed=True, msg=to_native(e))\n"
  },
  {
    "id" : "bf8b037f-0375-418d-817c-8abfa1daa55e",
    "prId" : 41798,
    "prUrl" : "https://github.com/ansible/ansible/pull/41798#pullrequestreview-211335675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab151eec-4134-49a7-bb07-c8b5c8e7983a",
        "parentId" : null,
        "authorId" : "5c95ce24-8a36-4f10-b46c-b30203fba415",
        "body" : "I assume this change makes it so that \"true\" and \"false\" strings are accepted whereas before they were not?",
        "createdAt" : "2019-03-05T22:37:47Z",
        "updatedAt" : "2019-03-05T22:38:45Z",
        "lastEditedBy" : "5c95ce24-8a36-4f10-b46c-b30203fba415",
        "tags" : [
        ]
      },
      {
        "id" : "ac4c6c50-7567-42d8-91e9-97bb81832937",
        "parentId" : "ab151eec-4134-49a7-bb07-c8b5c8e7983a",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "mostly to ensure they are boolean values since some times 'text' was passed and a \"false\" is True",
        "createdAt" : "2019-03-06T16:30:01Z",
        "updatedAt" : "2019-03-06T16:30:01Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "674e27ae6eff7d7794bcfa3c5b3d98cfc2da292b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +46,50 @@\n        # booleans\n        try:\n            follow = boolean(self._task.args.get('follow', False), strict=False)\n            trim_blocks = boolean(self._task.args.get('trim_blocks', True), strict=False)"
  },
  {
    "id" : "b5c1e7c4-266f-4d57-9ea0-98a583289035",
    "prId" : 42171,
    "prUrl" : "https://github.com/ansible/ansible/pull/42171#pullrequestreview-137277400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20b16857-f69e-4e81-82d8-c21548c771e0",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Is there a reason for the ```or``` here?",
        "createdAt" : "2018-07-12T14:51:14Z",
        "updatedAt" : "2018-07-16T06:22:23Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "0498f223-e24e-4a82-88db-de0690ad26e1",
        "parentId" : "20b16857-f69e-4e81-82d8-c21548c771e0",
        "authorId" : "d1acb4be-4191-4279-bcce-d91f60a967bf",
        "body" : "Yes, I used a construct I've seen in the code for encoding fallback:\r\n\r\n`test/units/mock/vault_helper.py`\r\n```py\r\nclass TextVaultSecret(VaultSecret):\r\n    '''A secret piece of text. ie, a password. Tracks text encoding.\r\n\r\n    The text encoding of the text may not be the default text encoding so\r\n    we keep track of the encoding so we encode it to the same bytes.'''\r\n\r\n    def __init__(self, text, encoding=None, errors=None, _bytes=None):\r\n        super(TextVaultSecret, self).__init__()\r\n        self.text = text\r\n        self.encoding = encoding or 'utf-8'\r\n        self._bytes = _bytes\r\n        self.errors = errors or 'strict'\r\n```\r\n\r\n`lib/ansible/parsing/vault/__init__.py`\r\n```py\r\n# TODO: mv these classes to a seperate file so we don't pollute vault with 'subprocess' etc\r\nclass FileVaultSecret(VaultSecret):\r\n    def __init__(self, filename=None, encoding=None, loader=None):\r\n        super(FileVaultSecret, self).__init__()\r\n        self.filename = filename\r\n        self.loader = loader\r\n\r\n        self.encoding = encoding or 'utf8'\r\n\r\n        # We could load from file here, but that is eventually a pain to test\r\n        self._bytes = None\r\n        self._text = None\r\n```",
        "createdAt" : "2018-07-15T20:29:39Z",
        "updatedAt" : "2018-07-16T06:22:23Z",
        "lastEditedBy" : "d1acb4be-4191-4279-bcce-d91f60a967bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "71d43eea8bef0d73ed7b822d873d3cd41831fe85",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +59,63 @@        trim_blocks = boolean(self._task.args.get('trim_blocks', True), strict=False)\n        lstrip_blocks = boolean(self._task.args.get('lstrip_blocks', False), strict=False)\n        output_encoding = self._task.args.get('output_encoding', 'utf-8') or 'utf-8'\n\n        # Option `lstrip_blocks' was added in Jinja2 version 2.7."
  }
]