[
  {
    "id" : "b827838b-1adb-4b74-b6d8-d2fe4fd00294",
    "prId" : 14490,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59391467-9b4e-42e8-a230-7100aba988ca",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Since we aren't sending the errormsg to an exception, we want to use to_unicode rather than to_bytes.  to_bytes won't cause any problems with the code here in python2 but it will fail in python3 (because the string literals will be of the text type and so it won't match with errormsg as bytes then.)\n",
        "createdAt" : "2016-02-17T08:24:20Z",
        "updatedAt" : "2016-02-18T09:41:57Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b5fffa751c0a6ec364e66cc648f456d28b3a8a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +336,340 @@                x = \"2\" # cannot read file\n            elif errormsg.endswith('MODULE FAILURE'):\n                x = \"4\" # python not found or module uncaught exception\n        finally:\n            return x"
  },
  {
    "id" : "6341b94b-d02c-4f66-a444-4eb4fbde98d4",
    "prId" : 20192,
    "prUrl" : "https://github.com/ansible/ansible/pull/20192#pullrequestreview-16496196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78a4167b-7296-47a5-8dd1-6e71459d8846",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "I heard you didn't like the ``` list(data.keys())``` idiom.  Since you're really filtering a list here, you can do it with a list comprehension instead:\r\n``` python\r\nfor key in  [k for k in data.keys() if key.startswith('_ansible_') or key in C.INTERNAL_RESULT_KEYS ]:\r\n    display.warning([...])\r\n    del data[key]\r\n```\r\nWith such a long conditional, I like to break the filtering over one or more statements like these examples:\r\n\r\n``` python\r\nbadkeys = [k for k in data.keys() if key.startswith('_ansible_') or key in C.INTERNAL_RESULT_KEYS ]\r\nfor key in badkeys:\r\n    [...]\r\n\r\n# Generator expression so we don't create an extra list (sometimes slower but always uses less memory)\r\nbadkeys = (k for k in data.keys() if key.startswith('_ansible_'))\r\n# list comprehension so that we don't delete keys from the dict while a generator is still looping through them\r\nbadkeys = [k for k in badkeys if key in C.INTERNAL_RESULT_KEYS]\r\nfor key in badkeys:\r\n    [...]\r\n```\r\n\r\nChoose whichever idiom is the most readable to you.",
        "createdAt" : "2017-01-12T21:40:24Z",
        "updatedAt" : "2017-01-12T21:40:24Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "ac635627-26ce-4268-bcf0-4d8c5747d20f",
        "parentId" : "78a4167b-7296-47a5-8dd1-6e71459d8846",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "at this point `list(dict.keys())` seems the least evil",
        "createdAt" : "2017-01-13T01:48:23Z",
        "updatedAt" : "2017-01-13T01:48:44Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a03061b431a943eb366ba3fc25c8595bd2a4663",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +683,687 @@    def _remove_internal_keys(self, data):\n        for key in list(data.keys()):\n            if key.startswith('_ansible_') or key in C.INTERNAL_RESULT_KEYS:\n                display.warning(\"Removed unexpected internal key in module return: %s = %s\" % (key, data[key]))\n                del data[key]"
  }
]