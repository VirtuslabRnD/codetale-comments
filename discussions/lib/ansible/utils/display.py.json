[
  {
    "id" : "aa021314-4629-4c27-b919-b412c0e3d066",
    "prId" : 13772,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d34bf42-c23b-4b73-a62c-97de15eb6fff",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "convention for the name of the first argument of a classmethod is \"cls\".  If the parameter isn't used at all, make it a @staticmethod instead and remove the parameter altogether.\n",
        "createdAt" : "2016-01-08T17:04:39Z",
        "updatedAt" : "2016-01-08T17:04:49Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "970260f2-7dd6-438c-9566-a5f72ed5beaf",
        "parentId" : "6d34bf42-c23b-4b73-a62c-97de15eb6fff",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "its used to reference the staticmethod 'prompt' in same class\n",
        "createdAt" : "2016-01-08T17:06:23Z",
        "updatedAt" : "2016-01-08T17:06:23Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "531123c8-26f3-4340-80e4-46b3340afd75",
        "parentId" : "6d34bf42-c23b-4b73-a62c-97de15eb6fff",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Ah, I see it now.  yeah, so just change self to be cls to match convention when using `@classmethod` and it should be fine.\n",
        "createdAt" : "2016-01-08T17:20:01Z",
        "updatedAt" : "2016-01-08T17:20:01Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cc5ac06e70630f61423aa1576234c54faabf8cd",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +281,285 @@\n    @classmethod\n    def do_var_prompt(self, varname, private=True, prompt=None, encrypt=None, confirm=False, salt_size=None, salt=None, default=None):\n\n        result = None"
  },
  {
    "id" : "f08d7e51-6e6b-4203-8f31-0d93f4c90f6e",
    "prId" : 52948,
    "prUrl" : "https://github.com/ansible/ansible/pull/52948#pullrequestreview-207611730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d2701c8-3468-4a08-b9e5-ff81fecd8f06",
        "parentId" : null,
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "Would it be useful to allow `verbose` to accept `stderr` in the function signature too?  We would also have to update `v`, `vv`, etc to support it also.",
        "createdAt" : "2019-02-25T19:53:18Z",
        "updatedAt" : "2019-02-25T19:53:18Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "b69b0fb9-e21c-4bf6-be46-068ba5b25ed7",
        "parentId" : "3d2701c8-3468-4a08-b9e5-ff81fecd8f06",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "yep, but thought that would be huge undertaking while this was a 'blanket' requriement",
        "createdAt" : "2019-02-25T20:20:38Z",
        "updatedAt" : "2019-02-25T20:20:38Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a51ca6297fec0be16d6fdcb6e57b398db79122a5",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +201,205 @@                self.display(\"%6d %0.5f [%s]: %s\" % (os.getpid(), time.time(), host, msg), color=C.COLOR_DEBUG)\n\n    def verbose(self, msg, host=None, caplevel=2):\n\n        to_stderr = C.VERBOSE_TO_STDERR"
  },
  {
    "id" : "34bc4f70-58c7-44da-a391-0d903793bfc2",
    "prId" : 56311,
    "prUrl" : "https://github.com/ansible/ansible/pull/56311#pullrequestreview-236333034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65b392bc-3548-45d5-80b7-f89dbb72ca32",
        "parentId" : null,
        "authorId" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "body" : "I don't have any experience with the logging code, but setting the level based on color seems a bit error prone. We don't have mechanism for the caller to set the log level rather than having to infer it based on color?",
        "createdAt" : "2019-05-10T21:33:09Z",
        "updatedAt" : "2019-05-24T19:32:00Z",
        "lastEditedBy" : "2f8132dc-12f8-44dc-8b97-1cf4c1616b68",
        "tags" : [
        ]
      },
      {
        "id" : "00c21935-30ed-47d9-99d5-fdffdbdbbe7a",
        "parentId" : "65b392bc-3548-45d5-80b7-f89dbb72ca32",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "its not great, but that is how our 'error levels' work, and really breaks apart if someone makes them all the same",
        "createdAt" : "2019-05-10T22:17:41Z",
        "updatedAt" : "2019-05-24T19:32:00Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e67d64cb3019ecc3ab555da735137a04642b5b8c",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +183,187 @@                # set logger level based on color (not great)\n                try:\n                    lvl = color_to_log_level[color]\n                except KeyError:\n                    # this should not happen, but JIC"
  },
  {
    "id" : "3706456b-3fa1-49f3-b88d-23e80adff9fd",
    "prId" : 56311,
    "prUrl" : "https://github.com/ansible/ansible/pull/56311#pullrequestreview-241158416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d8207a1-5849-4c1b-a006-be5deefd5167",
        "parentId" : null,
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "I wonder if we should `raise AnsibleAssertionError` here then?",
        "createdAt" : "2019-05-13T07:27:19Z",
        "updatedAt" : "2019-05-24T19:32:00Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      },
      {
        "id" : "0e81f55b-b8c3-4814-9562-e1429c551fb7",
        "parentId" : "4d8207a1-5849-4c1b-a006-be5deefd5167",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "Until now log/callback errors have been 'non fatal' , that would be a change in that behaviour",
        "createdAt" : "2019-05-22T15:01:17Z",
        "updatedAt" : "2019-05-24T19:32:00Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "792b52c5-9bd3-438b-93b4-e5fc6755e7af",
        "parentId" : "4d8207a1-5849-4c1b-a006-be5deefd5167",
        "authorId" : "94ae5814-8889-4328-9b58-745772997928",
        "body" : "Right, though passing a non-existing color into `display()` would be a programming error, no?",
        "createdAt" : "2019-05-23T12:07:02Z",
        "updatedAt" : "2019-05-24T19:32:00Z",
        "lastEditedBy" : "94ae5814-8889-4328-9b58-745772997928",
        "tags" : [
        ]
      }
    ],
    "commit" : "e67d64cb3019ecc3ab555da735137a04642b5b8c",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +185,189 @@                    lvl = color_to_log_level[color]\n                except KeyError:\n                    # this should not happen, but JIC\n                    raise AnsibleAssertionError('Invalid color supplied to display: %s' % color)\n            # actually log"
  },
  {
    "id" : "93e5660b-98d6-4ed5-8326-d8ea59af3549",
    "prId" : 66214,
    "prUrl" : "https://github.com/ansible/ansible/pull/66214#pullrequestreview-345471645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88b20f68-310f-4651-baf2-1e095abfb2de",
        "parentId" : null,
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "The algorithm in here looks good.  There are some extra corner cases where wcwidth is returning -1 that we might want to handle.  Maybe adapting this test: https://github.com/fedora-infra/kitchen/blob/develop/kitchen3/tests/test_text_display.py#L48 to the unittests for this function and then making it pass.\r\n\r\nOne thing I note is that the unicode tables are updated when new versions of the unicode standard are released.  Python is generally updated quickly [but not backported] but the various libc implementations are much slower.  So if we rely on libc there will be platforms where wcwidth returns the wrong value.  In previous code I've bundled tables mapping codepoints to width to do better than libc but I'm not sure if we want to do that (For one thing, pure python is slower than wcwidth).  Maybe as a fallback in case libc is extremely broken (like, it doesn't handle hangul, kanji, or devanagari?  Although I'm not sure how we'd check for that.)  I do have code to generate those tables if we want to adopt that strategy.",
        "createdAt" : "2020-01-20T18:12:23Z",
        "updatedAt" : "2020-06-22T19:48:11Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf05d7fbe7a0f1e8eea6e14f12f12de956a537d2",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +77,81 @@\n\ndef get_text_width(text):\n    \"\"\"Function that utilizes ``wcswidth`` or ``wcwidth`` to determine the\n    number of columns used to display a text string."
  },
  {
    "id" : "95c33ff1-e854-4eae-b351-5abbca91a6f4",
    "prId" : 68177,
    "prUrl" : "https://github.com/ansible/ansible/pull/68177#pullrequestreview-418699333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2ba9fe0-00b6-46d2-a78c-2886b4105d4c",
        "parentId" : null,
        "authorId" : "7c547162-2334-4e33-a627-e146840da9ec",
        "body" : "Should we state that it will be removed in a major release after x like?\r\n\r\n```suggestion\r\n                new_msg = \"[DEPRECATION WARNING]: %s. This feature will be removed in a major release after %s.\" % (msg, date)\r\n```",
        "createdAt" : "2020-05-26T19:51:31Z",
        "updatedAt" : "2020-05-26T22:29:03Z",
        "lastEditedBy" : "7c547162-2334-4e33-a627-e146840da9ec",
        "tags" : [
        ]
      },
      {
        "id" : "155f704c-9cf8-4f59-baff-631b768a1ed2",
        "parentId" : "e2ba9fe0-00b6-46d2-a78c-2886b4105d4c",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "That's true for collections. But is 2.11.0 a minor or a major release of Ansible-base?",
        "createdAt" : "2020-05-26T21:15:41Z",
        "updatedAt" : "2020-05-26T22:29:03Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "f097a4ab-aba7-4945-8a59-e4f4e25fdd55",
        "parentId" : "e2ba9fe0-00b6-46d2-a78c-2886b4105d4c",
        "authorId" : "7c547162-2334-4e33-a627-e146840da9ec",
        "body" : "Technically from a semver perspective it's a minor release but Ansible doesn't strictly follow semver as we consider the minor part of 2.x being a \"major\" release. Others might disagree with me here though. I guess it's a question as to whether we see this particular deprecation being done within Ansible itself or only for collections.\r\n\r\nMaybe for now we just leave it as is and revisit the message in the future when we don't have a deadline coming up.",
        "createdAt" : "2020-05-26T21:32:54Z",
        "updatedAt" : "2020-05-26T22:29:03Z",
        "lastEditedBy" : "7c547162-2334-4e33-a627-e146840da9ec",
        "tags" : [
        ]
      },
      {
        "id" : "2fb9cc14-41ff-48ef-9136-6b6957755dc0",
        "parentId" : "e2ba9fe0-00b6-46d2-a78c-2886b4105d4c",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "With #69680 (adjusted for dates) we would be able to distinguish between ansible-base versions and collection versions. But yeah, let's revisit this somewhen after the freeze :)",
        "createdAt" : "2020-05-26T21:41:04Z",
        "updatedAt" : "2020-05-26T22:29:03Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f19ea507906a4f5985dfb13d2fda90452e2f49b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +259,263 @@        if not removed:\n            if date:\n                new_msg = \"[DEPRECATION WARNING]: %s. This feature will be removed in a release after %s.\" % (msg, date)\n            elif version:\n                new_msg = \"[DEPRECATION WARNING]: %s. This feature will be removed in version %s.\" % (msg, version)"
  }
]