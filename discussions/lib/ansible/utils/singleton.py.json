[
  {
    "id" : "6dd72870-2b2e-4157-8de1-e8b96ba14aff",
    "prId" : 48935,
    "prUrl" : "https://github.com/ansible/ansible/pull/48935#pullrequestreview-176926188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "858f7667-4f6a-435e-900b-2c179d04a134",
        "parentId" : null,
        "authorId" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "body" : "I don't recall if Python's metaclass instantiation is thread-safe and/or atomic, but if not, potentially need a double-check lock here.",
        "createdAt" : "2018-11-20T16:51:13Z",
        "updatedAt" : "2018-11-20T21:55:31Z",
        "lastEditedBy" : "311820dd-fcb9-46df-a201-9c0e7d6fac58",
        "tags" : [
        ]
      },
      {
        "id" : "7e99d2de-6529-46e7-8640-cc5703b57a2a",
        "parentId" : "858f7667-4f6a-435e-900b-2c179d04a134",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "We should be ok here, since this is effectively run on import of a module that uses it as a metaclass, and imports are thread safe.",
        "createdAt" : "2018-11-20T19:01:34Z",
        "updatedAt" : "2018-11-20T21:55:31Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "788d868013a3f632f651fe293f0d9d09e067ddc2",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@    def __init__(cls, name, bases, dct):\n        super(Singleton, cls).__init__(name, bases, dct)\n        cls.__instance = None\n        cls.__rlock = RLock()\n"
  }
]