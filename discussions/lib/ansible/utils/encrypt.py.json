[
  {
    "id" : "f538f2c4-9e5f-4eb1-a5ec-a15911cd8618",
    "prId" : 30160,
    "prUrl" : "https://github.com/ansible/ansible/pull/30160#pullrequestreview-63206257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "924d800f-2701-4ec4-8a14-2236e934d4e5",
        "parentId" : null,
        "authorId" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "body" : "FYI According to the big rewrite the new format for copyright statements is:\r\n```python\r\n# Copyright: (c) 2012-2015, Michael DeHaan <michael.dehaan@gmail.com>\r\n# Copyright: (c) 2017, Ansible Project\r\n```",
        "createdAt" : "2017-09-16T15:50:05Z",
        "updatedAt" : "2017-09-16T18:10:16Z",
        "lastEditedBy" : "7268595c-1eb4-4b5f-9277-90f183130a4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd20fcd936c2a31352e4461557f9f1c2c3d9651a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +0,4 @@# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n# (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\nfrom __future__ import (absolute_import, division, print_function)"
  },
  {
    "id" : "b64b100e-4a13-4e98-ab5f-4cfca36bc125",
    "prId" : 71120,
    "prUrl" : "https://github.com/ansible/ansible/pull/71120#pullrequestreview-462777678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7d63c5c-1653-4b41-840a-60789ed6e158",
        "parentId" : null,
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "The algorithms above, all have this specific salt restriction.  I didn't validate every algo, but I don't see an issue with this.",
        "createdAt" : "2020-08-06T18:34:08Z",
        "updatedAt" : "2020-08-26T17:09:13Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ae68f80c2b0643e71823c2c51a01975800e69f0",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +97,101 @@        salt_size = salt_size or self.algo_data.salt_size\n        ret = salt or random_salt(salt_size)\n        if re.search(r'[^./0-9A-Za-z]', ret):\n            raise AnsibleError(\"invalid characters in salt\")\n        if self.algo_data.salt_exact and len(ret) != self.algo_data.salt_size:"
  },
  {
    "id" : "f0a89b04-370a-4555-993a-8f21120165c7",
    "prId" : 71120,
    "prUrl" : "https://github.com/ansible/ansible/pull/71120#pullrequestreview-475692480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b349903f-6e69-4754-ad33-4c991adf0463",
        "parentId" : null,
        "authorId" : "af2d6e2a-7e69-40a5-acbd-ee141feb19f6",
        "body" : "Should we be worried that the current [passlib docs](https://passlib.readthedocs.io/en/stable/lib/passlib.utils.binary.html) for the module with this method has a large warning at the top?\r\n\r\n```\r\nWarning: This module is primarily used as an internal support module. Its interface has not been finalized yet, and may be changed somewhat between major releases of Passlib, as the internal code is cleaned up and simplified.\r\n```",
        "createdAt" : "2020-08-26T15:30:31Z",
        "updatedAt" : "2020-08-26T17:09:13Z",
        "lastEditedBy" : "af2d6e2a-7e69-40a5-acbd-ee141feb19f6",
        "tags" : [
        ]
      },
      {
        "id" : "786b224f-ee58-4057-ab4d-a2b58516d1d2",
        "parentId" : "b349903f-6e69-4754-ad33-4c991adf0463",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "I've gone over this all again, and the original warning:\r\n\r\n> encountered a bcrypt salt with incorrectly set padding bits; you may want to use bcrypt.normhash() to fix this; this will be an error under Passlib 2.0\r\n\r\n...indicates that for now passlib will allow itself to generate an invalid hash, when given in salt with incorrect padding bits, but in the future it will not.\r\n\r\nSo I think overall the implementation is correct here, because we want to give the user a valid hash, whether they gave us a salt, or we generated the salt.\r\n\r\nHowever, the only method available within passlib to fix the salt is this `repair_unused`.  I could re-implement it, although with likely being less exact, or rely on the potential that this `bcrypt64` module could change.\r\n\r\nThe `bcrypt64` module within `passlib` appears to have been stable enough since at least 1.6.5 when it existed in a different location.\r\n\r\nSo to get back to your question, we should probably be cautious, and adding a test will help us identify issues with any change that is made.",
        "createdAt" : "2020-08-26T16:07:38Z",
        "updatedAt" : "2020-08-26T17:09:13Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "15e76d08-eba7-4f63-9b32-3fa8b5a4e8e0",
        "parentId" : "b349903f-6e69-4754-ad33-4c991adf0463",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "Ok, I just pushed a test which should cover it.  Let me know if it addresses your concern.",
        "createdAt" : "2020-08-26T17:10:01Z",
        "updatedAt" : "2020-08-26T17:10:01Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ae68f80c2b0643e71823c2c51a01975800e69f0",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +166,170 @@        # Ensure the salt has the correct padding\n        if self.algorithm == 'bcrypt':\n            ret = bcrypt64.repair_unused(ret)\n\n        return ret"
  }
]