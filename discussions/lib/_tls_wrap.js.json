[
  {
    "id" : "35954c2b-9a2d-4eb4-98a7-1251a1f74748",
    "prId" : 11005,
    "prUrl" : "https://github.com/nodejs/node/pull/11005#pullrequestreview-18922343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e41ea431-611f-46a7-97f3-3e1e06179d90",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "semver-major?",
        "createdAt" : "2017-01-26T00:06:04Z",
        "updatedAt" : "2017-02-20T15:40:20Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "1224206e-db43-4da9-83e7-6c66569f92c1",
        "parentId" : "e41ea431-611f-46a7-97f3-3e1e06179d90",
        "authorId" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "body" : "Do we always treat new properties in options objects as semver-major? If someone was passing unsupported option values to an API, and then the API started supporting those option values, it would feel major to them, but I don't know if that is our standard. What our API is is under-defined ATM.",
        "createdAt" : "2017-01-27T20:15:39Z",
        "updatedAt" : "2017-02-20T15:40:20Z",
        "lastEditedBy" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5679917311c0299dd0c5e3d36b3ef594d9de6d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +345,349 @@  var context = options.secureContext ||\n                options.credentials ||\n                tls.createSecureContext(options);\n  res = tls_wrap.wrap(handle._externalStream,\n                      context.context,"
  },
  {
    "id" : "d9ffc487-2a55-4ea3-a6f6-062d5e4bf0e0",
    "prId" : 23644,
    "prUrl" : "https://github.com/nodejs/node/pull/23644#pullrequestreview-164952507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f2c8fea-cbe2-43e3-8ec0-64aa2764e6c6",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Can't you call `this.setOptions(options)`?",
        "createdAt" : "2018-10-15T11:16:21Z",
        "updatedAt" : "2018-10-21T13:33:23Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "c1139383-9583-439a-80ce-087d2e44a47c",
        "parentId" : "3f2c8fea-cbe2-43e3-8ec0-64aa2764e6c6",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "I did that originally, but `setOptions()` doesn't unset values that might have been passed on the first call, but omitted on subsequent calls. I also didn't want to change the behavior of `setOptions()`.\r\n\r\nEDIT: I guess one option would be to call `setOptions()` to set the options, and leave the `undefined` assignments in this function to clear old values.\r\nEDIT2: Actually, `setOptions()` sets values unrelated to the secure context (`requestCert`, `rejectUnauthorized`, etc.), so I think I'd prefer to not call it from `setSecureContext()`.",
        "createdAt" : "2018-10-15T12:25:30Z",
        "updatedAt" : "2018-10-21T13:33:23Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "5afc7ce4-63de-4a2c-b69d-f52fc20bad9b",
        "parentId" : "3f2c8fea-cbe2-43e3-8ec0-64aa2764e6c6",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "@bnoordhuis long term, I'd prefer to deprecate/remove `setOptions()` because it's undocumented and only used in the tls server constructor. The few fields that don't overlap with `setSecureContext()` could be inlined in the constructor.",
        "createdAt" : "2018-10-16T01:14:30Z",
        "updatedAt" : "2018-10-21T13:33:23Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      }
    ],
    "commit" : "96a986d675fbc3ccc98832232b73b84ba5a4818d",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +946,950 @@                                  .digest('hex')\n                                  .slice(0, 32);\n  }\n\n  this._sharedCreds = tls.createSecureContext({"
  },
  {
    "id" : "03694816-f046-4fb9-acf6-fa7063aa0720",
    "prId" : 23644,
    "prUrl" : "https://github.com/nodejs/node/pull/23644#pullrequestreview-196735499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f470e33f-da42-47e6-94d3-dccf1af1b3fd",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "For my understanding: that means there is no way to disable ticket keys using `.setSecureContext()` if they've been enabled before?",
        "createdAt" : "2018-10-15T11:18:32Z",
        "updatedAt" : "2018-10-21T13:33:23Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "c33bf69f-11cb-4e94-a16b-7e6151f42e36",
        "parentId" : "f470e33f-da42-47e6-94d3-dccf1af1b3fd",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "I was trying to focus on maintaining any keys that were already set, and figured the `{set,get}TicketKeys()` APIs could be used for any additional configuration.",
        "createdAt" : "2018-10-15T12:27:25Z",
        "updatedAt" : "2018-10-21T13:33:23Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "c81adeee-455f-48b8-acb5-9af09570cdf0",
        "parentId" : "f470e33f-da42-47e6-94d3-dccf1af1b3fd",
        "authorId" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "body" : "@cjihrig  I'm somehow not understanding this code.  get returns a buffer with the `wrap->ticket_key_` data, and set copies its buffer argument into the `wrap->ticket_key_` data... making this a no-op AFAICT. What am I missing? If the previous value of _sharedCreds (if any) had been saved, and that was used for the get, then I would understand @bnoordhuis's comment.",
        "createdAt" : "2019-01-25T19:36:57Z",
        "updatedAt" : "2019-01-25T19:36:57Z",
        "lastEditedBy" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "tags" : [
        ]
      },
      {
        "id" : "16ae48a8-7b7f-4200-8fe1-c29874fbb986",
        "parentId" : "f470e33f-da42-47e6-94d3-dccf1af1b3fd",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "@sam-github I think it is just a mistake on my part. I just ran the test suite locally with that line commented out and everything passed.",
        "createdAt" : "2019-01-25T21:45:21Z",
        "updatedAt" : "2019-01-25T21:45:21Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "ea4c99fa-179d-4394-895f-5792d171fe4e",
        "parentId" : "f470e33f-da42-47e6-94d3-dccf1af1b3fd",
        "authorId" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "body" : "OK, thanks for looking into it. I'm doing some session/ticket work, I'll remove the code in that PR, unless you want to.",
        "createdAt" : "2019-01-25T22:13:56Z",
        "updatedAt" : "2019-01-25T22:13:56Z",
        "lastEditedBy" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "tags" : [
        ]
      },
      {
        "id" : "ea685a89-b7b1-4ae4-90a4-4f22598598d8",
        "parentId" : "f470e33f-da42-47e6-94d3-dccf1af1b3fd",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "If you want to include it in #25713, I think that would be fine.",
        "createdAt" : "2019-01-25T22:21:53Z",
        "updatedAt" : "2019-01-25T22:21:53Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      }
    ],
    "commit" : "96a986d675fbc3ccc98832232b73b84ba5a4818d",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +972,976 @@    this.setTicketKeys(this.ticketKeys);\n  } else {\n    this.setTicketKeys(this.getTicketKeys());\n  }\n};"
  },
  {
    "id" : "48a3a17e-1eb0-4392-9a2c-e97d341cd274",
    "prId" : 23644,
    "prUrl" : "https://github.com/nodejs/node/pull/23644#pullrequestreview-165422110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3922b743-da9e-44cd-90c4-d75627f0f25a",
        "parentId" : null,
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "It could get a bit messy with so many options, but the following pattern may save a bit of boilerplate code in this method...\r\n\r\n```js\r\nServer.prototype.setSecureContext = function({\r\n  pfx = undefined,\r\n  key = undefined,\r\n  passphrase = undefined,\r\n  cert = undefined,\r\n  clientCertEngine = undefined,\r\n  ca = undefined,\r\n  secureProtocol = undefined,\r\n  crl = undefined,\r\n  ciphers = undefined,\r\n  ecdhCurve = undefined,\r\n  dhparam = undefined,\r\n  honorCipherOrder = false,\r\n  secureOptions,\r\n  sessionIdContext\r\n} = {}) {\r\n  this.pfx = pfx;\r\n  this.key = key;\r\n  // ...\r\n}\r\n```\r\n\r\nNot sure it's actually that much better tho ;-)",
        "createdAt" : "2018-10-16T21:30:16Z",
        "updatedAt" : "2018-10-21T13:33:23Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "20b298c5-32e5-48b3-9393-578cd50c2d5d",
        "parentId" : "3922b743-da9e-44cd-90c4-d75627f0f25a",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "@jasnell I like that pattern, because I think it would be helpful for code coverage purposes. But I'm a little worried that it's just slightly different enough from the existing options handling (`setOptions()`) to cause problems. For example, right now falsy values get filtered out in most cases, but that would no longer be the case. The current structure also allows us to make the validation stricter, because right now it seems rather loose.\r\n\r\nI already plan to follow this up with a deprecation PR for `setOptions()`. I'd like to also revisit the argument validation here, but that will be semver-major.",
        "createdAt" : "2018-10-17T00:52:02Z",
        "updatedAt" : "2018-10-21T13:33:23Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      }
    ],
    "commit" : "96a986d675fbc3ccc98832232b73b84ba5a4818d",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +875,879 @@    this.pfx = options.pfx;\n  else\n    this.pfx = undefined;\n\n  if (options.key)"
  }
]