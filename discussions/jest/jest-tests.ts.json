[
  {
    "id" : "86d8cd34-a063-4d1a-bf52-0f44a1ffe106",
    "prId" : 13852,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13852#pullrequestreview-17806157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a73ac51a-0650-45e3-814d-063dddd7e79c",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "I'm guessing this property gets access to mockImplementation and such as well?",
        "createdAt" : "2017-01-20T04:14:08Z",
        "updatedAt" : "2017-01-26T17:46:12Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "a5caada2-77fe-4e37-be06-91078242e746",
        "parentId" : "a73ac51a-0650-45e3-814d-063dddd7e79c",
        "authorId" : "da48eab1-4a3b-4813-93ce-7d199860c35f",
        "body" : "Yes, it's wrong, but there is no way to prevent it until TS will support some kind of conditional mapping. At least better than nothing i think",
        "createdAt" : "2017-01-21T12:32:48Z",
        "updatedAt" : "2017-01-26T17:46:12Z",
        "lastEditedBy" : "da48eab1-4a3b-4813-93ce-7d199860c35f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad8a85892d92943d6262bc59ec667fc16bd5d8d",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +440,444 @@    it('Works', function () {\n        const mock: jest.Mocked<TestApi> = new TestApi() as any;\n        mock.testProp;\n        mock.testMethod.mockImplementation(() => 'test');\n        mock.testMethod(5).toUpperCase();"
  },
  {
    "id" : "6c6b23e9-81d1-4f85-9e79-c79dcfd388e7",
    "prId" : 13852,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13852#pullrequestreview-17806237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27e9e9ae-787d-4e90-a506-fc00940e0e95",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "The more I think about it it's a little odd for the return type here only to work for constructors. I'd wager there may be more tests that call mock instances as functions than use them as constructors. Should we augment Mock<T>'s call signature to return T to match the construct signature?",
        "createdAt" : "2017-01-20T04:20:08Z",
        "updatedAt" : "2017-01-26T17:46:12Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "718037fc-0fe9-4539-99bb-90040a472e2f",
        "parentId" : "27e9e9ae-787d-4e90-a506-fc00940e0e95",
        "authorId" : "da48eab1-4a3b-4813-93ce-7d199860c35f",
        "body" : "I think no. Just calling mock function, rather than instantiating it with new, will return any type. I think it's fine since you usually don't need to call mock functions in your tests to get the value - they're are being passed into SUT in most common case. Constructor case is different since you can use Partial<MyAPI> type which will be inferred into full MyAPI type and you can pass it under SUT without compiler errors and casting it to any. ",
        "createdAt" : "2017-01-21T12:38:52Z",
        "updatedAt" : "2017-01-26T17:46:12Z",
        "lastEditedBy" : "da48eab1-4a3b-4813-93ce-7d199860c35f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad8a85892d92943d6262bc59ec667fc16bd5d8d",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +464,468 @@        testMock.caller;\n\n        const ins = new testMock();\n        ins.a;\n        ins.test();"
  }
]