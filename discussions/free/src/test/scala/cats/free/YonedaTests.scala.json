[
  {
    "id" : "3e00edda-86e2-42ba-bb30-c081939a454e",
    "prId" : 525,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf613a26-9532-49d5-ac5f-1e8c819c10ec",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "So far I think we have been putting Arbitrary and ArbitraryK instances in the `Arbitrary.scala` and `ArbitraryK.scala` files. Do we want these there as well?\n",
        "createdAt" : "2015-09-11T11:30:35Z",
        "updatedAt" : "2015-09-11T11:30:35Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "70aaa573-5ff3-4643-b220-3a2242953b64",
        "parentId" : "bf613a26-9532-49d5-ac5f-1e8c819c10ec",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "I put it in the test to be the same as that of `FreeTests` - I think the reason we put them here is because `tests` does not depend on `free` at the moment, which leads us to doing strange things like placing `Arbitrary` instances inside the test. Perhaps we want `tests` to `dependOn(free)` ?\n",
        "createdAt" : "2015-09-11T17:20:09Z",
        "updatedAt" : "2015-09-11T17:20:09Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      },
      {
        "id" : "1ad97cdc-9005-43b0-a937-c4839c3f8927",
        "parentId" : "bf613a26-9532-49d5-ac5f-1e8c819c10ec",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Ah I see. I think the problem with `tests` depending on `free` is that `free` depends on `tests` for `CatsSuite` :\\\n\nI forgot that `Free` had its own module. I think it makes sense for modules to contain their own arbitrary instances. At some point we may want these other modules to publish their own generators for others to consume instead of just having them within the test classes. I think that definitely should be a separate PR if we choose to do that though.\n",
        "createdAt" : "2015-09-12T17:26:32Z",
        "updatedAt" : "2015-09-12T17:26:32Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc1811fee9aaf04ab7038376fef8e48b417e25d6",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@    }\n\n  implicit def yonedaArbitrary[F[_] : Functor : ArbitraryK, A : Arbitrary]: Arbitrary[Yoneda[F, A]] = yonedaArbitraryK[F].synthesize[A]\n\n  implicit def yonedaEq[F[_]: Functor, A](implicit FA: Eq[F[A]]): Eq[Yoneda[F, A]] ="
  }
]